{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":1,"darken":1,"wave_a":0.001,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_r":1,"ob_g":1,"ob_b":1,"ib_size":0,"ib_a":0.5,"mv_x":64,"mv_y":48,"mv_l":4.95,"mv_r":0,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"textured":1,"rad":2.66718,"tex_zoom":0.45112,"g":1,"a":0.15,"g2":0,"a2":0.05},"init_eqs_str":"a.q1=0;","frame_eqs_str":"a.r=.1+.5*Math.sin(a.q1);a.g=.1+.5*Math.sin(.9878*a.q1);a.b=.1+.5*Math.sin(.897*a.q1);","init_eqs_eel":"","frame_eqs_eel":"r = 0.1 + 0.5*sin(q1);\ng = 0.1 + 0.5*sin(q1*0.9878);\nb = 0.1 + 0.5*sin(q1*0.897);"},{"baseVals":{"sides":100,"textured":1,"rad":2.38096,"tex_zoom":0.42497,"r":0,"b":1,"a":0.4,"g2":0,"a2":0.9,"border_a":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"r = 0.1 + 0.5*sin(q1);\ng = 0.1 + 0.5*sin(q1*0.9878);\nb = 0.1 + 0.5*sin(q1*0.897);","init_eqs_eel":"","frame_eqs_eel":"r = 0.1 + 0.5*sin(q1);\ng = 0.1 + 0.5*sin(q1*0.9878);\nb = 0.1 + 0.5*sin(q1*0.897);"},{"baseVals":{"enabled":1,"sides":100,"x":1,"rad":0.10201},"init_eqs_str":"a.q1=0;","frame_eqs_str":"a.x=.5+.02*Math.sin(a.time);a.y=.5+.02*Math.cos(a.time);a.r=.1+.5*Math.sin(.01*a.q1);a.g=.1+.5*Math.sin(.09878*a.q1);a.b=.1+.5*Math.sin(.0897*a.q1);a.r2=.1+.5*Math.sin(.035*a.q1);a.g2=.1+.5*Math.sin(.09878*a.q1);a.b2=.1+.5*Math.sin(.0897*a.q1);","init_eqs_eel":"","frame_eqs_eel":"x = 0.5 + 0.02*sin(time);\ny = 0.5 + 0.02*cos(time);\n\nr = 0.1 + 0.5*sin(q1*0.01);\ng = 0.1 + 0.5*sin(q1*0.09878);\nb = 0.1 + 0.5*sin(q1*0.0897);\n\nr2 = 0.1 + 0.5*sin(q1*0.035);\ng2 = 0.1 + 0.5*sin(q1*0.09878);\nb2 = 0.1 + 0.5*sin(q1*0.0897);"},{"baseVals":{"sides":100,"g":1,"b":1,"r2":1,"g2":0,"b2":1,"a2":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = 0.5 + 0.02*sin(time*0.5 + 1.68);\ny = 0.5 + 0.02*cos(time*0.5 + 1.68);\n\n\nr = 0.1 + 0.5*sin(q1*0.0144);\ng = 0.1 + 0.5*sin(q1*0.05878);\nb = 0.1 + 0.5*sin(q1*0.0797);\n\nr2 = 0.1 + 0.5*sin(q1*0.065);\ng2 = 0.1 + 0.5*sin(q1*0.07878);\nb2 = 0.1 + 0.5*sin(q1*0.0897);","init_eqs_eel":"","frame_eqs_eel":"x = 0.5 + 0.02*sin(time*0.5 + 1.68);\ny = 0.5 + 0.02*cos(time*0.5 + 1.68);\n\n\nr = 0.1 + 0.5*sin(q1*0.0144);\ng = 0.1 + 0.5*sin(q1*0.05878);\nb = 0.1 + 0.5*sin(q1*0.0797);\n\nr2 = 0.1 + 0.5*sin(q1*0.065);\ng2 = 0.1 + 0.5*sin(q1*0.07878);\nb2 = 0.1 + 0.5*sin(q1*0.0897);"}],"waves":[{"baseVals":{"spectrum":1,"thick":1,"additive":1,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"u = abs(cos(q1*0.1))*3.14159;\nv = abs(cos(q1*0.015))*3.14159*2;\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw\nxs = 0.3*sin(s)*cos(ss);\nys = 0.3*sin(s)*sin(ss);\nzs = 0.3*cos(s);\n\n\n//rotate x axis\nangle = sin(q1*0.027)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(q1*0.028)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2 + 0.5;\n\n\nr = 0.5 + 0.5*sin(q1*0.2 + x + x) + xn;\ng = 0.5 + 0.5*sin(q1*0.5 + x + y) + yn;\nb = 0.5 + 0.5*sin(q1*0.36 + y + y) + zn;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"u = abs(cos(q1*0.1))*3.14159;\nv = abs(cos(q1*0.015))*3.14159*2;\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw\nxs = 0.3*sin(s)*cos(ss);\nys = 0.3*sin(s)*sin(ss);\nzs = 0.3*cos(s);\n\n\n//rotate x axis\nangle = sin(q1*0.027)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(q1*0.028)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2 + 0.5;\n\n\nr = 0.5 + 0.5*sin(q1*0.2 + x + x) + xn;\ng = 0.5 + 0.5*sin(q1*0.5 + x + y) + yn;\nb = 0.5 + 0.5*sin(q1*0.36 + y + y) + zn;"},{"baseVals":{"enabled":1,"spectrum":1,"usedots":1,"additive":1},"init_eqs_str":"a.zs=0;a.pi=0;a.samp=0;a.xx=0;a.q1=0;a.yy=0;a.zz=0;","frame_eqs_str":"","point_eqs_str":"a.zs=.00001<Math.abs(below(a.zs,100))?100:a.zs;a.zs=.00001<Math.abs(above(a.zs,10100))?100:a.zs;a.zs=.00001<Math.abs(above(a.zs,1100))?1:a.zs;a.pi=3.141592;a.samp=a.sample;a.xx=Math.cos(a.q1*a.samp+a.q1);a.yy=Math.sin(a.q1*a.samp+.9*a.q1);a.zz=.25*a.samp;a.x=a.xx*a.zz*4;a.y=a.yy*a.zz*4;a.x=.5*a.x+.5;a.y=.5*a.y+.5;a.r=1;a.g=1;a.b=1;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//init\nzs = if(below(zs,100),100,zs);\nzs = if(above(zs, 10100),100, zs);\n\nzs = if(above(zs, 1100),1, zs);\n\npi = 3.141592;\n\nsamp = sample;\n\nxx = cos(q1*samp+ q1)*1;\nyy = sin(q1*samp+ q1*0.9)*1;\n\nzz = 2.5*samp*0.1;\n\nx = xx*zz*4;\ny = yy*zz*4;\n\nx = x*0.5 + 0.5;\ny = y*0.5 + 0.5;\n\nr = 1;;//0.5 + 0.5*cos(q1*2*0.1)*sin(q1*0.1);\ng = 1;//0.5 +  0.5*sin(q1*2*0.1)*sin(q1*0.1);\nb = 1;//0.5 + 0.5*cos(q1);"},{"baseVals":{"enabled":1,"spectrum":1,"thick":1,"additive":1,"a":0.01},"init_eqs_str":"a.zs=0;a.pi=0;a.samp=0;a.xx=0;a.q1=0;a.yy=0;a.zz=0;","frame_eqs_str":"","point_eqs_str":"a.zs=.00001<Math.abs(below(a.zs,100))?100:a.zs;a.zs=.00001<Math.abs(above(a.zs,10100))?100:a.zs;a.zs=.00001<Math.abs(above(a.zs,1100))?1:a.zs;a.pi=3.141592;a.samp=a.sample;a.xx=Math.cos(a.q1*a.samp+a.q1);a.yy=Math.sin(a.q1*a.samp+.9*a.q1);a.zz=.25*a.samp;a.x=a.xx*a.zz*4;a.y=a.yy*a.zz*4;a.x=.5*a.x+.5;a.y=.5*a.y+.5;a.r=.5+.5*Math.cos(.2*a.q1)*Math.sin(.1*a.q1);a.g=.5+.5*Math.sin(.2*a.q1)*Math.sin(.1*a.q1);a.b=.5+.5*Math.cos(a.q1);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//init\nzs = if(below(zs,100),100,zs);\nzs = if(above(zs, 10100),100, zs);\n\nzs = if(above(zs, 1100),1, zs);\n\npi = 3.141592;\n\nsamp = sample;\n\nxx = cos(q1*samp+ q1)*1;\nyy = sin(q1*samp+ q1*0.9)*1;\n\nzz = 2.5*samp*0.1;\n\nx = xx*zz*4;\ny = yy*zz*4;\n\nx = x*0.5 + 0.5;\ny = y*0.5 + 0.5;\n\nr = 0.5 + 0.5*cos(q1*2*0.1)*sin(q1*0.1);\ng = 0.5 +  0.5*sin(q1*2*0.1)*sin(q1*0.1);\nb = 0.5 + 0.5*cos(q1);\n"},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"//apply zoom burst on beat\nflag = above(q3,2);\n//state zero is ready state\nstate = state + flag*equal(state,0);\n\n//upwards flight\nyval = if(equal(state,0),0, yval);\nyval = yval + 0.00004*equal(state,1);\nymax = if(equal(state,0),rand(100)*0.004,ymax);\n\n//hit apogee\nstate = if(above(yval,0.5+ymax),2,state);\n\n//reset variable\nyval = if(equal(state,0),0, yval);\nburst = if(equal(state,0),0.001,burst);\nalphax = if(equal(state,0),1,alphax);\nxdriftinc = if(equal(state,0),0,xdriftinc);\n\nburstspeed = if(equal(state,0),rand(10),burstspeed);\nxdrift = if(equal(state,0),rand(20),xdrift);\n//to get the numbers small enough have to use constants\nxdriftinc = xdriftinc\n+ equal(xdrift,0)*equal(state,1)*0.00002\n+ equal(xdrift,1)*equal(state,1)*0.000018\n+ equal(xdrift,2)*equal(state,1)*0.000016\n+ equal(xdrift,3)*equal(state,1)*0.000014\n+ equal(xdrift,4)*equal(state,1)*0.000012\n+ equal(xdrift,5)*equal(state,1)*0.00001\n+ equal(xdrift,6)*equal(state,1)*0.000008\n+ equal(xdrift,7)*equal(state,1)*0.000006\n+ equal(xdrift,8)*equal(state,1)*0.000004\n+ equal(xdrift,9)*equal(state,1)*0.000002\n+ equal(xdrift,11)*equal(state,1)*-0.000002\n+ equal(xdrift,12)*equal(state,1)*-0.000004\n+ equal(xdrift,13)*equal(state,1)*-0.000006\n+ equal(xdrift,14)*equal(state,1)*-0.000008\n+ equal(xdrift,15)*equal(state,1)*-0.00001\n+ equal(xdrift,16)*equal(state,1)*-0.000012\n+ equal(xdrift,17)*equal(state,1)*-0.000014\n+ equal(xdrift,18)*equal(state,1)*-0.000016\n+ equal(xdrift,19)*equal(state,1)*-0.000018;\n\nburst = burst\n+ equal(burstspeed,0)*equal(state,2)*0.000024\n+ equal(burstspeed,1)*equal(state,2)*0.000022\n+ equal(burstspeed,2)*equal(state,2)*0.00002\n+ equal(burstspeed,3)*equal(state,2)*0.000018\n+ equal(burstspeed,4)*equal(state,2)*0.000016\n+ equal(burstspeed,5)*equal(state,2)*0.000014\n+ equal(burstspeed,6)*equal(state,2)*0.000012\n+ equal(burstspeed,7)*equal(state,2)*0.00001\n+ equal(burstspeed,8)*equal(state,2)*0.000008\n+ equal(burstspeed,9)*equal(state,2)*0.000008;\n\nalphax = alphax - 0.00004*equal(state,2);\nstate = if(below(alphax,0),0,state);\n\n\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw torus\nxs = (burst + 0.0001*cos(s))*cos(ss);\nys = (burst + 0.0001*cos(s))*sin(ss);\nzs = 0.1*burst*sin(s);\n\n\n//rotate x axis\nangle = sin(-q1*0.035)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(-q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(-q1*0.022)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2;\n\n\nx = x + xdriftinc;\ny = y + sin(yval*1.5) - 0.18;\n\n\nr = 0.5 + 0.5*sin(q1*1.3 + x + x);\ng = 0.5 + 0.5*sin(q1*1.1 + x + y);\nb = 0.5 + 0.5*sin(q1*1.66 + y + y);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//apply zoom burst on beat\nflag = above(q3,2);\n//state zero is ready state\nstate = state + flag*equal(state,0);\n\n//upwards flight\nyval = if(equal(state,0),0, yval);\nyval = yval + 0.00004*equal(state,1);\nymax = if(equal(state,0),rand(100)*0.004,ymax);\n\n//hit apogee\nstate = if(above(yval,0.5+ymax),2,state);\n\n//reset variable\nyval = if(equal(state,0),0, yval);\nburst = if(equal(state,0),0.001,burst);\nalphax = if(equal(state,0),1,alphax);\nxdriftinc = if(equal(state,0),0,xdriftinc);\n\nburstspeed = if(equal(state,0),rand(10),burstspeed);\nxdrift = if(equal(state,0),rand(20),xdrift);\n//to get the numbers small enough have to use constants\nxdriftinc = xdriftinc\n+ equal(xdrift,0)*equal(state,1)*0.00002\n+ equal(xdrift,1)*equal(state,1)*0.000018\n+ equal(xdrift,2)*equal(state,1)*0.000016\n+ equal(xdrift,3)*equal(state,1)*0.000014\n+ equal(xdrift,4)*equal(state,1)*0.000012\n+ equal(xdrift,5)*equal(state,1)*0.00001\n+ equal(xdrift,6)*equal(state,1)*0.000008\n+ equal(xdrift,7)*equal(state,1)*0.000006\n+ equal(xdrift,8)*equal(state,1)*0.000004\n+ equal(xdrift,9)*equal(state,1)*0.000002\n+ equal(xdrift,11)*equal(state,1)*-0.000002\n+ equal(xdrift,12)*equal(state,1)*-0.000004\n+ equal(xdrift,13)*equal(state,1)*-0.000006\n+ equal(xdrift,14)*equal(state,1)*-0.000008\n+ equal(xdrift,15)*equal(state,1)*-0.00001\n+ equal(xdrift,16)*equal(state,1)*-0.000012\n+ equal(xdrift,17)*equal(state,1)*-0.000014\n+ equal(xdrift,18)*equal(state,1)*-0.000016\n+ equal(xdrift,19)*equal(state,1)*-0.000018;\n\nburst = burst\n+ equal(burstspeed,0)*equal(state,2)*0.000024\n+ equal(burstspeed,1)*equal(state,2)*0.000022\n+ equal(burstspeed,2)*equal(state,2)*0.00002\n+ equal(burstspeed,3)*equal(state,2)*0.000018\n+ equal(burstspeed,4)*equal(state,2)*0.000016\n+ equal(burstspeed,5)*equal(state,2)*0.000014\n+ equal(burstspeed,6)*equal(state,2)*0.000012\n+ equal(burstspeed,7)*equal(state,2)*0.00001\n+ equal(burstspeed,8)*equal(state,2)*0.000008\n+ equal(burstspeed,9)*equal(state,2)*0.000008;\n\nalphax = alphax - 0.00004*equal(state,2);\nstate = if(below(alphax,0),0,state);\n\n\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw torus\nxs = (burst + 0.0001*cos(s))*cos(ss);\nys = (burst + 0.0001*cos(s))*sin(ss);\nzs = 0.1*burst*sin(s);\n\n\n//rotate x axis\nangle = sin(-q1*0.035)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(-q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(-q1*0.022)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2;\n\n\nx = x + xdriftinc;\ny = y + sin(yval*1.5) - 0.18;\n\n\nr = 0.5 + 0.5*sin(q1*1.3 + x + x);\ng = 0.5 + 0.5*sin(q1*1.1 + x + y);\nb = 0.5 + 0.5*sin(q1*1.66 + y + y);"}],"init_eqs_str":"a.stop=0;a.index2=0;a.index4=0;a.accel=0;a.index=0;a.q22=0;a.q21=0;a.q29=0;a.q1=0;a.dec_med=0;a.index3=0;a.rott=0;a.is_beat=0;a.q23=0;a.k1=0;a.q24=0;a.dec_slow=0;a.q4=0;a.q26=0;a.p2=0;a.avg=0;a.movez=0;a.beat=0;a.p1=0;a.peak=0;a.q2=0;a.q27=0;a.q3=0;a.t0=0;a.q32=0;a.q28=0;a.q30=0;a.q20=0;a.stop2=0;a.index4=rand(12);a.p1=0;","frame_eqs_str":"a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.99,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.5+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,8);a.index2=mod(a.index2+a.is_beat*bnot(a.index),4);a.index3=mod(a.index3+a.is_beat*bnot(a.index)*bnot(a.index2),3);a.index4=mod(a.index4+\na.is_beat*bnot(a.index)*bnot(a.index2)*bnot(a.index3),8);a.monitor=a.index4;a.q20=a.avg;a.q21=a.beat;a.q22=a.peak;a.q23=a.index;a.q24=a.is_beat;a.q26=a.bass+a.mid+a.treb;a.k1=a.is_beat*equal(a.index,0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_med*a.p2+(1-a.dec_med)*a.p1;a.rott=div(3.14159265359*a.p2,2);a.q27=8-a.index;a.q28=a.index3;a.q29=a.index4;a.stop=equal(a.index,4);a.stop2=.9*a.stop2+.1*a.stop;a.accel=a.stop-a.stop2;a.movez+=div(1.2,a.fps);a.q30=a.movez;a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);\na.q3=-a.q2;a.q4=a.q1;a.zoom=1;a.q32=pow(.996,div(30,a.fps));","pixel_eqs_str":"","init_eqs_eel":"index4 = rand(12); p1 = 0;","frame_eqs_eel":"dec_med = pow (0.9, 30/fps);\ndec_slow = pow (0.99, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .5+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %8;\nindex2 = (index2 + is_beat*bnot(index))%4;\nindex3 = (index3 + is_beat*bnot(index)*bnot(index2))%3;\nindex4 = (index4 + is_beat*bnot(index)*bnot(index2)*bnot(index3))%8;\nmonitor = index4;\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq23 = index;\nq24 = is_beat;\nq26 = bass + mid + treb;\n\n//k1 =  is_beat*bnot(index)*bnot(index2);\n\nk1 =  is_beat*equal(index,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\nrott = p2 * 3.14159265359/2;\n\nq27 = 8-index;\nq28 = index3;\nq29 = index4;\n\nstop = equal (index,4);\nstop2 = .9 * stop2 + .1 * stop;\naccel = stop - stop2;\n\n//movez = movez + .01*(2+ q21)*30/fps;\nmovez = movez + .01*4*30/fps;\nq30 = movez;\n\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\nzoom = 1.0;\nq32 = pow(0.996, 30/fps); //fade","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 ret_1;\n  ret_1 = texture (sampler_fc_main, uv).xyz;\n  vec2 tmpvar_2;\n  tmpvar_2 = (normalize((uv - uv_orig)) * texsize.zw);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 0.0;\n  tmpvar_3.xyz = ret_1;\n  vec4 tmpvar_4;\n  tmpvar_4.w = 0.0;\n  tmpvar_4.xyz = max (tmpvar_3, (texture (sampler_main, (uv + tmpvar_2)) * 0.97)).xyz;\n  vec4 tmpvar_5;\n  tmpvar_5.w = 0.0;\n  tmpvar_5.xyz = max (tmpvar_4, (texture (sampler_main, (uv - tmpvar_2)) * 0.97)).xyz;\n  vec4 tmpvar_6;\n  tmpvar_6.w = 0.0;\n  tmpvar_6.xyz = max (tmpvar_5, (texture (sampler_main, (uv + \n    (tmpvar_2 * 2.0)\n  )) * 0.9)).xyz;\n  ret_1 = ((max (tmpvar_6, \n    (texture (sampler_main, (uv - (tmpvar_2 * 2.0))) * 0.9)\n  ).xyz - 0.005) * 0.98);\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ret_1;\n  ret = tmpvar_7.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2.x = (1.0 - uv.x);\n  tmpvar_2.y = uv.y;\n  vec3 tmpvar_3;\n  tmpvar_3 = vec3((texture (sampler_main, uv).x + texture (sampler_main, tmpvar_2).x));\n  vec2 tmpvar_4;\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_blur1, uv);\n  tmpvar_4 = (((uv - 0.5) * (1.0 - \n    ((tmpvar_5.xyz * scale1) + bias1)\n  .zzz).xy) + 0.5);\n  vec3 tmpvar_6;\n  tmpvar_6 = (tmpvar_3 + clamp ((\n    pow (texture (sampler_main, tmpvar_4).zzz, vec3(0.5, 0.5, 0.5))\n   * \n    (1.0 - (tmpvar_3.x * 2.0))\n  ), 0.0, 1.0));\n  vec3 tmpvar_7;\n  tmpvar_7 = (tmpvar_6 + clamp ((\n    pow (((texture (sampler_blur1, tmpvar_4).xyz * scale1) + bias1).zzz, vec3(0.5, 0.5, 0.5))\n   * \n    (1.0 - (tmpvar_6.x * 2.0))\n  ), 0.0, 1.0));\n  vec2 tmpvar_8;\n  tmpvar_8.x = uv.x;\n  tmpvar_8.y = (1.0 - uv.y);\n  ret_1 = (pow (mix (\n    (vec3((((tmpvar_5.xyz * scale1) + bias1).x + ((texture (sampler_blur3, uv).xyz * scale3) + bias3).x)) + (((texture (sampler_blur1, tmpvar_2).xyz * scale1) + bias1).x + ((texture (sampler_blur3, tmpvar_2).xyz * scale3) + bias3).x))\n  , tmpvar_7, tmpvar_7), vec3(5.0, 1.0, 0.5)) + pow ((texture (sampler_main, tmpvar_8).yyy + texture (sampler_main, \n    (1.0 - uv)\n  ).yyy), vec3(0.6, 0.95, 5.0)));\n  vec4 tmpvar_9;\n  tmpvar_9 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * tmpvar_4.xyy) * (\n    (q28 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q31)));\n  if (((ret_1.x > (q26 * q13)) && (ret_1.x <= (q23 * q11)))) {\n    ret_1.z = (ret_1.z - (tmpvar_9.x * 0.5));\n  };\n  if (((ret_1.y > (q25 * q11)) && (ret_1.y <= (q22 * q12)))) {\n    ret_1.x = (ret_1.x - (tmpvar_9.y * 0.5));\n  };\n  if (((ret_1.z > (q24 * q12)) && (ret_1.z <= (q21 * q13)))) {\n    ret_1.y = (ret_1.y - (tmpvar_9.z * 0.5));\n  };\n  ret_1 = (ret_1 - ((slow_roam_sin.xyz * roam_cos.zxy) * 0.5));\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = ret_1;\n  ret = tmpvar_10.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_fc_main, uv ).xyz;\n    \n    // motion blur by Geiss\n    // 'v' points exactly one pixel, in the direction of motion\n    float2 v = normalize(uv-uv_orig)*texsize.zw;\n    float3 s;\n    ret = max(ret, tex2D(sampler_main, uv+v)*0.97);\n    ret = max(ret, tex2D(sampler_main, uv-v)*0.97);\n    ret = max(ret, tex2D(sampler_main, uv+v*2)*0.90);\n    ret = max(ret, tex2D(sampler_main, uv-v*2)*0.90);\n\n    // darken (decay) over time\n    ret = (ret-0.005)*0.98; //or try: ret -= 0.004;\n}","comp_hlsl":"shader_body\n{\n\n\n\nfloat2 uva = uv;\nfloat2 uvb = float2(1-uv.x,uv.y);\n\nret = tex2D(sampler_main, uva).x + tex2D(sampler_main, uvb).x;\n\nfloat3 blurs = GetBlur1(uva).x + GetBlur3(uva).x;\nblurs += GetBlur1(uvb).x + GetBlur3(uvb).x;\n\n\nfloat2 uv3 = (uv-.5)*(1-GetBlur1(uv).zzz)+.5;\nret += saturate(pow(tex2D(sampler_main, uv3).zzz,.5)*(1-ret.x*2)),\nret += saturate(pow(GetBlur1(uv3).zzz,.5)*(1-ret.x*2)),\n\n\nret = lerp (\nblurs,\nret,\npow(ret,1));\n\nret = pow(ret,float3(5,1,.5));\n\nret += pow(tex2D(sampler_main, float2(uv.x,1-uv.y)).yyy+tex2D(sampler_main, 1-uv).yyy,float3(.6,.95,5));\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv3.xyy*q28\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q31\n                     );\nif(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; \nif(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; \nif(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; \n\nret-=slow_roam_sin*roam_cos.zxy*.5;\n\n}"}