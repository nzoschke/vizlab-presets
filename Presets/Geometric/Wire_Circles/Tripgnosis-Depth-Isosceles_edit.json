{"version":2,"baseVals":{"rating":5,"decay":0.981,"echo_zoom":1.047,"additivewave":1,"darken":1,"wave_a":1.028,"wave_scale":0.01,"wave_smoothing":0,"wave_mystery":0.34,"modwavealphastart":0.95,"modwavealphaend":0.75,"zoomexp":0.31218,"zoom":0.9802,"warp":0.01,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"ob_size":0.007,"ib_size":0.26,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.movement=0;a.q1=0;","frame_eqs_str":"a.movement=a.movement+.01*(a.bass+a.bass_att)+.001*pow(a.bass+1,3);a.q1=a.movement;a.monitor=a.q1;","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"movement = movement + 0.01*(bass+bass_att) + 0.001*pow(bass+1,3);\nq1 = movement;\nmonitor =q1;","pixel_eqs_eel":"","warp":" shader_body { \n  vec4 lums_1;\n  vec3 tmpvar_2;\n  tmpvar_2.z = 0.0;\n  tmpvar_2.xy = texsize.zw;\n  vec3 tmpvar_3;\n  tmpvar_3 = (tmpvar_2 * 3.5);\n  lums_1.x = dot (texture (sampler_main, (uv + (texsize.zw * tmpvar_3.xz))).xyz, vec3(0.32, 0.49, 0.29));\n  lums_1.y = dot (texture (sampler_main, (uv - (texsize.zw * tmpvar_3.xz))).xyz, vec3(0.32, 0.49, 0.29));\n  lums_1.z = dot (texture (sampler_main, (uv + (texsize.zw * tmpvar_3.zy))).xyz, vec3(0.32, 0.49, 0.29));\n  lums_1.w = dot (texture (sampler_main, (uv - (texsize.zw * tmpvar_3.zy))).xyz, vec3(0.32, 0.49, 0.29));\n  vec2 tmpvar_4;\n  tmpvar_4.x = (lums_1.x - lums_1.y);\n  tmpvar_4.y = (lums_1.z - lums_1.w);\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = (texture (sampler_fc_main, (uv + (\n    (((clamp (\n      ((((2800.0 * tmpvar_4) / 3.5) * 0.5) + 0.5)\n    , 0.0, 1.0) * 2.0) - 1.0) * 1.4)\n   * texsize.zw))).xyz * 0.965);\n  ret = tmpvar_5.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  vec3 ret_2;\n  uv_1 = (0.05 + (0.9 * uv));\n  ret_2 = (texture (sampler_main, uv_1).xyz * 4.0);\n  ret_2 = (ret_2 - ((\n    (texture (sampler_blur1, uv_1).xyz * scale1)\n   + bias1) * 4.0));\n  ret_2 = -(ret_2);\n  ret_2 = ((pow (ret_2, vec3(0.5, 0.5, 0.7)) - 0.1) * 1.1);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_2;\n  ret = tmpvar_3.xyz;\n }","warp_hlsl":"#define MyGet GetPixel //GetBlur1\nshader_body\n{\n    // GROW EFFECT - bright pixels spread radially outward.\n    // BE CAREFUL - this can really thrash the texture cache! (SLOW)\n    float grad_rad = 3.5;  //TWEAK\n    float str = 2.8;      //TWEAK\n    float3 d = float3(texsize.zw, 0) * grad_rad;\n    float4 lums = 0;\n    lums.x = lum( MyGet(uv + texsize.zw*d.xz) );\n    lums.y = lum( MyGet(uv - texsize.zw*d.xz) );\n    lums.z = lum( MyGet(uv + texsize.zw*d.zy) );\n    lums.w = lum( MyGet(uv - texsize.zw*d.zy) );\n    float2 grad = float2(lums.x-lums.y, lums.z-lums.w)*str*1000/grad_rad;\n    grad = (saturate(grad*0.5+0.5)*2-1)*1.4;\n    // sample previous frame\n    ret = tex2D( sampler_fc_main, uv + grad*texsize.zw ).xyz;\n\n    // darken (decay) over time\n    ret *= 0.965; //or try: ret -= 0.004;\n}","comp_hlsl":"shader_body\n{\n    uv = 0.05 + 0.9*uv;\n\n    // equivalent of a laplacian: [center*4 - each of the 4 neighbors*1]\n    ret = 0;\n    ret += tex2D(sampler_main, uv ).xyz*4;\n    ret -= GetBlur1(uv)*4;\nret *= -1;\n\n    // little bit of noise:\n    //ret *= 1 + 0.12*(tex2D(sampler_noise_lq, rand_frame.xy \n    //       + uv*texsize.xy*texsize_noise_lq.zw).xxx*2-1);\n \n    // palettize:\n    ret = pow(ret, float3(0.5, 0.5, 0.7));\n\n    ret = (ret-0.1)*1.1;\n   \n    //ret.xyz *= 2; // a little bit of overbright\n}\n\n"}