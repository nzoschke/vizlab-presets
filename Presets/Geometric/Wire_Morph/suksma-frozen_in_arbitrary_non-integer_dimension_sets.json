{"version":2,"baseVals":{"rating":5,"decay":1,"echo_orient":3,"wave_mode":1,"wrap":0,"wave_a":0.001,"zoom":0.96,"warp":0.00052,"wave_r":0,"wave_g":0,"wave_b":0,"ob_r":1,"ob_g":1,"ob_b":1,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":100,"textured":1,"rad":2.66717,"a":0.4,"a2":0.4,"border_a":0},"init_eqs_str":"a.q1=0;","frame_eqs_str":"a.r=Math.sin(a.q1);a.g=Math.sin(1.1*a.q1);a.b=Math.sin(1.4*a.q1);a.r2=Math.sin(1.25*a.q1);a.g2=Math.sin(1.45*a.q1);a.b2=Math.sin(1.12*a.q1);","init_eqs_eel":"","frame_eqs_eel":"r = sin(q1);\ng = sin(q1*1.1);\nb = sin(q1*1.4);\nr2 = sin(q1*1.25);\ng2 = sin(q1*1.45);\nb2 = sin(q1*1.12);"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"thick":1,"additive":1,"scaling":0.88026,"smoothing":1,"a":0.2},"init_eqs_str":"a.xx=0;a.s=0;a.xs=0;a.ztor=0;a.xtor=0;a.ytor=0;a.ss=0;a.q1=0;a.q5=0;a.xd=0;a.zd=0;a.v=0;a.yx=0;a.angle2=0;a.zs=0;a.angle=0;a.ys=0;a.level=0;a.xn=0;a.yd=0;a.angle3=0;a.yn=0;a.peek1=0;a.u=0;a.zx=0;","frame_eqs_str":"","point_eqs_str":"a.u=3.14159*Math.abs(Math.cos(.1*a.q1));a.v=6.28318*Math.abs(Math.cos(.015*a.q1));a.s=314*a.sample;a.ss=6280*a.sample;a.xs=.5*Math.sin(a.s)*Math.cos(a.ss)*equal(a.q5,0)+(.6+.1*Math.cos(a.s))*Math.cos(a.ss)*equal(a.q5,1)+.5*Math.sin(a.s)*Math.cos(a.ss)*equal(a.q5,2);a.ys=.5*Math.sin(a.s)*Math.sin(a.ss)*equal(a.q5,0)+(.6+.1*Math.cos(a.s))*Math.sin(a.ss)*equal(a.q5,1)+.5*Math.sin(a.s)*Math.sin(a.ss)*equal(a.q5,2);a.zs=.5*Math.cos(a.s)*equal(a.q5,0)+.1*Math.sin(a.s)*equal(a.q5,\n1)+.5*Math.sin(a.s)*equal(a.q5,2);a.xtor=(.6+.1*Math.cos(a.s))*Math.cos(a.ss);a.ytor=(.6+.1*Math.cos(a.s))*Math.sin(a.ss);a.ztor=.1*Math.sin(a.s);a.angle=.3*a.q1;a.yx=a.ys*Math.cos(a.angle)-a.zs*Math.sin(a.angle);a.zx=a.ys*Math.sin(a.angle)+a.zs*Math.cos(a.angle);a.xx=a.xs;a.angle2=.5*a.q1;a.xd=a.xx*Math.cos(a.angle2)-a.zx*Math.sin(a.angle2);a.zd=a.xx*Math.sin(a.angle2)+a.zx*Math.cos(a.angle2);a.yd=a.yx;a.angle3=.41*a.q1;a.xn=a.xd*Math.cos(a.angle3)-a.yd*Math.sin(a.angle3);a.yn=a.xd*Math.sin(a.angle3)+\na.yd*Math.cos(a.angle3);a.zd+=2;a.peek1=10*(a.value1+a.value2);a.level=.00001<Math.abs(above(a.peek1,a.level))?a.peek1:a.level-.00025;a.level=.00001<Math.abs(below(a.level,0))?0:a.level;a.zd=a.zd+2+a.level;a.x=a.xn*a.zd*.05+.5;a.y=a.yn*a.zd*.06+.5;a.r=.5+.5*Math.sin(1.2*a.q1+a.x+a.x);a.g=.5+.5*Math.sin(1.5*a.q1+a.x+a.y);a.b=.5+.5*Math.sin(1.36*a.q1+a.y+a.y);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"u = abs(cos(q1*0.1))*3.14159;\nv = abs(cos(q1*0.015))*3.14159*2;\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw\nxs = 0.5*sin(s)*cos(ss)*equal(q5,0) +\n(0.6 + 0.1*cos(s))*cos(ss)*equal(q5,1) +\n0.5*sin(s)*cos(ss)*equal(q5,2);\nys = 0.5*sin(s)*sin(ss)*equal(q5,0) +\n(0.6 + 0.1*cos(s))*sin(ss)*equal(q5,1) +\n0.5*sin(s)*sin(ss)*equal(q5,2);\nzs = 0.5*cos(s)*equal(q5,0) +\n0.1*sin(s)*equal(q5,1) +\n0.5*sin(s)*equal(q5,2);\n\n\n\nxtor = (0.6 + 0.1*cos(s))*cos(ss);\nytor = (0.6 + 0.1*cos(s))*sin(ss);\nztor = 0.1*sin(s);\n\n\n//rotate x axis\nangle = q1*0.3;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = q1*0.5;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = q1*0.41;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\n//do that falloff effect\npeek1 = (value1 + value2)*10;\n\n//if sample louder set that to level else decrement level\nlevel = if(above(peek1,level),peek1,level - 0.00025);\nlevel = if(below(level,0),0,level);\n\n//add to z\nzd = zd + 2  + level;\n\n\nx = xn*zd*0.05 + 0.5;\ny = yn*zd*0.05*1.2 + 0.5;\n\n\nr = 0.5 + 0.5*sin(q1*1.2 + x + x);\ng = 0.5 + 0.5*sin(q1*1.5 + x + y);\nb = 0.5 + 0.5*sin(q1*1.36 + y + y);"},{"baseVals":{"enabled":1,"thick":1,"additive":1,"scaling":0.88026,"smoothing":1,"a":0.2},"init_eqs_str":"a.xx=0;a.s=0;a.xs=0;a.ztor=0;a.xtor=0;a.ytor=0;a.ss=0;a.q1=0;a.q5=0;a.xd=0;a.zd=0;a.v=0;a.yx=0;a.angle2=0;a.zs=0;a.angle=0;a.ys=0;a.level=0;a.xn=0;a.yd=0;a.angle3=0;a.yn=0;a.peek1=0;a.u=0;a.zx=0;","frame_eqs_str":"","point_eqs_str":"a.u=3.14159*Math.abs(Math.cos(.1*a.q1));a.v=6.28318*Math.abs(Math.cos(.015*a.q1));a.s=314*a.sample;a.ss=6280*a.sample;a.xs=.5*Math.sin(a.s)*Math.cos(a.ss)*equal(a.q5,2)+(.6+.1*Math.cos(a.s))*Math.cos(a.ss)*equal(a.q5,0)+.5*Math.sin(a.s)*Math.cos(a.ss)*equal(a.q5,1);a.ys=.5*Math.sin(a.s)*Math.sin(a.ss)*equal(a.q5,2)+(.6+.1*Math.cos(a.s))*Math.sin(a.ss)*equal(a.q5,0)+.5*Math.sin(a.s)*Math.sin(a.ss)*equal(a.q5,1);a.zs=.5*Math.cos(a.s)*equal(a.q5,2)+.1*Math.sin(a.s)*equal(a.q5,\n0)+.5*Math.sin(a.s)*equal(a.q5,1);a.xtor=(.6+.1*Math.cos(a.s))*Math.cos(a.ss);a.ytor=(.6+.1*Math.cos(a.s))*Math.sin(a.ss);a.ztor=.1*Math.sin(a.s);a.angle=.3*a.q1;a.yx=a.ys*Math.cos(a.angle)-a.zs*Math.sin(a.angle);a.zx=a.ys*Math.sin(a.angle)+a.zs*Math.cos(a.angle);a.xx=a.xs;a.angle2=.5*a.q1;a.xd=a.xx*Math.cos(a.angle2)-a.zx*Math.sin(a.angle2);a.zd=a.xx*Math.sin(a.angle2)+a.zx*Math.cos(a.angle2);a.yd=a.yx;a.angle3=.41*a.q1;a.xn=a.xd*Math.cos(a.angle3)-a.yd*Math.sin(a.angle3);a.yn=a.xd*Math.sin(a.angle3)+\na.yd*Math.cos(a.angle3);a.zd+=2;a.peek1=10*(a.value1+a.value2);a.level=.00001<Math.abs(above(a.peek1,a.level))?a.peek1:a.level-.00025;a.level=.00001<Math.abs(below(a.level,0))?0:a.level;a.zd=a.zd+2+a.level;a.x=a.xn*a.zd*.05+.5;a.y=a.yn*a.zd*.06+.5;a.r=.5+.5*Math.sin(1.2*a.q1+a.x+a.x);a.g=.5+.5*Math.sin(1.5*a.q1+a.x+a.y);a.b=.5+.5*Math.sin(1.16*a.q1+a.y+a.y);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"u = abs(cos(q1*0.1))*3.14159;\nv = abs(cos(q1*0.015))*3.14159*2;\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw\nxs = 0.5*sin(s)*cos(ss)*equal(q5,2) +\n(0.6 + 0.1*cos(s))*cos(ss)*equal(q5,0) +\n0.5*sin(s)*cos(ss)*equal(q5,1);\nys = 0.5*sin(s)*sin(ss)*equal(q5,2) +\n(0.6 + 0.1*cos(s))*sin(ss)*equal(q5,0) +\n0.5*sin(s)*sin(ss)*equal(q5,1);\nzs = 0.5*cos(s)*equal(q5,2) +\n0.1*sin(s)*equal(q5,0) +\n0.5*sin(s)*equal(q5,1);\n\n\nxtor = (0.6 + 0.1*cos(s))*cos(ss);\nytor = (0.6 + 0.1*cos(s))*sin(ss);\nztor = 0.1*sin(s);\n\n\n//rotate x axis\nangle = q1*0.3;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = q1*0.5;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = q1*0.41;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\n//do that falloff effect\npeek1 = (value1 + value2)*10;\n\n//if sample louder set that to level else decrement level\nlevel = if(above(peek1,level),peek1,level - 0.00025);\nlevel = if(below(level,0),0,level);\n\n//add to z\nzd = zd + 2  + level;\n\n\nx = xn*zd*0.05 + 0.5;\ny = yn*zd*0.05*1.2 + 0.5;\n\n\nr = 0.5 + 0.5*sin(q1*1.2 + x + x);\ng = 0.5 + 0.5*sin(q1*1.5 + x + y);\nb = 0.5 + 0.5*sin(q1*1.16 + y + y);"},{"baseVals":{"spectrum":1,"additive":1,"a":0.5,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"u = abs(cos(q1*0.1))*3.14159;\nv = abs(cos(q1*0.015))*3.14159*2;\ns = sample*3.14;\nss = sample*6.28*100;\n\n//draw\nxs = 0.5*sin(s)*cos(ss);\nys = 0.5*sin(s)*sin(ss);\nzs = 0.5*sin(s);\n\n\n//plot x,y,z to point on circle\n//smp=sample*6.283;\n//xp=sin(smp )*0.30;\n//yp=cos(smp )*0.30;\n//zp=0;\n\n\n//alter shape;\n///angy=sin(sample*6.28*4 +t1 )*6.28;\n//xq=xp*cos(angy) - zp*sin(angy);\n//zq=xp*sin(angy) + zp*cos(angy);\n//xp=xq;\n//zp=zq;\n\n\n\n//rotate on y axis;\n//angy=t1*0.1;\n//xq=xp*cos(angy) - zp*sin(angy);\n//zq=xp*sin(angy) + zp*cos(angy);\n//xp=xq;\n//zp=zq;\n\n//rotate on x axis\n//axs1 = sin(t1*0.15) + 1.6;\n//yq= yp*cos(axs1) - zp*sin(axs1);\n//zq= yp*sin(axs1) + zp*cos(axs1);\n//yp=yq;\n//zp=zq;\n\n//rotate on y axis again\n//axs2 = sin(t1*0.1)*3.3;\n//xq=xp*cos(axs2) - zp*sin(axs2);\n//zq=xp*sin(axs2) + zp*cos(axs2);\n//xp=xq;\n//zp=zq;\n\n\n\n\n//rotate x axis\nangle = sin(q1*0.15 + 3.14);\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(q1*0.2 + 3.14);\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\nzd = zd + 2;\n\nx = xd*zd*0.3*1.2 + 0.5;\ny = yd*zd*0.3*1.2 + 0.5;\n\n\nr = 0.5 + 0.5*sin(q1*1.2 + x + x);\ng = 0.5 + 0.5*sin(q1*1.5 + x + y);\nb = 0.5 + 0.5*sin(q1*1.36 + y + y);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"u = abs(cos(q1*0.1))*3.14159;\nv = abs(cos(q1*0.015))*3.14159*2;\ns = sample*3.14;\nss = sample*6.28*100;\n\n//draw\nxs = 0.5*sin(s)*cos(ss);\nys = 0.5*sin(s)*sin(ss);\nzs = 0.5*sin(s);\n\n\n//plot x,y,z to point on circle\n//smp=sample*6.283;\n//xp=sin(smp )*0.30;\n//yp=cos(smp )*0.30;\n//zp=0;\n\n\n//alter shape;\n///angy=sin(sample*6.28*4 +t1 )*6.28;\n//xq=xp*cos(angy) - zp*sin(angy);\n//zq=xp*sin(angy) + zp*cos(angy);\n//xp=xq;\n//zp=zq;\n\n\n\n//rotate on y axis;\n//angy=t1*0.1;\n//xq=xp*cos(angy) - zp*sin(angy);\n//zq=xp*sin(angy) + zp*cos(angy);\n//xp=xq;\n//zp=zq;\n\n//rotate on x axis\n//axs1 = sin(t1*0.15) + 1.6;\n//yq= yp*cos(axs1) - zp*sin(axs1);\n//zq= yp*sin(axs1) + zp*cos(axs1);\n//yp=yq;\n//zp=zq;\n\n//rotate on y axis again\n//axs2 = sin(t1*0.1)*3.3;\n//xq=xp*cos(axs2) - zp*sin(axs2);\n//zq=xp*sin(axs2) + zp*cos(axs2);\n//xp=xq;\n//zp=zq;\n\n\n\n\n//rotate x axis\nangle = sin(q1*0.15 + 3.14);\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(q1*0.2 + 3.14);\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\nzd = zd + 2;\n\nx = xd*zd*0.3*1.2 + 0.5;\ny = yd*zd*0.3*1.2 + 0.5;\n\n\nr = 0.5 + 0.5*sin(q1*1.2 + x + x);\ng = 0.5 + 0.5*sin(q1*1.5 + x + y);\nb = 0.5 + 0.5*sin(q1*1.36 + y + y);"},{"baseVals":{"a":0.5,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"u = abs(cos(q1*0.1))*3.14159;\nv = abs(cos(q1*0.015))*3.14159*2;\ns = sample*20;\n\n//draw\nxs = 0.5*sin(s)*cos(s*v);\nys = 0.5*sin(s)*sin(s*v);\nzs = 0.5*sin(u);\n\n\n//plot x,y,z to point on circle\n//smp=sample*6.283;\n//xp=sin(smp )*0.30;\n//yp=cos(smp )*0.30;\n//zp=0;\n\n\n//alter shape;\n///angy=sin(sample*6.28*4 +t1 )*6.28;\n//xq=xp*cos(angy) - zp*sin(angy);\n//zq=xp*sin(angy) + zp*cos(angy);\n//xp=xq;\n//zp=zq;\n\n\n\n//rotate on y axis;\n//angy=t1*0.1;\n//xq=xp*cos(angy) - zp*sin(angy);\n//zq=xp*sin(angy) + zp*cos(angy);\n//xp=xq;\n//zp=zq;\n\n//rotate on x axis\n//axs1 = sin(t1*0.15) + 1.6;\n//yq= yp*cos(axs1) - zp*sin(axs1);\n//zq= yp*sin(axs1) + zp*cos(axs1);\n//yp=yq;\n//zp=zq;\n\n//rotate on y axis again\n//axs2 = sin(t1*0.1)*3.3;\n//xq=xp*cos(axs2) - zp*sin(axs2);\n//zq=xp*sin(axs2) + zp*cos(axs2);\n//xp=xq;\n//zp=zq;\n\n\n\n\n//rotate x axis\nangle = sin(q1*0.15 - 1.57);\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\n//angle2 = sin(q1*0.2 - 1.57);\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n\nx = xd*zd + 0.5;\ny = yd*zd + 0.5;\n\n\nr = 0.5 + 0.5*sin(q1*1.2 + x + x);\ng = 0.5 + 0.5*sin(q1*1.5 + x + y);\nb = 0.5 + 0.5*sin(q1*1.36 + y + y);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"u = abs(cos(q1*0.1))*3.14159;\nv = abs(cos(q1*0.015))*3.14159*2;\ns = sample*20;\n\n//draw\nxs = 0.5*sin(s)*cos(s*v);\nys = 0.5*sin(s)*sin(s*v);\nzs = 0.5*sin(u);\n\n\n//plot x,y,z to point on circle\n//smp=sample*6.283;\n//xp=sin(smp )*0.30;\n//yp=cos(smp )*0.30;\n//zp=0;\n\n\n//alter shape;\n///angy=sin(sample*6.28*4 +t1 )*6.28;\n//xq=xp*cos(angy) - zp*sin(angy);\n//zq=xp*sin(angy) + zp*cos(angy);\n//xp=xq;\n//zp=zq;\n\n\n\n//rotate on y axis;\n//angy=t1*0.1;\n//xq=xp*cos(angy) - zp*sin(angy);\n//zq=xp*sin(angy) + zp*cos(angy);\n//xp=xq;\n//zp=zq;\n\n//rotate on x axis\n//axs1 = sin(t1*0.15) + 1.6;\n//yq= yp*cos(axs1) - zp*sin(axs1);\n//zq= yp*sin(axs1) + zp*cos(axs1);\n//yp=yq;\n//zp=zq;\n\n//rotate on y axis again\n//axs2 = sin(t1*0.1)*3.3;\n//xq=xp*cos(axs2) - zp*sin(axs2);\n//zq=xp*sin(axs2) + zp*cos(axs2);\n//xp=xq;\n//zp=zq;\n\n\n\n\n//rotate x axis\nangle = sin(q1*0.15 - 1.57);\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\n//angle2 = sin(q1*0.2 - 1.57);\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n\nx = xd*zd + 0.5;\ny = yd*zd + 0.5;\n\n\nr = 0.5 + 0.5*sin(q1*1.2 + x + x);\ng = 0.5 + 0.5*sin(q1*1.5 + x + y);\nb = 0.5 + 0.5*sin(q1*1.36 + y + y);"}],"init_eqs_str":"a.basstime=0;a.stickybit=0;a.volavg2=0;a.q1=0;a.q5=0;a.decay_r=0;a.sample1=0;a.difftime=0;a.diff=0;a.decay_b=0;a.edge=0;a.volavg=0;a.bit2=0;a.state=0;a.vol=0;a.q2=0;a.rarr=0;a.q3=0;a.basssum=0;a.decay_g=0;a.sample2=0;","frame_eqs_str":"a.basstime+=.03*a.bass;a.q1=a.basstime;a.basstime+=.03*a.bass_att;a.vol=pow(a.bass+a.mid+a.treb,2);a.basssum=a.vol;a.stickybit=mod(a.time,2);a.volavg+=a.vol*equal(a.stickybit,1);a.sample1+=equal(a.stickybit,1);a.volavg2+=a.vol*equal(a.stickybit,0);a.sample2+=equal(a.stickybit,0);a.edge=bnot(equal(a.bit2,a.stickybit));a.volavg-=a.volavg*a.edge*a.stickybit;a.volavg2-=a.volavg2*a.edge*equal(a.stickybit,0);a.sample1-=a.sample1*a.edge*a.stickybit;a.sample2-=a.sample2*a.edge*equal(a.stickybit,\n0);a.diff=.00001<Math.abs(equal(a.stickybit,1))?div(a.basssum,div(a.volavg2,a.sample2)):0;a.diff=.00001<Math.abs(equal(a.stickybit,0))?div(a.basssum,div(a.volavg,a.sample1)):a.diff;a.q3=a.diff;a.bit2=mod(a.time,2);a.difftime+=.03*a.diff;a.q2=a.difftime;a.state+=above(a.diff,5);a.state=.00001<Math.abs(above(a.state,2))?0:a.state;a.monitor=a.state;a.q5=a.state;a.difftime=.00001<Math.abs(above(a.difftime,2E3))?0:a.difftime;a.rarr=.01*Math.floor(rand(100));a.decay_r=.6+.2*Math.abs(Math.sin(a.diff+a.rarr));\na.decay_g=.6+.25*Math.abs(Math.cos(a.diff+a.rarr));a.decay_b=.6+.3*Math.abs(Math.atan(a.diff+a.rarr));","pixel_eqs_str":"a.zoom=1+.05*a.q3;a.zoom=1;","init_eqs_eel":"","frame_eqs_eel":"basstime = basstime + bass*0.03;\nq1 = basstime;\n\nbasstime = basstime + bass_att*0.03;\nvol = pow(bass+mid+treb,2);\nbasssum = vol;\n\nstickybit = time%2;\n\n//avg vol\n//buffer 1\nvolAvg = volAvg + vol*equal(stickybit,1);\n//number of samples 1 or framerate\nsample1 = sample1 + equal(stickybit,1);\n//buffer 2\nvolAvg2 = volAvg2 + vol*equal(stickybit,0);\n//number of samples 2\nsample2 = sample2 + equal(stickybit,0);\n\n//transision\nedge = bnot(equal(bit2,stickybit));\n\nvolAvg = volAvg - volAvg*edge*stickybit;\nvolAvg2 = volAvg2 - volAvg2*edge*equal(stickybit,0);\n\nsample1 = sample1  - sample1*edge*stickybit;\nsample2 = sample2  - sample2*edge*equal(stickybit,0);\n\n//test vol against avg buffer lvl\ndiff = if(equal(stickybit,1), (basssum/(volAvg2/sample2)) , 0);\ndiff = if(equal(stickybit,0), (basssum/(volAvg/sample1)), diff);\n\nq3 = diff;\n\nbit2 = time%2;\n\ndifftime = difftime + diff*0.03;\nq2 = difftime;\n\nstate = state +  above(diff,5);\nstate = if(above(state,2),0,state);\nmonitor = state;\n\nq5 = state;\n\n//fix a strange error\ndifftime = if(above(difftime,2000),0, difftime);\n\nrarr = int(rand(100))*0.01;\n\ndecay_r = 0.6 + 0.2*(abs(sin(diff+rarr)));\ndecay_g = 0.6 + 0.25*(abs(cos(diff+rarr)));\ndecay_b = 0.6 + 0.30*(abs(atan(diff+rarr)));\n\n//shape fill","pixel_eqs_eel":"zoom = 1 + 0.05*q3;\nzoom = 1;","warp":" shader_body { \n  vec2 uv_1;\n  vec2 uv6_2;\n  uv_1 = (uv + ((0.004 * \n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  ).xy * vec2(0.0, 1.0)));\n  uv6_2 = (0.4 * sin((\n    (((uv - 0.5) * aspect.xy) * 18.0)\n   * rand_frame.xy)));\n  vec3 tmpvar_3;\n  tmpvar_3.x = (treb * 0.5);\n  tmpvar_3.y = (bass * 0.5);\n  tmpvar_3.z = (mid * 0.5);\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = (((\n    (texture (sampler_main, uv_1).xyz - (((texture (sampler_blur2, \n      fract(uv_1)\n    ).xyz * scale2) + bias2) * 0.03))\n   + \n    (0.15 * (vec3((0.051 / sqrt(\n      dot (uv6_2, uv6_2)\n    ))) * tmpvar_3))\n  ) * 0.99) - 0.02);\n  ret = tmpvar_4.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = texture (sampler_main, (uv + (cos(\n    (texture (sampler_main, uv).xz * 17.3)\n  ) * 0.02))).xyz;\n  ret = tmpvar_1.xyz;\n }","warp_hlsl":"sampler sampler_worms;\nfloat3 color, mus;\nfloat dx,dy;\nshader_body {\nfloat2 uv1 = (uv-.5) * aspect.xy;\n\n\nfloat2 uv6 = uv1;\nfloat z = q29*2*length(uv1)+rand_frame * 64;\nfloat2 d = normalize(uv1);\nfloat2 rs = clamp(tan(z)*d,-8,8);\nuv += .004*GetBlur1(uv)*float2 (0,1);//rs/20;\n\n\nuv6 = .4*sin(uv1*18*rand_frame);\nmus = .051/(length(uv6));\nmus *= float3 (treb*.5,bass*.5,mid*.5);\n\nfloat3 blur = GetBlur2(frac(uv));\n\nfloat3 crisp= tex2D(sampler_main,uv);\n\nfloat3 ret1 = crisp - blur*.03 + .15*mus;\nfloat2 uv2 = (uv_orig-.5)-float3(bass*.1,treb*.1+0.1*q25,mid*.1);\n\nq25 = 1;\nret = q25*(ret1*.99-.02) + (1-q25)* GetPixel(uv_orig);\n\n}","comp_hlsl":"shader_body\n{\n    //uv.y = rad*rad;\n    float srad = sqrt(rad)+ 0.05;\n\n    ret = tex2D(sampler_main, uv).xyz;\n    ret = tex2D(sampler_main, uv + (cos(ret.xz*17.3))*0.02).xyz;\n\n\n    //ret += GetBlur1(uv) - 0.07;\n    //ret *= float3(1.3,0.8,0.5);\n    //ret *= 0.8;    \n}"}