{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.94,"echo_zoom":1.615,"echo_alpha":0.5,"echo_orient":2,"wave_thick":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.01,"wave_smoothing":0.27,"wave_mystery":-0.38,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":34.956,"warpscale":4.142,"dx":0.00001,"dy":0.00001,"warp":0.01,"ob_size":0,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_x":64,"mv_y":48,"mv_l":0.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"rad":0.34,"ang":1.5708,"r":0,"g2":0,"b2":0.5,"border_r":0,"border_g":0,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang = 1.55;\nrad = rad+.3*bass;\nr = if(above(bass,1.5),1,0);\ng = if(above(bass,1.5),1,0);\nb = if(above(bass,1.5),1,0);","init_eqs_eel":"","frame_eqs_eel":"ang = 1.55;\nrad = rad+.3*bass;\nr = if(above(bass,1.5),1,0);\ng = if(above(bass,1.5),1,0);\nb = if(above(bass,1.5),1,0);"},{"baseVals":{"sides":8,"rad":1.00394,"r":0,"a":0,"g2":0.4,"border_a":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang = ang - time*.333;\nborder_r = .5+.4*sin(time*1.4)+bass*.1;\nborder_g = .5+.4*sin(time*1.2)+treb*.1;\nborder_b = .5+.4*sin(time*1)+mid*.1;","init_eqs_eel":"","frame_eqs_eel":"ang = ang - time*.333;\nborder_r = .5+.4*sin(time*1.4)+bass*.1;\nborder_g = .5+.4*sin(time*1.2)+treb*.1;\nborder_b = .5+.4*sin(time*1)+mid*.1;"},{"baseVals":{"sides":3,"rad":0.21,"r":0.84,"r2":1,"g2":0.58,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang = ang + time*4;","init_eqs_eel":"","frame_eqs_eel":"ang = ang + time*4;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"scaling":2.98779},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"a.x=.5+.5*a.sample*Math.sin(100*a.sample+10*a.time);a.y=.5+.5*a.sample*Math.cos(100*a.sample+10*a.time);a.r=.5+25*a.sample;a.b=.5+5*a.sample;a.g=.5+15*a.sample;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = .5+.25*(sample*2)*sin(sample*100+time*10);\ny = .5+.25*(sample*2)*cos(sample*100+time*10);\nr = .5+.5*(sample*50);\nb = .5+.5*(sample*10);\ng = .5+.5*(sample*30);"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.tg3=0;a.rg2=0;a.pfdx_r=0;a.pfthresh=0;a.ocog=0;a.q29=0;a.thresh=0;a.q1=0;a.cog=0;a.dy_r=0;a.tg2=0;a.tg1=0;a.rg3=0;a.pfdy_r=0;a.rg1=0;a.q4=0;a.dx_r=0;a.vol=0;a.q2=0;a.q3=0;","frame_eqs_str":"a.wave_r=.5+.5*Math.sin(1.6*a.time);a.wave_g=.5+.5*Math.sin(4.1*a.time);a.wave_b=-1+(1-a.wave_r+1-a.wave_g);a.warp=0;a.pfthresh=2*above(a.bass_att,a.pfthresh)+(1-above(a.bass_att,a.pfthresh))*(.96*(a.pfthresh-1.3)+1.3);a.pfdx_r=.015*equal(a.pfthresh,2)*Math.sin(5*a.time)+(1-equal(a.pfthresh,2))*a.pfdx_r;a.pfdy_r=.015*equal(a.pfthresh,2)*Math.sin(6*a.time)+(1-equal(a.pfthresh,2))*a.pfdy_r;a.rg1=Math.abs(Math.sin(a.time));a.rg2=0*above(a.rg1,.25)+1*below(a.rg1,.25);a.rg3=.00001<\nMath.abs(equal(a.pfthresh,2))?a.rg2:a.rg3;a.q1=a.wave_r;a.q2=a.wave_g;a.q3=a.wave_b;a.invert=0;a.echo_alpha=Math.min(1,Math.max(.5,12*a.pfdy_r));a.echo_zoom=Math.min(2,Math.max(1,1+Math.abs(24*a.pfdx_r)));a.monitor=a.invert;a.cog=a.ocog+.005*(a.bass+a.bass_att+a.bass*a.bass_att-2);a.ocog=below(a.cog,3E4)*a.cog;a.q4=a.cog;a.warp=2*Math.sin(a.q4);a.vol=a.bass+a.treb+a.mid;a.q29=a.vol;","pixel_eqs_str":"a.thresh=2*above(a.bass_att,a.thresh)+(1-above(a.bass_att,a.thresh))*(.96*(a.thresh-1.3)+1.3);a.dx_r=.015*equal(a.thresh,2)*Math.sin(5*a.time)+(1-equal(a.thresh,2))*a.dx_r;a.dy_r=.015*equal(a.thresh,2)*Math.sin(6*a.time)+(1-equal(a.thresh,2))*a.dy_r;a.tg1=Math.abs(Math.sin(a.time));a.tg2=12*a.dx_r*above(a.tg1,.5)+12*a.dy_r*below(a.tg1,.5);a.tg3=.00001<Math.abs(equal(a.thresh,2))?a.tg2:a.tg3;a.zoom+=.1;","init_eqs_eel":"","frame_eqs_eel":"wave_r = 0.5 + 0.5*sin(1.6*time);\nwave_g = 0.5 + 0.5*sin(4.1*time);\nwave_b = -1 + (1-wave_r + 1-wave_g);\nwarp = 0;\npfthresh = above(bass_att,pfthresh)*2+(1-above(bass_att,pfthresh))*((pfthresh-1.3)*0.96+1.3);\npfdx_r = equal(pfthresh,2)*0.015*sin(5*time)+(1-equal(pfthresh,2))*pfdx_r;\npfdy_r = equal(pfthresh,2)*0.015*sin(6*time)+(1-equal(pfthresh,2))*pfdy_r;\nrg1 = abs(sin(time));\nrg2 = 0*above(rg1,0.25) + 1*below(rg1,0.25);\nrg3 = if(equal(pfthresh,2),rg2,rg3);\n\nq1 = wave_r;\nq2 = wave_g;\nq3 = wave_b;\n\ninvert = 0;\necho_alpha = min(1,max(0.5,12*pfdy_r));\n\n\necho_zoom = min(2,max(1,1+abs(24*pfdx_r)));\n\n\nmonitor = invert;\ncog = ocog+0.005*(bass+bass_att+(bass*bass_att)-2);\nocog = below(cog,30000)*cog;\nq4 = cog;\nwarp = 2*sin(q4);\nvol=bass+treb+mid;\nq29=vol;","pixel_eqs_eel":"thresh = above(bass_att,thresh)*2+(1-above(bass_att,thresh))*((thresh-1.3)*0.96+1.3);\ndx_r = equal(thresh,2)*0.015*sin(5*time)+(1-equal(thresh,2))*dx_r;\ndy_r = equal(thresh,2)*0.015*sin(6*time)+(1-equal(thresh,2))*dy_r;\ntg1 = abs(sin(time));\ntg2 = 12*dx_r*above(tg1,0.5) + 12*dy_r*below(tg1,0.5);\ntg3 = if(equal(thresh,2),tg2,tg3);\n\n\nzoom = zoom + 0.1;","warp":" shader_body { \n  vec3 rsamp_1;\n  vec3 ret_2;\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy));\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_pw_main, uv);\n  ret_2 = tmpvar_4.xyz;\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_pw_main, (uv + ((\n    (tmpvar_3.xy - 0.5)\n   * 12.0) * texsize.zw)));\n  vec3 tmpvar_6;\n  tmpvar_6 = tmpvar_5.xyz;\n  rsamp_1 = tmpvar_6;\n  float tmpvar_7;\n  vec2 x_8;\n  x_8 = (tmpvar_4.xy - uv);\n  tmpvar_7 = sqrt(dot (x_8, x_8));\n  float tmpvar_9;\n  vec2 x_10;\n  x_10 = (tmpvar_5.xy - uv);\n  tmpvar_9 = sqrt(dot (x_10, x_10));\n  if ((tmpvar_7 > tmpvar_9)) {\n    ret_2.xy = tmpvar_6.xy;\n  };\n  vec4 tmpvar_11;\n  tmpvar_11 = texture (sampler_pw_main, (uv + ((\n    (tmpvar_3.zw - 0.5)\n   * 48.0) * texsize.zw)));\n  rsamp_1 = tmpvar_11.xyz;\n  float tmpvar_12;\n  vec2 x_13;\n  x_13 = (ret_2.xy - uv);\n  tmpvar_12 = sqrt(dot (x_13, x_13));\n  float tmpvar_14;\n  vec2 x_15;\n  x_15 = (tmpvar_11.xy - uv);\n  tmpvar_14 = sqrt(dot (x_15, x_15));\n  if ((tmpvar_12 > tmpvar_14)) {\n    ret_2.xy = rsamp_1.xy;\n  };\n  ret_2.z = texture (sampler_fw_main, ret_2.xy).z;\n  ret_2.z = (ret_2.z + (q29 * 0.005));\n  if ((((ret_2.z - ret_2.y) - ret_2.x) < 0.019)) {\n    ret_2 = (ret_2 * 0.1);\n  };\n  vec4 tmpvar_16;\n  tmpvar_16.w = 1.0;\n  tmpvar_16.xyz = ret_2;\n  ret = tmpvar_16.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (texsize.zw * 6.0);\n  vec3 tmpvar_4;\n  tmpvar_4 = (((texture (sampler_blur1, \n    (uv + (vec2(1.0, 0.0) * tmpvar_3))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv - (vec2(1.0, 0.0) * tmpvar_3))\n  ).xyz * scale1) + bias1));\n  vec3 tmpvar_5;\n  tmpvar_5 = (((texture (sampler_blur1, \n    (uv + (vec2(0.0, 1.0) * tmpvar_3))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv - (vec2(0.0, 1.0) * tmpvar_3))\n  ).xyz * scale1) + bias1));\n  vec3 tmpvar_6;\n  tmpvar_6.z = 0.0;\n  tmpvar_6.x = dot (tmpvar_4, vec3(0.32, 0.49, 0.29));\n  tmpvar_6.y = dot (tmpvar_5, vec3(0.32, 0.49, 0.29));\n  vec2 tmpvar_7;\n  tmpvar_7.x = dot (tmpvar_4, vec3(0.32, 0.49, 0.29));\n  tmpvar_7.y = dot (tmpvar_5, vec3(0.32, 0.49, 0.29));\n  uv_1 = (uv - (tmpvar_7 * 0.25));\n  ret_2 = ((texture (sampler_noisevol_hq, (\n    (vec3(0.05, 0.05, 0.0) * (((uv.xyy - \n      (tmpvar_6 * 0.4)\n    ) * texsize.xyy) * texsize_noisevol_hq.zww))\n   + \n    (vec3(0.0, 0.0, 0.4) * time)\n  )).x * abs(\n    ((((texture (sampler_blur3, uv_1).xyz * scale3) + bias3) * 1.8) - texture (sampler_main, uv_1).xyz)\n  )) * 4.0);\n  vec3 tmpvar_8;\n  tmpvar_8 = pow (hue_shader, vec3(6.0, 6.0, 6.0));\n  ret_2 = (ret_2 * mix (tmpvar_8, tmpvar_8.zxy, ret_2));\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ret_2;\n  ret = tmpvar_9.xyz;\n }","warp_hlsl":"shader_body\n{\nfloat2 pixelsize = texsize.zw;\nfloat2 uvm = uv;\n\nfloat2 noise_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\nfloat4 noiseVal = tex2D(sampler_noise_lq, noise_uv);\n\nret.xyz = saturate(tex2D( sampler_pw_main,uvm).xyz*float3(1,1,1) - float3(.0,.0,.0));\nret.xyz = tex2D( sampler_pw_main,uvm).xyz;\n\n\nfloat3 rsamp = tex2D(sampler_pw_main,uvm + (noiseVal.xy-.5)*12*pixelsize).xyz;\nif (length(ret.xy - uvm) > length(rsamp.xy - uvm)) {\nret.xy = rsamp.xy;\n}\n\nrsamp = tex2D(sampler_pw_main,uvm + (noiseVal.zw-.5)*48*pixelsize).xyz;\nif (length(ret.xy - uvm) > length(rsamp.xy - uvm)) {\nret.xy = rsamp.xy;\n}\n\nret.z = tex2D(sampler_fw_main,ret.xy).z;\n\nret.z += q29*.005;\n\nif (ret.z-ret.y-ret.x < .019) {\nret*=.10;\n}\n\n\n}","comp_hlsl":"shader_body\n{\n\n    float2 d = texsize.zw*6;\n    float3 dx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );\n    float3 dy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );\n\nfloat4 noise = tex3D(sampler_noisevol_hq, ((uv.xyy-float3(lum(dx),lum(dy),0)*0.4)*texsize.xyy*texsize_noisevol_hq.zww).xyz*float3(1,1,0)*0.05\n                                        + time*float3(0,0,1)*0.4 );\nuv -= float2(lum(dx),lum(dy))*0.25;\nret = noise.x*abs(GetBlur3(uv)*1.8 - GetPixel(uv))*4;\nfloat3 hue = pow(hue_shader, 6);\n\nret *= lerp(hue,hue.zxy,ret);\n}"}