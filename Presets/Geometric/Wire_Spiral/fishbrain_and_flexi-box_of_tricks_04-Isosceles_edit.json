{"version":2,"baseVals":{"rating":5,"gammaadj":1.28,"decay":0.8,"echo_zoom":1,"echo_orient":3,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"brighten":1,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"zoomexp":3.04777,"zoom":1.0173,"warp":0.01605,"wave_g":0.65,"wave_b":0.65,"ob_size":0,"ob_a":1,"mv_x":64,"mv_y":48,"mv_l":0,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"sides":5,"additive":1,"num_inst":2,"x":0.49,"rad":0.11589,"tex_zoom":4.36077,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = int(rand(1000))/1000;\ny = int(rand(1000))/1000;\nang = int(rand(150))/100;","init_eqs_eel":"","frame_eqs_eel":"x = int(rand(1000))/1000;\ny = int(rand(1000))/1000;\nang = int(rand(150))/100;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"thick":1,"additive":1,"g":0,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"ma=ma+(above(bass,1)*3.1415*.01*bass);\nma=ma-(above(treb,1)*3.1415*.01*treb);\n\nmx=mx+(.0002*cos(ma));\nmy=my+(.0002*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.8));","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,1)*3.1415*.01*bass);\nma=ma-(above(treb,1)*3.1415*.01*treb);\n\nmx=mx+(.0002*cos(ma));\nmy=my+(.0002*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.8));"},{"baseVals":{"thick":1,"additive":1,"r":0,"g":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"ma=ma+(above(bass,1)*3.1415*.05*bass);\nma=ma-(above(mid,1)*3.1415*.05*mid);\n\nmx=mx+(.0001*cos(ma));\nmy=my+(.0001*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.1));","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,1)*3.1415*.05*bass);\nma=ma-(above(mid,1)*3.1415*.05*mid);\n\nmx=mx+(.0001*cos(ma));\nmy=my+(.0001*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.1));"},{"baseVals":{"thick":1,"additive":1,"r":0,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"ma=ma+(above(mid,1)*3.1415*.01*mid);\nma=ma-(above(treb,1)*3.1415*.01*treb);\n\nmx=mx+(.0004*cos(ma));\nmy=my+(.0004*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.3));","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(mid,1)*3.1415*.01*mid);\nma=ma-(above(treb,1)*3.1415*.01*treb);\n\nmx=mx+(.0004*cos(ma));\nmy=my+(.0004*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.3));"},{"baseVals":{"thick":1,"additive":1,"g":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"ma=ma+(above(bass,.5)*3.1415*.02*bass);\nma=ma-(above(treb,.5)*3.1415*.02*treb);\n\nmx=mx+(.0008*cos(ma));\nmy=my+(.0008*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.2));","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,.5)*3.1415*.02*bass);\nma=ma-(above(treb,.5)*3.1415*.02*treb);\n\nmx=mx+(.0008*cos(ma));\nmy=my+(.0008*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.2));"}],"init_eqs_str":"a.z=0;a.d_x=0;a.q25=0;a.index=0;a.q29=0;a.q1=0;a.dec_med=0;a.is_beat=0;a.q31=0;a.q23=0;a.q24=0;a.dec_slow=0;a.q26=0;a.avg=0;a.r=0;a.beat=0;a.d_y=0;a.peak=0;a.q27=0;a.t0=0;a.q32=0;a.q28=0;a.q30=0;","frame_eqs_str":"a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.99,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.5+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,2);a.d_x=.00001<Math.abs(a.is_beat)?.001*(Math.floor(rand(2E3))-1E3):a.d_x;a.d_y=.00001<Math.abs(a.is_beat)?.001*(Math.floor(rand(2E3))-\n1E3):a.d_y;a.r=.00001<Math.abs(a.is_beat)?.001*(Math.floor(rand(2E3))-1E3):a.r;a.z=.00001<Math.abs(a.is_beat)?.001*Math.floor(rand(1E3)):a.z;a.zoom=1.03+.06*a.z;a.rot=.06*a.r;a.dx=.01*a.d_x;a.dy=.01*a.d_y;a.q1=1;a.q23=div(Math.floor(rand(1E3)),1E3);a.q24=div(Math.floor(rand(1E3)),1E3);a.q25=6.28*div(Math.floor(rand(1E3)),1E3);a.q26=a.q25-3.14;a.q27=div(Math.floor(rand(1E3)),12E3)+.04;a.q28=div(Math.floor(rand(1E3)),1E3);a.q29=div(Math.floor(rand(1E3)),1E3);a.q30=6.28*div(Math.floor(rand(1E3)),1E3);\na.q31=a.q30-3.14;a.q32=div(Math.floor(rand(1E3)),14E3)+.04;","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"dec_med = pow (0.9, 30/fps);\ndec_slow = pow (0.99, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .5+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %2;\n\n\nd_x = if(is_beat, (int(rand(2000))-1000)*0.001 , d_x);\nd_y = if(is_beat, (int(rand(2000))-1000)*0.001 , d_y);\nr = if(is_beat, (int(rand(2000))-1000)*0.001 , r);\nz = if(is_beat, int(rand(1000))*0.001 , z);\nzoom = 1.03 + z*0.06;\nrot = r*0.06;\ndx = d_x*0.01;\ndy = d_y*0.01;\nq1 = 1;\n\nq23 = int(rand(1000))/1000;\nq24 = int(rand(1000))/1000;\nq25 = (int(rand(1000))/1000)*6.28;\nq26 = q25 - 3.14;\nq27 = (int(rand(1000))/12000)+0.04;\n\nq28 = int(rand(1000))/1000;\nq29 = int(rand(1000))/1000;\nq30 = (int(rand(1000))/1000)*6.28;\nq31 = q30 - 3.14;\nq32 = (int(rand(1000))/14000)+0.04;","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1 = (0.5 + ((uv_orig - 0.5) * aspect.wz));\n  vec2 help_uv_2;\n  vec2 base_3;\n  base_3 = ((vec2(0.5, 0.5) + (\n    (tmpvar_1 - vec2(0.5, 0.5))\n   * vec2(2.0, 2.0))) - 0.5);\n  vec2 tmpvar_4;\n  tmpvar_4.x = ((base_3.x * base_3.x) - (base_3.y * base_3.y));\n  tmpvar_4.y = ((base_3.x * base_3.y) + (base_3.y * base_3.x));\n  vec2 tmpvar_5;\n  tmpvar_5.x = ((base_3.x * tmpvar_4.x) - (base_3.y * tmpvar_4.y));\n  tmpvar_5.y = ((base_3.x * tmpvar_4.y) + (base_3.y * tmpvar_4.x));\n  vec2 tmpvar_6;\n  tmpvar_6.x = ((base_3.x * tmpvar_5.x) - (base_3.y * tmpvar_5.y));\n  tmpvar_6.y = ((base_3.x * tmpvar_5.y) + (base_3.y * tmpvar_5.x));\n  vec2 tmpvar_7;\n  tmpvar_7.x = ((base_3.x * tmpvar_6.x) - (base_3.y * tmpvar_6.y));\n  tmpvar_7.y = ((base_3.x * tmpvar_6.y) + (base_3.y * tmpvar_6.x));\n  help_uv_2 = (0.5 + tmpvar_7);\n  vec2 tmpvar_8;\n  tmpvar_8 = (vec2(0.5, 0.5) + (help_uv_2 - vec2(0.5, 0.5)));\n  help_uv_2 = tmpvar_8;\n  float zoom_9;\n  zoom_9 = (4.0 * time);\n  vec2 tmpvar_10;\n  tmpvar_10 = (tmpvar_8 - vec2(0.499, 0.5));\n  float tmpvar_11;\n  tmpvar_11 = sqrt(dot (tmpvar_10, tmpvar_10));\n  float tmpvar_12;\n  float tmpvar_13;\n  tmpvar_13 = (min (abs(\n    (tmpvar_10.x / tmpvar_10.y)\n  ), 1.0) / max (abs(\n    (tmpvar_10.x / tmpvar_10.y)\n  ), 1.0));\n  float tmpvar_14;\n  tmpvar_14 = (tmpvar_13 * tmpvar_13);\n  tmpvar_14 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_14) + 0.05368138) * tmpvar_14) - 0.1173503)\n     * tmpvar_14) + 0.1938925) * tmpvar_14) - 0.3326756)\n   * tmpvar_14) + 0.9999793) * tmpvar_13);\n  tmpvar_14 = (tmpvar_14 + (float(\n    (abs((tmpvar_10.x / tmpvar_10.y)) > 1.0)\n  ) * (\n    (tmpvar_14 * -2.0)\n   + 1.570796)));\n  tmpvar_12 = (tmpvar_14 * sign((tmpvar_10.x / tmpvar_10.y)));\n  if ((abs(tmpvar_10.y) > (1e-08 * abs(tmpvar_10.x)))) {\n    if ((tmpvar_10.y < 0.0)) {\n      if ((tmpvar_10.x >= 0.0)) {\n        tmpvar_12 += 3.141593;\n      } else {\n        tmpvar_12 = (tmpvar_12 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_12 = (sign(tmpvar_10.x) * 1.570796);\n  };\n  vec2 x_15;\n  x_15 = (tmpvar_1 - vec2(0.5, 0.5));\n  vec4 tmpvar_16;\n  tmpvar_16.w = 1.0;\n  tmpvar_16.xyz = vec3((clamp ((1.0 - \n    (0.5 + (((1.0 - \n      abs(((fract(\n        (vec2((((0.6366196 * tmpvar_12) + log(\n          (1.0/(tmpvar_11))\n        )) + zoom_9)) * 0.5)\n      ) * 2.0) - 1.0))\n    ) - 0.5) * 0.999))\n  ), 0.0, 1.0).x * clamp ((1.0 - \n    (sqrt(dot (x_15, x_15)) / 0.4)\n  ), 0.0, 1.0)));\n  ret = tmpvar_16.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = texture (sampler_main, uv).xyz;\n  ret = tmpvar_1.xyz;\n }","warp_hlsl":"float2 complex_mul(float2 factorA, float2 factorB){\n   return float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);\n}\n\nfloat2 complex_pow(float2 base, int exponent){\n   float2 exponentiation = float2(1,0);\n   for(int i = 0; i<exponent; i++){\n      exponentiation = complex_mul(base,exponentiation);\n   }\n   return exponentiation;\n}\n\nfloat2 complex_square(float2 domain){\n   return complex_mul(domain,domain);\n}\n\nfloat2 complex_div(float2 numerator, float2 denominator){\n   return float2( numerator.x*denominator.x + numerator.y*denominator.y,\n                  numerator.y*denominator.x - numerator.x*denominator.y)/\n          (denominator.x*denominator.x + denominator.y*denominator.y);\n}\n\nfloat2 uv_aspect(float2 uvo, float2 uvm, float2 aspectr, float2 motion_scale){\n   return 0.5 + (lerp(uvo,uvm,motion_scale)-0.5)*aspectr;\n}\n\nfloat2 uv_scale(float2 domain, float2 center, float2 scale){\n   return center + (domain-center)*scale;\n}\n\nfloat2 uv_torus_mirror(float2 domain, float cutoff){\n   return 0.5 + (1.0 - abs( frac( domain * 0.5 ) * 2 - 1.0 )-0.5)*cutoff;\n}\n\nbool mask_rectangle(float2 domain, float2 position, float2 dimensions){\n   return (domain.x>position.x-dimensions.x)*(domain.x<position.x+dimensions.x)*\n          (domain.y>position.y-dimensions.y)*(domain.y<position.y+dimensions.y);\n}\n\nbool mask_circle(float2 domain, float2 position, float radius){\n   return length(domain-position)<radius;\n}\n\nbool mask_spiral_logarithmic(float2 domain, float2 center, int fins, float thickness, float spiral_factor, float zoom){\n   float2 c = domain - center;\n   float rad_hq = length(c);\n   float ang_hq = atan2(c.x,c.y);\n\n   return frac(fins*ang_hq*M_INV_PI_2 + spiral_factor*log(1/rad_hq)+zoom)<thickness;\n}\n\nfloat figure_spiral_logarithmic(float2 domain, float2 center, int fins, float thickness, float spiral_factor, float zoom){\n   float2 c = domain - center;\n   float rad_hq = length(c);\n   float ang_hq = atan2(c.x,c.y);\n\n   return saturate(1-uv_torus_mirror(fins*ang_hq*M_INV_PI_2*2 + spiral_factor*log(1/rad_hq)+zoom,0.999)/thickness);\n}\n\nfloat figure_circle(float2 domain, float2 position, float radius){\n   return saturate(1-length(domain-position)/radius);\n}\n\nfloat figure_orb_of_3(float2 domain){\n   float2 help_uv = domain;\n   help_uv = uv_scale(help_uv, 0.5, 4);\n   help_uv = 0.5 + complex_pow(help_uv-0.5,3);\n   help_uv = uv_scale(help_uv, 0.5, 1);\n\n   return figure_circle(help_uv,float2(0,0.5),0.6);\n}\n\nfloat figure_orb_of_spiral_of_3(float2 domain){\n   float2 help_uv = domain;\n   help_uv = uv_scale(help_uv, 0.5, 2);\n   help_uv = 0.5 + complex_pow(help_uv-0.5,5);\n   help_uv = uv_scale(help_uv, 0.5, 1);\n\n   return figure_spiral_logarithmic(help_uv, float2(0.499,0.5), 2, 1, 1, 4*time)*figure_circle(domain,0.5,0.4);\n}\n\nshader_body\n{\nfloat2 base_uv = uv_aspect(uv_orig, uv, aspect.wz, 0);\nret = mask_rectangle(base_uv,0.5,0.1);\nret = mask_spiral_logarithmic(base_uv, 0.5, -1, 0.5, 0.4, time);\nfloat2 scaled_uv = uv_scale(base_uv, 0.5, 1);\nfloat2 mirrored_uv = uv_torus_mirror(scaled_uv,1);\nret = mask_circle(mirrored_uv,0.5,0.1);\nret = mask_spiral_logarithmic(base_uv, 0.5, -1, 0.5, 0.4, time);\n//ret = figure_circle(mirrored_uv,float2(-0.5,0.5),1.2);\nret = figure_orb_of_3(base_uv);\nret = figure_orb_of_spiral_of_3(base_uv);\n//ret = figure_spiral_logarithmic(base_uv, 0.5, 4, 0.75, 2, time*2);\n\n}","comp_hlsl":"shader_body\n{\nret = GetPixel(uv);\n}"}