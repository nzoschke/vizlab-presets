{"version":2,"baseVals":{"rating":5,"gammaadj":1,"wave_thick":1,"wave_a":0.004,"wave_scale":0.037,"wave_smoothing":0,"wave_mystery":-0.44,"modwavealphastart":1,"modwavealphaend":1,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_y":0.04,"ob_size":0.11,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":0,"mv_b":0,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":100,"additive":1,"num_inst":50,"rad":0.01,"ang":3.20442,"tex_zoom":6.23873,"g":1,"b":1,"a":0,"r2":1,"b2":1,"border_a":0.82},"init_eqs_str":"a.index=0;a.q32=0;a.q2=0;","frame_eqs_str":"a.index=a.instance*a.q32;a.x=a.gmegabuf[Math.floor(a.index)];a.y=a.gmegabuf[Math.floor(a.index+1)];a.rad=2*a.gmegabuf[Math.floor(a.index+4)];a.r=a.gmegabuf[Math.floor(a.index+5)];a.g=a.gmegabuf[Math.floor(a.index+6)];a.b=a.gmegabuf[Math.floor(a.index+7)];a.r2=a.r;a.g2=a.g;a.b2=a.b;a.x=.5+div(a.x-.5,a.q2);","init_eqs_eel":"","frame_eqs_eel":"index = instance*q32;\n\nx = gmegabuf(index);\ny = gmegabuf(index+1);\n\nrad = gmegabuf(index+4)*2;\n\nr = gmegabuf(index+5);\ng = gmegabuf(index+6);\nb = gmegabuf(index+7);\n\nr2 = r; g2 = g; b2 = b;\n\n\nx = 0.5 + (x-0.5)/q2;"},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"textured":1,"x":0.74,"y":0.27,"rad":0.64927,"ang":3.83274,"tex_zoom":0.81948,"g":1,"g2":0,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"vx = 0","frame_eqs_str":"","init_eqs_eel":"vx = 0","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"textured":1,"rad":0.33,"tex_zoom":0.73458,"r":0,"g":1,"border_a":0,"enabled":0},"init_eqs_str":"vx = 0","frame_eqs_str":"","init_eqs_eel":"vx = 0","frame_eqs_eel":""},{"baseVals":{"sides":64,"additive":1,"thickoutline":1,"rad":0.16283,"ang":0.75398,"tex_zoom":0.73458,"r":0,"g":1,"border_a":0,"enabled":0},"init_eqs_str":"vx = 0","frame_eqs_str":"","init_eqs_eel":"vx = 0","frame_eqs_eel":""}],"waves":[{"baseVals":{"usedots":1,"scaling":2.44415,"smoothing":0,"a":0,"enabled":0},"init_eqs_str":"t2 = 0;\nt3 = 0;\nt4 = 0;\ncl = 0;","frame_eqs_str":"t1 = 0;\nv = 0.01;\nj = j + (bass)*0.01;\nj2 = j2 + (mid_att)*0.01;\nj3 = j3 + (treb_att)*0.01;\nt2 = j;\nt3 = j2;\nt4 = j3;\n//t5 = 0;\nk = k*0.99 + 10*mid/fps;\nt5 = -k;\n\ncl1 = cl1 + 0.002;\ncl1 = if(above(cl1,1),0,cl1);\ncl1 = if(below(cl1,0),1,cl1);\nt8 = cl1;\n\ncl2 = cl2 -1*q1;\ncl2 = if(above(cl2,1),0,cl2);\ncl2 = if(below(cl2,0),1,cl2);\nt7 = cl2;\n\ncl3 = cl3 +0.001;\ncl3 = if(above(cl3,1),0,cl3);\ncl3 = if(below(cl3,0),1,cl3);\nt6 = cl3;","point_eqs_str":"xx = ((sample*0983624912364)%10000000+100)/10000000;\nyy = ((xx*1896575575)%10000000+100)/10000000;\nzz = ((yy*58652340875)%10000000+100)/10000000;\n\n\nd = sqrt(sqr(xx)+sqr(yy)+sqr(zz));\n\nzz = zz + t8 - if(above(zz+t8,1),1,0) - 0.5;\nxx = xx + t7 - if(above(xx+t7,1),1,0) - 0.5;\nyy = yy + t6 - if(above(yy+t6,1),1,0) - 0.5;\n\nv = 0.001;\n\nw = 1;// (sample*sin(time*0.3)*0.01-1);\nbb = d*d*0.5;\nn= 0.3;\ns1 = sin(sin(t2*w+bb)*n);\ns2 = sin(sin(t3*w+bb)*n);\ns3 = sin(sin(t4*w+bb)*n);\nc1 = cos(sin(t2*w+bb)*n);\nc2 = cos(sin(t3*w+bb)*n);\nc3 = cos(sin(t4*w+bb)*n);\n\nz = (c3*s1*c2 + s3*s2)*xx - (c3*s1*s2-s3*c2)*yy + c3*c1*zz;\nx1 = (c1*c2*xx + c1*s2*yy - s1*zz);\ny1 = ((s3*s1*c2 - c3*s2)*xx + (s3*s1*s2+c3*c2)*yy + s3*c1*zz);\n\nzoom = .5*(1/(z+0.5));\nx = 0.5 + zoom*x1 + sin(time*0.1)*0.;;\ny = 0.5 + zoom*y1 + cos(time*0.16801)*0.;\n\npi3 = 3.1415*2*0.3333;\nt = z*2+t2*1;\nc=3;\n//r = sin(t)*c;\n\n//g = sin(t+pi3)*c;\n\n//b = sin(t-pi3)*c;\n\n\nr = if(above(r,1),1,r);\nr = if(below(r,0),0,r);\ng = if(above(g,1),1,g);\ng = if(below(g,0),0,g);\nb = if(above(b,1),1,b);\nb = if(below(b,0),0,b);\n\na = 0.4;","init_eqs_eel":"t2 = 0;\nt3 = 0;\nt4 = 0;\ncl = 0;","frame_eqs_eel":"t1 = 0;\nv = 0.01;\nj = j + (bass)*0.01;\nj2 = j2 + (mid_att)*0.01;\nj3 = j3 + (treb_att)*0.01;\nt2 = j;\nt3 = j2;\nt4 = j3;\n//t5 = 0;\nk = k*0.99 + 10*mid/fps;\nt5 = -k;\n\ncl1 = cl1 + 0.002;\ncl1 = if(above(cl1,1),0,cl1);\ncl1 = if(below(cl1,0),1,cl1);\nt8 = cl1;\n\ncl2 = cl2 -1*q1;\ncl2 = if(above(cl2,1),0,cl2);\ncl2 = if(below(cl2,0),1,cl2);\nt7 = cl2;\n\ncl3 = cl3 +0.001;\ncl3 = if(above(cl3,1),0,cl3);\ncl3 = if(below(cl3,0),1,cl3);\nt6 = cl3;","point_eqs_eel":"xx = ((sample*0983624912364)%10000000+100)/10000000;\nyy = ((xx*1896575575)%10000000+100)/10000000;\nzz = ((yy*58652340875)%10000000+100)/10000000;\n\n\nd = sqrt(sqr(xx)+sqr(yy)+sqr(zz));\n\nzz = zz + t8 - if(above(zz+t8,1),1,0) - 0.5;\nxx = xx + t7 - if(above(xx+t7,1),1,0) - 0.5;\nyy = yy + t6 - if(above(yy+t6,1),1,0) - 0.5;\n\nv = 0.001;\n\nw = 1;// (sample*sin(time*0.3)*0.01-1);\nbb = d*d*0.5;\nn= 0.3;\ns1 = sin(sin(t2*w+bb)*n);\ns2 = sin(sin(t3*w+bb)*n);\ns3 = sin(sin(t4*w+bb)*n);\nc1 = cos(sin(t2*w+bb)*n);\nc2 = cos(sin(t3*w+bb)*n);\nc3 = cos(sin(t4*w+bb)*n);\n\nz = (c3*s1*c2 + s3*s2)*xx - (c3*s1*s2-s3*c2)*yy + c3*c1*zz;\nx1 = (c1*c2*xx + c1*s2*yy - s1*zz);\ny1 = ((s3*s1*c2 - c3*s2)*xx + (s3*s1*s2+c3*c2)*yy + s3*c1*zz);\n\nzoom = .5*(1/(z+0.5));\nx = 0.5 + zoom*x1 + sin(time*0.1)*0.;;\ny = 0.5 + zoom*y1 + cos(time*0.16801)*0.;\n\npi3 = 3.1415*2*0.3333;\nt = z*2+t2*1;\nc=3;\n//r = sin(t)*c;\n\n//g = sin(t+pi3)*c;\n\n//b = sin(t-pi3)*c;\n\n\nr = if(above(r,1),1,r);\nr = if(below(r,0),0,r);\ng = if(above(g,1),1,g);\ng = if(below(g,0),0,g);\nb = if(above(b,1),1,b);\nb = if(below(b,0),0,b);\n\na = 0.4;"},{"baseVals":{"scaling":7.7518,"smoothing":0,"a":0.21,"enabled":0},"init_eqs_str":"t2 = 0;\nt3 = 0;\nt4 = 0;\ncl = 0;","frame_eqs_str":"t8 = 1;\n\nt1 = 0.5;\nt2 = 0.9;","point_eqs_str":"d = d*0.85 + (value1)*1;\n\nx = 0.5 + d*sample*(1-sample);\ny = 0.9 - sample*0.8;","init_eqs_eel":"t2 = 0;\nt3 = 0;\nt4 = 0;\ncl = 0;","frame_eqs_eel":"t8 = 1;\n\nt1 = 0.5;\nt2 = 0.9;","point_eqs_eel":"d = d*0.85 + (value1)*1;\n\nx = 0.5 + d*sample*(1-sample);\ny = 0.9 - sample*0.8;"},{"baseVals":{"enabled":1,"samples":442,"additive":1,"scaling":5.92556,"smoothing":0,"a":0.16},"init_eqs_str":"a.d=0;a.xx=0;a.w=0;a.index2=0;a.ppo=0;a.index=0;a.smaller=0;a.t1=0;a.j=0;a.q31=0;a.smallestfind=0;a.distance=0;a.i=0;a.t2=0;a.q2=0;a.q32=0;a.yy=0;a.findindex=0;","frame_eqs_str":"a.t1=0;a.t2=0;","point_eqs_str":"a.ppo=11;a.index=a.t2*a.q32;a.x=.5+div(a.gmegabuf[Math.floor(a.index)]-.5,a.q2);a.y=.5+div(a.gmegabuf[Math.floor(a.index+1)]-.5,a.q2);a.i=0;for(var b=a.j=0;b<a.q31;b++)a.d=sqrt(sqr(a.gmegabuf[Math.floor(a.index)]-a.gmegabuf[Math.floor(a.i)])+sqr(a.gmegabuf[Math.floor(a.index+1)]-a.gmegabuf[Math.floor(a.i+1)])),a.megabuf[Math.floor(a.j)]=a.i,a.megabuf[Math.floor(a.j+1)]=a.d,a.j+=2,a.i+=a.q32;for(b=a.i=0;7>b;b++){a.j=a.i;a.smallestfind=100;a.findindex=-1;for(var c=0;c<a.q31-a.j;c++)a.distance=\na.megabuf[Math.floor(2*a.j+1)],a.smaller=above(a.smallestfind,a.distance),a.smallestfind=.00001<Math.abs(a.smaller)?a.distance:a.smallestfind,a.findindex=.00001<Math.abs(a.smaller)?2*a.j:a.findindex,a.j+=1;a.j=a.megabuf[Math.floor(a.i)];a.d=a.megabuf[Math.floor(a.i+1)];a.megabuf[Math.floor(a.i)]=a.megabuf[Math.floor(a.findindex)];a.megabuf[Math.floor(a.i+1)]=a.megabuf[Math.floor(a.findindex+1)];a.megabuf[Math.floor(a.findindex)]=a.j;a.megabuf[Math.floor(a.findindex+1)]=a.d;a.i+=1}a.index2=mod(a.t1,\na.ppo);a.i=.00001<Math.abs(below(a.index2,a.ppo-4))?a.megabuf[Math.floor(a.index2)]:a.index;a.xx=.5+div(a.gmegabuf[Math.floor(a.i)]-.5,a.q2);a.yy=.5+div(a.gmegabuf[Math.floor(a.i+1)]-.5,a.q2);a.w=div(Math.asin(1)*a.index2,4);a.x=.00001<Math.abs(equal(mod(a.index2,2),0))?a.x:a.xx;a.y=.00001<Math.abs(equal(mod(a.index2,2),0))?a.y:a.yy;a.b=below(a.index2,a.ppo-1)*above(a.index2,0);a.r=a.b;a.g=a.b;a.t2+=equal(mod(a.t1,a.ppo),a.ppo-1);a.t1+=1;","init_eqs_eel":"","frame_eqs_eel":"t1 = 0;\nt2 = 0;\n\n","point_eqs_eel":"// q32 number of attributes\n// q31 number of objects\n\nppo = 11; // number of points used for each object\nindex = t2*q32; // object's index\n\nx = 0.5 +(gmegabuf(index)-0.5)/q2;\ny = 0.5 + (gmegabuf(index+1)-0.5)/q2;\n\n// collecting pairs of index and distance to the current object in a local buffer\ni = 0;\nj = 0; \nloop(q31,\n     d = sqrt( sqr(gmegabuf(index)-gmegabuf(i)) + sqr(gmegabuf(index+1)-gmegabuf(i+1)));\n     megabuf(j)   = i; // store index/distance pairs\n     megabuf(j+1) = d; \n     j = j+2;\n     i = i+q32;\n    );\n\n// sort that buffer, but only 5 cycles for the 5 nearest objects\ni = 0;\nloop( 7,\n      j = i;\n      smallestfind = 100;\n      findindex = -1;\n      loop( q31-j,\n            distance =megabuf(j*2+1);\n            smaller = above( smallestfind, distance);\n            smallestfind = if(smaller, distance, smallestfind);\n            findindex = if( smaller, j*2, findindex);\n            j = j + 1;\n          );\n\n      // now that the nearest object was found, swap it to the buffer's top\n\n      j = megabuf(i);\n      d = megabuf(i+1);\n\n      megabuf(i)   = megabuf(findindex);\n      megabuf(i+1) = megabuf(findindex+1);\n      megabuf(findindex)   = j;\n      megabuf(findindex+1) = d;\n\n      i = i+1;\n    );\n\n\nindex2 = (t1)%ppo;\ni = if(below(index2,ppo-4),megabuf(index2),index);\nxx = 0.5 + (gmegabuf(i)-0.5)/q2;\nyy = 0.5 + (gmegabuf(i+1)-0.5)/q2;\nw = asin(1)*index2/4;\n//xx = x + sin(w)*0.1;\n//yy = y + cos(w)*0.1;\nx = if( equal(index2%2,0), x, xx);\ny = if( equal(index2%2,0), y, yy);\n\n\nb = below(index2,ppo-1)*above(index2,0);\nr = b;\ng = b;\n\n\nt2 = t2 + equal(t1%ppo,ppo-1);\nt1 = t1 + 1;"},{"baseVals":{"thick":1,"additive":1,"scaling":5.92556,"smoothing":0,"g":0,"b":0,"a":0.34,"enabled":0},"init_eqs_str":"t2 = 0","frame_eqs_str":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_str":"sample = 1-sample;\nxxx = xx;\nyyy = yy;\nxx = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\nyy = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;\n\nd = 1/sqrt(sqr(xx-xxx)+sqr(yy-yyy));\ndd = dd*0.95 + (value1);\nddd = dd*sample*(1-sample)*d;\nddd = sample*(1-sample)*sin(sample*120)*d*0.1;\nx = xx + (yy-yyy)*ddd;\ny = yy - (xx-xxx)*ddd;\n\nx = 0.5 + (x-0.5)*q9;\ny = 0.5 + (y-0.5)*q10;\n","init_eqs_eel":"t2 = 0","frame_eqs_eel":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_eel":"sample = 1-sample;\nxxx = xx;\nyyy = yy;\nxx = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\nyy = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;\n\nd = 1/sqrt(sqr(xx-xxx)+sqr(yy-yyy));\ndd = dd*0.95 + (value1);\nddd = dd*sample*(1-sample)*d;\nddd = sample*(1-sample)*sin(sample*120)*d*0.1;\nx = xx + (yy-yyy)*ddd;\ny = yy - (xx-xxx)*ddd;\n\nx = 0.5 + (x-0.5)*q9;\ny = 0.5 + (y-0.5)*q10;\n"}],"init_eqs_str":"a.index2=0;a.index4=0;a.index=0;a.q22=0;a.q21=0;a.q29=0;a.movex=0;a.q1=0;a.dec_med=0;a.index3=0;a.rott=0;a.is_beat=0;a.q31=0;a.q23=0;a.k1=0;a.q24=0;a.dec_slow=0;a.q4=0;a.q26=0;a.p2=0;a.avg=0;a.movez=0;a.beat=0;a.p1=0;a.peak=0;a.q2=0;a.q27=0;a.q3=0;a.t0=0;a.q32=0;a.q28=0;a.q30=0;a.q20=0;a.p1=Math.floor(rand(16));a.p2=a.p1;","frame_eqs_str":"a.dec_med=pow(.96,div(30,a.fps));a.dec_slow=pow(.99,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.4+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,8);a.index2=mod(a.index2+a.is_beat*bnot(a.index),4);a.index3=mod(a.index3+a.is_beat*bnot(a.index)*bnot(a.index2),3);a.q20=a.avg;a.q21=\na.beat;a.q22=a.peak;a.q23=a.index;a.q24=a.is_beat;a.q26=a.bass+a.mid+a.treb;a.k1=a.is_beat*equal(a.index,0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_med*a.p2+(1-a.dec_med)*a.p1;a.rott=div(3.14159265359*a.p2,4);a.q27=8-a.index;a.q28=Math.sin(div(a.time,7));a.q29=a.index4;a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.q3=-a.q2;a.q4=a.q1;a.mv_a=.5*a.q1;a.movez+=div(.3,a.fps);a.q29=a.movez;a.movex+=div(.09,a.fps)*a.q2;a.q30=a.movex;a.q31=sqr(Math.sin(div(a.time,17)));a.q32=sqr(Math.cos(div(a.time,17)));\na.zoom=1;a.rot=0;a.dx=0;a.warp=.2;","pixel_eqs_str":"","init_eqs_eel":"p1 = int(rand(16));\np2 = p1;","frame_eqs_eel":"dec_med = pow (0.96, 30/fps);\ndec_slow = pow (0.99, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .4+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %8;\nindex2 = (index2 + is_beat*bnot(index))%4;\nindex3 = (index3 + is_beat*bnot(index)*bnot(index2))%3;\n\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq23 = index;\nq24 = is_beat;\nq26 = bass + mid + treb;\n\n//k1 =  is_beat*bnot(index)*bnot(index2);\n\nk1 =  is_beat*equal(index,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\nrott = p2 * 3.14159265359/4;\n\nq27 = 8-index;\nq28 = sin(time/7);\nq29 = index4;\n\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\nmv_a = .5 * q1;\n\nmovez = movez + .01 * 30/fps ;\nq29 = movez;\n\nmovex = movex + .003 * 30/fps *q2;\nq30 = movex;\n\nq31 = sqr(sin(time/17));\nq32 = sqr(cos(time/17));\n\nzoom = 1.0;\nrot = .0;\ndx = .0;\nwarp = .2;","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 help_uv_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = fract(((uv_orig * vec2(8.0, 12.0)) - 0.5));\n  help_uv_1 = (min (tmpvar_2, (1.0 - tmpvar_2)) * 2.0);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = vec3((clamp ((\n    (max (help_uv_1.x, help_uv_1.y) - 1.0)\n   + 0.1), 0.0, 1.0) / 0.1));\n  ret = tmpvar_3.xyz;\n }","comp":"vec3 xlat_mutableneu;\nvec3 xlat_mutableret1;\n shader_body { \n  vec2 uv_1;\n  float inten_2;\n  float dist_3;\n  vec2 uv2_4;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  uv2_4.x = -(uv_1.y);\n  uv2_4.y = uv_1.x;\n  uv2_4 = (uv2_4 * aspect.yx);\n  dist_3 = (1.0 - fract((0.25 + q29)));\n  inten_2 = ((pow (dist_3, 0.5) * (1.0 - \n    (dist_3 * dist_3)\n  )) * 2.0);\n  vec2 tmpvar_5;\n  tmpvar_5 = fract(((\n    ((3.0 * uv2_4) * dist_3)\n   + 0.5) + q31));\n  xlat_mutableneu = (texture (sampler_main, tmpvar_5).xyz + (2.0 * (\n    (texture (sampler_blur1, tmpvar_5).xyz * scale1)\n   + bias1)));\n  xlat_mutableret1 = max (vec3(0.0, 0.0, 0.0), (xlat_mutableneu * inten_2));\n  uv2_4.x = -(uv_1.y);\n  uv2_4.y = uv_1.x;\n  uv2_4 = (uv2_4 * aspect.yx);\n  dist_3 = (1.0 - fract((0.5 + q29)));\n  inten_2 = ((pow (dist_3, 0.5) * (1.0 - \n    (dist_3 * dist_3)\n  )) * 2.0);\n  vec2 tmpvar_6;\n  tmpvar_6 = fract(((\n    ((3.0 * uv2_4) * dist_3)\n   + 0.5) + q31));\n  xlat_mutableneu = (texture (sampler_main, tmpvar_6).xyz + (2.0 * (\n    (texture (sampler_blur1, tmpvar_6).xyz * scale1)\n   + bias1)));\n  xlat_mutableret1 = max ((xlat_mutableret1 * 0.9), (xlat_mutableneu * inten_2));\n  uv2_4 = (uv_1 * aspect.yx);\n  dist_3 = (1.0 - fract((0.75 + q29)));\n  inten_2 = ((pow (dist_3, 0.5) * (1.0 - \n    (dist_3 * dist_3)\n  )) * 2.0);\n  vec2 tmpvar_7;\n  tmpvar_7 = fract(((\n    ((3.0 * uv2_4) * dist_3)\n   + 0.5) + q31));\n  xlat_mutableneu = (texture (sampler_main, tmpvar_7).xyz + (2.0 * (\n    (texture (sampler_blur1, tmpvar_7).xyz * scale1)\n   + bias1)));\n  xlat_mutableret1 = max ((xlat_mutableret1 * 0.9), (xlat_mutableneu * inten_2));\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = ((0.5 * xlat_mutableret1) + (vec3(0.0, 0.0, 0.15) * (0.5 + uv_1.y)));\n  ret = tmpvar_8.xyz;\n }","warp_hlsl":"float figure_borders(float2 domain, float thickness){\n   float2 help_uv = frac(domain-0.5);\n   help_uv = min(help_uv,1-help_uv)*2;\n   return saturate(max(help_uv.x,help_uv.y)-1+thickness)/(thickness);\n}\n\nshader_body\n{\nfloat2 help_uv = uv_orig*float2(8,12);\nret = figure_borders(help_uv,0.1);\n}","comp_hlsl":"float3 ret1, neu, blur;\n\nshader_body\n{\nfloat2 uv2;\nfloat ang2, c, s;\nuv -= 0.5;\nuv *= aspect.xy;    \n\nfloat dist = 1;\nfloat inten = 1;\nret1 = 0;\nint anz = 3;\nint n = 1;\nwhile (n <= anz) {\n    ang2 = n/anz;\n    c = (ang2);\n    s = 1-(ang2);\n    uv2.x =  uv.x*c - uv.y*s;\n    uv2.y =  uv.x*s + uv.y*c;\n    uv2 *= aspect.yx;\n    dist = 1-frac(.25*n+q29); //evtl sqrt !\n    inten =  pow(dist,.5)*(1-dist*dist)*2;\n    float2 uv3 = frac(3*uv2*dist + .5 + q31);;\n    neu =  GetPixel (uv3) + 2*GetBlur1(uv3);\n\n    ret1 = max(ret1*.9,neu*inten);\nn++;\n}\n\nret = .5*ret1 + 0.5*float3(0,0,.3)*(.5+uv.y) ;\n//ret = GetPixel(uv+.5);\n}"}