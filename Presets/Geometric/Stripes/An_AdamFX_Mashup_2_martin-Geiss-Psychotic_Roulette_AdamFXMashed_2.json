{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":2,"wave_dots":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.012,"wave_smoothing":0.9,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.5,"wave_g":0.4,"wave_b":0.3,"ob_r":1,"ob_g":1,"ob_b":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":5,"mv_r":0.1,"mv_g":0,"mv_b":0,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"samples":432,"thick":1,"additive":1},"init_eqs_str":"a.zp3=0;a.xp=0;a.xs=0;a.yp=0;a.xp3=0;a.scale=0;a.q1=0;a.scale1=0;a.repeat=0;a.ys=0;a.yp2=0;a.xp2=0;a.ang=0;a.yp3=0;a.zp=0;a.q2=0;a.zp2=0;a.q3=0;","frame_eqs_str":"","point_eqs_str":"a.scale=.1;a.repeat=Math.sin(.3*a.time)+1;a.xp=Math.sin(6.283*a.sample*a.repeat)*a.scale;a.yp=Math.cos(6.283*a.sample*a.repeat)*a.scale;a.zp=0;a.scale1=.03*Math.cos(25.132*a.sample*a.repeat)+.97;a.scale1=1-pow(1-a.scale1,.5);a.xp*=a.scale1;a.yp*=a.scale1;a.ang=3.1415*a.sample*2.2;a.xp2=a.xp*Math.cos(a.ang)-a.zp*Math.sin(a.ang);a.yp2=a.yp;a.zp2=a.xp*Math.sin(a.ang)+a.zp*Math.cos(a.ang);a.ang=2.4*a.time;a.xp3=a.xp2*Math.cos(a.ang)-a.zp2*Math.sin(a.ang);a.yp3=a.yp2;a.zp3=a.xp2*\nMath.sin(a.ang)+a.zp2*Math.cos(a.ang);a.zp3+=2.1;a.xs=div(a.xp3,a.zp3);a.ys=div(a.yp3,a.zp3);a.x=a.xs+.5;a.y=1.333*a.ys+.5;a.r=a.q1;a.g=a.q2;a.b=a.q3;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"scale=0.1;\nrepeat=sin(time*0.3)*1+1;\n\nxp=sin(sample*6.283*repeat) * scale;\nyp=cos(sample*6.283*repeat) * scale;\nzp=0;\n\n//arrow shape\n//xp=xp* ( 1+ below(yp,0)*-0.9 );\nscale1=cos(sample*6.283*4*repeat)*0.03+0.97;\nscale1=1- pow(1-scale1,0.5);\nxp=xp*scale1;yp=yp*Scale1;\n\n//spin shape\nang=sample*3.1415*2.2;\nxp2=xp*cos(ang) - zp*sin(ang);\nyp2=yp;\nzp2=xp*sin(ang) + zp*cos(ang);\n\n//spin object\nang=time*2.4;\nxp3=xp2*cos(ang) - zp2*sin(ang);\nyp3=yp2;\nzp3=xp2*sin(ang) + zp2*cos(ang);\n\n//a=(atan(xp3/zp3))/6.28;\n//a=abs(a);\n\nzp3=zp3+2.1;\n\nxs=xp3/zp3;\nys=yp3/zp3;\n\nx=xs+0.5;\ny=ys*1.333+0.5;\n\nr=q1;g=q2;b=q3"},{"baseVals":{"enabled":1,"usedots":1,"thick":1,"additive":1,"a":0.3},"init_eqs_str":"a.zp3=0;a.xp=0;a.xs=0;a.yp=0;a.xp3=0;a.scale=0;a.q1=0;a.scale1=0;a.repeat=0;a.ys=0;a.yp2=0;a.xp2=0;a.ang=0;a.yp3=0;a.zp=0;a.q2=0;a.zp2=0;a.q3=0;","frame_eqs_str":"","point_eqs_str":"a.scale=.4;a.repeat=Math.sin(.3*a.time)+1;a.xp=Math.sin(6.283*a.sample*a.repeat)*a.scale;a.yp=Math.cos(6.283*a.sample*a.repeat)*a.scale;a.zp=0;a.scale1=.03*Math.cos(25.132*a.sample*a.repeat)+.97;a.scale1=1-pow(1-a.scale1,.5);a.xp*=a.scale1;a.yp*=a.scale1;a.ang=3.1415*a.sample*2.2;a.xp2=a.xp*Math.cos(a.ang)-a.zp*Math.sin(a.ang);a.yp2=a.yp;a.zp2=a.xp*Math.sin(a.ang)+a.zp*Math.cos(a.ang);a.ang=2.4*a.time;a.xp3=a.xp2*Math.cos(a.ang)-a.zp2*Math.sin(a.ang);a.yp3=a.yp2;a.zp3=a.xp2*\nMath.sin(a.ang)+a.zp2*Math.cos(a.ang);a.zp3+=2.1;a.xs=div(a.xp3,a.zp3);a.ys=div(a.yp3,a.zp3);a.x=a.xs+.5;a.y=1.333*a.ys+.5;a.r=a.q1;a.g=a.q2;a.b=a.q3;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"scale=0.4;\nrepeat=sin(time*0.3)*1+1;\n\nxp=sin(sample*6.283*repeat) * scale;\nyp=cos(sample*6.283*repeat) * scale;\nzp=0;\n\n//arrow shape\n//xp=xp* ( 1+ below(yp,0)*-0.9 );\nscale1=cos(sample*6.283*4*repeat)*0.03+0.97;\nscale1=1- pow(1-scale1,0.5);\nxp=xp*scale1;yp=yp*Scale1;\n\n//spin shape\nang=sample*3.1415*2.2;\nxp2=xp*cos(ang) - zp*sin(ang);\nyp2=yp;\nzp2=xp*sin(ang) + zp*cos(ang);\n\n//spin object\nang=time*2.4;\nxp3=xp2*cos(ang) - zp2*sin(ang);\nyp3=yp2;\nzp3=xp2*sin(ang) + zp2*cos(ang);\n\n//a=(atan(xp3/zp3))/6.28;\n//a=abs(a);\n\nzp3=zp3+2.1;\n\nxs=xp3/zp3;\nys=yp3/zp3;\n\nx=xs+0.5;\ny=ys*1.333+0.5;\n\nr=q1;g=q2;b=q3"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.index2=0;a.index4=0;a.index=0;a.q22=0;a.q21=0;a.q29=0;a.q1=0;a.dec_med=0;a.index3=0;a.rott=0;a.is_beat=0;a.q23=0;a.k1=0;a.q24=0;a.t_rel=0;a.dec_slow=0;a.q4=0;a.q26=0;a.p2=0;a.avg=0;a.movez=0;a.beat=0;a.p1=0;a.peak=0;a.q2=0;a.q27=0;a.q3=0;a.t0=0;a.q28=0;a.q20=0;","frame_eqs_str":"a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.99,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.5+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,8);a.index2=mod(a.index2+a.is_beat*bnot(a.index),4);a.index3=mod(a.index3+a.is_beat*bnot(a.index)*bnot(a.index2),3);a.q20=a.avg;a.q21=\na.beat;a.q22=a.peak;a.q23=a.index;a.q24=a.is_beat;a.q26=a.bass+a.mid+a.treb;a.k1=a.is_beat*equal(a.index,0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_slow*a.p2+(1-a.dec_slow)*a.p1;a.rott=div(3.14159265359*a.p2,2);a.q27=8-a.index;a.q28=.5+div(Math.sin(div(a.time,7)),10);a.q29=a.index4;a.mv_a=.2;a.t_rel=div(a.time,3);a.wave_a=Math.max(Math.sin(div(a.time,8))-.5,0);a.wave_a=0;a.wave_x=.5+.5*Math.sin(div(a.time,13));a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.q3=-a.q2;a.q4=a.q1;a.movez+=div(.3,a.fps);\na.q29=a.movez;a.zoom=1;a.rot=0;a.dx=.003;","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"dec_med = pow (0.9, 30/fps);\ndec_slow = pow (0.99, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .5+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %8;\nindex2 = (index2 + is_beat*bnot(index))%4;\nindex3 = (index3 + is_beat*bnot(index)*bnot(index2))%3;\n\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq23 = index;\nq24 = is_beat;\nq26 = bass + mid + treb;\n\n//k1 =  is_beat*bnot(index)*bnot(index2);\n\nk1 =  is_beat*equal(index,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_slow * p2+ (1-dec_slow)*p1;\nrott = p2 * 3.14159265359/2;\n\nq27 = 8-index;\nq28 = .5 + sin(time/7)/10;\nq29 = index4;\n\nmv_a = 0.2;\nt_rel = time/3;\nwave_a = max(sin(time/8)-.5,0);\nwave_a = 0;\nwave_x = .5+.5*sin(time/13);\n\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\nmovez = movez + .01 * 30/fps ;\nq29 = movez;\n\n\nzoom = 1;\nrot = .0;\ndx = .003","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  ret_1 = (tmpvar_2.xyz + ((tmpvar_2.xyz - \n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  ) * 0.3));\n  ret_1 = (ret_1 * 0.9);\n  ret_1 = (ret_1 + ((\n    (texture (sampler_noise_lq, ((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 0.1))).xyz - 0.5)\n   / 256.0) * 28.0));\n  vec3 tmpvar_3;\n  tmpvar_3 = mix (ret_1, vec3(dot (ret_1, vec3(0.32, 0.49, 0.29))), vec3(0.04, 0.04, 0.04));\n  ret_1 = tmpvar_3;\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = tmpvar_3;\n  ret = tmpvar_4.xyz;\n }","comp":" shader_body { \n  float ang2_1;\n  ang2_1 = ((ang * 0.1591549) + q30);\n  ang2_1 = (cos((43.9823 * ang2_1)) * 0.023);\n  ang2_1 = (ang2_1 * 6.283185);\n  vec2 tmpvar_2;\n  tmpvar_2.x = cos(ang2_1);\n  tmpvar_2.y = sin(ang2_1);\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_main, (0.5 + ((\n    ((8.0 / q31) * ((rad * sqrt(\n      dot (texsize.xy, texsize.xy)\n    )) * 0.5))\n   * tmpvar_2) * texsize.zw)));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = (tmpvar_3.xyz * (dot (tmpvar_3.xyz, vec3(0.32, 0.49, 0.29)) * 1.4));\n  ret = tmpvar_4.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_main, uv ).xyz;\n\n    // take the difference between the crisp and blurred images,\n    // then add it back into the image.  Creates spots and stripes over time.\n    ret += (ret - GetBlur1(uv))*0.3;\n    ret *= 0.9;\n\n   // add noise:\n   float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.1;// + rand_frame.xy;\n   ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0 * 28;\n\n   // desaturate over time, to keep the globs white\n   ret = lerp(ret, lum(ret), 0.04);\n}","comp_hlsl":"shader_body\n{\n    float2 uv2 = (uv - 0.5);\n  \n    float rad2 = rad*length(texsize.xy)*.5;\n    float ang2 = ang * M_INV_PI_2;\n        // ROTATION OVER TIME\n        ang2 += q30;   //rotate over time\n        // FIN TYPE\n        float fins = 7;//3 + floor(rand_preset.z*5.95);\n        ang2 = cos(ang2*M_PI_2*fins) * 0.023;\n\n    ang2 *= M_PI_2;\n    uv2 = .5 + 8/q31*rad2*float2(cos(ang2),sin(ang2))*texsize.zw;\n\n    ret = tex2D(sampler_main, uv2);\n    ret *= lum(ret)*1.4; // a little bit of overbright\n}"}