{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"echo_zoom":1,"wave_mode":7,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"brighten":1,"darken":1,"wave_a":0.001,"wave_scale":0.958,"wave_smoothing":0.45,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"ob_size":0,"ob_b":1,"ob_a":0.3,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"rad":0.04896,"tex_ang":1.00531,"tex_zoom":1.53117,"r":0.5,"g":1,"b":0.9,"r2":0.83,"g2":0.93,"b2":0.8,"a2":1,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"\ntrel = time/3;\n\nx = .5+sin(trel*2);\ny = .5+cos(trel*1.3);\n\n\n\ncent = sqrt((x-.5)*(x-.5)+(y-.5)*(y-.5));\n\nrad = .1*cent;\na = .8;","init_eqs_eel":"","frame_eqs_eel":"\ntrel = time/3;\n\nx = .5+sin(trel*2);\ny = .5+cos(trel*1.3);\n\n\n\ncent = sqrt((x-.5)*(x-.5)+(y-.5)*(y-.5));\n\nrad = .1*cent;\na = .8;"},{"baseVals":{"enabled":1,"sides":100,"additive":1,"x":0.26,"y":0.2,"rad":0.39317,"tex_zoom":0.9355,"r":0,"g":0.55,"b":0.5,"g2":0.4,"b2":0.4,"a2":0.07,"border_r":0.3,"border_g":0.7,"border_b":0.8,"border_a":0},"init_eqs_str":"a.g0=0;a.y0=0;a.q1=0;a.x0=0;a.q24=0;a.q26=0;a.r0=0;a.trig=0;a.q2=0;a.b0=0;a.rad0=0;","frame_eqs_str":"a.trig=a.q24;a.x0=a.x0*bnot(a.trig)+a.trig*(.5+div(rand(100),200));a.y0=a.y0*bnot(a.trig)+a.trig*(.5+div(rand(100),200));a.x0+=div(.1*a.q1*(3+a.q26),a.fps);a.y0+=div(.1*a.q2*(3+a.q26),a.fps);a.x0-=Math.floor(a.x0);a.y0-=Math.floor(a.y0);a.tex_ang=a.time;a.tex_zoom=a.q1;a.ang=div(a.time,100)*a.q2;a.x=a.x0;a.y=a.y0;a.rad0=a.rad0*bnot(a.trig)+a.trig*(.04+div(rand(100),1E3));a.rad=a.rad0;a.r0=bnot(a.trig)*a.r0+div(a.trig*rand(10),10);a.g0=bnot(a.trig)*a.g0+div(a.trig*rand(10),10);\na.b0=bnot(a.trig)*a.b0+div(a.trig*rand(10),10);a.r=a.r0;a.b=a.b0;a.g=a.g0;a.r2=0;a.b2=0;a.g2=0;a.a=1;a.a2=.3;","init_eqs_eel":"","frame_eqs_eel":"trig = q24;\n\n\nx0 = x0*bnot(trig) + trig*(.5+ rand(100)/200); \ny0 = y0*bnot(trig) + trig*(.5+ rand(100)/200); \n\n\nx0 = x0 + .1*q1*(3+q26)/fps;\ny0 = y0 + .1*q2*(3+q26)/fps;\n\nx0 = x0 - int(x0);\ny0 = y0 - int(y0);\n\ntex_ang = time;\ntex_zoom = q1;\nang = time/100*q2;\nx = x0; y = y0;\nrad0 = rad0*bnot(trig) + trig*(.04+rand(100)/1000);\nrad = rad0;\n\n\nr0 = bnot(trig)*r0 + trig * rand(10)/10;\ng0 = bnot(trig)*g0 + trig * rand(10)/10;\nb0 = bnot(trig)*b0 + trig * rand(10)/10;\n\nr = r0; b = b0; g = g0;\nr2 = 0; b2 = 0; g2 = 0;\na= 1; a2 = .3; "},{"baseVals":{"sides":44,"additive":1,"x":0.503,"rad":0.03886,"tex_zoom":0.60986,"g":0.1,"a":0.9,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = rand(50)/50;\ny = .5 - 0*rand(15)/200;\n\nr = .4;\ng = .6;\nb = 1;\nr2 = r;\ng2 = g;\nb2 = b;\n\na = min(q21/2 ,.9);\nrad = a * (.1+abs(x-.5))/2 ;","init_eqs_eel":"","frame_eqs_eel":"x = rand(50)/50;\ny = .5 - 0*rand(15)/200;\n\nr = .4;\ng = .6;\nb = 1;\nr2 = r;\ng2 = g;\nb2 = b;\n\na = min(q21/2 ,.9);\nrad = a * (.1+abs(x-.5))/2 ;"},{"baseVals":{"sides":100,"rad":0.01,"tex_zoom":0.49981,"r":0,"g2":0,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"rad = q2+.02\n;","init_eqs_eel":"","frame_eqs_eel":"rad = q2+.02\n;"}],"waves":[{"baseVals":{"samples":282,"sep":20,"thick":1,"additive":1,"scaling":3.91581,"smoothing":0.1,"r":0.2,"g":0.3,"a":0.6,"enabled":0},"init_eqs_str":"t1 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt2 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt3 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt4 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt5 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt6 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt7 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt8 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\n","frame_eqs_str":"t2 = t2 + bass_att;","point_eqs_str":"\nx = sample;\ny = value1 * rand(50)/100 * abs(sample-.5)+ .49;\n\na = q26/4 * (.2 + abs(sample-.5)); ","init_eqs_eel":"t1 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt2 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt3 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt4 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt5 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt6 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt7 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt8 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\n","frame_eqs_eel":"t2 = t2 + bass_att;","point_eqs_eel":"\nx = sample;\ny = value1 * rand(50)/100 * abs(sample-.5)+ .49;\n\na = q26/4 * (.2 + abs(sample-.5)); "},{"baseVals":{"usedots":1,"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"xi = rand(100)/100;\nyi = rand(100)/100;\n\nx = xi; y = yi;\n\na = q21/15;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"xi = rand(100)/100;\nyi = rand(100)/100;\n\nx = xi; y = yi;\n\na = q21/15;"},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.2,"b":0,"enabled":0},"init_eqs_str":"t1 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt2 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt3 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt4 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt5 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt6 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt7 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt8 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\n","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"t1 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt2 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt3 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt4 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt5 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt6 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt7 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\nt8 = 1 + (rand(101)*.01 - rand(101)*.01)*.3;\n","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.prox=0;a.index2=0;a.vtrig=0;a.index=0;a.q12=0;a.q18=0;a.t1=0;a.q22=0;a.q21=0;a.q13=0;a.q15=0;a.q6=0;a.rota1=0;a.q1=0;a.dec_med=0;a.q5=0;a.index3=0;a.q9=0;a.p1z=0;a.is_beat=0;a.q24=0;a.vx=0;a.dec_slow=0;a.q11=0;a.z0=0;a.q10=0;a.vy=0;a.vz=0;a.q4=0;a.is_beat2=0;a.q16=0;a.q26=0;a.vzs=0;a.p2=0;a.avg=0;a.rota=0;a.movez=0;a.vys=0;a.q19=0;a.beat=0;a.q17=0;a.vol=0;a.peak=0;a.q2=0;a.q27=0;a.q14=0;a.q3=0;a.t0=0;a.vxs=0;a.q32=0;a.q7=0;a.q28=0;a.q20=0;a.q8=0;a.prox=1;","frame_eqs_str":"a.dec_med=pow(.4,div(30,a.fps));a.dec_slow=pow(.95,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,-.2+a.avg+a.peak)*above(a.time,a.t0+.1);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,32);a.index2=mod(a.index2+a.is_beat*bnot(a.index),4);a.index3=mod(a.index2+a.index3+a.is_beat*bnot(a.index),4);a.is_beat2=above(a.time,\na.t1+.1);a.t1=a.is_beat*a.time+(1-a.is_beat)*a.t1;a.q22=a.peak;a.q24=a.is_beat;a.q26=a.bass_att+a.mid_att+a.treb_att;a.vol=a.vol*a.dec_med+(1-a.dec_med)*a.q26;a.q27=a.index+1.5;a.q28=a.index2+1;a.p2=.3*Math.sin(a.time)+.3*Math.cos(div(a.time,3));a.q1=Math.cos(div(3.1416*a.p2,4));a.q2=Math.sin(div(3.1416*a.p2,4));a.q3=-a.q2;a.q4=a.q1;a.vtrig=a.is_beat*bnot(mod(a.index,2));a.vx=a.vx*bnot(a.vtrig)+a.vtrig*(div(rand(100),100)-.5);a.vy=a.vy*bnot(a.vtrig)+a.vtrig*(div(rand(100),100)-.5);a.vz=a.vz*bnot(a.vtrig)+\na.vtrig*(div(rand(100),100)-.5);a.vx*=below(mod(a.index,32),24);a.vy*=above(mod(a.index,32),16);a.q5=5*a.vx;a.q6=5*a.vy;a.q21=div(1+Math.sin(a.time),4)+.05;a.prox-=above(a.vy,.3)*a.prox*2;a.q32=.5+.2*a.prox;a.monitor=a.prox;a.rota+=30*div(.02*below(mod(a.index,16),8),a.fps);a.rota1=a.rota1*a.dec_med+(1-a.dec_med)*a.rota;a.q7=a.rota1;a.movez+=div(div(.8,1+Math.abs(a.vx)+Math.abs(a.vy)),a.fps);a.q8=a.movez*(1+div(a.q21,400));a.q15=-1+8*above(a.index,26);a.vxs=a.vxs*a.dec_med+(1-a.dec_med)*a.vx*20;a.vys=\na.vys*a.dec_med+(1-a.dec_med)*a.vy*20;a.vzs=a.vzs*a.dec_med+(1-a.dec_med)*a.vz*20;a.z0=20+a.vzs;a.p1z=a.z0;a.q9=div(a.vxs,a.p1z);a.q10=div(a.vys,a.p1z);a.q11=a.p1z;a.q12=below(a.index,24);a.q13=above(a.index,16);a.q14=1;a.q16=0;a.q17=-1;a.q18=0;a.q20=a.q9;a.q19=5*a.q4;","pixel_eqs_str":"","init_eqs_eel":"prox = 1;","frame_eqs_eel":"dec_med = pow (.4, 30/fps);\ndec_slow = pow (0.95, 30/fps);\n//dec_xlow = pow (0.999, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, -.2+avg+peak) * above (time, t0+.1);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %32;\nindex2 = (index2 + is_beat*bnot(index))%4;\nindex3 = (index2 +index3 + is_beat*bnot(index))%4;\n\nis_beat2 = above (time, t1+.1);\nt1 = is_beat*time + (1-is_beat)*t1;\nq22 = peak;\nq24 = is_beat;\nq26 = bass_att + mid_att + treb_att;\nvol = vol*dec_med + (1-dec_med)*q26;\nq27 = index + 1.5;\nq28 = index2 +1;\n\np2 = .3*sin(time) + .3*cos(time/3);\n//*****tunnel tilting\nq1 = cos(p2 * 3.1416/4);\nq2 = sin(p2 * 3.1416/4);\nq3 = -q2;\nq4 = q1;\n\n//****tunnel viewpoint x,y\nvtrig = is_beat * bnot(index%2);\nvx = vx * bnot(vtrig) + vtrig * (rand(100)/100-.5);\nvy = vy * bnot(vtrig) + vtrig * (rand(100)/100-.5);\nvz = vz * bnot(vtrig) + vtrig * (rand(100)/100-.5);\n\nvx = vx* below(index%32,24); //###\nvy = vy* above(index%32,16);\nq5 = vx*5;\nq6 = vy*5;\n\n//***tunnel width\nq21 = (1+sin(time))/4+.05;\n\n//**floor proximity\nprox = prox - above(vy,.3)*prox*2;\nq32 = .5 + .2*prox;\nmonitor = prox;\n\n//****tunnel rotation\nrota = rota +.02*below(index%16,8)/fps*30;\nrota1 = rota1*dec_med + (1-dec_med)*rota;\nq7 = rota1;\n\n//****tunnel speed\nmovez = movez + .8/(1+abs(vx)+abs(vy))/fps;\nq8 = movez * (1+q21/400);\n//dyn. Aenderung von q21 bewirkt auch Richt.wechsel\n\nq15 = -1+8*above(index,26);\n//***********************\nvxs = vxs * dec_med + (1-dec_med)*vx*20;\nvys = vys * dec_med + (1-dec_med)*vy*20;\nvzs = vzs * dec_med + (1-dec_med)*vz*20;\n\nz0 = 20+vzs;\n\np1z = z0;\nq9 = vxs/(p1z); \nq10 = vys/(p1z); \nq11 = p1z;\n\nq12 = below (index,24);\nq13 = above (index,16);\n\n\nq14 = 1; // x\nq16 = 0; // y\n\nq17 = -1;\nq18 = 0;\n\nq20 = q9;\nq19 = q4*5;","pixel_eqs_eel":"","warp":"vec3 xlat_mutablenoise;\nvec2 xlat_mutablers;\nvec2 xlat_mutablers0;\nvec2 xlat_mutableuv1;\n shader_body { \n  vec3 copy_1;\n  vec2 tmpvar_2;\n  tmpvar_2.x = 0.5;\n  tmpvar_2.y = q5;\n  xlat_mutableuv1 = (uv - tmpvar_2);\n  float tmpvar_3;\n  tmpvar_3 = (1.0/(xlat_mutableuv1.y));\n  xlat_mutablers0.x = (xlat_mutableuv1.x * tmpvar_3);\n  xlat_mutablers0.y = tmpvar_3;\n  xlat_mutablers.x = xlat_mutablers0.x;\n  xlat_mutablers.y = (tmpvar_3 + (time * 0.3));\n  xlat_mutablenoise = (vec3(dot (texture (sampler_pw_noise_lq, (xlat_mutablers / 63.0)), vec4(0.32, 0.49, 0.29, 0.0))) * (dot (texture (sampler_pw_noise_lq, \n    (xlat_mutablers / 12.0)\n  ), vec4(0.32, 0.49, 0.29, 0.0)) + 0.5));\n  xlat_mutablenoise = (xlat_mutablenoise * (clamp (\n    ((10.0 * xlat_mutablenoise) - 8.0)\n  , 0.0, 1.0) * clamp (\n    (2.0 / tmpvar_3)\n  , 0.0, 1.0)));\n  vec2 tmpvar_4;\n  tmpvar_4.x = uv.x;\n  tmpvar_4.y = (uv.y - (0.024 / tmpvar_3));\n  vec2 tmpvar_5;\n  tmpvar_5.x = uv.x;\n  tmpvar_5.y = (uv.y - (0.012 / tmpvar_3));\n  copy_1 = (texture (sampler_main, tmpvar_4).xyz + texture (sampler_main, tmpvar_5).xyz);\n  vec2 tmpvar_6;\n  tmpvar_6.x = uv.x;\n  tmpvar_6.y = (uv.y - (0.006 / tmpvar_3));\n  copy_1 = (copy_1 + texture (sampler_main, tmpvar_6).xyz);\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ((xlat_mutablenoise + (\n    (((copy_1 / 3.0) * (1.0 + slow_roam_cos).xyz) / 2.0)\n   * 0.99)) - 0.005);\n  ret = tmpvar_7.xyz;\n }","comp":" shader_body { \n  vec2 uv3_1;\n  vec2 uv2_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = ((uv - 0.5) * aspect.xy);\n  float tmpvar_4;\n  tmpvar_4 = (0.1 / (sqrt(\n    dot (tmpvar_3, tmpvar_3)\n  ) + 0.1));\n  vec2 tmpvar_5;\n  float tmpvar_6;\n  tmpvar_6 = (ang / 3.14);\n  tmpvar_5.x = tmpvar_6;\n  tmpvar_5.y = (q27 * tmpvar_4);\n  uv2_2.y = (tmpvar_5.y + (0.1 * q30));\n  uv2_2.x = (tmpvar_6 + (0.2 * time));\n  vec2 tmpvar_7;\n  tmpvar_7.x = tmpvar_6;\n  tmpvar_7.y = (4.0 * tmpvar_4);\n  uv3_1.y = (tmpvar_7.y - (0.2 * q30));\n  uv3_1.x = tmpvar_7.x;\n  vec2 tmpvar_8;\n  tmpvar_8 = fract(uv3_1);\n  uv3_1 = tmpvar_8;\n  float tmpvar_9;\n  tmpvar_9 = clamp ((1.0 - (4.0 * rad)), 0.0, 1.0);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = (((\n    (3.0 * max (((2.0 * texture (sampler_main, uv2_2).xyz) + texture (sampler_main, tmpvar_8).xyz), ((2.0 * \n      ((texture (sampler_blur2, fract(uv2_2)).xyz * scale2) + bias2)\n    ) + (\n      (texture (sampler_blur2, fract(tmpvar_8)).xyz * scale2)\n     + bias2))))\n   * rad) + (\n    ((uv.y * pow ((1.0 - rad), 8.0)) * roam_cos)\n  .xyz * tmpvar_9)) + ((tmpvar_9 * 2.0) * (\n    (texture (sampler_blur1, fract(uv)).xyz * scale1)\n   + bias1)));\n  ret = tmpvar_10.xyz;\n }","warp_hlsl":"sampler sampler_pw_noise_lq;\nfloat3 color, mus, neu, ret1, noise, noise2;\nfloat2 uv1, rs0, rs, uv2, uv3, dz, hor, ver;\nfloat dx,dy,speed;\nshader_body {\nspeed = .3;\nuv1 = uv-float2(0.5,q5);\nfloat z = 1/(uv1.y);\nrs0.x = (uv1.x)*z;\nrs0.y = z;\nrs.x = rs0.x *1;\nrs.y = rs0.y + time*speed;\n\n\n//Kacheln\nnoise = lum(tex2D(sampler_pw_noise_lq,rs/63 ));\nnoise *= lum(tex2D(sampler_pw_noise_lq,rs/12 ))+.5;\nnoise *= saturate(10*noise - 8) * saturate(2/z);\nnoise2 = saturate(8* (lum(tex2D(sampler_pw_noise_lq,uv))-.5));\n\nspeed *= 2;\nfloat3 copy = + GetPixel(float2(uv.x,uv.y-.04*speed/z));\ncopy +=GetPixel(float2(uv.x,uv.y-.02*speed/z));\ncopy +=GetPixel(float2(uv.x,uv.y-.01*speed/z));\n\nret = noise*1 + copy/3*(1+slow_roam_cos)/2*.99-.005;\n\n\n}","comp_hlsl":"shader_body\n{\nfloat2 uv1 = (uv-0.5)*aspect.xy;\n\nfloat rad2 = length(uv1) + .1;\nfloat rad1 = .1/rad2 ;\n\nfloat2 uv2 = float2 (ang/3.14, q27*rad1);\nuv2.y = uv2.y  +.1*q30;\nuv2.x = uv2.x  +.2*time;\n\nfloat2 uv3 = float2 (ang/3.14, 4*rad1);\nuv3.y = uv3.y  -.2*q30;\nuv3.x = uv3.x  +.0*time;\nuv3 = frac(uv3);\n\nfloat3 crisp = 2*GetPixel(uv2) + GetPixel(uv3);\ncrisp = max(crisp,2*GetBlur2(frac(uv2)) + GetBlur2(frac(uv3)));\n\nfloat3 lay1 = uv.y*pow(1-rad,8)*roam_cos;\n\ncrisp = 3*crisp * pow(rad,1);\nfloat mask = saturate(1-4*rad);\n\nret = crisp + lay1*mask + mask * 2*GetBlur1(frac(uv));\n\n}"}