{"version":2,"baseVals":{"rating":5,"gammaadj":1.28,"decay":0.8,"echo_zoom":1,"echo_orient":3,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"brighten":1,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"zoomexp":0.96304,"warp":0.01,"wave_g":0.65,"wave_b":0.65,"ob_size":0.005,"ob_r":0.02,"ob_g":0.02,"ob_b":0.02,"ob_a":0.99,"ib_size":0.005,"ib_a":0.99,"mv_x":64,"mv_y":48,"mv_l":0,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"sides":5,"additive":1,"num_inst":2,"x":0.49,"rad":0.11589,"tex_zoom":4.36077,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = int(rand(1000))/1000;\ny = int(rand(1000))/1000;\nang = int(rand(150))/100;","init_eqs_eel":"","frame_eqs_eel":"x = int(rand(1000))/1000;\ny = int(rand(1000))/1000;\nang = int(rand(150))/100;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"thick":1,"additive":1,"g":0,"b":0},"init_eqs_str":"a.ma=0;a.mx=0;a.my=0;","frame_eqs_str":"","point_eqs_str":"a.ma+=3.1415*above(a.bass,1)*.01*a.bass;a.ma-=3.1415*above(a.treb,1)*.01*a.treb;a.mx+=.0002*Math.cos(a.ma);a.my+=.0002*Math.sin(a.ma);a.mx=.00001<Math.abs(above(a.mx,.9))?.9-a.mx:a.mx;a.my=.00001<Math.abs(above(a.my,.9))?.9-a.my:a.my;a.mx=.00001<Math.abs(below(a.mx,.1))?.9+a.mx:a.mx;a.my=.00001<Math.abs(below(a.my,.1))?.9+a.my:a.my;a.x=a.mx;a.y=a.my;a.a=above(a.bass+a.mid+a.treb,.8);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,1)*3.1415*.01*bass);\nma=ma-(above(treb,1)*3.1415*.01*treb);\n\nmx=mx+(.0002*cos(ma));\nmy=my+(.0002*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.8));"},{"baseVals":{"enabled":1,"thick":1,"additive":1,"r":0,"g":0},"init_eqs_str":"a.ma=0;a.mx=0;a.my=0;","frame_eqs_str":"","point_eqs_str":"a.ma+=3.1415*above(a.bass,1)*.05*a.bass;a.ma-=3.1415*above(a.mid,1)*.05*a.mid;a.mx+=.0001*Math.cos(a.ma);a.my+=.0001*Math.sin(a.ma);a.mx=.00001<Math.abs(above(a.mx,.9))?.9-a.mx:a.mx;a.my=.00001<Math.abs(above(a.my,.9))?.9-a.my:a.my;a.mx=.00001<Math.abs(below(a.mx,.1))?.9+a.mx:a.mx;a.my=.00001<Math.abs(below(a.my,.1))?.9+a.my:a.my;a.x=a.mx;a.y=a.my;a.a=above(a.bass+a.mid+a.treb,.1);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,1)*3.1415*.05*bass);\nma=ma-(above(mid,1)*3.1415*.05*mid);\n\nmx=mx+(.0001*cos(ma));\nmy=my+(.0001*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.1));"},{"baseVals":{"enabled":1,"thick":1,"additive":1,"r":0,"b":0},"init_eqs_str":"a.ma=0;a.mx=0;a.my=0;","frame_eqs_str":"","point_eqs_str":"a.ma+=3.1415*above(a.mid,1)*.01*a.mid;a.ma-=3.1415*above(a.treb,1)*.01*a.treb;a.mx+=.0004*Math.cos(a.ma);a.my+=.0004*Math.sin(a.ma);a.mx=.00001<Math.abs(above(a.mx,.9))?.9-a.mx:a.mx;a.my=.00001<Math.abs(above(a.my,.9))?.9-a.my:a.my;a.mx=.00001<Math.abs(below(a.mx,.1))?.9+a.mx:a.mx;a.my=.00001<Math.abs(below(a.my,.1))?.9+a.my:a.my;a.x=a.mx;a.y=a.my;a.a=above(a.bass+a.mid+a.treb,.3);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(mid,1)*3.1415*.01*mid);\nma=ma-(above(treb,1)*3.1415*.01*treb);\n\nmx=mx+(.0004*cos(ma));\nmy=my+(.0004*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.3));"},{"baseVals":{"enabled":1,"thick":1,"additive":1,"g":0},"init_eqs_str":"a.ma=0;a.mx=0;a.my=0;","frame_eqs_str":"","point_eqs_str":"a.ma+=3.1415*above(a.bass,.5)*.02*a.bass;a.ma-=3.1415*above(a.treb,.5)*.02*a.treb;a.mx+=.0008*Math.cos(a.ma);a.my+=.0008*Math.sin(a.ma);a.mx=.00001<Math.abs(above(a.mx,.9))?.9-a.mx:a.mx;a.my=.00001<Math.abs(above(a.my,.9))?.9-a.my:a.my;a.mx=.00001<Math.abs(below(a.mx,.1))?.9+a.mx:a.mx;a.my=.00001<Math.abs(below(a.my,.1))?.9+a.my:a.my;a.x=a.mx;a.y=a.my;a.a=above(a.bass+a.mid+a.treb,.2);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,.5)*3.1415*.02*bass);\nma=ma-(above(treb,.5)*3.1415*.02*treb);\n\nmx=mx+(.0008*cos(ma));\nmy=my+(.0008*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.2));"}],"init_eqs_str":"a.thresh=0;a.q1=0;a.crack=0;a.dy_r=0;a.rip=0;a.ripdown=0;a.dx_r=0;a.crackdown=0;a.ff=0;a.q2=0;","frame_eqs_str":"a.ib_r=Math.sin(a.bass*Math.cos(.535*a.frame));a.ib_g=Math.sin(a.bass*Math.cos(.635*a.frame));a.ib_b=Math.sin(a.bass*Math.cos(.735*a.frame));a.dx=.0125*Math.sin(1.234*a.time);a.dy=.0125*Math.cos(.9666*a.time);a.q1=mod(a.frame,2);a.wave_r=a.q1;a.wave_g=a.q1;a.wave_b=a.q1;a.ff=div(a.frame,100);a.wave_r=div(Math.sin(div(5*a.ff,a.bass)),2)+.5;a.wave_g=div(Math.cos(div(a.ff,a.mid)),2)+.5;a.wave_b=div(Math.cos(div(3*a.ff,a.treb)),2)+.5;a.rot+=.04*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*\na.time));a.zoom=Math.max(.97,Math.min(.15+.7*a.bass_att,1.75));a.ob_r=a.wave_r;a.ob_g=a.wave_g;a.ob_b=a.wave_b;","pixel_eqs_str":"a.q2=above(a.rad,.603);a.rot+=.00001<Math.abs(a.q2)?0:.5*Math.sin(.7243*a.time);a.zoom+=.00001<Math.abs(a.q2)?0:a.rad*Math.sin(.734*a.time)*.8;a.warp+=.00001<Math.abs(above(a.rad,.2166))?Math.sin(a.ang*a.rad):0;a.thresh=2*above(a.bass_att,a.thresh)+(1-above(a.bass_att,a.thresh))*(.96*(a.thresh-1.3)+1.3);a.dx_r=.025*equal(a.thresh,2)*Math.sin(5*a.time)+(1-equal(a.thresh,2))*a.dx_r;a.dy_r=.025*equal(a.thresh,2)*Math.sin(5*a.time)+(1-equal(a.thresh,2))*a.dy_r;a.crack=1.34*Math.sin(3.12*\na.thresh*a.time)+.95*Math.sin(5*a.thresh*a.time)+1.73*Math.cos(1.66*a.thresh*a.time)-.5*Math.sin(.25*a.thresh*a.time);a.rip=1.92*Math.cos(1.96*a.thresh*a.time)-.195*Math.cos(3.27*a.thresh*a.time)+.236*Math.sin(3.25*a.thresh*a.time)+1.5*Math.sin(a.thresh*a.time);a.crackdown=2*a.crack*a.dx_r*Math.sin(3.75*a.time);a.ripdown=2*a.rip*a.dy_r*Math.sin(5.75*a.time);a.dx+=25*(.00001<Math.abs(above(a.crack,a.rip))?2*a.dx_r*a.crackdown:-2*a.dx_r*a.ripdown);a.dy+=25*(.00001<Math.abs(above(a.rip,a.crack))?2*a.dy_r*\na.crackdown:-2*a.dy_r*a.ripdown);","init_eqs_eel":"","frame_eqs_eel":"ib_r=sin(bass*cos(frame*0.535));\nib_g=sin(bass*cos(frame*0.635));\nib_b=sin(bass*cos(frame*0.735));\ndx=sin(time*1.234)*.0125;\ndy=cos(time*.9666)*.0125;\nq1=frame%2;\nwave_r=q1;\nwave_g=q1;\nwave_b=q1;\nff = frame/100;\nwave_r = sin(5*ff/bass)/2+0.5;\nwave_g = cos(ff/mid)/2+0.5;\nwave_b = cos(3*ff/treb)/2+0.5;\nrot = rot + 0.040*( 0.60*sin(0.381*time) + 0.40*sin(0.579*time) );\nzoom=max(0.97, min(0.15+0.7*bass_att, 1.75 ));\nob_r=wave_r;\nob_g=wave_g;\nob_b=wave_b;","pixel_eqs_eel":"q2=above(rad,.603);\nrot=rot+if(q2,0,sin(time*.7243)*.5);\nzoom=zoom+if(q2,0,rad*sin(time*.734)*.8);\nwarp=warp+if(above(rad,.2166),sin(ang*rad),0);\nthresh = above(bass_att,thresh)*2+(1-above(bass_att,thresh))*((thresh-1.3)*0.96+1.3);\ndx_r = equal(thresh,2)*0.025*sin(5*time)+(1-equal(thresh,2))*dx_r;\ndy_r = equal(thresh,2)*0.025*sin(5*time)+(1-equal(thresh,2))*dy_r;\ncrack = 1.34*sin(3.12*thresh*time) + 0.95*sin(5*thresh*time) + 1.73*cos(1.66*thresh*time) - 0.5*sin(0.25*thresh*time);\nrip = 1.92*cos(1.96*thresh*time) - 0.195*cos(3.27*thresh*time) + 0.236*sin(3.25*thresh*time) + 1.5*sin(thresh*time);\ncrackdown = ((crack*2)*dx_r)*sin(3.75*time);\nripdown = ((rip*2)*dy_r)*sin(5.75*time);\ndx = dx + if (above(crack,rip), 2*dx_r*crackdown, -2*dx_r*ripdown)*25;\ndy = dy + if (above(rip,crack), 2*dy_r*crackdown, -2*dy_r*ripdown)*25;","warp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1 = ((0.5 + (\n    (uv_orig - 0.5)\n   * aspect.wz)) - vec2(0.5, 0.5));\n  float tmpvar_2;\n  tmpvar_2 = sqrt(dot (tmpvar_1, tmpvar_1));\n  float tmpvar_3;\n  float tmpvar_4;\n  tmpvar_4 = (min (abs(\n    (tmpvar_1.x / tmpvar_1.y)\n  ), 1.0) / max (abs(\n    (tmpvar_1.x / tmpvar_1.y)\n  ), 1.0));\n  float tmpvar_5;\n  tmpvar_5 = (tmpvar_4 * tmpvar_4);\n  tmpvar_5 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_5) + 0.05368138) * tmpvar_5) - 0.1173503)\n     * tmpvar_5) + 0.1938925) * tmpvar_5) - 0.3326756)\n   * tmpvar_5) + 0.9999793) * tmpvar_4);\n  tmpvar_5 = (tmpvar_5 + (float(\n    (abs((tmpvar_1.x / tmpvar_1.y)) > 1.0)\n  ) * (\n    (tmpvar_5 * -2.0)\n   + 1.570796)));\n  tmpvar_3 = (tmpvar_5 * sign((tmpvar_1.x / tmpvar_1.y)));\n  if ((abs(tmpvar_1.y) > (1e-08 * abs(tmpvar_1.x)))) {\n    if ((tmpvar_1.y < 0.0)) {\n      if ((tmpvar_1.x >= 0.0)) {\n        tmpvar_3 += 3.141593;\n      } else {\n        tmpvar_3 = (tmpvar_3 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_3 = (sign(tmpvar_1.x) * 1.570796);\n  };\n  vec2 tmpvar_6;\n  tmpvar_6.x = (tmpvar_3 * 0.1591549);\n  tmpvar_6.y = tmpvar_2;\n  vec2 tmpvar_7;\n  tmpvar_7.x = (tmpvar_6.x * 4.0);\n  tmpvar_7.y = (log((1.0/(tmpvar_2))) + time);\n  vec2 tmpvar_8;\n  tmpvar_8 = (0.5 + ((1.0 - \n    abs(((fract(\n      (tmpvar_7 * 0.5)\n    ) * 2.0) - 1.0))\n  ) - 0.5));\n  float tmpvar_9;\n  vec2 help_uv_10;\n  vec2 tmpvar_11;\n  tmpvar_11 = fract((tmpvar_8 - 0.5));\n  help_uv_10 = (min (tmpvar_11, (1.0 - tmpvar_11)) * 2.0);\n  tmpvar_9 = (clamp ((\n    (max (help_uv_10.x, help_uv_10.y) - 1.0)\n   + 0.3), 0.0, 1.0) / 0.3);\n  vec2 tmpvar_12;\n  tmpvar_12.x = 0.0;\n  tmpvar_12.y = -(time);\n  vec2 tmpvar_13;\n  tmpvar_13 = (tmpvar_8 - vec2(0.5, 0.5));\n  float tmpvar_14;\n  tmpvar_14 = sqrt(dot (tmpvar_13, tmpvar_13));\n  float tmpvar_15;\n  float tmpvar_16;\n  tmpvar_16 = (min (abs(\n    (tmpvar_13.x / tmpvar_13.y)\n  ), 1.0) / max (abs(\n    (tmpvar_13.x / tmpvar_13.y)\n  ), 1.0));\n  float tmpvar_17;\n  tmpvar_17 = (tmpvar_16 * tmpvar_16);\n  tmpvar_17 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)\n     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)\n   * tmpvar_17) + 0.9999793) * tmpvar_16);\n  tmpvar_17 = (tmpvar_17 + (float(\n    (abs((tmpvar_13.x / tmpvar_13.y)) > 1.0)\n  ) * (\n    (tmpvar_17 * -2.0)\n   + 1.570796)));\n  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.y)));\n  if ((abs(tmpvar_13.y) > (1e-08 * abs(tmpvar_13.x)))) {\n    if ((tmpvar_13.y < 0.0)) {\n      if ((tmpvar_13.x >= 0.0)) {\n        tmpvar_15 += 3.141593;\n      } else {\n        tmpvar_15 = (tmpvar_15 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);\n  };\n  vec2 tmpvar_18;\n  tmpvar_18.x = (tmpvar_15 * 0.1591549);\n  tmpvar_18.y = tmpvar_14;\n  vec2 tmpvar_19;\n  tmpvar_19.x = (tmpvar_18.x * 4.0);\n  tmpvar_19.y = (log((1.0/(tmpvar_14))) + tmpvar_12.y);\n  vec2 help_uv_20;\n  vec2 tmpvar_21;\n  tmpvar_21 = fract((tmpvar_19 - 0.5));\n  help_uv_20 = (min (tmpvar_21, (1.0 - tmpvar_21)) * 2.0);\n  vec4 tmpvar_22;\n  tmpvar_22.w = 1.0;\n  tmpvar_22.xyz = mix (vec3((clamp (\n    ((max (help_uv_20.x, help_uv_20.y) - 1.0) + 0.3)\n  , 0.0, 1.0) / 0.3)), vec3(1.0, 1.0, 1.0), vec3(tmpvar_9));\n  ret = tmpvar_22.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  float tmpvar_3;\n  tmpvar_3 = -(q8);\n  float tmpvar_4;\n  tmpvar_4 = (uv.x - 0.5);\n  float tmpvar_5;\n  tmpvar_5 = (uv.y - 0.5);\n  tmpvar_2.x = (((\n    (tmpvar_4 * cos((tmpvar_3 * 0.29)))\n   + \n    (tmpvar_5 * sin((tmpvar_3 * 0.29)))\n  ) * 0.8) + 0.5);\n  tmpvar_2.y = (((\n    (-(tmpvar_4) * sin((tmpvar_3 * 0.29)))\n   + \n    (tmpvar_5 * cos((tmpvar_3 * 0.29)))\n  ) * 0.8) + 0.5);\n  ret_1 = (mix (texture (sampler_main, uv).xyz, texture (sampler_main, (\n    (0.5 - uv)\n   + 0.5)).xyz, vec3(0.5, 0.5, 0.5)) * 0.6);\n  ret_1 = (ret_1 + (texture (sampler_main, tmpvar_2).xyz * 0.4));\n  vec4 tmpvar_6;\n  tmpvar_6 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * tmpvar_2.xyy) * (\n    (q28 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q31)));\n  if (((ret_1.x > (q26 * q13)) && (ret_1.x <= (q23 * q11)))) {\n    ret_1.z = (ret_1.z - (tmpvar_6.x * 0.5));\n  };\n  if (((ret_1.y > (q25 * q11)) && (ret_1.y <= (q22 * q12)))) {\n    ret_1.x = (ret_1.x - (tmpvar_6.y * 0.5));\n  };\n  if (((ret_1.z > (q24 * q12)) && (ret_1.z <= (q21 * q13)))) {\n    ret_1.y = (ret_1.y - (tmpvar_6.z * 0.5));\n  };\n  ret_1 = (ret_1 * 2.0);\n  ret_1 = ((0.71 - (\n    (ret_1 * (1.4 - ret_1))\n   * 4.0)) * 0.6);\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ret_1;\n  ret = tmpvar_7.xyz;\n }","warp_hlsl":"float2 complex_mul(float2 factorA, float2 factorB){\n   return float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);\n}\n\nfloat2 complex_pow(float2 base, int exponent){\n   float2 exponentiation = float2(1,0);\n   for(int i = 0; i<exponent; i++){\n      exponentiation = complex_mul(base,exponentiation);\n   }\n   return exponentiation;\n}\n\nfloat2 complex_square(float2 domain){\n   return complex_mul(domain,domain);\n}\n\nfloat2 complex_div(float2 numerator, float2 denominator){\n   return float2( numerator.x*denominator.x + numerator.y*denominator.y,\n                  numerator.y*denominator.x - numerator.x*denominator.y)/\n          (denominator.x*denominator.x + denominator.y*denominator.y);\n}\n\nfloat2 uv_aspect(float2 uvo, float2 uvm, float2 aspectr, float2 motion_scale){\n   return 0.5 + (lerp(uvo,uvm,motion_scale)-0.5)*aspectr;\n}\n\nfloat2 uv_scale(float2 domain, float2 center, float2 scale){\n   return center + (domain-center)*scale;\n}\n\nfloat2 uv_torus_mirror(float2 domain, float cutoff){\n   return 0.5 + (1.0 - abs( frac( domain * 0.5 ) * 2 - 1.0 )-0.5)*cutoff;\n}\n\nfloat2 uv_polar(float2 domain, float2 center){\n   float2 c = domain - center;\n   float rad_hq = length(c);\n   float ang_hq = atan2(c.x,c.y);\n   return float2(ang_hq*M_INV_PI_2, rad_hq);\n}\n\nfloat2 uv_polar_logarithmic(float2 domain, float2 center, int fins, float log_factor, float2 coord){\n   float2 polar = uv_polar(domain, center);\n   return float2(polar.x*fins+coord.x, log_factor*log(1/polar.y) + coord.y);\n}\n\nbool mask_rectangle(float2 domain, float2 position, float2 dimensions){\n   return (domain.x>position.x-dimensions.x)*(domain.x<position.x+dimensions.x)*\n          (domain.y>position.y-dimensions.y)*(domain.y<position.y+dimensions.y);\n}\n\nbool mask_circle(float2 domain, float2 position, float radius){\n   return length(domain-position)<radius;\n}\n\nbool mask_spiral_logarithmic(float2 domain, float2 center, int fins, float thickness, float spiral_factor, float zoom){\n   float2 c = domain - center;\n   float rad_hq = length(c);\n   float ang_hq = atan2(c.x,c.y);\n\n   return frac(fins*ang_hq*M_INV_PI_2 + spiral_factor*log(1/rad_hq)+zoom)<thickness;\n}\n\nfloat figure_spiral(float2 domain, float2 center, int fins, float thickness, float spiral_factor, float zoom){\n   float2 c = domain - center;\n   float rad_hq = length(c);\n   float ang_hq = atan2(c.x,c.y);\n\n   return frac(fins*ang_hq*M_INV_PI_2 + spiral_factor*log(1/rad_hq)+zoom)<thickness;\n}\n\nfloat figure_circle(float2 domain, float2 position, float radius){\n   return saturate(1-length(domain-position)/radius);\n}\n\nfloat figure_border(float2 domain, float thickness){\n   float2 help_uv = frac(domain-0.5);\n   help_uv = min(help_uv,1-help_uv)*2;\n   return saturate(max(help_uv.x,help_uv.y)-1+thickness)/(thickness);\n}\n\nshader_body\n{\nfloat2 base_uv = uv_aspect(uv_orig, uv, aspect.wz, 0);\n//ret = mask_rectangle(base_uv,0.5,0.1);\n//ret = mask_spiral_logarithmic(base_uv, 0.5, -1, 0.5, 0.4, time);\nfloat2 scaled_uv = uv_scale(base_uv, 0.5, 2);\nfloat2 mirrored_uv = uv_torus_mirror(scaled_uv,10);\n//ret = mask_circle(mirrored_uv,0.5,0.1);\n//ret = mask_spiral_logarithmic(mirrored_uv, 0.5, -1, 0.5, 0.4, time);\n//ret = figure_circle(mirrored_uv,float2(-0.5,0.5),1.2);\n\nbase_uv = uv_polar_logarithmic(base_uv,0.5,4,1,float2(0,time));\nbase_uv = uv_torus_mirror(base_uv,1);\n\n\nfloat help_border = figure_border(base_uv,0.3);\nfloat2 help_uv = base_uv;\nhelp_uv = uv_polar_logarithmic(base_uv,0.5,4,1,float2(0,-time));\nret = figure_border(help_uv,0.3);\nret = lerp(ret,1,help_border);\n}","comp_hlsl":"shader_body\n{\n    \n    //rotate texture cords\n    float texRotU2 = (uv[0] - 0.5)*cos(-q8*0.29) + (uv[1] - 0.5)*sin(-q8*0.29);\n    float texRotv2 = -(uv[0] - 0.5)*sin(-q8*0.29) + (uv[1] - 0.5)*cos(-q8*0.29);\n\n\t\n\t    float2 uv2 = float2(texRotU2*0.8 +0.5, texRotv2*0.8 + 0.5);\n\n    float2 uv_echo = (uv - 0.5)*1.000*float2(-1,-1) + 0.5;\n    ret = lerp( tex2D(sampler_main, uv).xyz, \n                tex2D(sampler_main, uv_echo).xyz, \n                0.50 \n              )*0.6;\n    \n    ret += tex2D(sampler_main, uv2).xyz*0.4;\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv2.xyy*q28\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q31\n                     );\nif(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; \nif(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; \nif(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; \n    ret *= 2.00; //gamma\n    ret = (.71 - ret*(1.4-ret)*4)*0.6; //invert\n}"}