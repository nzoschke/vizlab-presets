{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":3,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"darken":1,"wave_a":0.478,"wave_scale":0.06,"wave_smoothing":0.9,"wave_mystery":-0.2,"modwavealphastart":0.39,"modwavealphaend":1.18,"warpanimspeed":100,"warpscale":100,"zoomexp":100,"zoom":1.11363,"dx":-1,"dy":1,"warp":100,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_x":4.48,"mv_y":4.32,"mv_l":0.05,"mv_g":0.2,"mv_b":0.2,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":100,"textured":1,"x":0.15,"y":0.82,"rad":1.49765,"tex_zoom":0.36971,"g":0.4,"r2":1,"border_a":0},"init_eqs_str":"a.ra=0;","frame_eqs_str":"a.ra-=.01*a.bass_att;a.ang=a.ra;a.x=Math.abs(Math.sin(.1*a.time));a.y=Math.abs(Math.cos(.3*(a.time+.2)));","init_eqs_eel":"","frame_eqs_eel":"ra=ra-(bass_att*.01);\n\nang=ra;\n\nx=abs(sin(time*.1));\ny=abs(cos((time+.2)*.3));"},{"baseVals":{"enabled":1,"sides":100,"textured":1,"x":0.83,"y":0.82,"rad":1.49766,"tex_zoom":0.36971,"b":0.5,"g2":0.6,"b2":0.7,"border_a":0},"init_eqs_str":"a.ra=0;","frame_eqs_str":"a.ra+=.025*a.treb_att;a.ang=a.ra;a.x=Math.abs(Math.sin(.2*a.time));a.y=Math.abs(Math.cos(.7*a.time));","init_eqs_eel":"","frame_eqs_eel":"ra=ra+(treb_att*.025);\n\nang=ra;\n\nx=abs(sin(time*.2));\ny=abs(cos(time*.7));"},{"baseVals":{"enabled":1,"sides":100,"textured":1,"x":0.27,"y":0.2,"rad":1.3291,"tex_zoom":0.40839,"r":0.4,"g":0.8,"r2":1,"g2":0.2,"border_a":0},"init_eqs_str":"a.ra=0;","frame_eqs_str":"a.ra+=.00001<Math.abs(above(a.treb,.5))?.03*a.treb:.01;a.ang=a.ra;a.rad+=.1*a.treb_att;a.y=Math.abs(Math.sin(.23*a.time));a.x=Math.abs(Math.cos(.7*a.time));","init_eqs_eel":"","frame_eqs_eel":"ra=ra+if(above(treb,.5),treb*.03,.01);\n\nang=ra;\nrad=rad+(treb_att*.1);\n\ny=abs(sin(time*.23));\nx=abs(cos(time*.7));"},{"baseVals":{"enabled":1,"sides":100,"textured":1,"x":0.75,"y":0.25,"rad":1.46815,"tex_zoom":0.40839,"g":0.9,"b2":1,"border_a":0},"init_eqs_str":"a.ra=0;","frame_eqs_str":"a.ra-=.00001<Math.abs(above(a.bass,1.3))?.02*a.bass:.01;a.ang=a.ra;a.rad+=.1*a.bass_att;a.x=Math.abs(Math.sin(.25*a.time));","init_eqs_eel":"","frame_eqs_eel":"ra=ra-if(above(bass,1.3),bass*.02,.01);\n\nang=ra;\nrad=rad+(bass_att*.1);\n\nx=abs(sin(time*.25));\n"}],"waves":[{"baseVals":{"enabled":1,"additive":1,"scaling":0.74192,"smoothing":0,"a":0.02},"init_eqs_str":"a.q3=0;","frame_eqs_str":"","point_eqs_str":"a.q3=bnot(a.q3);a.x=.5+equal(a.q3,0)*(Math.floor(rand(50))-25)*.02;a.y=.5+equal(a.q3,0)*(Math.floor(rand(50))-25)*.02;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"q3=bnot(q3);\n\nx=.5+(equal(q3,0)*(int(rand(50))-25)*.02);\ny=.5+(equal(q3,0)*(int(rand(50))-25)*.02);"},{"baseVals":{"enabled":1,"samples":62,"additive":1,"a":0.2},"init_eqs_str":"a.cd=0;a.c=0;","frame_eqs_str":"","point_eqs_str":"a.r=.05*a.bass;a.cd+=.001;a.c=.62831854*Math.floor(rand(10));a.c+=a.cd;a.x=.5+Math.cos(a.c)*a.r;a.y=.5+Math.sin(a.c)*a.r;a.r=Math.abs(Math.sin(.77*a.time));a.g=.5*a.treb;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"r=bass*.05;\ncd=cd+.001;\n\nc=int(rand(10))*3.1415927*.2;\nc=c+cd;\n\nx=.5+(cos(c)*r);\ny=.5+(sin(c)*r);\n\nr=abs(sin(time*.77));\ng=treb*.5"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.trig2=0;a.mq29=0;a.prox=0;a.cthr=0;a.mq1=0;a.p3z=0;a.index2=0;a.notnear=0;a.q25=0;a.vtrig=0;a.index=0;a.q12=0;a.q18=0;a.q22=0;a.q21=0;a.hy=0;a.q13=0;a.q15=0;a.q29=0;a.q6=0;a.rota1=0;a.q1=0;a.dec_med=0;a.q5=0;a.p2z=0;a.mq19=0;a.radc=0;a.mq24=0;a.trel=0;a.q9=0;a.chng=0;a.mq28=0;a.mq23=0;a.p1z=0;a.is_beat=0;a.q23=0;a.q24=0;a.vx=0;a.dec_slow=0;a.q11=0;a.angc=0;a.z0=0;a.q10=0;a.atime=0;a.vy=0;a.shift=0;a.tv=0;a.mq30=0;a.q4=0;a.mq20=0;a.q16=0;a.q26=0;a.p2=0;a.avg=0;a.rota=0;a.movez=\n0;a.mq27=0;a.mq25=0;a.q19=0;a.beat=0;a.q17=0;a.vol=0;a.peak=0;a.mq26=0;a.trig1=0;a.q2=0;a.q27=0;a.q14=0;a.trig3=0;a.speed=0;a.q3=0;a.t0=0;a.hx=0;a.q32=0;a.q7=0;a.q28=0;a.q30=0;a.near=0;a.q20=0;a.q8=0;","frame_eqs_str":"a.dec_med=pow(.8,div(30,a.fps));a.dec_slow=pow(.95,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.2+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,32);a.index2=mod(a.index2+a.is_beat*bnot(a.index),4);a.q22=a.peak;a.q24=a.is_beat;a.q26=a.bass_att+a.mid_att+a.treb_att;a.vol=a.vol*\na.dec_med+(1-a.dec_med)*a.q26;a.q27=a.index+1;a.q28=a.index2+1;a.p2=.3*Math.sin(a.time)+.3*Math.cos(div(a.time,3));a.q1=Math.cos(div(3.1416*a.p2,4));a.q2=Math.sin(div(3.1416*a.p2,4));a.q3=-a.q2;a.q4=a.q1;a.vtrig=a.is_beat*bnot(mod(a.index,2));a.vx=a.vx*bnot(a.vtrig)+a.vtrig*(div(Math.floor(rand(100)),100)-.5);a.vy=a.vy*bnot(a.vtrig)+a.vtrig*(div(Math.floor(rand(100)),100)-.5);a.vx*=below(mod(a.index,15),5);a.vy*=below(mod(a.index,15),5);a.q5=10*a.vx;a.q6=12*a.vy;a.q21=div(1+Math.sin(div(a.time,12)),\n8)+.01;a.prox-=above(a.vy,.3)*a.prox*2;a.q32=.5+.2*a.prox;a.monitor=a.prox;a.rota+=30*div(.01*below(mod(a.index,16),8),a.fps);a.rota1=a.rota1*a.dec_med+(1-a.dec_med)*a.rota;a.q7=a.rota1;a.movez+=div(div(1.2,1+Math.abs(a.vx)+Math.abs(a.vy)),a.fps);a.q8=a.movez*(1+div(a.q21,4));a.trig1=a.q24*bnot(mod(a.index,12));a.trig2=a.q24*bnot(mod(a.index+4,12));a.trig3=a.q24*bnot(mod(a.index+8,12));a.trel+=div(a.vol,a.fps);a.z0=1;a.speed=div(a.vol,2);a.hx=Math.sin(a.trel);a.hy=Math.cos(a.trel);a.p1z=bnot(a.trig1)*\n(a.p1z+div((5+a.p1z)*a.speed,a.fps))+a.trig1*a.z0;a.p1z=Math.max(a.p1z,.1);a.q9=div(a.hx,a.p1z);a.q10=div(a.hy,a.p1z);a.q11=a.p1z;a.q12=.1+.02*a.q26*bnot(mod(a.index+2,3))*a.p1z*Math.exp(div(-a.p1z,100));a.p2z=bnot(a.trig2)*(a.p2z+div((5+a.p2z)*a.speed,a.fps))+a.trig2*a.z0;a.p2z=Math.max(a.p2z,.1);a.q13=div(2*a.hx,a.p2z);a.q14=div(-.5*a.hy,a.p2z);a.q15=a.p2z;a.q16=.1+.02*a.q26*bnot(mod(a.index+2,3))*a.p2z*Math.exp(div(-a.p2z,100));a.p3z=bnot(a.trig3)*(a.p3z+div((5+a.p3z)*a.speed,a.fps))+a.trig3*a.z0;\na.p3z=Math.max(a.p3z,.1);a.q17=div(-1.4*a.hx,a.p3z);a.q18=div(2*a.hy,a.p3z);a.q19=a.p3z;a.q20=.1+.02*a.q26*bnot(mod(a.index+2,3))*a.p3z*Math.exp(div(-a.p3z,100));a.chng=Math.sin(.5*a.time);a.cthr=.9999;a.mq20=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq20;a.mq19=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq19;a.mq23=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq23;a.mq24=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq24;a.mq25=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq25;\na.mq26=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq26;a.mq27=.00001<Math.abs(above(a.chng,a.cthr))?rand(1):a.mq27;a.mq28=.00001<Math.abs(above(a.chng,a.cthr))?rand(1):a.mq28;a.mq29=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq29;a.mq30=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq30;a.monitor=a.chng;a.q20=a.mq20;a.q19=a.mq19;a.q23=a.mq23;a.q24=a.mq24;a.q25=a.mq25;a.q26=a.mq26;a.q27=a.mq27;a.q28=a.mq28;a.q29=a.mq29;a.q30=a.mq30;a.monitor=a.mq1;a.vol=a.bass+a.treb+a.mid;a.atime+=\na.vol;a.q1=.4+.4*Math.sin(.006*a.atime);a.q2=.4+.4*Math.cos(.00613828348*a.atime);a.q3=.4+.4*Math.sin(.00598593455*a.atime);a.monitor=a.q3;a.warp=0;a.tv=a.tv+div(1,a.fps)+above(a.bass_att*a.treb_att,4);a.mv_r=div(Math.sin(2*a.tv),2)+.5;a.mv_g=div(Math.sin(.2312*a.tv),2)+.5;a.mv_b=div(Math.sin(.203*a.tv),2)+.5;a.wave_b=.00001<Math.abs(below(a.treb,1.8))?1-.025*Math.floor(rand(10)):0;a.wave_g*=sqr(.01*Math.floor(rand(100)));a.decay=1+0*(.00001<Math.abs(equal(mod(a.frame,10),0))?.95:1);a.monitor=a.wave_g;\na.cx=.5+.3*Math.cos(.21*a.time);a.cy=.5+.3*Math.sin(.1*a.time);a.mv_a=.4*a.bass_att;a.wave_x=a.cx;a.wave_y=1-a.cy;a.monitor=div(3.14159+Math.atan(-.1),3.14159);a.q1=a.cx;a.q2=a.cy;a.q21=Math.sin(.7*a.time);","pixel_eqs_str":"a.radc=sqr(a.q1-a.x)+sqr(a.q2-a.y);a.near=below(a.radc,.015);a.notnear=1-a.near;a.rot=.015*a.notnear;a.angc=Math.atan(div(a.y-a.cy,a.x-a.cx))+below(a.x,a.cx)*sign(a.y-a.cy)*3.14159;a.shift=-.02*(pow(Math.cos(.5*a.angc-1.1*a.time-8*pow(a.radc,.4)),6)-.6)*a.notnear;a.dx=Math.cos(a.angc)*a.shift;a.dy=Math.sin(a.angc)*a.shift;","init_eqs_eel":"","frame_eqs_eel":"dec_med = pow (0.8, 30/fps);\ndec_slow = pow (0.95, 30/fps);\n//dec_xlow = pow (0.999, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .2+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %32;\nindex2 = (index2 + is_beat*bnot(index))%4;\n\nq22 = peak;\nq24 = is_beat;\nq26 = bass_att + mid_att + treb_att;\nvol = vol*dec_med + (1-dec_med)*q26;\nq27 = index + 1;\nq28 = index2 +1;\n\np2 = .3*sin(time) + .3*cos(time/3);\n//*****tunnel tilting\nq1 = cos(p2 * 3.1416/4);\nq2 = sin(p2 * 3.1416/4);\nq3 = -q2;\nq4 = q1;\n\n//****tunnel viewpoint x,y\nvtrig = is_beat * bnot(index%2);\nvx = vx * bnot(vtrig) + vtrig * (int(rand(100))/100-.5);\nvy = vy * bnot(vtrig) + vtrig * (int(rand(100))/100-.5);\nvx = vx* below(index%15,5); //###\nvy = vy* below(index%15,5);\nq5 = vx*10;\nq6 = vy*12;\n\n//***tunnel width\nq21 = (1+sin(time/12))/8+.01;\n\n//**floor proximity\nprox = prox - above(vy,.3)*prox*2;\nq32 = .5 + .2*prox;\nmonitor = prox;\n\n//****tunnel rotation\nrota = rota +.01*below(index%16,8)/fps*30;\nrota1 = rota1*dec_med + (1-dec_med)*rota;\nq7 = rota1;\n\n//****tunnel speed\nmovez = movez + 1.2/(1+abs(vx)+abs(vy))/fps;\nq8 = movez * (1+q21/4);\n//dyn. Aenderung von q21 bewirkt auch Richt.wechsel\n\n//***********************\ntrig1= q24*bnot(index%12);\ntrig2= q24*bnot((index+4)%12);\ntrig3= q24*bnot((index+8)%12);\ntrel = trel + vol/fps;\nz0 = 1;\nspeed = vol/2;\nhx = sin(trel);\nhy = cos(trel);\n\np1z = bnot(trig1)* (p1z + (5+p1z)*speed/fps)+trig1*z0;\np1z = max(p1z,.1);\nq9 = hx/(p1z); \nq10 = hy/(p1z); \nq11 = p1z;\nq12 = .1+.02*q26*bnot((index+2)%3)*p1z*exp(-p1z/100);\n\np2z = bnot(trig2)* (p2z + (5+p2z)*speed/fps)+trig2*z0;\np2z = max(p2z,.1);\nq13 = 2*hx/(p2z); \nq14 = -.5*hy/(p2z); \nq15 = p2z;\nq16 = .1+.02*q26*bnot((index+2)%3)*p2z*exp(-p2z/100);\n\n\np3z = bnot(trig3)* (p3z + (5+p3z)*speed/fps)+trig3*z0;\np3z = max(p3z,.1);\nq17 = -1.4*hx/(p3z); \nq18 = 2*hy/(p3z); \nq19 = p3z;\nq20 = .1+.02*q26*bnot((index+2)%3)*p3z*exp(-p3z/100);\nchng=sin(time*.5);\ncthr=.9999;\nmq20=if(above(chng,cthr),rand(3),mq20);\nmq19=if(above(chng,cthr),rand(3),mq19);\nmq23=if(above(chng,cthr),rand(3),mq23);\nmq24=if(above(chng,cthr),rand(2),mq24);\nmq25=if(above(chng,cthr),rand(2),mq25);\nmq26=if(above(chng,cthr),rand(2),mq26);\nmq27=if(above(chng,cthr),rand(1),mq27);\nmq28=if(above(chng,cthr),rand(1),mq28);\nmq29=if(above(chng,cthr),rand(1)*.3,mq29);\nmq30=if(above(chng,cthr),rand(1)*.3,mq30);\nmonitor=chng;\nq20=mq20;q19=mq19;q23=mq23;q24=mq24;q25=mq25;q26=mq26;\nq27=mq27;q28=mq28;q29=mq29;q30=mq30;\n\nmonitor=mq1;\nvol=bass+treb+mid;\natime=atime+vol;\nq1=.4+sin(atime*.006        )*.4;\nq2=.4+cos(atime*.00613828348)*.4;\nq3=.4+sin(atime*.00598593455)*.4;\nmonitor=q3;\nwarp = 0;\n\ntv = tv + 1/fps+above(bass_att*treb_att,4);\nmv_r = sin(tv*2.)/2+.5;\nmv_g= sin(tv*.2312)/2+.5;\nmv_b = sin(tv*.203)/2+.5;\n\nwave_b = if(below(treb, 1.8),1-.025*int(rand(10)),0);\nwave_g = wave_g*sqr(.01*int(rand(100)));\ndecay = .9999+.0001+0*if(equal(frame % 10,0),.95,1);\nmonitor = wave_g;\ncx=.5+.3*cos(time*.21);\ncy=.5+.3*sin(time*.1);\n//cx=cx+(bass-1.2)*.1;\n//cy=cy+(treb_att-1)*.1;\nmv_a=bass_att*.4;\n//mv_g=mv_r*1;\nwave_x = cx;\nwave_y=1-cy;\nmonitor=(3.14159+atan(-.1))/3.14159;\nq1=cx;\nq2=cy;\nq21=sin(time*.7);\n//q22=.01;","pixel_eqs_eel":"radc=sqr(q1-x)+sqr(q2-y);\nnear=below(radc,.015);\nnotnear = 1- near;\n//sy=max(0.3,pow(bass_att,.2))*near + notnear;\n//sx=1/sy*near + notnear;\n//rot = .01*sin(x*5+time)*notnear-.015;\nrot = .015*notnear;\n//zoom = 1+ notnear*.01*(.5+sin(ang*5+time));\nangc=atan((y-cy)/(x-cx))+below(x,cx)*sign(y-cy)*3.14159;\n//dx=(x-cx)*.03*(cos(angc*3)*3+2);//*notnear;\n//dy=(y-cy)*.03*(sin(angc*3)*3+2);//*notnear;\n//zoom=1-angc/3.14159*.07;\n\nshift = -.02*(pow(cos(angc*.5-time*1.1-pow(radc,.4)*8),6)-.6)*notnear;\ndx=cos(angc)*shift;\ndy=sin(angc)*shift;","warp":" shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = (0.5 + ((uv_orig - 0.5) * aspect.wz));\n  vec2 tmpvar_3;\n  tmpvar_3.x = (time * 0.1);\n  tmpvar_3.y = (time * 0.5);\n  vec2 numerator_4;\n  numerator_4 = (tmpvar_2 - vec2(0.25, 0.5));\n  vec2 denominator_5;\n  denominator_5 = (tmpvar_2 - vec2(0.75, 0.5));\n  vec2 tmpvar_6;\n  tmpvar_6.x = ((numerator_4.x * denominator_5.x) + (numerator_4.y * denominator_5.y));\n  tmpvar_6.y = ((numerator_4.y * denominator_5.x) - (numerator_4.x * denominator_5.y));\n  vec2 tmpvar_7;\n  tmpvar_7 = (((tmpvar_6 / \n    ((denominator_5.x * denominator_5.x) + (denominator_5.y * denominator_5.y))\n  ) + 0.5) - vec2(0.5, 0.5));\n  float tmpvar_8;\n  tmpvar_8 = sqrt(dot (tmpvar_7, tmpvar_7));\n  float tmpvar_9;\n  float tmpvar_10;\n  tmpvar_10 = (min (abs(\n    (tmpvar_7.x / tmpvar_7.y)\n  ), 1.0) / max (abs(\n    (tmpvar_7.x / tmpvar_7.y)\n  ), 1.0));\n  float tmpvar_11;\n  tmpvar_11 = (tmpvar_10 * tmpvar_10);\n  tmpvar_11 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_11) + 0.05368138) * tmpvar_11) - 0.1173503)\n     * tmpvar_11) + 0.1938925) * tmpvar_11) - 0.3326756)\n   * tmpvar_11) + 0.9999793) * tmpvar_10);\n  tmpvar_11 = (tmpvar_11 + (float(\n    (abs((tmpvar_7.x / tmpvar_7.y)) > 1.0)\n  ) * (\n    (tmpvar_11 * -2.0)\n   + 1.570796)));\n  tmpvar_9 = (tmpvar_11 * sign((tmpvar_7.x / tmpvar_7.y)));\n  if ((abs(tmpvar_7.y) > (1e-08 * abs(tmpvar_7.x)))) {\n    if ((tmpvar_7.y < 0.0)) {\n      if ((tmpvar_7.x >= 0.0)) {\n        tmpvar_9 += 3.141593;\n      } else {\n        tmpvar_9 = (tmpvar_9 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_9 = (sign(tmpvar_7.x) * 1.570796);\n  };\n  vec2 tmpvar_12;\n  tmpvar_12.x = (tmpvar_9 * 0.1591549);\n  tmpvar_12.y = tmpvar_8;\n  vec2 tmpvar_13;\n  tmpvar_13.x = ((tmpvar_12.x * 4.0) + tmpvar_3.x);\n  tmpvar_13.y = ((0.6 * log(\n    (1.0/(tmpvar_8))\n  )) + tmpvar_3.y);\n  vec2 help_uv_14;\n  vec2 tmpvar_15;\n  tmpvar_15 = fract((tmpvar_13 - 0.5));\n  help_uv_14 = (min (tmpvar_15, (1.0 - tmpvar_15)) * 2.0);\n  ret_1 = ((clamp (\n    ((max (help_uv_14.x, help_uv_14.y) - 1.0) + 0.15)\n  , 0.0, 1.0) / 0.15) * vec3(1.0, 0.8, 0.0));\n  vec2 tmpvar_16;\n  tmpvar_16.x = 0.0;\n  tmpvar_16.y = (time * 0.3);\n  vec2 tmpvar_17;\n  tmpvar_17 = ((0.5 + (\n    (1.0 - abs(((\n      fract((tmpvar_13 * 0.5))\n     * 2.0) - 1.0)))\n   - 0.5)) - vec2(0.5, 0.5));\n  float tmpvar_18;\n  tmpvar_18 = sqrt(dot (tmpvar_17, tmpvar_17));\n  float tmpvar_19;\n  float tmpvar_20;\n  tmpvar_20 = (min (abs(\n    (tmpvar_17.x / tmpvar_17.y)\n  ), 1.0) / max (abs(\n    (tmpvar_17.x / tmpvar_17.y)\n  ), 1.0));\n  float tmpvar_21;\n  tmpvar_21 = (tmpvar_20 * tmpvar_20);\n  tmpvar_21 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)\n     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)\n   * tmpvar_21) + 0.9999793) * tmpvar_20);\n  tmpvar_21 = (tmpvar_21 + (float(\n    (abs((tmpvar_17.x / tmpvar_17.y)) > 1.0)\n  ) * (\n    (tmpvar_21 * -2.0)\n   + 1.570796)));\n  tmpvar_19 = (tmpvar_21 * sign((tmpvar_17.x / tmpvar_17.y)));\n  if ((abs(tmpvar_17.y) > (1e-08 * abs(tmpvar_17.x)))) {\n    if ((tmpvar_17.y < 0.0)) {\n      if ((tmpvar_17.x >= 0.0)) {\n        tmpvar_19 += 3.141593;\n      } else {\n        tmpvar_19 = (tmpvar_19 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_19 = (sign(tmpvar_17.x) * 1.570796);\n  };\n  vec2 tmpvar_22;\n  tmpvar_22.x = (tmpvar_19 * 0.1591549);\n  tmpvar_22.y = tmpvar_18;\n  vec2 tmpvar_23;\n  tmpvar_23.x = (tmpvar_22.x * 4.0);\n  tmpvar_23.y = (log((1.0/(tmpvar_18))) + tmpvar_16.y);\n  vec2 help_uv_24;\n  vec2 tmpvar_25;\n  tmpvar_25 = fract((tmpvar_23 - 0.5));\n  help_uv_24 = (min (tmpvar_25, (1.0 - tmpvar_25)) * 2.0);\n  vec3 tmpvar_26;\n  tmpvar_26 = mix (ret_1, vec3(0.5, 0.0, 1.0), vec3((clamp (\n    ((max (help_uv_24.x, help_uv_24.y) - 1.0) + 0.25)\n  , 0.0, 1.0) / 0.25)));\n  ret_1 = tmpvar_26;\n  vec4 tmpvar_27;\n  tmpvar_27 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * tmpvar_23.xyy) * (\n    (q27 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q29)));\n  if (((tmpvar_26.x > (q20 * q3)) && (tmpvar_26.x <= (q24 * q1)))) {\n    ret_1.y = (tmpvar_26.y - (tmpvar_27.x * 0.5));\n  };\n  if (((ret_1.y > (q19 * q1)) && (ret_1.y <= (q25 * q2)))) {\n    ret_1.z = (tmpvar_26.z - (tmpvar_27.y * 0.5));\n  };\n  if (((ret_1.z > (q23 * q2)) && (ret_1.z <= (q26 * q3)))) {\n    ret_1.x = (tmpvar_26.x - (tmpvar_27.z * 0.5));\n  };\n  vec4 tmpvar_28;\n  tmpvar_28.w = 1.0;\n  tmpvar_28.xyz = ret_1;\n  ret = tmpvar_28.xyz;\n }","comp":"vec2 xlat_mutableKugel1;\nvec2 xlat_mutableKugel2;\nfloat xlat_mutablerad1;\nfloat xlat_mutablerad2;\nfloat xlat_mutablerad3;\nvec3 xlat_mutableret2;\nvec2 xlat_mutablers;\nvec2 xlat_mutablers0;\nvec2 xlat_mutablersk;\nvec2 xlat_mutablerss;\nvec2 xlat_mutablerss0;\nvec2 xlat_mutableuv2;\nvec2 xlat_mutableuv3;\nvec2 xlat_mutableuv4;\n shader_body { \n  vec2 uv_1;\n  float z_2;\n  vec3 dots_3;\n  vec2 uv1_4;\n  vec3 ret_5;\n  mat2 tmpvar_6;\n  tmpvar_6[uint(0)] = _qa.xy;\n  tmpvar_6[1u] = _qa.zw;\n  uv_1 = ((uv * aspect.xy) * tmpvar_6);\n  vec2 tmpvar_7;\n  tmpvar_7.x = q5;\n  tmpvar_7.y = q6;\n  uv_1 = (uv_1 - (0.1 * tmpvar_7));\n  vec2 tmpvar_8;\n  tmpvar_8 = (uv_1 - 0.5);\n  vec2 tmpvar_9;\n  tmpvar_9.x = q9;\n  tmpvar_9.y = q10;\n  xlat_mutablersk = (tmpvar_8 + tmpvar_9);\n  vec2 tmpvar_10;\n  tmpvar_10 = normalize(xlat_mutablersk);\n  xlat_mutablerad1 = (q11 * sqrt(dot (xlat_mutablersk, xlat_mutablersk)));\n  xlat_mutableuv4 = ((sin(xlat_mutablerad1) / cos(xlat_mutablerad1)) * tmpvar_10);\n  xlat_mutableKugel1 = (xlat_mutableuv4 * clamp ((8.0 - \n    (8.0 * xlat_mutablerad1)\n  ), 0.0, 1.0));\n  vec2 tmpvar_11;\n  tmpvar_11.x = q13;\n  tmpvar_11.y = q14;\n  xlat_mutablersk = (tmpvar_8 + tmpvar_11);\n  vec2 tmpvar_12;\n  tmpvar_12 = normalize(xlat_mutablersk);\n  xlat_mutablerad2 = (q15 * sqrt(dot (xlat_mutablersk, xlat_mutablersk)));\n  xlat_mutableuv4 = ((sin(xlat_mutablerad2) / cos(xlat_mutablerad2)) * tmpvar_12);\n  xlat_mutableKugel2 = (xlat_mutableuv4 * clamp ((8.0 - \n    (8.0 * xlat_mutablerad2)\n  ), 0.0, 1.0));\n  vec2 tmpvar_13;\n  tmpvar_13.x = q17;\n  tmpvar_13.y = q18;\n  xlat_mutablersk = (tmpvar_8 + tmpvar_13);\n  vec2 tmpvar_14;\n  tmpvar_14 = normalize(xlat_mutablersk);\n  xlat_mutablerad3 = (q19 * sqrt(dot (xlat_mutablersk, xlat_mutablersk)));\n  xlat_mutableuv4 = ((sin(xlat_mutablerad3) / cos(xlat_mutablerad3)) * tmpvar_14);\n  uv1_4 = (tmpvar_8 + ((\n    (xlat_mutableKugel2 + xlat_mutableKugel1)\n   + \n    (xlat_mutableuv4 * clamp ((8.0 - (8.0 * xlat_mutablerad3)), 0.0, 1.0))\n  ) * 0.2));\n  float tmpvar_15;\n  float tmpvar_16;\n  tmpvar_16 = (min (abs(\n    (uv1_4.x / uv1_4.y)\n  ), 1.0) / max (abs(\n    (uv1_4.x / uv1_4.y)\n  ), 1.0));\n  float tmpvar_17;\n  tmpvar_17 = (tmpvar_16 * tmpvar_16);\n  tmpvar_17 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)\n     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)\n   * tmpvar_17) + 0.9999793) * tmpvar_16);\n  tmpvar_17 = (tmpvar_17 + (float(\n    (abs((uv1_4.x / uv1_4.y)) > 1.0)\n  ) * (\n    (tmpvar_17 * -2.0)\n   + 1.570796)));\n  tmpvar_15 = (tmpvar_17 * sign((uv1_4.x / uv1_4.y)));\n  if ((abs(uv1_4.y) > (1e-08 * abs(uv1_4.x)))) {\n    if ((uv1_4.y < 0.0)) {\n      if ((uv1_4.x >= 0.0)) {\n        tmpvar_15 += 3.141593;\n      } else {\n        tmpvar_15 = (tmpvar_15 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_15 = (sign(uv1_4.x) * 1.570796);\n  };\n  xlat_mutablerss0.x = (tmpvar_15 / 3.1416);\n  xlat_mutablerss0.y = ((0.1 * q21) / sqrt(dot (uv1_4, uv1_4)));\n  vec2 tmpvar_18;\n  tmpvar_18.x = xlat_mutablerss0.x;\n  tmpvar_18.y = (xlat_mutablerss0.y + time);\n  xlat_mutablerss = (tmpvar_18 * mat2(0.7, -0.7, 0.7, 0.7));\n  vec4 tmpvar_19;\n  tmpvar_19 = vec4(greaterThanEqual ((texture (sampler_pw_noise_lq, \n    (xlat_mutablerss / 32.0)\n  ) - 0.5), vec4(0.0, 0.0, 0.0, 0.0)));\n  vec2 tmpvar_20;\n  tmpvar_20 = abs((fract(\n    (xlat_mutablerss * 8.0)\n  ) - 0.5));\n  vec2 tmpvar_21;\n  tmpvar_21.x = xlat_mutablerss0.x;\n  tmpvar_21.y = (xlat_mutablerss0.y + (time / 4.0));\n  xlat_mutablerss = (tmpvar_21 * mat2(0.7, -0.7, 0.7, 0.7));\n  vec2 tmpvar_22;\n  tmpvar_22 = abs((fract(\n    (xlat_mutablerss * 8.0)\n  ) - 0.5));\n  dots_3 = (vec3((clamp (\n    (0.04 / sqrt(dot (tmpvar_20, tmpvar_20)))\n  , 0.0, 1.0) * tmpvar_19.x)) + (clamp (\n    (0.02 / sqrt(dot (tmpvar_22, tmpvar_22)))\n  , 0.0, 1.0) * vec4(\n    greaterThanEqual ((texture (sampler_pw_noise_lq, (xlat_mutablerss / 32.0)) - 0.5), vec4(0.0, 0.0, 0.0, 0.0))\n  ).x));\n  dots_3 = (dots_3 * clamp ((0.2 / \n    abs(xlat_mutablerss0.y)\n  ), 0.0, 1.0));\n  dots_3 = (dots_3 * (dots_3 * 0.6));\n  float tmpvar_23;\n  tmpvar_23 = (q32 / (uv1_4.y - 0.02));\n  float tmpvar_24;\n  tmpvar_24 = clamp ((4.0 / tmpvar_23), 0.0, 1.0);\n  xlat_mutablers0.x = (uv1_4.x * tmpvar_23);\n  xlat_mutablers0.y = (tmpvar_23 / 4.0);\n  xlat_mutablers.x = xlat_mutablers0.x;\n  xlat_mutablers.y = (xlat_mutablers0.y + (q8 * 3.0));\n  vec3 tmpvar_25;\n  tmpvar_25 = vec3((dot (texture (sampler_pw_noise_lq, (0.02 * xlat_mutablers)), vec4(0.32, 0.49, 0.29, 0.0)) - 0.5));\n  z_2 = (0.2 / (sqrt(\n    dot (uv1_4, uv1_4)\n  ) - q21));\n  xlat_mutableuv2.y = (z_2 + q8);\n  xlat_mutableuv2.x = (xlat_mutablerss0.x + q7);\n  xlat_mutableuv3 = (fract(xlat_mutableuv2) * 2.0);\n  vec2 tmpvar_26;\n  tmpvar_26 = floor((fract(\n    (xlat_mutableuv3 * 0.5)\n  ) * 2.0));\n  xlat_mutableuv3 = ((fract(xlat_mutableuv3) * (1.0 - tmpvar_26)) + (tmpvar_26 * fract(\n    (1.0 - xlat_mutableuv3)\n  )));\n  ret_5 = (max ((\n    (texture (sampler_main, xlat_mutableuv3) / z_2)\n  .xyz * \n    (1.0 - (0.5 * tmpvar_24))\n  ), (tmpvar_25 * tmpvar_24)) + dots_3);\n  ret_5 = (ret_5 + ((\n    abs((((\n      (inversesqrt(xlat_mutablerad1) * tmpvar_10.x)\n     * roam_sin).xyz + (\n      (inversesqrt(xlat_mutablerad2) * tmpvar_12.y)\n     * roam_sin.xzy)) + ((\n      inversesqrt(xlat_mutablerad3)\n     * tmpvar_14.x) * roam_sin.zyx)))\n   * \n    (0.2 + (tmpvar_25 * tmpvar_24))\n  ) * (q22 * 2.0)));\n  xlat_mutableret2 = (vec3(clamp ((\n    (((0.02 * q22) * q21) / sqrt(dot (uv1_4, uv1_4)))\n   * \n    dot (texture (sampler_main, (uv1_4 + 0.5)), vec4(0.32, 0.49, 0.29, 0.0))\n  ), 0.0, 1.0)) / (sqrt(\n    dot (uv1_4, uv1_4)\n  ) + 0.02));\n  float tmpvar_27;\n  tmpvar_27 = dot (xlat_mutableret2, vec3(0.32, 0.49, 0.29));\n  vec3 tmpvar_28;\n  tmpvar_28.x = 1.0;\n  tmpvar_28.y = tmpvar_27;\n  tmpvar_28.z = (tmpvar_27 / 2.0);\n  ret_5 = (ret_5 + (tmpvar_27 * tmpvar_28));\n  vec4 tmpvar_29;\n  tmpvar_29 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * xlat_mutableuv3.xyy) * (\n    (q28 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q30)));\n  if (((ret_5.x > (q26 * q3)) && (ret_5.x <= (q23 * q1)))) {\n    ret_5.z = (ret_5.z - (tmpvar_29.x * 0.5));\n  };\n  if (((ret_5.y > (q25 * q1)) && (ret_5.y <= (q19 * q2)))) {\n    ret_5.x = (ret_5.x - (tmpvar_29.y * 0.5));\n  };\n  if (((ret_5.z > (q24 * q2)) && (ret_5.z <= (q20 * q3)))) {\n    ret_5.y = (ret_5.y - (tmpvar_29.z * 0.5));\n  };\n  vec4 tmpvar_30;\n  tmpvar_30.w = 1.0;\n  tmpvar_30.xyz = ret_5;\n  ret = tmpvar_30.xyz;\n }","warp_hlsl":"float2 complex_mul(float2 factorA, float2 factorB){\n   return float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);\n}\n\nfloat2 complex_pow(float2 base, int exponent){\n   float2 exponentiation = float2(1,0);\n   for(int i = 0; i<exponent; i++){\n      exponentiation = complex_mul(base,exponentiation);\n   }\n   return exponentiation;\n}\n\nfloat2 complex_square(float2 domain){\n   return complex_mul(domain,domain);\n}\n\nfloat2 complex_div(float2 numerator, float2 denominator){\n   return float2( numerator.x*denominator.x + numerator.y*denominator.y,\n                  numerator.y*denominator.x - numerator.x*denominator.y)/\n          (denominator.x*denominator.x + denominator.y*denominator.y);\n}\n\nfloat2 uv_aspect(float2 uvo, float2 uvm, float2 aspectr, float2 motion_scale){\n   return 0.5 + (lerp(uvo,uvm,motion_scale)-0.5)*aspectr;\n}\n\nfloat2 uv_scale(float2 domain, float2 center, float2 scale){\n   return center + (domain-center)*scale;\n}\n\nfloat2 uv_torus_mirror(float2 domain, float cutoff){\n   return 0.5 + (1.0 - abs( frac( domain * 0.5 ) * 2 - 1.0 )-0.5)*cutoff;\n}\n\nfloat2 uv_polar(float2 domain, float2 center){\n   float2 c = domain - center;\n   float rad_hq = length(c);\n   float ang_hq = atan2(c.x,c.y);\n   return float2(ang_hq*M_INV_PI_2, rad_hq);\n}\n\nfloat2 uv_polar_logarithmic(float2 domain, float2 center, int fins, float log_factor, float2 coord){\n   float2 polar = uv_polar(domain, center);\n   return float2(polar.x*fins+coord.x, log_factor*log(1/polar.y) + coord.y);\n}\n\nfloat2 uv_moebius_transformation(float2 domain, float2 zeroPoint, float2 infinityPoint,float zoom){\n   return complex_div((domain - zeroPoint)*zoom, domain - infinityPoint)+0.5;\n}\n\nfloat2 uv_bipolar_logarithmic(float2 domain, float2 northPole, float2 southPole, int fins, float log_factor, float2 coord){\n   float2 help_uv = uv_moebius_transformation(domain, northPole, southPole, 1);\n   return uv_polar_logarithmic(help_uv,0.5,fins,log_factor,coord);\n}\n\nbool mask_rectangle(float2 domain, float2 position, float2 dimensions){\n   return (domain.x>position.x-dimensions.x)*(domain.x<position.x+dimensions.x)*\n          (domain.y>position.y-dimensions.y)*(domain.y<position.y+dimensions.y);\n}\n\nbool mask_circle(float2 domain, float2 position, float radius){\n   return length(domain-position)<radius;\n}\n\nbool mask_spiral_logarithmic(float2 domain, float2 center, int fins, float thickness, float spiral_factor, float zoom){\n   float2 c = domain - center;\n   float rad_hq = length(c);\n   float ang_hq = atan2(c.x,c.y);\n\n   return frac(fins*ang_hq*M_INV_PI_2 + spiral_factor*log(1/rad_hq)+zoom)<thickness;\n}\n\nfloat figure_spiral(float2 domain, float2 center, int fins, float thickness, float spiral_factor, float zoom){\n   float2 c = domain - center;\n   float rad_hq = length(c);\n   float ang_hq = atan2(c.x,c.y);\n\n   return frac(fins*ang_hq*M_INV_PI_2 + spiral_factor*log(1/rad_hq)+zoom)<thickness;\n}\n\nfloat figure_circle(float2 domain, float2 position, float radius){\n   return saturate(1-length(domain-position)/radius);\n}\n\nfloat figure_border(float2 domain, float thickness){\n   float2 help_uv = frac(domain-0.5);\n   help_uv = min(help_uv,1-help_uv)*2;\n   return saturate(max(help_uv.x,help_uv.y)-1+thickness)/(thickness);\n}\n\nshader_body\n{\nfloat2 base_uv = uv_aspect(uv_orig, uv, aspect.wz, 0);\nfloat2 northPole = float2(0.25,0.5);\nfloat2 southPole = float2(0.75,0.5);\nint fins = 4;\nfloat log_factor = 0.6;\nfloat2 coord = float2(time*0.1,time*0.5);\n\nfloat2 bipolar_uv = uv_bipolar_logarithmic(base_uv, northPole, southPole, fins, log_factor, coord );\n\nret = figure_border(bipolar_uv,0.15)*float3(1,0.8,0);\nlog_factor = 1;\ncoord = float2(0,time*0.3);\nbipolar_uv = uv_torus_mirror(bipolar_uv,1);\nfloat2 polar_uv = uv_polar_logarithmic(bipolar_uv,0.5,fins,log_factor,coord);\nret = lerp(ret,float3(0.5,0,1),figure_border(polar_uv,0.25));\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((polar_uv.xyy*q27\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q29\n                     );\nif(ret.x> q20*q3         && ret.x<= q24*q1        )ret.y -= (noise9).x*.5; \nif(ret.y> q19*q1         && ret.y<= q25*q2        )ret.z -= (noise9).y*.5; \nif(ret.z> q23*q2         && ret.z<= q26*q3        )ret.x -= (noise9).z*.5; \n}","comp_hlsl":"sampler sampler_pw_noise_lq;\n\nfloat k1, k2, mask1, mask2, mask3, rad1, rad2, rad3;\nfloat2 rs, rss, rss0, rs0, uv2, uv3,uv4, rsk, uvo;\nfloat2 dz1, dz2, dz3, Kugel1, Kugel2, Kugel3,tmp;\nfloat3 noise, ret1, ret2;\n\nshader_body {\nuvo = uv;\nuv = mul(uv*aspect.xy,float2x2(_qa));\n\nuv = uv + -.0- .1*float2(q5,q6);\nfloat2 uv1 = (uv-.5 );//*aspect.xy;\n\n//Kugel1\nrsk = (uv1 + float2 (q9,q10)) ;\ndz1 = normalize(rsk);\nrad1 = q11*length (rsk) ;\nuv4 =  tan(rad1)*dz1;\nmask1 = saturate(8-8*rad1);\nKugel1 = uv4*mask1;\n\n//Kugel2\nrsk = (uv1 + float2 (q13,q14)) ;\ndz2 = normalize(rsk);\nrad2 = q15*length (rsk) ;\nuv4 =  tan(rad2)*dz2;\nmask2 = saturate(8-8*rad2);\nKugel2 = uv4*mask2;\n\n//Kugel3\nrsk = (uv1 + float2 (q17,q18)) ;\ndz3 = normalize(rsk);\nrad3 = q19*length (rsk) ;\nuv4 =  tan(rad3)*dz3;\nmask3 = saturate(8-8*rad3);\nKugel3 = uv4*mask3;\n\nfloat2 dz = (Kugel2 + Kugel1 + Kugel3)*.2;\n//******************** STARS\nuv1 += dz;\nrss0.x = atan2(uv1.x, uv1.y)/3.1416;\nrss0.y = .1*q21/(length (uv1));\n\nrss = float2 (rss0.x,rss0.y+time);\nrss = mul(rss,float2x2(.7,.7,-.7,.7));\nfloat noise = (tex2D(sampler_pw_noise_lq,rss/32)-.5 >= 0);\ntmp = abs(frac(rss*8)-.5);\nfloat3 dots = saturate(.04/length(tmp)) *noise;\n\nrss = float2 (rss0.x,rss0.y+time/4);\nrss = mul(rss,float2x2(.7,.7,-.7,.7));\nnoise = (tex2D(sampler_pw_noise_lq,rss/32)-.5 >= 0);\ntmp = abs(frac(rss*8)-.5);\ndots += saturate(.02/length(tmp)) * noise;\n\ndots *= saturate(.2/abs(rss0.y));\ndots *= dots*.6;\n//*************************\n\nfloat z = q32/(uv1.y-.02);//floor proxy\nfloat mask = saturate(4/z);\nrs0.x = (uv1.x)*z;\nrs0.y = z/4;\nrs.x = rs0.x ;\nrs.y = rs0.y + q8*3;\nfloat3 mirror = lum(tex2D(sampler_pw_noise_lq,.02*rs))-.5;\nz = .2/(length(uv1)-q21);\nuv2.y = z + q8;\nuv2.x = rss0.x +q7;\nuv3 =frac(uv2 +.0*mask*mirror);\nuv3 *=2 ;\nfloat2 m = floor(frac(uv3*0.5)*2);\nuv3 = frac(uv3)*(1-m) + (m)*frac(1-uv3);\n\nret1 =  tex2D (sampler_main,uv3)/z;\nret = max(ret1*(1-0.5*mask),mirror*mask) +dots;\n\nfloat mod = q22*2;\nfloat3 blk = abs(rsqrt(rad1)*dz1.x*roam_sin\n+rsqrt(rad2)*dz2.y*roam_sin.rbg\n+rsqrt(rad3)*dz3.x*roam_sin.bgr)*(.2+mirror*mask)*mod; \nret += blk;\n\nret2 = saturate(.02*q22*q21/length (uv1)*\n (lum(tex2D (sampler_main,uv1+.5))));\nret2 /= (length(uv1)+.02);\nfloat k1 = lum(ret2);\nret += k1*float3(1,k1,k1/2)  ;\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv3.xyy*q28\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q30 \n                     );\nif(ret.x> q26*q3         && ret.x<= q23*q1        )ret.z -= (noise9).x*.5; \nif(ret.y> q25*q1         && ret.y<= q19*q2        )ret.x -= (noise9).y*.5; \nif(ret.z> q24*q2         && ret.z<= q20*q3        )ret.y -= (noise9).z*.5; \n}"}