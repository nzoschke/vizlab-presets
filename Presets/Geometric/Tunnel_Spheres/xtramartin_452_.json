{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":6,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.001,"wave_scale":2.103,"wave_smoothing":0.54,"wave_mystery":0.38,"modwavealphastart":0.81,"modwavealphaend":1.4,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0,"ob_b":1,"ob_a":0.3,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"sides":58,"textured":1,"y":0.32,"rad":0.37747,"tex_zoom":0.72141,"g":1,"b":1,"a":0.7,"r2":1,"b2":1,"a2":1,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"tex_ang = 3+2*q1;\n\ntrel = time;\nx = .5 + sin(trel*2)*.2;\ny = .5 + cos(trel*2)*.2;","init_eqs_eel":"","frame_eqs_eel":"tex_ang = 3+2*q1;\n\ntrel = time;\nx = .5 + sin(trel*2)*.2;\ny = .5 + cos(trel*2)*.2;"},{"baseVals":{"sides":32,"rad":0.06892,"tex_zoom":1.8315,"g":1,"b":1,"a":0.9,"g2":0,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"a = q24/2; a2 = 0;\n\nr = int(rand(10))/10;\ng = int(rand(10))/10;\nb = int(rand(10))/10;\n\nrad = .06*q22;","init_eqs_eel":"","frame_eqs_eel":"a = q24/2; a2 = 0;\n\nr = int(rand(10))/10;\ng = int(rand(10))/10;\nb = int(rand(10))/10;\n\nrad = .06*q22;"},{"baseVals":{"sides":63,"x":0.123,"y":0,"rad":0.27319,"tex_zoom":0.49981,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = .5 + .1* sin (time*73);\ny = .5 + .1* sin (time*23);\n\nr = 0; g = 0; b = 0;\nr2 = 1; g2 = 1; b2 = 1;\n\nrad = mid_att/100;\na = .7;\na2 = a;","init_eqs_eel":"","frame_eqs_eel":"x = .5 + .1* sin (time*73);\ny = .5 + .1* sin (time*23);\n\nr = 0; g = 0; b = 0;\nr2 = 1; g2 = 1; b2 = 1;\n\nrad = mid_att/100;\na = .7;\na2 = a;"},{"baseVals":{"y":0.51,"rad":0.19869,"tex_ang":1.00531,"tex_zoom":0.49981,"g":0.4,"a":0.7,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = 0.05 + int(rand(900))/1000;\ny = 0.05 + int(rand(900))/1000;\n ","init_eqs_eel":"","frame_eqs_eel":"x = 0.05 + int(rand(900))/1000;\ny = 0.05 + int(rand(900))/1000;\n "}],"waves":[{"baseVals":{"enabled":1,"samples":128,"additive":1,"scaling":0.89152,"smoothing":0,"g":0,"b":0},"init_eqs_str":"a.q24=0;a.q27=0;a.t1=1+.3*(.01*Math.floor(rand(101))-.01*Math.floor(rand(101)));a.t2=1+.3*(.01*Math.floor(rand(101))-.01*Math.floor(rand(101)));a.t3=1+.3*(.01*Math.floor(rand(101))-.01*Math.floor(rand(101)));a.t4=1+.3*(.01*Math.floor(rand(101))-.01*Math.floor(rand(101)));a.t5=1+.3*(.01*Math.floor(rand(101))-.01*Math.floor(rand(101)));a.t6=1+.3*(.01*Math.floor(rand(101))-.01*Math.floor(rand(101)));a.t7=1+.3*(.01*Math.floor(rand(101))-.01*Math.floor(rand(101)));a.t8=1+.3*(.01*\nMath.floor(rand(101))-.01*Math.floor(rand(101)));","frame_eqs_str":"","point_eqs_str":"a.x=.4+.2*a.sample;a.y=.5+.05*a.value2;a.a=1*a.q24*mod(a.q27+1,2);a.r=1;a.b=1;a.g=.5;","init_eqs_eel":"t1 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt2 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt3 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt4 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt5 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt6 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt7 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt8 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\n","frame_eqs_eel":"","point_eqs_eel":"x = .4+.2*sample ;\ny = .5+ value2*.05;\n\na = 1*q24*((q27+1)%2);\n\nr = 1; b = 1; g = .5;"},{"baseVals":{"enabled":1,"samples":128,"scaling":0.89152,"smoothing":0,"r":0,"g":0,"a":0.1},"init_eqs_str":"a.q24=0;a.q27=0;a.t;","frame_eqs_str":"","point_eqs_str":"a.y=.4+.2*a.sample;a.x=.5+.05*a.value2;a.a=1*a.q24*mod(a.q27,2);a.r=1;a.b=1;a.g=.6;","init_eqs_eel":"t","frame_eqs_eel":"","point_eqs_eel":"y = .4 + .2*sample ;\nx = .5+ value2*0.05;\n\na = 1*q24*(q27%2);\n\nr = 1 ; b = 1 ; g = .6;"},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"ra = .8;\nrb = .5;\npib = 6.28318530718;\n\n\ntic = min(time-tin,.1);\ntin = if(equal(sample,0),time,tin);\n\nmod = 1.5 + .5*sin(time*.15);\nmed = 1.5 + .5*sin(time*.134);\nmed = 5;\namod = 3;\n\nvr = int(rand(10001))*.0001;\nrb = rb + int(rand(10001))*.0001*.1;\n\na = vr;\n\nsa = vr*pib*.5;\nsp = sa*mod + q1*1.3;\nsam = sa*med - q1*.219;\n\nox = ra*sin(sam*pib);\noy = ra*cos(sam*pib);\nox = ox + rb*-cos(sp)*sin(sam*pib);\noz = rb*-sin(sp);\noy = oy + rb*-cos(sp)*cos(sam*pib);\n\n\nxang = time*.132;\nxang = q2;\nyang = time*.153;\nyang = q3;\nzang = time*.110;\nzang = q4;\nfov = 0.6 + 0.2*sin(time);\nfov = .5;\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 2;\nx = ox*fov/oz + 0.5;\nx = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ra = .8;\nrb = .5;\npib = 6.28318530718;\n\n\ntic = min(time-tin,.1);\ntin = if(equal(sample,0),time,tin);\n\nmod = 1.5 + .5*sin(time*.15);\nmed = 1.5 + .5*sin(time*.134);\nmed = 5;\namod = 3;\n\nvr = int(rand(10001))*.0001;\nrb = rb + int(rand(10001))*.0001*.1;\n\na = vr;\n\nsa = vr*pib*.5;\nsp = sa*mod + q1*1.3;\nsam = sa*med - q1*.219;\n\nox = ra*sin(sam*pib);\noy = ra*cos(sam*pib);\nox = ox + rb*-cos(sp)*sin(sam*pib);\noz = rb*-sin(sp);\noy = oy + rb*-cos(sp)*cos(sam*pib);\n\n\nxang = time*.132;\nxang = q2;\nyang = time*.153;\nyang = q3;\nzang = time*.110;\nzang = q4;\nfov = 0.6 + 0.2*sin(time);\nfov = .5;\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 2;\nx = ox*fov/oz + 0.5;\nx = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n"}],"init_eqs_str":"a.trig2=0;a.p3z=0;a.index2=0;a.vtrig=0;a.index=0;a.q12=0;a.q18=0;a.q22=0;a.q21=0;a.hy=0;a.q13=0;a.q15=0;a.q6=0;a.q1=0;a.dec_med=0;a.q5=0;a.p2z=0;a.trel=0;a.q9=0;a.rott=0;a.p1z=0;a.is_beat=0;a.q23=0;a.q22slow=0;a.k1=0;a.q24=0;a.vx=0;a.dec_slow=0;a.q11=0;a.z0=0;a.q10=0;a.vy=0;a.q4=0;a.q16=0;a.q26=0;a.p2=0;a.avg=0;a.q19=0;a.beat=0;a.q17=0;a.vol=0;a.p1=0;a.peak=0;a.trig1=0;a.q2=0;a.q27=0;a.q14=0;a.trig3=0;a.speed=0;a.q3=0;a.t0=0;a.hx=0;a.q28=0;a.q20=0;a.prox=1;","frame_eqs_str":"a.dec_med=pow(.8,div(30,a.fps));a.dec_slow=pow(.8,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,16);a.index2=mod(a.index2+a.is_beat*bnot(a.index),4);a.q22=a.peak;a.q22slow=a.q22slow*a.dec_slow+a.q22*(1-a.dec_slow);a.q23=a.q22slow;a.q24=\na.is_beat;a.q26=a.bass_att+a.mid_att+a.treb_att;a.vol=a.vol*a.dec_med+(1-a.dec_med)*a.q26;a.q27=a.index+1;a.q28=a.index2;a.k1=a.is_beat*equal(mod(a.index,2),0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_med*a.p2+(1-a.dec_med)*a.p1;a.rott+=div(16*a.q22*(1-a.dec_med),a.fps)*below(a.q27,6);a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.q3=-a.q2;a.q4=a.q1;a.vtrig=a.is_beat*bnot(mod(a.index,2));a.vx=a.vx*bnot(a.vtrig)+a.vtrig*(div(Math.floor(rand(100)),100)-.5);a.vy=a.vy*bnot(a.vtrig)+a.vtrig*(div(Math.floor(rand(100)),\n100)-.5);a.vx*=below(mod(a.index,15),15);a.vy*=below(mod(a.index,15),15);a.q5=5*a.vx;a.q6=5*a.vy;a.q21=div(1+Math.sin(div(a.time,12)),8)+.01;a.trig1=a.q24*bnot(mod(a.index,12));a.trig2=a.q24*bnot(mod(a.index+4,12));a.trig3=a.q24*bnot(mod(a.index+8,12));a.trel+=div(a.vol,a.fps);a.z0=1;a.speed=div(a.vol,2);a.hx=Math.sin(a.trel);a.hy=Math.cos(a.trel);a.p1z=bnot(a.trig1)*(a.p1z+div((5+a.p1z)*a.speed,a.fps))+a.trig1*a.z0;a.p1z=Math.max(a.p1z,.1);a.q9=div(a.hx,a.p1z);a.q10=div(a.hy,a.p1z);a.q11=a.p1z;a.q12=\n.1+.02*a.q26*bnot(mod(a.index+2,3))*a.p1z*Math.exp(div(-a.p1z,100));a.p2z=bnot(a.trig2)*(a.p2z+div((5+a.p2z)*a.speed,a.fps))+a.trig2*a.z0;a.p2z=Math.max(a.p2z,.1);a.q13=div(2*a.hx,a.p2z);a.q14=div(-.5*a.hy,a.p2z);a.q15=a.p2z;a.q16=.1+.02*a.q26*bnot(mod(a.index+2,3))*a.p2z*Math.exp(div(-a.p2z,100));a.p3z=bnot(a.trig3)*(a.p3z+div((5+a.p3z)*a.speed,a.fps))+a.trig3*a.z0;a.p3z=Math.max(a.p3z,.1);a.q17=div(-1.4*a.hx,a.p3z);a.q18=div(2*a.hy,a.p3z);a.q19=a.p3z;a.q20=.1+.02*a.q26*bnot(mod(a.index+2,3))*a.p3z*\nMath.exp(div(-a.p3z,100));","pixel_eqs_str":"a.zoom=1.2+.2*Math.sin(div(a.time,3));","init_eqs_eel":"prox = 1;","frame_eqs_eel":"dec_med = pow (0.8, 30/fps);\ndec_slow = pow (0.8, 30/fps);\n//dec_xlow = pow (0.999, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %16;\nindex2 = (index2 + is_beat*bnot(index))%4;\n\nq22 = peak;\nq22slow = q22slow*dec_slow + q22*(1-dec_slow);\nq23 = q22slow;\nq24 = is_beat;\nq26 = bass_att + mid_att + treb_att;\nvol = vol*dec_med + (1-dec_med)*q26;\nq27 = index + 1;\nq28 = index2 ;\n\nk1 =  is_beat*equal(index%2,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\n//rott = p2 * 3.1416/2;\nrott = rott + q22*16*(1-dec_med)/fps*below(q27,6);\n//*****tunnel tilting\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\n//****tunnel viewpoint x,y\nvtrig = is_beat * bnot(index%2);\nvx = vx * bnot(vtrig) + vtrig * (int(rand(100))/100-.5);\nvy = vy * bnot(vtrig) + vtrig * (int(rand(100))/100-.5);\nvx = vx* below(index%15,15); //###\nvy = vy* below(index%15,15);\nq5 = vx*5;\nq6 = vy*5;\n\n//***tunnel width\nq21 = (1+sin(time/12))/8+.01;\n\n\n//***********************\ntrig1= q24*bnot(index%12);\ntrig2= q24*bnot((index+4)%12);\ntrig3= q24*bnot((index+8)%12);\ntrel = trel + vol/fps;\nz0 = 1;\nspeed = vol/2;\nhx = sin(trel);\nhy = cos(trel);\n\np1z = bnot(trig1)* (p1z + (5+p1z)*speed/fps)+trig1*z0;\np1z = max(p1z,.1);\nq9 = hx/(p1z); \nq10 = hy/(p1z); \nq11 = p1z;\nq12 = .1+.02*q26*bnot((index+2)%3)*p1z*exp(-p1z/100);\n\np2z = bnot(trig2)* (p2z + (5+p2z)*speed/fps)+trig2*z0;\np2z = max(p2z,.1);\nq13 = 2*hx/(p2z); \nq14 = -.5*hy/(p2z); \nq15 = p2z;\nq16 = .1+.02*q26*bnot((index+2)%3)*p2z*exp(-p2z/100);\n\n\np3z = bnot(trig3)* (p3z + (5+p3z)*speed/fps)+trig3*z0;\np3z = max(p3z,.1);\nq17 = -1.4*hx/(p3z); \nq18 = 2*hy/(p3z); \nq19 = p3z;\nq20 = .1+.02*q26*bnot((index+2)%3)*p3z*exp(-p3z/100);","pixel_eqs_eel":"zoom = 1.2 + .2 *sin(time/3);","warp":" shader_body { \n  float k1_1;\n  float ky_2;\n  vec2 uv3_3;\n  uv3_3 = (100.0 * (uv - vec2(0.5, 0.5)));\n  float tmpvar_4;\n  tmpvar_4 = dot (texture (sampler_noise_lq, uv), vec4(0.32, 0.49, 0.29, 0.0));\n  ky_2 = clamp (((\n    (-(uv3_3.y) / 100.0)\n   + \n    ((tmpvar_4 / 4.0) * cos((16.0 * tmpvar_4)))\n  ) + 0.23), 0.0, 1.0);\n  k1_1 = (uv3_3.x - (sign(uv3_3.x) * 24.0));\n  k1_1 = (k1_1 - (sign(k1_1) * 9.0));\n  k1_1 = (k1_1 + ((\n    (k1_1 - (12.0 * sign(k1_1)))\n   * ky_2) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((\n    (k1_1 - (24.0 * sign(k1_1)))\n   * ky_2) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((\n    (k1_1 - (36.0 * sign(k1_1)))\n   * ky_2) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((\n    (k1_1 - (48.0 * sign(k1_1)))\n   * ky_2) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((\n    (k1_1 - (60.0 * sign(k1_1)))\n   * ky_2) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  float tmpvar_5;\n  tmpvar_5 = clamp (k1_1, -1.6, 1.6);\n  k1_1 = tmpvar_5;\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ((texture (sampler_main, fract(uv)).xyz * 0.5) + (vec3(0.1, 0.0, 0.0) * cos(tmpvar_5)));\n  ret = tmpvar_6.xyz;\n }","comp":"vec3 xlat_mutableret2;\nvec2 xlat_mutablerss;\nvec2 xlat_mutablerss0;\n shader_body { \n  vec2 uv_1;\n  vec3 dots_2;\n  vec2 uv1_3;\n  vec3 ret_4;\n  uv_1 = (uv * aspect.xy);\n  vec2 tmpvar_5;\n  tmpvar_5.x = q5;\n  tmpvar_5.y = q6;\n  uv_1 = (uv_1 - (0.1 * tmpvar_5));\n  mat2 tmpvar_6;\n  tmpvar_6[uint(0)] = _qa.xy;\n  tmpvar_6[1u] = _qa.zw;\n  uv1_3 = ((uv_1 - 0.5) * tmpvar_6);\n  float tmpvar_7;\n  float tmpvar_8;\n  tmpvar_8 = (min (abs(\n    (uv1_3.x / uv1_3.y)\n  ), 1.0) / max (abs(\n    (uv1_3.x / uv1_3.y)\n  ), 1.0));\n  float tmpvar_9;\n  tmpvar_9 = (tmpvar_8 * tmpvar_8);\n  tmpvar_9 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)\n     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)\n   * tmpvar_9) + 0.9999793) * tmpvar_8);\n  tmpvar_9 = (tmpvar_9 + (float(\n    (abs((uv1_3.x / uv1_3.y)) > 1.0)\n  ) * (\n    (tmpvar_9 * -2.0)\n   + 1.570796)));\n  tmpvar_7 = (tmpvar_9 * sign((uv1_3.x / uv1_3.y)));\n  if ((abs(uv1_3.y) > (1e-08 * abs(uv1_3.x)))) {\n    if ((uv1_3.y < 0.0)) {\n      if ((uv1_3.x >= 0.0)) {\n        tmpvar_7 += 3.141593;\n      } else {\n        tmpvar_7 = (tmpvar_7 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_7 = (sign(uv1_3.x) * 1.570796);\n  };\n  xlat_mutablerss0.x = (tmpvar_7 / 3.1416);\n  xlat_mutablerss0.y = (0.003 / sqrt(dot (uv1_3, uv1_3)));\n  vec2 tmpvar_10;\n  tmpvar_10.x = (xlat_mutablerss0.x + (q1 / 3.0));\n  tmpvar_10.y = (xlat_mutablerss0.y + time);\n  xlat_mutablerss = (tmpvar_10 * mat2(0.7, -0.7, 0.7, 0.7));\n  vec4 tmpvar_11;\n  tmpvar_11 = vec4(greaterThanEqual ((texture (sampler_pw_noise_lq, \n    (xlat_mutablerss / 32.0)\n  ) - 0.5), vec4(0.0, 0.0, 0.0, 0.0)));\n  vec2 tmpvar_12;\n  tmpvar_12 = abs((fract(\n    (xlat_mutablerss * 8.0)\n  ) - 0.5));\n  vec2 tmpvar_13;\n  tmpvar_13.x = xlat_mutablerss0.x;\n  tmpvar_13.y = (xlat_mutablerss0.y + (time / 4.0));\n  xlat_mutablerss = (tmpvar_13 * mat2(0.7, -0.7, 0.7, 0.7));\n  vec2 tmpvar_14;\n  tmpvar_14 = abs((fract(\n    (xlat_mutablerss * 8.0)\n  ) - 0.5));\n  dots_2 = (vec3((clamp (\n    (0.04 / sqrt(dot (tmpvar_12, tmpvar_12)))\n  , 0.0, 1.0) * tmpvar_11.x)) + (clamp (\n    (0.02 / sqrt(dot (tmpvar_14, tmpvar_14)))\n  , 0.0, 1.0) * vec4(\n    greaterThanEqual ((texture (sampler_pw_noise_lq, (xlat_mutablerss / 32.0)) - 0.5), vec4(0.0, 0.0, 0.0, 0.0))\n  ).x));\n  dots_2 = (dots_2 * clamp ((0.2 / \n    abs(xlat_mutablerss0.y)\n  ), 0.0, 1.0));\n  dots_2 = (dots_2 * dots_2);\n  xlat_mutableret2 = (clamp ((\n    ((q22 * q21) / (sqrt(dot (uv1_3, uv1_3)) + 0.4))\n   * texture (sampler_main, \n    ((uv1_3 * ((q22 * \n      (float(mod (q27, 2.0)))\n    ) + 0.5)) + 0.5)\n  )), 0.0, 1.0).xyz / (sqrt(\n    dot (uv1_3, uv1_3)\n  ) + 0.02));\n  float tmpvar_15;\n  tmpvar_15 = dot (xlat_mutableret2, vec3(0.32, 0.49, 0.29));\n  vec3 tmpvar_16;\n  tmpvar_16.x = 1.0;\n  tmpvar_16.y = tmpvar_15;\n  tmpvar_16.z = q22;\n  ret_4 = (tmpvar_15 * tmpvar_16);\n  float tmpvar_17;\n  tmpvar_17 = dot (dots_2, vec3(0.32, 0.49, 0.29));\n  vec3 tmpvar_18;\n  tmpvar_18.x = (1.0 - (tmpvar_17 / 4.0));\n  tmpvar_18.y = (tmpvar_17 / 2.0);\n  tmpvar_18.z = tmpvar_17;\n  ret_4 = (ret_4 + (tmpvar_17 * clamp (\n    (q23 * tmpvar_18)\n  , 0.0, 1.0)));\n  vec4 tmpvar_19;\n  tmpvar_19.w = 1.0;\n  tmpvar_19.xyz = ret_4;\n  ret = tmpvar_19.xyz;\n }","warp_hlsl":"float3 ret1, tree;\nfloat mask1;\n\nshader_body {\nfloat corr = texsize.xy*texsize_noise_hq.zw * 0.05;\nfloat2 uv1 = float2(uv.x-0.5,uv.y-0.5);\n\nfloat2 uv3 = uv1;\nfloat dist = 100 ;\n\nuv3 = dist * uv1;\n\nfloat zu = lum(tex2D (sampler_noise_lq,uv)) ;\nfloat ky = saturate(-uv3.y/100+zu/4*cos(16*zu)+.23);\n\nfloat k1 = uv3.x;\n\nk1 = k1 - sign (k1)*24; //Verdoppelung\nk1 = k1 - sign (k1)*9; //Verdoppelung\n\nint n = 1 ;\nfloat delta = .1;\nwhile (n <= 5) \n{\n  k1 += (k1-12*n*sign(k1))*ky*ky;\n  //Mult. mit n steuert \"Breitenwuchs\"\n  ky = saturate (ky - delta);\n  //delta ist vertikaler Verzweig. abstand\n  n++; \n}\n\nk1 = clamp(k1,-1.6,1.6);\n\ntree = float3 (.1,0,0) * (cos(k1));\n\n\nret = GetPixel(frac(uv))*.5 +tree;\n\n}","comp_hlsl":"sampler sampler_pw_noise_lq;\n\nfloat k1, k2, mask1, mask2, mask3, rad1, rad2, rad3;\nfloat2 rs, rss, rss0, rs0, uv2, uv3,uv4, rsk, uvo;\nfloat2 dz1, dz2, dz3, Kugel1, Kugel2, Kugel3,tmp;\nfloat3 noise, ret1, ret2;\n\nshader_body {\nuvo = uv;\nuv *= aspect.xy;\n\nuv = uv + -.0- .1*float2(q5,q6);\nfloat2 uv1 = (uv-.5 );//*aspect.xy;\nuv1 = mul(uv1,float2x2(_qa));\n\n//******************** STARS\nrss0.x = atan2(uv1.x, uv1.y)/3.1416;\nrss0.y = .003/(length (uv1));\n//rss0 = mul(rss0,float2x2(_qa));\n\nrss = float2 (rss0.x+q1/3,rss0.y+time);\nrss = mul(rss,float2x2(.7,.7,-.7,.7));\nfloat noise = (tex2D(sampler_pw_noise_lq,rss/32)-.5 >= 0);\ntmp = abs(frac(rss*8)-.5);\nfloat3 dots = saturate(.04/length(tmp)) *noise;\n\nrss = float2 (rss0.x,rss0.y+time/4);\nrss = mul(rss,float2x2(.7,.7,-.7,.7));\nnoise = (tex2D(sampler_pw_noise_lq,rss/32)-.5 >= 0);\ntmp = abs(frac(rss*8)-.5);\ndots += saturate(.02/length(tmp)) * noise;\n\ndots *= saturate(.2/abs(rss0.y));\ndots *= dots;\n//*************************\n\nret2 = saturate(1*q22*q21/ (length (uv1)+.4)*\n ((tex2D (sampler_main,uv1*(q22*(q27%2)+.5)+.5))));\nret2 /= (length(uv1)+.02);\nfloat k1 = lum(ret2) ;\nret = k1*float3(1,k1,q22);\nk1 = lum(dots);\nret += k1*saturate(q23*float3(1-k1/4,k1/2,k1));\n//ret = GetPixel(uvo);\n}"}