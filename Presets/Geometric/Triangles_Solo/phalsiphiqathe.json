{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"wave_dots":1,"wave_brighten":0,"wave_a":0.001,"wave_scale":0.01,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"zoom":0.99951,"warp":0.01,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0.5,"ob_r":0.01,"ib_size":0.26,"ib_r":1,"ib_g":1,"ib_b":1,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":3,"rad":0.2548,"tex_zoom":0.11657,"r":0,"r2":0.7,"b2":1,"a2":0.2,"border_a":1},"init_eqs_str":"a.q1=0;","frame_eqs_str":"a.ang=-a.q1;","init_eqs_eel":"","frame_eqs_eel":"ang  = -q1;"},{"baseVals":{"enabled":1,"sides":3,"rad":0.20676,"r":0,"g2":0,"a2":1,"border_a":0},"init_eqs_str":"a.q1=0;","frame_eqs_str":"a.ang=-a.q1;","init_eqs_eel":"","frame_eqs_eel":"ang = -q1;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"thick":1,"scaling":43.8652,"a":0.03},"init_eqs_str":"a.width=0;a.t5=0;a.q1=0;a.angle2=0;a.t3=0;a.angle=0;a.t6=0;a.t7=0;a.dist2=0;a.pty=0;a.otest=0;a.dist=0;a.t4=0;a.ptx=0;a.q8=0;","frame_eqs_str":"a.angle=2+a.q1+.1*a.bass;a.dist=.049;a.t4=a.angle;a.dist2=.7;a.a=.03*a.bass_att;a.angle2=.5*a.bass_att-1;a.width=10*a.bass+.2;a.t3=a.dist;a.t4=a.angle;a.t5=a.dist2;a.t6=.01953125*a.width;a.t7=a.angle2;","point_eqs_str":"a.r=.5+.5*Math.cos(6.2832*(a.sample+.125));a.g=.5+.5*Math.cos(6.2832*(a.sample+.375));a.b=.5+.5*Math.cos(3.1415*a.sample);a.angle=a.t4+a.t6*(a.sample-.5);a.ptx=.5+Math.cos(a.angle)*a.t3;a.pty=.5+Math.sin(a.angle)*a.t3*a.q8;a.otest=mod(512*a.sample,2);a.x=.00001<Math.abs(equal(a.otest,0))?a.ptx:a.x;a.y=.00001<Math.abs(equal(a.otest,0))?a.pty:a.y;a.ptx=.5+Math.cos(a.angle+a.t7)*a.t5;a.pty=.5+Math.sin(a.angle+a.t7)*a.t5*a.q8;a.x=.00001<Math.abs(equal(a.otest,1))?a.ptx:a.x;a.y=\n.00001<Math.abs(equal(a.otest,1))?a.pty:a.y;","init_eqs_eel":"","frame_eqs_eel":"\n// Ray startpoint\nangle = 2 + q1 + bass * 0.1;\ndist = 0.049;\nt4 = angle;\n\n// Ray\ndist2 = 0.7;\na = bass_att * 0.03;\nangle2 = bass_att * 0.5 - 1;\nwidth = bass * 10 + 0.2;\n\nt3 = dist;\nt4 = angle;\nt5 = dist2;\nt6 = width  * 0.01953125;\nt7 = angle2;","point_eqs_eel":"r = 0.5 + 0.5 * cos((sample+0.125) * 6.2832);\ng = 0.5 + 0.5 * cos((sample+0.375) * 6.2832);\nb = 0.5 + 0.5 * cos(sample * 3.1415);\n\nangle = t4 + (t6 * (sample-0.5));\nptx = 0.5 + cos(angle)*t3;\npty = 0.5 + sin(angle)*t3*q8 ;\n\notest = (sample*512)%2;\nx = if(equal(otest,0),ptx,x);\ny = if(equal(otest,0),pty,y);\n\nptx = 0.5 + cos(angle + t7)*t5;\npty = 0.5 + sin(angle + t7)*t5*q8;\n\nx = if(equal(otest,1),ptx,x);\ny = if(equal(otest,1),pty,y);\n"},{"baseVals":{"enabled":1,"a":0},"init_eqs_str":"a.width=0;a.t5=0;a.ofac=0;a.t1=0;a.q1=0;a.angle2=0;a.t3=0;a.angle=0;a.t6=0;a.t7=0;a.dist2=0;a.pty=0;a.otest=0;a.dist=0;a.t4=0;a.ptx=0;a.q8=0;","frame_eqs_str":"a.angle=4.4+a.q1;a.dist=.048;a.dist2=.7;a.ofac=.03*a.bass_att;a.angle2=.3*a.bass_att+.6;a.width=5*a.bass;a.t1=a.ofac;a.t3=a.dist;a.t4=a.angle;a.t5=a.dist2;a.t6=.01953125*a.width;a.t7=a.angle2;","point_eqs_str":"a.a=a.t1*Math.sin(3.1415*a.sample);a.angle=a.t4+a.t6*(a.sample-.5);a.ptx=.5+Math.cos(a.angle)*a.t3;a.pty=.5+Math.sin(a.angle)*a.t3*a.q8;a.otest=mod(512*a.sample,2);a.x=.00001<Math.abs(equal(a.otest,0))?a.ptx:a.x;a.y=.00001<Math.abs(equal(a.otest,0))?a.pty:a.y;a.ptx=.5+Math.cos(a.angle+a.t7)*a.t5;a.pty=.5+Math.sin(a.angle+a.t7)*a.t5*a.q8;a.x=.00001<Math.abs(equal(a.otest,1))?a.ptx:a.x;a.y=.00001<Math.abs(equal(a.otest,1))?a.pty:a.y;","init_eqs_eel":"","frame_eqs_eel":"\n// Ray startpoint\nangle = 4.4 + q1 ;\ndist = 0.048;\n\n// Ray\ndist2 = 0.7;\nofac = bass_att * 0.03;\nangle2 = bass_att * 0.3 + 0.6;\nwidth = bass * 5;\n\nt1 = ofac;\nt3 = dist;\nt4 = angle;\nt5 = dist2;\nt6 = width  * 0.01953125;\nt7 = angle2;","point_eqs_eel":"a = t1 * sin(sample * 3.1415);\n\nangle = t4 + (t6 * (sample-0.5));\nptx = 0.5 + cos(angle)*t3;\npty = 0.5 + sin(angle)*t3*q8;\n\notest = (sample*512)%2;\nx = if(equal(otest,0),ptx,x);\ny = if(equal(otest,0),pty,y);\n\nptx = 0.5 + cos(angle + t7)*t5;\npty = 0.5 + sin(angle + t7)*t5*q8;\n\nx = if(equal(otest,1),ptx,x);\ny = if(equal(otest,1),pty,y);"},{"baseVals":{"enabled":1,"scaling":37.78329},"init_eqs_str":"a.width2=0;a.width=0;a.t5=0;a.ofac=0;a.t1=0;a.q1=0;a.angle2=0;a.t3=0;a.angle=0;a.t6=0;a.t7=0;a.dist2=0;a.pty=0;a.otest=0;a.t2=0;a.dist=0;a.t4=0;a.ptx=0;a.q8=0;","frame_eqs_str":"a.angle=4.4+a.q1;a.dist=.048;a.width=5*a.bass;a.angle2=2+a.q1+.1*a.bass;a.dist2=.049;a.width2=10*a.bass+.2;a.ofac=.03*a.bass_att;a.t1=a.ofac;a.t2=.01953125*a.width2;a.t3=a.dist;a.t4=a.angle;a.t5=a.dist2;a.t6=.01953125*a.width;a.t7=a.angle2;","point_eqs_str":"a.r=.5+.5*Math.cos(6.2832*(a.sample+.125));a.g=.5+.5*Math.cos(6.2832*(a.sample+.375));a.b=.5+.5*Math.cos(3.1415*a.sample);a.a=a.t1*Math.sin(3.1415*a.sample);a.angle=a.t4+a.t6*(.5-a.sample);a.ptx=.5+Math.cos(a.angle)*a.t3;a.pty=.5+Math.sin(a.angle)*a.t3*a.q8;a.otest=mod(512*a.sample,2);a.x=.00001<Math.abs(equal(a.otest,0))?a.ptx:a.x;a.y=.00001<Math.abs(equal(a.otest,0))?a.pty:a.y;a.r=.00001<Math.abs(equal(a.otest,0))?1:a.r;a.g=.00001<Math.abs(equal(a.otest,0))?1:a.g;a.b=.00001<\nMath.abs(equal(a.otest,0))?1:a.b;a.angle=a.t7+a.t2*(a.sample-.5);a.ptx=.5+Math.cos(a.angle)*a.t5;a.pty=.5+Math.sin(a.angle)*a.t5*a.q8;a.x=.00001<Math.abs(equal(a.otest,1))?a.ptx:a.x;a.y=.00001<Math.abs(equal(a.otest,1))?a.pty:a.y;","init_eqs_eel":"","frame_eqs_eel":"\n// Ray startpoint\nangle = 4.4 + q1 ;\ndist = 0.048;\nwidth = bass * 5;\n\n// Ray 2 startpoint\nangle2 = 2 + q1 + bass * 0.1;\ndist2 = 0.049;\nwidth2 = bass * 10 + 0.2;\n\nofac = bass_att * 0.03;\n\n\nt1 = ofac;\nt2 = width2 * 0.01953125;\nt3 = dist;\nt4 = angle;\nt5 = dist2;\nt6 = width  * 0.01953125;\nt7 = angle2;","point_eqs_eel":"r = 0.5 + 0.5 * cos((sample+0.125) * 6.2832);\ng = 0.5 + 0.5 * cos((sample+0.375) * 6.2832);\nb = 0.5 + 0.5 * cos(sample * 3.1415);\na = t1 * sin(sample * 3.1415);\n\nangle = t4 + (t6 * (0.5 - sample));\nptx = 0.5 + cos(angle)*t3;\npty = 0.5 + sin(angle)*t3*q8 ;\n\notest = (sample*512)%2;\nx = if(equal(otest,0),ptx,x);\ny = if(equal(otest,0),pty,y);\nr = if(equal(otest,0),1,r);\ng = if(equal(otest,0),1,g);\nb = if(equal(otest,0),1,b);\n\n\nangle = t7 + (t2 * (sample-0.5));\nptx = 0.5 + cos(angle)*t5;\npty = 0.5 + sin(angle)*t5*q8;\n\nx = if(equal(otest,1),ptx,x);\ny = if(equal(otest,1),pty,y);\n"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.dx_r=0;a.dy_r=0;a.q8=0;","frame_eqs_str":"a.warp=0;a.decay=.92;","pixel_eqs_str":"a.zoom+=.1;a.rot+=.1*a.rad;a.rot+=.005*Math.cos(5*a.ang*a.bass*a.time);a.dx+=.1*above(a.rad,.25)*a.dx_r;a.dy+=.1*above(a.rad,.25)*a.dy_r;a.rot=.1*pow(-a.ang,3)-1.18*Math.sin(a.ang);a.zoom=1.45*Math.sin(-a.rad)+1.3+Math.sin(a.rad);a.dx+=.09*Math.sin(.785*a.q8);a.dy+=.09*Math.sin(.675*a.q8);a.zoom=-.0251+a.zoom+Math.abs(.1*Math.tan(1.9-a.rad));","init_eqs_eel":"","frame_eqs_eel":"warp = 0;\ndecay = .92;","pixel_eqs_eel":"zoom = zoom + .1;\nrot = rot + rad*.1;\nrot = rot + 0.01*(0.5*cos(ang*5*bass*time));\n\ndx = dx + 0.1*above(rad,0.25)*dx_r;\ndy = dy + 0.1*above(rad,0.25)*dy_r;\nrot=0.1*pow(-ang,3)-1.18*sin(ang);\nzoom=1.45*sin(-rad)+1.3+ sin(rad);\ndx = dx + 0.09*sin(q8*0.785);\ndy = dy + 0.09*sin(q8*0.675);\n//zoom = zoom +q7;\nzoom = -0.0251+zoom + 1*abs(0.1*tan((1.9)-rad));","warp":" shader_body { \n  vec2 uv_1;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 1.5)) + rand_frame.xy);\n  uv_1 = (mix (uv_orig, uv, vec2((\n    (dot (texture (sampler_main, mix (uv_orig, uv, vec2(4.0, 4.0))).xyz, vec3(0.32, 0.49, 0.29)) - dot (((texture (sampler_blur2, \n      mix (uv_orig, uv, vec2(-12.0, -12.0))\n    ).xyz * scale2) + bias2), vec3(0.32, 0.49, 0.29)))\n   * 12.0))) + ((\n    (texture (sampler_noise_lq, tmpvar_3) - 0.5)\n  .xy * texsize.zw) * 0.5));\n  ret_2 = ((texture (sampler_main, uv_1).xyz + (\n    (texture (sampler_noise_lq, tmpvar_3) - 0.5)\n   * 0.006).xyz) + -0.0006);\n  vec3 tmpvar_4;\n  tmpvar_4.z = 0.0;\n  tmpvar_4.xy = roam_sin.xy;\n  vec3 tmpvar_5;\n  tmpvar_5.z = 0.0;\n  tmpvar_5.xy = roam_cos.yx;\n  vec3 tmpvar_6;\n  tmpvar_6.z = 0.0;\n  tmpvar_6.x = dot (tmpvar_4, vec3(0.32, 0.49, 0.29));\n  tmpvar_6.y = dot (tmpvar_5, vec3(0.32, 0.49, 0.29));\n  ret_2 = (ret_2 * (texture (sampler_noisevol_hq, (\n    (vec3(0.05, 0.05, 0.0) * (((uv_1.xyy + \n      (tmpvar_6 * 0.5)\n    ) * texsize.xyy) * texsize_noisevol_hq.zww))\n   + \n    (vec3(0.0, 0.0, 0.2) * time)\n  )) * 1.4).xyz);\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ret_2;\n  ret = tmpvar_7.xyz;\n }","comp":" shader_body { \n  vec2 uv_rr_1;\n  vec2 uv_r_2;\n  vec3 ret_3;\n  vec2 tmpvar_4;\n  tmpvar_4.x = q13;\n  tmpvar_4.y = q14;\n  vec2 tmpvar_5;\n  tmpvar_5 = ((uv - tmpvar_4) * aspect.xy);\n  vec2 tmpvar_6;\n  tmpvar_6.x = ((q12 * tmpvar_5.x) - (q11 * tmpvar_5.y));\n  tmpvar_6.y = ((q11 * tmpvar_5.x) + (q12 * tmpvar_5.y));\n  uv_r_2 = (q15 * tmpvar_6);\n  uv_r_2 = (tmpvar_4 + (uv_r_2 * aspect.zw));\n  uv_r_2 = (1.0 - abs((\n    (fract((uv_r_2 * 0.5)) * 2.0)\n   - 1.0)));\n  vec2 tmpvar_7;\n  tmpvar_7 = (uv_r_2 - tmpvar_4);\n  vec2 tmpvar_8;\n  tmpvar_8.x = ((q18 * tmpvar_7.x) - (q17 * tmpvar_7.y));\n  tmpvar_8.y = ((q17 * tmpvar_7.x) + (q18 * tmpvar_7.y));\n  uv_rr_1 = (q16 * tmpvar_8);\n  uv_rr_1 = (tmpvar_4 + uv_rr_1);\n  vec2 tmpvar_9;\n  tmpvar_9 = (uv_rr_1 - 0.5);\n  float tmpvar_10;\n  float tmpvar_11;\n  tmpvar_11 = (min (abs(\n    (tmpvar_9.x / tmpvar_9.y)\n  ), 1.0) / max (abs(\n    (tmpvar_9.x / tmpvar_9.y)\n  ), 1.0));\n  float tmpvar_12;\n  tmpvar_12 = (tmpvar_11 * tmpvar_11);\n  tmpvar_12 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_12) + 0.05368138) * tmpvar_12) - 0.1173503)\n     * tmpvar_12) + 0.1938925) * tmpvar_12) - 0.3326756)\n   * tmpvar_12) + 0.9999793) * tmpvar_11);\n  tmpvar_12 = (tmpvar_12 + (float(\n    (abs((tmpvar_9.x / tmpvar_9.y)) > 1.0)\n  ) * (\n    (tmpvar_12 * -2.0)\n   + 1.570796)));\n  tmpvar_10 = (tmpvar_12 * sign((tmpvar_9.x / tmpvar_9.y)));\n  if ((abs(tmpvar_9.y) > (1e-08 * abs(tmpvar_9.x)))) {\n    if ((tmpvar_9.y < 0.0)) {\n      if ((tmpvar_9.x >= 0.0)) {\n        tmpvar_10 += 3.141593;\n      } else {\n        tmpvar_10 = (tmpvar_10 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_10 = (sign(tmpvar_9.x) * 1.570796);\n  };\n  vec2 tmpvar_13;\n  tmpvar_13.x = ((tmpvar_10 * q21) * 1.5);\n  tmpvar_13.y = (((0.666 * \n    log(sqrt(dot (tmpvar_9, tmpvar_9)))\n  ) - (tmpvar_10 * q21)) + q22);\n  ret_3 = texture (sampler_main, clamp ((0.5 + (\n    (0.5 - abs(((\n      fract((tmpvar_13 * 0.5))\n     * 2.0) - 1.0)))\n   * vec2(0.96, 1.02))), 0.0, 1.0)).xyz;\n  vec3 tmpvar_14;\n  tmpvar_14 = pow (((\n    (texture (sampler_blur1, uv).xyz * scale1)\n   + bias1) / treb_att), vec3((1.0 - dot (\n    clamp (ret_3, 0.0, 1.0)\n  , vec3(0.32, 0.49, 0.29)))));\n  ret_3 = tmpvar_14;\n  vec4 tmpvar_15;\n  tmpvar_15 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv_rr_1.xyy) * (\n    (q28 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q31)));\n  if (((tmpvar_14.x > (q26 * q13)) && (tmpvar_14.x <= (q23 * q11)))) {\n    ret_3.z = (tmpvar_14.z - (tmpvar_15.x * 0.5));\n  };\n  if (((tmpvar_14.y > (q25 * q11)) && (tmpvar_14.y <= (q22 * q12)))) {\n    ret_3.x = (tmpvar_14.x - (tmpvar_15.y * 0.5));\n  };\n  if (((ret_3.z > (q24 * q12)) && (ret_3.z <= (q21 * q13)))) {\n    ret_3.y = (tmpvar_14.y - (tmpvar_15.z * 0.5));\n  };\n  vec3 tmpvar_16;\n  tmpvar_16 = pow (((\n    (texture (sampler_blur2, uv).xyz * scale2)\n   + bias2) / bass_att), vec3((1.0 - dot (\n    clamp (ret_3, 0.0, 1.0)\n  , vec3(0.32, 0.49, 0.29)))));\n  ret_3 = tmpvar_16;\n  vec4 tmpvar_17;\n  tmpvar_17.w = 1.0;\n  tmpvar_17.xyz = tmpvar_16;\n  ret = tmpvar_17.xyz;\n }","warp_hlsl":"shader_body\n{\n\n\nfloat error     = 0.5;        // maximum random pixel offset\nfloat diffusion = 0.006;      // dither strength\nfloat fadeout   = -0.0006;    // may be minor 1/256 due to the error diffusion dither;\n\nfloat2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw*1.5 + rand_frame.xy;\nfloat magic = lum(GetPixel(lerp(uv_orig,uv, 4))) - lum(GetBlur2(lerp(uv_orig,uv,-12)));\nuv = lerp(uv_orig,uv, magic*12 ) + (tex2D(sampler_noise_lq, dither_uv)-0.5)*texsize.zw*error;\nret = GetPixel(uv)+(tex2D(sampler_noise_lq, dither_uv)-0.5)*diffusion + fadeout;\n\nfloat4 noise2 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy+float3(lum(roam_sin.xy),\n                                           lum(roam_cos.yx),\n                                           0)*0.5\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*0.2 \n                     );\nret *= (noise2)*1.4; \n}","comp_hlsl":"shader_body\n{\n//ret=tex2D(sampler_main,uv);\n// ***** Flexis rotating caleidoscope code *****\nfloat2 cntr = float2(q13,q14); float sin = q11; float cos = q12; float scale = q15;\nfloat2 uv_r = (uv-cntr)*aspect.xy;\n       uv_r = scale*float2( cos*uv_r.x - sin*uv_r.y, sin*uv_r.x + cos*uv_r.y); // rotation\n       uv_r = cntr + uv_r*aspect.zw;\n       uv_r = 1.0 - abs( frac( uv_r * 0.5 ) * 2.0 - 1.0 ); // mirror\nsin = q17; cos = q18; scale = q16;\nfloat2 uv_rr = (uv_r-cntr);\n       uv_rr = scale*float2( cos*uv_rr.x - sin*uv_rr.y, sin*uv_rr.x + cos*uv_rr.y); // counter-rotation\n       uv_rr = cntr + (uv_rr);\nfloat t = q22;\nfloat2 c = ((uv_rr-0.5));\nfloat1 ang_hq = atan2(c.x,c.y);\nfloat2 spiral = float2(ang_hq*q21*1.5,0.666*log(length(c))-ang_hq*q21+t);\nspiral = 0.5 + (0.5 - abs( frac( spiral * 0.5 ) * 2.0 - 1.0 ))*float2(0.96,1.02); // mirror\nret = GetPixel(saturate(spiral));\n\n\n//ret=lum(ret)>0+(lum(ret)<=0.75)*ret;\nret=pow(GetBlur1(uv).xyz/treb_att,1-lum(saturate(ret.xyz)));\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv_rr.xyy*q28\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q31\n                     );\nif(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; \nif(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; \nif(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; \nret=pow(GetBlur2(uv).xyz/bass_att,1-lum(saturate(ret.xyz)));\n//ret=1-ret;\n}"}