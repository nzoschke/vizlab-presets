{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"echo_zoom":1,"echo_orient":1,"wave_brighten":0,"wrap":0,"brighten":1,"wave_a":0.001,"wave_scale":0.01,"warpanimspeed":1.681,"warpscale":2.953,"zoomexp":0.01,"zoom":0.9901,"warp":1.24699,"wave_r":0,"wave_g":0,"wave_b":0,"wave_x":0,"wave_y":0,"ob_size":0.005,"ob_a":1,"ib_size":0,"ib_r":1,"ib_g":0,"ib_b":0,"ib_a":1,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":32,"additive":1,"thickoutline":1,"num_inst":33,"r":0,"g":0.5,"g2":0.5,"border_a":0},"init_eqs_str":"a.trans=0;a.q30=0;a.trans2=0;a.trans3=0;","frame_eqs_str":"a.trans=div(Math.floor(rand(Math.floor(a.q30))),15)+a.instance-a.instance;a.trans2=div(Math.floor(rand(Math.floor(a.q30))),15)+a.instance-a.instance;a.trans3=div(Math.floor(rand(Math.floor(a.q30))),15)+a.instance-a.instance;a.a=a.trans;a.x=.5+.01*Math.floor(rand(15))*a.bass_att*(.00001<Math.abs(equal(Math.floor(rand(2)),1))?1:-1)+a.instance-a.instance;a.y=.5+.01*Math.floor(rand(15))*a.bass_att*(.00001<Math.abs(equal(Math.floor(rand(2)),1))?1:-1)+a.instance-a.instance;a.rad=\n.09+div(Math.floor(rand(Math.floor(a.q30))),15)+a.instance-a.instance;a.r=.1*Math.floor(rand(a.q30))+a.instance-a.instance;a.g=.1*Math.floor(rand(a.q30))+a.instance-a.instance;a.b=.1*Math.floor(rand(a.q30))+a.instance-a.instance;a.r2=.1*Math.floor(rand(a.q30))+a.instance-a.instance;a.g2=.1*Math.floor(rand(a.q30))+a.instance-a.instance;a.b2=.1*Math.floor(rand(a.q30))+a.instance-a.instance;a.border_r=.1*Math.floor(rand(a.q30))+a.instance-a.instance;a.border_g=.1*Math.floor(rand(a.q30))+a.instance-a.instance;\na.border_b=.1*Math.floor(rand(a.q30))+a.instance-a.instance;","init_eqs_eel":"","frame_eqs_eel":"trans = int(rand(int(q30)))/15+instance-instance;\ntrans2 = int(rand(int(q30)))/15+instance-instance;\ntrans3 = int(rand(int(q30)))/15+instance-instance;\na = trans;\n//a2 = trans2;\n//border_a = trans3;\n\nx = .5 + int(rand(15))*0.01*bass_att*if(equal(int(rand(2)),1),1,-1)+instance-instance;\ny = .5 + int(rand(15))*0.01*bass_att*if(equal(int(rand(2)),1),1,-1)+instance-instance;\nrad = .09 + int(rand(int(q30)))/15+instance-instance;\nr=int(rand(q30))*.1+instance-instance;\ng=int(rand(q30))*.1+instance-instance;\nb=int(rand(q30))*.1+instance-instance;\nr2=int(rand(q30))*.1+instance-instance;\ng2=int(rand(q30))*.1+instance-instance;\nb2=int(rand(q30))*.1+instance-instance;\nborder_r=int(rand(q30))*.1+instance-instance;\nborder_g=int(rand(q30))*.1+instance-instance;\nborder_b=int(rand(q30))*.1+instance-instance;"},{"baseVals":{"enabled":1,"sides":32,"thickoutline":1,"textured":1,"num_inst":7,"r":0,"b":0.5,"g2":0,"b2":0.5,"border_a":0},"init_eqs_str":"a.trans=0;a.q30=0;a.trans2=0;a.trans3=0;","frame_eqs_str":"a.trans=div(Math.floor(rand(Math.floor(a.q30))),15)+a.instance-a.instance;a.trans2=div(Math.floor(rand(Math.floor(a.q30))),15)+a.instance-a.instance;a.trans3=div(Math.floor(rand(Math.floor(a.q30))),15)+a.instance-a.instance;a.a=a.trans;a.x=.5+.01*Math.floor(rand(15))*a.mid_att*(.00001<Math.abs(equal(Math.floor(rand(2)),1))?1:-1)+a.instance-a.instance;a.y=.5+.01*Math.floor(rand(15))*a.mid_att*(.00001<Math.abs(equal(Math.floor(rand(2)),1))?1:-1)+a.instance-a.instance;a.rad=.09+\ndiv(Math.floor(rand(Math.floor(a.q30))),15)+a.instance-a.instance;a.r=.1*Math.floor(rand(a.q30))+a.instance-a.instance;a.g=.1*Math.floor(rand(a.q30))+a.instance-a.instance;a.b=.1*Math.floor(rand(a.q30))+a.instance-a.instance;a.r2=.1*Math.floor(rand(a.q30))+a.instance-a.instance;a.g2=.1*Math.floor(rand(a.q30))+a.instance-a.instance;a.b2=.1*Math.floor(rand(a.q30))+a.instance-a.instance;a.border_r=.1*Math.floor(rand(a.q30))+a.instance-a.instance;a.border_g=.1*Math.floor(rand(a.q30))+a.instance-a.instance;\na.border_b=.1*Math.floor(rand(a.q30))+a.instance-a.instance;","init_eqs_eel":"","frame_eqs_eel":"trans = int(rand(int(q30)))/15+instance-instance;\ntrans2 = int(rand(int(q30)))/15+instance-instance;\ntrans3 = int(rand(int(q30)))/15+instance-instance;\na = trans;\n//a2 = trans2;\n//border_a = trans3;\n\nx = .5 + int(rand(15))*0.01*mid_att*if(equal(int(rand(2)),1),1,-1)+instance-instance;\ny = .5 + int(rand(15))*0.01*mid_att*if(equal(int(rand(2)),1),1,-1)+instance-instance;\nrad = .09 + int(rand(int(q30)))/15+instance-instance;\nr=int(rand(q30))*.1+instance-instance;\ng=int(rand(q30))*.1+instance-instance;\nb=int(rand(q30))*.1+instance-instance;\nr2=int(rand(q30))*.1+instance-instance;\ng2=int(rand(q30))*.1+instance-instance;\nb2=int(rand(q30))*.1+instance-instance;\nborder_r=int(rand(q30))*.1+instance-instance;\nborder_g=int(rand(q30))*.1+instance-instance;\nborder_b=int(rand(q30))*.1+instance-instance;\n"},{"baseVals":{"sides":32,"thickoutline":1,"num_inst":33,"r":0.5,"r2":0.5,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"trans = int(rand(int(q30)))/5+instance-instance;\ntrans2 = int(rand(int(q30)))/5+instance-instance;\ntrans3 = int(rand(int(q30)))/5+instance-instance;\na = trans;\n//a2 = trans2;\n//border_a = trans3;\n\nx = q1 + int(rand(15))*0.01*treb_att*if(equal(int(rand(2)),1),1,-1)+instance-instance;\ny = q2 + int(rand(15))*0.01*treb_att*if(equal(int(rand(2)),1),1,-1)+instance-instance;\nrad = .09 + int(rand(int(q30)))/15+instance-instance;\nr=int(rand(q3))*.1+instance-instance;\ng=int(rand(q3))*.1+instance-instance;\nb=int(rand(q3))*.1+instance-instance;\nr2=int(rand(q3))*.1+instance-instance;\ng2=int(rand(q3))*.1+instance-instance;\nb2=int(rand(q3))*.1+instance-instance;\nborder_r=int(rand(q3))*.1+instance-instance;\nborder_g=int(rand(q3))*.1+instance-instance;\nborder_b=int(rand(q3))*.1+instance-instance;\n","init_eqs_eel":"","frame_eqs_eel":"trans = int(rand(int(q30)))/5+instance-instance;\ntrans2 = int(rand(int(q30)))/5+instance-instance;\ntrans3 = int(rand(int(q30)))/5+instance-instance;\na = trans;\n//a2 = trans2;\n//border_a = trans3;\n\nx = q1 + int(rand(15))*0.01*treb_att*if(equal(int(rand(2)),1),1,-1)+instance-instance;\ny = q2 + int(rand(15))*0.01*treb_att*if(equal(int(rand(2)),1),1,-1)+instance-instance;\nrad = .09 + int(rand(int(q30)))/15+instance-instance;\nr=int(rand(q3))*.1+instance-instance;\ng=int(rand(q3))*.1+instance-instance;\nb=int(rand(q3))*.1+instance-instance;\nr2=int(rand(q3))*.1+instance-instance;\ng2=int(rand(q3))*.1+instance-instance;\nb2=int(rand(q3))*.1+instance-instance;\nborder_r=int(rand(q3))*.1+instance-instance;\nborder_g=int(rand(q3))*.1+instance-instance;\nborder_b=int(rand(q3))*.1+instance-instance;\n"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.tempo16=0;a.mq29=0;a.cthr=0;a.mq1=0;a.bluntnew=0;a.sharp=0;a.bfp=0;a.sens2=0;a.q25=0;a.q22=0;a.q21=0;a.q29=0;a.mre=0;a.mq21=0;a.mq24=0;a.heartnew=0;a.chng=0;a.mq28=0;a.mq23=0;a.sharpnew=0;a.q23=0;a.q24=0;a.mq30=0;a.tre=0;a.mfp=0;a.q26=0;a.heart=0;a.tfp=0;a.volnew=0;a.mq27=0;a.mq25=0;a.blunt=0;a.mq22=0;a.mq26=0;a.q27=0;a.sens=0;a.q3=0;a.q28=0;a.q30=0;a.bre=0;a.meter=4;a.btimer=1;a.mtimer=1;a.ttimer=1;a.bfp=div(a.fps,10);a.mfp=div(a.fps,10);a.tfp=div(a.fps,10);","frame_eqs_str":"a.chng=Math.sin(.5*a.time);a.cthr=.99;a.mq21=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq21;a.mq22=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq22;a.mq23=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq23;a.mq24=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq24;a.mq25=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq25;a.mq26=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq26;a.mq27=.00001<Math.abs(above(a.chng,a.cthr))?rand(1):a.mq27;a.mq28=.00001<Math.abs(above(a.chng,\na.cthr))?rand(1):a.mq28;a.mq29=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq29;a.mq30=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq30;a.monitor=a.chng;a.q21=a.mq21;a.q22=a.mq22;a.q23=a.mq23;a.q24=a.mq24;a.q25=a.mq25;a.q26=a.mq26;a.q27=a.mq27;a.q28=a.mq28;a.q29=a.mq29;a.q30=a.mq30;a.monitor=a.mq1;a.tempo16=480;a.sharpnew=a.treb;a.heartnew=a.mid;a.bluntnew=a.bass;a.volnew=a.sharpnew+a.heartnew+a.bluntnew;a.sens2=10;a.sens=5.5*div(1,a.bass+a.treb+a.mid);a.bre=.00001<Math.abs(below(a.blunt*\na.sens,a.bluntnew))?2:0;a.mre=.00001<Math.abs(below(a.heart*a.sens,a.heartnew))?2:0;a.tre=.00001<Math.abs(below(a.sharp*a.sens,a.sharpnew))?2:0;a.bfp=.00001<Math.abs(below(a.bfp,0))?div(a.fps,10):a.bfp-1;a.mfp=.00001<Math.abs(below(a.mfp,0))?div(a.fps,10):a.mfp-1;a.tfp=.00001<Math.abs(below(a.tfp,0))?div(a.fps,10):a.tfp-1;a.monitor=a.bre+a.mre+a.tre;a.zoom=.999;a.q30=3.5*(a.bass+a.treb+a.mid);a.q3=2*a.q30;a.sharp=a.treb;a.heart=a.mid;a.blunt=a.bass;","pixel_eqs_str":"","init_eqs_eel":"meter=4;//assumed since most common\nbtimer=1;//timer for slow decaying events\nmtimer=1;\nttimer=1;\nbfp=fps/10;\nmfp=fps/10;\ntfp=fps/10;","frame_eqs_eel":"chng=sin(time*.5);\ncthr=.99;\nmq21=if(above(chng,cthr),rand(3),mq21);\nmq22=if(above(chng,cthr),rand(3),mq22);\nmq23=if(above(chng,cthr),rand(3),mq23);\nmq24=if(above(chng,cthr),rand(2),mq24);\nmq25=if(above(chng,cthr),rand(2),mq25);\nmq26=if(above(chng,cthr),rand(2),mq26);\nmq27=if(above(chng,cthr),rand(1),mq27);\nmq28=if(above(chng,cthr),rand(1),mq28);\nmq29=if(above(chng,cthr),rand(1)*.3,mq29);\nmq30=if(above(chng,cthr),rand(1)*.3,mq30);\nmonitor=chng;\nq21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;\nq27=mq27;q28=mq28;q29=mq29;q30=mq30;\n\nmonitor=mq1;\ntempo16=480;//16th note res base\n\n//quick transients\nsharpnew= (treb);\nheartnew= (mid );\nbluntnew= (bass);\n\nvolnew=sharpnew+heartnew+bluntnew;\n\n//re= rising edge, b=bass,etc  adjust sens = sensitivity lower for greater sensitivity, higher for greater tolerance of vol change\nsens2 = 10;//maybe think about dynamically adjusting this according to the current milkdrop built in annoying volume sensitivity, lower during long durations of loudness where milkdrop is less sensitive, and vice versa\nsens  = 1/(bass+treb+mid)*5.5;\n\nbre=if(below(blunt*sens,bluntnew),2,0);//if the previous blunt was much lower than the current, we hit the rising edge, theoretically\nmre=if(below(heart*sens,heartnew),2,0);\ntre=if(below(sharp*sens,sharpnew),2,0);\nbfp=if(below(bfp,0),fps/10,bfp-1);//number of Frames to let Pass after each rising edge is detected, failure to use this will probably result in several coccurrent rising edges, should be a function of fps\nmfp=if(below(mfp,0),fps/10,mfp-1);\ntfp=if(below(tfp,0),fps/10,tfp-1);\nmonitor=bre+mre+tre;\n//timers for slow decayers\n//btimer=btimer-.03;\n//btimer=if(below(btimer,0),1,btimer);//if timer < 0, reset to 1\n//mtimer=mtimer-.03;\n//mtimer=if(below(mtimer,0),1,mtimer);\n//ttimer=ttimer-.03;\n//ttimer=if(below(ttimer,0),1,ttimer);\n\n//conceptual idealisms\n//snare = heart+sharp;\n//kick  = blunt+sharp;\n//cymbal= sharp;\n//tom   = blunt+heart;\n\n//guit  = heartS+sharpS;//S = slow decay\n\n\n\n\nzoom = 0.999;\nq30=(bass+treb+mid)*3.5;//*(bre+mre+tre);\nq3=q30*2;\n\n//set these at the end of each frame to detect rising edges\nsharp= (treb);\nheart= (mid );\nblunt= (bass);\n//vol  = sharp+heart+blunt;","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 ret_1;\n  vec3 tmpvar_2;\n  tmpvar_2 = (time * vec3(0.0, 0.0, 1.0));\n  vec3 tmpvar_3;\n  tmpvar_3 = (vec3(0.05, 0.05, 0.0) * uv.xyy);\n  vec3 tmpvar_4;\n  tmpvar_4 = (texsize.xyy * texsize_noisevol_hq.zww);\n  ret_1 = (texture (sampler_main, uv).xyz - (texture (sampler_noisevol_hq, (\n    (tmpvar_3 * tmpvar_4)\n   + \n    (tmpvar_2 * 0.4)\n  )) * 0.2).xyz);\n  ret_1 = (ret_1 + ((ret_1 - \n    ((texture (sampler_blur2, uv).xyz * scale2) + bias2)\n  ) * 0.3));\n  ret_1 = (ret_1 * 0.9);\n  ret_1 = (ret_1 + ((\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 0.4)) + rand_frame.xy)).xyz - 0.5)\n   / 956.0) * 112.0));\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_noisevol_hq, (((tmpvar_3 * q27) * tmpvar_4) + (tmpvar_2 * q29)));\n  if (((ret_1.x > (q21 * roam_cos.y)) && (ret_1.x <= (q24 * roam_sin.x)))) {\n    ret_1.y = (ret_1.y - (tmpvar_5.x * 0.5));\n  };\n  if (((ret_1.y > (q22 * roam_sin.x)) && (ret_1.y <= (q25 * roam_cos.x)))) {\n    ret_1.z = (ret_1.z - (tmpvar_5.y * 0.5));\n  };\n  if (((ret_1.z > (q23 * roam_cos.x)) && (ret_1.z <= (q26 * roam_sin.y)))) {\n    ret_1.x = (ret_1.x - (tmpvar_5.z * 0.5));\n  };\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_1;\n  ret = tmpvar_6.xyz;\n }","comp":" shader_body { \n  vec2 uv2_1;\n  vec3 ret_2;\n  uv2_1 = (((uv - 0.5) * 0.8) + 0.5);\n  vec3 tmpvar_3;\n  tmpvar_3 = (time * vec3(0.0, 0.0, 1.0));\n  ret_2 = (texture (sampler_main, uv).xyz * (texture (sampler_noisevol_hq, (\n    ((vec3(0.05, 0.05, 0.0) * uv2_1.xyy) * (texsize.xyy * texsize_noisevol_hq.zww))\n   + \n    (tmpvar_3 * 0.4)\n  )) * 2.5).xyz);\n  ret_2 = (ret_2 * (1.0 - (\n    ((texture (sampler_blur1, uv2_1).xyz * scale1) + bias1)\n  .y * 1.15)));\n  vec3 tmpvar_4;\n  tmpvar_4 = max (ret_2, texture (sampler_main, uv2_1).yyy);\n  ret_2 = tmpvar_4;\n  uv2_1 = uv;\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv.xyy) * (\n    (q28 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + (tmpvar_3 * q30)));\n  if (((tmpvar_4.x > (q26 * roam_cos.y)) && (tmpvar_4.x <= (q23 * roam_sin.x)))) {\n    ret_2.z = (tmpvar_4.z - (tmpvar_5.x * 0.5));\n  };\n  if (((tmpvar_4.y > (q25 * roam_sin.x)) && (tmpvar_4.y <= (q22 * roam_cos.x)))) {\n    ret_2.x = (tmpvar_4.x - (tmpvar_5.y * 0.5));\n  };\n  if (((ret_2.z > (q24 * roam_cos.x)) && (ret_2.z <= (q21 * roam_sin.y)))) {\n    ret_2.y = (tmpvar_4.y - (tmpvar_5.z * 0.5));\n  };\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_2;\n  ret = tmpvar_6.xyz;\n }","warp_hlsl":"  \n shader_body    \n{   \n     \n       ret = tex2D( sampler_main, uv ).xyz;\nfloat4 noise2 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*0.4 \n                     );\nret -= (noise2)*.2; \n      // take the difference between the crisp and blurred images,\n      // then add it back into the image.  Creates spots and stripes over time.\n      ret += (ret - GetBlur2(uv))*0.3;\n      ret *= 0.9;\n      \n      // add noise:\n      float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.4 + rand_frame.xy;\n      ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/956.0 * 112;\n      \n      \n      //ret = lerp(ret, lum(ret), 0.2);\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy*q27\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q29\n                     );\nif(ret.x> q21*roam_cos.y && ret.x<= q24*roam_sin.x)ret.y -= (noise9).x*.5; \nif(ret.y> q22*roam_sin.x && ret.y<= q25*roam_cos.x)ret.z -= (noise9).y*.5; \nif(ret.z> q23*roam_cos.x && ret.z<= q26*roam_sin.y)ret.x -= (noise9).z*.5; \n\n}     ","comp_hlsl":"    \nshader_body\n{    \n    //ret = tex2D(sampler_main, (uv-0.5)*0.6+0.5).zzz;\n    float crisp, blur;\n    float2 uv2;\n    ret = tex2d(sampler_main, uv);\n    float shadow_offset = 0.0;\n    float shadow_str = 1.15;\n   \n    uv2 = (uv-0.5)*0.8+0.5;\nfloat4 noise2 = tex3D(sampler_noisevol_hq, \n                      ((uv2.xyy\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*0.4 \n                     );\nret *= (noise2)*2.5; \n    crisp = tex2D(sampler_main, uv2).y;\n      // add drop shadow:\n      blur  = GetBlur1(uv2 + shadow_offset).y;\n      ret *= (1-blur*shadow_str);\n    ret = max(ret, crisp.xxx);\n    \n    uv2 = uv;\n    //crisp = tex2D(sampler_main, uv2).x;\n      // add drop shadow:\n     // blur  = GetBlur1(uv2 + shadow_offset).x;\n     // ret *= (1-blur*shadow_str);\n    //ret = max(ret, crisp.xxx);    \nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy*q28\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q30 \n                     );\nif(ret.x> q26*roam_cos.y && ret.x<= q23*roam_sin.x)ret.z -= (noise9).x*.5; \nif(ret.y> q25*roam_sin.x && ret.y<= q22*roam_cos.x)ret.x -= (noise9).y*.5; \nif(ret.z> q24*roam_cos.x && ret.z<= q21*roam_sin.y)ret.y -= (noise9).z*.5; \n}"}