{"version":2,"baseVals":{"rating":5,"decay":0.9,"echo_zoom":1.007,"echo_alpha":0.5,"echo_orient":1,"wave_mode":7,"wrap":0,"brighten":1,"wave_a":0.006,"zoom":0.96,"rot":-18.86024,"warp":0.00052,"wave_r":0.5,"wave_g":0,"ob_r":0.9,"ob_g":0.5,"ob_b":0.4,"ib_r":0,"ib_g":0,"ib_b":0,"mv_x":64,"mv_y":48,"mv_l":4.95,"mv_r":0.5,"mv_g":0.4,"mv_b":0.3,"mv_a":0},"shapes":[{"baseVals":{"textured":1,"rad":2.66718,"tex_zoom":0.45112,"g":1,"a":0.03,"g2":0,"a2":0.03,"enabled":0},"init_eqs_str":"","frame_eqs_str":"r = 0.1 + 0.5*sin(q1);\ng = 0.1 + 0.5*sin(q1*0.9878);\nb = 0.1 + 0.5*sin(q1*0.897);","init_eqs_eel":"","frame_eqs_eel":"r = 0.1 + 0.5*sin(q1);\ng = 0.1 + 0.5*sin(q1*0.9878);\nb = 0.1 + 0.5*sin(q1*0.897);"},{"baseVals":{"sides":100,"x":0.35,"y":0,"rad":0.09959,"tex_zoom":0.42497,"r":0,"b":1,"g2":0,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"r = 0.1 + 0.5*sin(q1*0.01);\ng = 0.1 + 0.5*sin(q1*0.09878);\nb = 0.1 + 0.5*sin(q1*0.0897);\n\nr2 = 0.1 + 0.5*sin(q1*0.035);\ng2 = 0.1 + 0.5*sin(q1*0.09878);\nb2 = 0.1 + 0.5*sin(q1*0.0897);","init_eqs_eel":"","frame_eqs_eel":"r = 0.1 + 0.5*sin(q1*0.01);\ng = 0.1 + 0.5*sin(q1*0.09878);\nb = 0.1 + 0.5*sin(q1*0.0897);\n\nr2 = 0.1 + 0.5*sin(q1*0.035);\ng2 = 0.1 + 0.5*sin(q1*0.09878);\nb2 = 0.1 + 0.5*sin(q1*0.0897);"},{"baseVals":{"enabled":1,"sides":100,"y":0,"rad":0.10201,"a2":1,"border_a":0},"init_eqs_str":"a.q1=0;","frame_eqs_str":"a.x=.5+.25*Math.sin(rand(1E3));a.y=.5+.25*Math.cos(rand(1E3));a.a=above(a.bass,1);a.a2=above(a.bass,1);a.r=.1+.5*Math.sin(10.0144*a.q1);a.g=.1+.5*Math.sin(10.05878*a.q1);a.b=.1+.5*Math.sin(10.0797*a.q1);a.r2=.1+.5*Math.sin(10.065*a.q1);a.g2=.1+.5*Math.sin(10.07878*a.q1);a.b2=.1+.5*Math.sin(10.0897*a.q1);","init_eqs_eel":"","frame_eqs_eel":"x = 0.5 + 0.25*sin(rand(1000));\ny = 0.5 + 0.25*cos(rand(1000));\n\na = above(bass,1);\na2 = above(bass,1);\n\n\n\nr = 0.1 + 0.5*sin(q1*10.0144);\ng = 0.1 + 0.5*sin(q1*10.05878);\nb = 0.1 + 0.5*sin(q1*10.0797);\n\nr2 = 0.1 + 0.5*sin(q1*10.065);\ng2 = 0.1 + 0.5*sin(q1*10.07878);\nb2 = 0.1 + 0.5*sin(q1*10.0897);"},{"baseVals":{"enabled":1,"sides":100,"x":0.65,"y":0,"g":1,"b":1,"r2":1,"g2":0,"b2":1,"a2":1,"border_a":0},"init_eqs_str":"a.q1=0;","frame_eqs_str":"a.x=.5+.25*Math.sin(rand(1E3));a.y=.5+.25*Math.cos(rand(1E3));a.a=above(a.bass,1);a.a2=above(a.bass,1);a.r=.1+.5*Math.sin(10.0144*a.q1);a.g=.1+.5*Math.sin(10.05878*a.q1);a.b=.1+.5*Math.sin(10.0797*a.q1);a.r2=.1+.5*Math.sin(10.065*a.q1);a.g2=.1+.5*Math.sin(10.07878*a.q1);a.b2=.1+.5*Math.sin(10.0897*a.q1);","init_eqs_eel":"","frame_eqs_eel":"x = 0.5 + 0.25*sin(rand(1000));\ny = 0.5 + 0.25*cos(rand(1000));\n\na = above(bass,1);\na2 = above(bass,1);\n\n\n\nr = 0.1 + 0.5*sin(q1*10.0144);\ng = 0.1 + 0.5*sin(q1*10.05878);\nb = 0.1 + 0.5*sin(q1*10.0797);\n\nr2 = 0.1 + 0.5*sin(q1*10.065);\ng2 = 0.1 + 0.5*sin(q1*10.07878);\nb2 = 0.1 + 0.5*sin(q1*10.0897);"}],"waves":[{"baseVals":{"spectrum":1,"thick":1,"additive":1,"r":0,"g":0,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"x = 0.5  +  bass_att*0.1*cos(sample*20*cos(time*0.1))*sample;\ny = 0.5 +  bass_att*0.1*sin(sample*20*cos(time*0.1))*sample;\n\nr = 0.5+ 0.5*cos(y*2 + time);\ng = 0.5+ 0.5*sin(y*4 + time + sample*10);\nb = 0.5+ 0.5*atan(y*6*sample + time);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = 0.5  +  bass_att*0.1*cos(sample*20*cos(time*0.1))*sample;\ny = 0.5 +  bass_att*0.1*sin(sample*20*cos(time*0.1))*sample;\n\nr = 0.5+ 0.5*cos(y*2 + time);\ng = 0.5+ 0.5*sin(y*4 + time + sample*10);\nb = 0.5+ 0.5*atan(y*6*sample + time);"},{"baseVals":{"enabled":1,"spectrum":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"a['x']=(0.5+(((a['bass_att']*0.09)*Math.cos(((a['sample']*20)*Math.cos((a['time']*0.1)))))*a['sample'])); a['y']=(0.5+(((a['bass_att']*0.09)*Math.sin(((a['sample']*20)*Math.cos((a['time']*0.1)))))*a['sample'])); a['r']=0; a['g']=0; (0.5+(0.5*Math.sin((((a['y']*4)+a['time'])+(a['sample']*10))))) a['b']=0;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = 0.5  +  bass_att*0.09*cos(sample*20*cos(time*0.1))*sample;\ny = 0.5 +  bass_att*0.09*sin(sample*20*cos(time*0.1))*sample;\n\nr = 0;//0.5+ 0.5*cos(y*2 + time);\ng = 0;;0.5+ 0.5*sin(y*4 + time + sample*10);\nb = 0;//0.5+ 0.5*atan(y*6*sample + time);"},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"x = sample;\ny = 0.4;\n\nr = sample;\ng = sample*10;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = sample;\ny = 0.4;\n\nr = sample;\ng = sample*10;"},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"//apply zoom burst on beat\nflag = above(q3,2);\n//state zero is ready state\nstate = state + flag*equal(state,0);\n\n//upwards flight\nyval = if(equal(state,0),0, yval);\nyval = yval + 0.00004*equal(state,1);\nymax = if(equal(state,0),rand(100)*0.004,ymax);\n\n//hit apogee\nstate = if(above(yval,0.5+ymax),2,state);\n\n//reset variable\nyval = if(equal(state,0),0, yval);\nburst = if(equal(state,0),0.001,burst);\nalphax = if(equal(state,0),1,alphax);\nxdriftinc = if(equal(state,0),0,xdriftinc);\n\nburstspeed = if(equal(state,0),rand(10),burstspeed);\nxdrift = if(equal(state,0),rand(20),xdrift);\n//to get the numbers small enough have to use constants\nxdriftinc = xdriftinc\n+ equal(xdrift,0)*equal(state,1)*0.00002\n+ equal(xdrift,1)*equal(state,1)*0.000018\n+ equal(xdrift,2)*equal(state,1)*0.000016\n+ equal(xdrift,3)*equal(state,1)*0.000014\n+ equal(xdrift,4)*equal(state,1)*0.000012\n+ equal(xdrift,5)*equal(state,1)*0.00001\n+ equal(xdrift,6)*equal(state,1)*0.000008\n+ equal(xdrift,7)*equal(state,1)*0.000006\n+ equal(xdrift,8)*equal(state,1)*0.000004\n+ equal(xdrift,9)*equal(state,1)*0.000002\n+ equal(xdrift,11)*equal(state,1)*-0.000002\n+ equal(xdrift,12)*equal(state,1)*-0.000004\n+ equal(xdrift,13)*equal(state,1)*-0.000006\n+ equal(xdrift,14)*equal(state,1)*-0.000008\n+ equal(xdrift,15)*equal(state,1)*-0.00001\n+ equal(xdrift,16)*equal(state,1)*-0.000012\n+ equal(xdrift,17)*equal(state,1)*-0.000014\n+ equal(xdrift,18)*equal(state,1)*-0.000016\n+ equal(xdrift,19)*equal(state,1)*-0.000018;\n\nburst = burst\n+ equal(burstspeed,0)*equal(state,2)*0.000024\n+ equal(burstspeed,1)*equal(state,2)*0.000022\n+ equal(burstspeed,2)*equal(state,2)*0.00002\n+ equal(burstspeed,3)*equal(state,2)*0.000018\n+ equal(burstspeed,4)*equal(state,2)*0.000016\n+ equal(burstspeed,5)*equal(state,2)*0.000014\n+ equal(burstspeed,6)*equal(state,2)*0.000012\n+ equal(burstspeed,7)*equal(state,2)*0.00001\n+ equal(burstspeed,8)*equal(state,2)*0.000008\n+ equal(burstspeed,9)*equal(state,2)*0.000008;\n\nalphax = alphax - 0.00004*equal(state,2);\nstate = if(below(alphax,0),0,state);\n\n\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw torus\nxs = (burst + 0.0001*cos(s))*cos(ss);\nys = (burst + 0.0001*cos(s))*sin(ss);\nzs = 0.1*burst*sin(s);\n\n\n//rotate x axis\nangle = sin(-q1*0.035)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(-q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(-q1*0.022)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2;\n\n\nx = x + xdriftinc;\ny = y + sin(yval*1.5) - 0.18;\n\n\nr = 0.5 + 0.5*sin(q1*1.3 + x + x);\ng = 0.5 + 0.5*sin(q1*1.1 + x + y);\nb = 0.5 + 0.5*sin(q1*1.66 + y + y);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//apply zoom burst on beat\nflag = above(q3,2);\n//state zero is ready state\nstate = state + flag*equal(state,0);\n\n//upwards flight\nyval = if(equal(state,0),0, yval);\nyval = yval + 0.00004*equal(state,1);\nymax = if(equal(state,0),rand(100)*0.004,ymax);\n\n//hit apogee\nstate = if(above(yval,0.5+ymax),2,state);\n\n//reset variable\nyval = if(equal(state,0),0, yval);\nburst = if(equal(state,0),0.001,burst);\nalphax = if(equal(state,0),1,alphax);\nxdriftinc = if(equal(state,0),0,xdriftinc);\n\nburstspeed = if(equal(state,0),rand(10),burstspeed);\nxdrift = if(equal(state,0),rand(20),xdrift);\n//to get the numbers small enough have to use constants\nxdriftinc = xdriftinc\n+ equal(xdrift,0)*equal(state,1)*0.00002\n+ equal(xdrift,1)*equal(state,1)*0.000018\n+ equal(xdrift,2)*equal(state,1)*0.000016\n+ equal(xdrift,3)*equal(state,1)*0.000014\n+ equal(xdrift,4)*equal(state,1)*0.000012\n+ equal(xdrift,5)*equal(state,1)*0.00001\n+ equal(xdrift,6)*equal(state,1)*0.000008\n+ equal(xdrift,7)*equal(state,1)*0.000006\n+ equal(xdrift,8)*equal(state,1)*0.000004\n+ equal(xdrift,9)*equal(state,1)*0.000002\n+ equal(xdrift,11)*equal(state,1)*-0.000002\n+ equal(xdrift,12)*equal(state,1)*-0.000004\n+ equal(xdrift,13)*equal(state,1)*-0.000006\n+ equal(xdrift,14)*equal(state,1)*-0.000008\n+ equal(xdrift,15)*equal(state,1)*-0.00001\n+ equal(xdrift,16)*equal(state,1)*-0.000012\n+ equal(xdrift,17)*equal(state,1)*-0.000014\n+ equal(xdrift,18)*equal(state,1)*-0.000016\n+ equal(xdrift,19)*equal(state,1)*-0.000018;\n\nburst = burst\n+ equal(burstspeed,0)*equal(state,2)*0.000024\n+ equal(burstspeed,1)*equal(state,2)*0.000022\n+ equal(burstspeed,2)*equal(state,2)*0.00002\n+ equal(burstspeed,3)*equal(state,2)*0.000018\n+ equal(burstspeed,4)*equal(state,2)*0.000016\n+ equal(burstspeed,5)*equal(state,2)*0.000014\n+ equal(burstspeed,6)*equal(state,2)*0.000012\n+ equal(burstspeed,7)*equal(state,2)*0.00001\n+ equal(burstspeed,8)*equal(state,2)*0.000008\n+ equal(burstspeed,9)*equal(state,2)*0.000008;\n\nalphax = alphax - 0.00004*equal(state,2);\nstate = if(below(alphax,0),0,state);\n\n\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw torus\nxs = (burst + 0.0001*cos(s))*cos(ss);\nys = (burst + 0.0001*cos(s))*sin(ss);\nzs = 0.1*burst*sin(s);\n\n\n//rotate x axis\nangle = sin(-q1*0.035)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(-q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(-q1*0.022)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2;\n\n\nx = x + xdriftinc;\ny = y + sin(yval*1.5) - 0.18;\n\n\nr = 0.5 + 0.5*sin(q1*1.3 + x + x);\ng = 0.5 + 0.5*sin(q1*1.1 + x + y);\nb = 0.5 + 0.5*sin(q1*1.66 + y + y);"}],"init_eqs_str":"a.basstime=0;a.q1=0;a.q9=0;a.q8=0;a.q5=0;a.q4=0;a.state=0;","frame_eqs_str":"a.basstime+=.06*a.bass;a.q1=a.basstime;a.q9=.000005*a.basstime;a.q8=.1*a.basstime;a.q5=Math.cos(.000001*a.basstime);a.q4=Math.sin(.000001*a.basstime);a.basstime=.00001<Math.abs(below(a.basstime,1E3))?1E3:a.basstime;","pixel_eqs_str":"a.zoom=1;a.rot=0;","init_eqs_eel":"state = 0;","frame_eqs_eel":"basstime = basstime + bass*0.06;\nq1 = basstime;\n\nq9 = basstime * 0.000005;\nq8 = basstime*0.1;\n\nq5 = cos(basstime*0.000001);\nq4 = sin(basstime*0.000001);\n\nbasstime = if(below(basstime,1000),1000,basstime);","pixel_eqs_eel":"zoom = 1;\nrot = 0;","warp":" shader_body { \n  mat2 tmpvar_1;\n  tmpvar_1[uint(0)].x = q5;\n  tmpvar_1[uint(0)].y = -(q4);\n  tmpvar_1[1u].x = q4;\n  tmpvar_1[1u].y = q5;\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = (texture (sampler_main, ((\n    ((uv - 0.5) * (tmpvar_1 - (rad * 0.0051)))\n   * \n    (1.0 - ((rad * rad) * 0.01))\n  ) + 0.5)).xyz - ((\n    (texture (sampler_blur3, uv).xyz * scale3)\n   + bias3) * 0.01));\n  ret = tmpvar_2.xyz;\n }","comp":" shader_body { \n  float tmpvar_1;\n  tmpvar_1 = (texsize.zw * 4.0).x;\n  vec2 tmpvar_2;\n  tmpvar_2.y = 0.0;\n  tmpvar_2.x = q10;\n  vec2 tmpvar_3;\n  tmpvar_3.y = 0.0;\n  float tmpvar_4;\n  tmpvar_4 = -(q10);\n  tmpvar_3.x = tmpvar_4;\n  vec2 tmpvar_5;\n  tmpvar_5.x = 0.0;\n  tmpvar_5.y = q10;\n  vec2 tmpvar_6;\n  tmpvar_6.x = 0.0;\n  tmpvar_6.y = tmpvar_4;\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ((texture (sampler_main, uv) * 4.0).xyz * ((texture (sampler_blur1, \n    mix (((texture (sampler_main, (uv + \n      (tmpvar_2 * tmpvar_1)\n    )).xyz + texture (sampler_main, (uv + \n      (tmpvar_3 * tmpvar_1)\n    )).xyz) * 0.5), ((texture (sampler_main, (uv + \n      (tmpvar_5 * tmpvar_1)\n    )).xyz + texture (sampler_main, (uv + \n      (tmpvar_6 * tmpvar_1)\n    )).xyz) * 0.5), vec3(0.5, 0.5, 0.5))\n  .xy).xyz * scale1) + bias1));\n  ret = tmpvar_7.xyz;\n }","warp_hlsl":"shader_body\n{\n    \n    float2x2 rot =  {  q5, q4,\n                       -q4, q5 };\n    rot =  rot - rad*0.0051;\n    float3 txr = float3(uv,q2*5);\n\n    ret = tex2D( sampler_main, mul((uv-0.5),rot)*(1 - rad*rad*0.01) + 0.5).xyz - GetBlur3(uv)*0.01; \n   \n    // darken (decay) over time\n    ret = ret;//-0.04; //or try: ret -= 0.004;\n}","comp_hlsl":"shader_body\n{\n   float d = texsize.zw*4;\n   float3 deltax = (GetPixel(uv + float2(q10,0)*d) + GetPixel(uv + float2(-q10,0)*d))*0.5;    \n   float3 deltay = (GetPixel(uv + float2(0,q10)*d) + GetPixel(uv + float2(0,-q10)*d))*0.5;    \n     \n\n   ret = tex2D(sampler_main, uv)*4; \n   ret = (ret)*GetBlur1(lerp(deltax,deltay,0.5));\n}"}