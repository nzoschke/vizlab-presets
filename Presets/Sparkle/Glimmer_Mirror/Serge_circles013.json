{"version":2,"baseVals":{"rating":5,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"additivewave":1,"wrap":0,"solarize":1,"wave_a":0.998,"wave_scale":0.01,"wave_smoothing":0.9,"wave_mystery":0.4,"modwavealphastart":0.5,"modwavealphaend":1,"zoomexp":7.5239,"zoom":1.0099,"wave_g":0,"wave_b":0,"ob_size":0,"ob_a":1,"ib_size":0,"ib_a":1,"mv_x":1.92,"mv_y":1.44,"mv_a":0,"b1ed":0.61},"shapes":[{"baseVals":{"enabled":1,"sides":3,"num_inst":35,"x":0.3,"rad":0.58776,"r":0,"a":0,"r2":0.59,"border_g":0.57,"border_b":0,"border_a":0.52},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":3,"y":0.82,"rad":0.49138,"a":0,"border_a":1},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":3,"x":0.14,"y":0.77,"rad":0.45378,"a":0,"border_a":1},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":3,"x":0.1,"y":0.38,"rad":0.84096,"a":0,"border_a":1},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"thick":1,"scaling":100,"smoothing":0.15,"r":0.27,"g":0.61,"b":0.26,"a":0.07},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.beateven=0;a.beatfreq=0;a.pulsefreq=0;a.grid=0;a.bt=0;a.q1=0;a.q5=0;a.q9=0;a.oldq8=0;a.lastbeat=0;a.pulse=0;a.beatcounter=0;a.q4=0;a.le=0;a.btblock=0;a.state=0;a.minorccl=0;a.beat=0;a.hccp=0;a.ccl=0;a.lastpulse=0;a.q3=0;a.th=0;a.q8=0;","frame_eqs_str":"a.warp=0;a.state=.00001<Math.abs(above(a.bass_att,1.3))?3:.00001<Math.abs(above(a.treb_att,1.3))?2:1;a.wave_b=.00001<Math.abs(equal(a.state,2))?.2+.2*Math.sin(a.time):.00001<Math.abs(equal(a.state,3))?.9+.1*Math.sin(a.time):.6+.08*Math.sin(a.time);a.wave_g=.00001<Math.abs(equal(a.state,2))?0:.00001<Math.abs(equal(a.state,3))?0:.49;a.wave_r=.00001<Math.abs(equal(a.state,2))?.7+.1*Math.sin(.888*a.time):0;a.q1=a.state;a.wave_mystery+=10*(1-a.zoom);a.le=1.4*a.bass_att+.1*a.bass+\n.5*a.treb;a.pulse=above(a.le,a.th);a.pulsefreq=.00001<Math.abs(equal(a.pulsefreq,0))?2:.00001<Math.abs(a.pulse)?.8*a.pulsefreq+.2*(a.time-a.lastpulse):a.pulsefreq;a.lastpulse=.00001<Math.abs(a.pulse)?a.time:a.lastpulse;a.bt=div(a.time-a.lastbeat,.5*a.beatfreq+.5*a.pulsefreq);a.hccp=div(.03,a.bt+.2)+.5*(.00001<Math.abs(band(above(a.bt,.8),below(a.bt,1.2)))?pow(Math.sin(7.854*(a.bt-1)),4)-1:0);a.beat=band(above(a.le,a.th+a.hccp),a.btblock);a.btblock=1-above(a.le,a.th+a.hccp);a.lastbeat=.00001<Math.abs(a.beat)?\na.time:a.lastbeat;a.beatfreq=.00001<Math.abs(equal(a.beatfreq,0))?2:.00001<Math.abs(a.beat)?.8*a.beatfreq+.2*(a.time-a.lastbeat):a.beatfreq;a.th=.00001<Math.abs(above(a.le,a.th))?a.le+div(114,a.le+10)-7.407:a.th+div(.07*a.th,a.th-12)+.1*below(a.th,2.7)*(2.7-a.th);a.th=.00001<Math.abs(above(a.th,6))?6:a.th;a.q3=div(30,a.fps);a.ccl+=a.beat;a.minorccl+=.01*a.le;a.q4=a.beat;a.beatcounter=.00001<Math.abs(a.beat)?a.beatcounter+1:a.beatcounter;a.beatcounter=.00001<Math.abs(above(a.beatcounter,7))?0:a.beatcounter;\na.beateven=mod(a.beatcounter,2);a.q5=a.beateven;a.q8=a.oldq8+.005*div(pow(1.2*a.bass+.4*a.bass_att+.1*a.treb+.1*a.treb_att+.1*a.mid+.1*a.mid_att,6),a.fps);a.oldq8=a.q8;a.q9=.0125*(a.q8+a.time);","pixel_eqs_str":"a.grid=mod(Math.abs(18*a.x+3*a.q5),2)+mod(Math.abs(18*a.y+3*a.q5),2);a.cx=a.grid;a.cy=a.grid;a.zoom=1+.5*(.00001<Math.abs(bnot(a.grid))?.07*Math.cos(10*a.rad*Math.sin(a.q8)):.07*Math.cos(10*a.x*Math.sin(a.q8)));a.rot=.01*(1-a.rad);a.dx=.4*a.grid*(.008*Math.sin(48*(2*a.y-1))+.008*Math.sin(64*(2*a.y-1)));a.dy=.4*a.grid*(.008*Math.cos(64*(2*a.x-1))+.008*Math.cos(48*(2*a.x-1)));","init_eqs_eel":"","frame_eqs_eel":"warp=0;\nstate=if(above(bass_att,1.3),3,if(above(treb_att,1.3),2,1));\nwave_b=if(equal(state,2),.2+.2*sin(time),if(equal(state,3),.9+.1*sin(time),.6+.08*sin(time)));\nwave_g=if(equal(state,2),0,if(equal(state,3),0,.49));\nwave_r=if(equal(state,2),.7+.1*sin(time*.888),0);\n//zoom=if(above(bass_att+treb,2),1+sin(state*1.3)/10,1-sin(state*1.5)/10);\nq1=state;\nwave_mystery=wave_mystery+(1-zoom)*10;\n// timed sidon sensor\n// le = signal level; desired average value = 2\nle=1.4*bass_att+.1*bass+.5*treb;\npulse=above(le,th);\n// pulsefreq = running average of interval between last 5 pulses\npulsefreq=if(equal(pulsefreq,0),2,\nif(pulse,.8*pulsefreq+.2*(time-lastpulse),pulsefreq));\nlastpulse=if(pulse,time,lastpulse);\n// bt = relative time; 0 = prev beat; 1 = expected beat\nbt=(time-lastbeat)/(.5*beatfreq+.5*pulsefreq);\n// hccp = handcicap for th driven by bt\nhccp=(.03/(bt+.2))+.5*if(band(above(bt,.8),below(bt,1.2)),\n(pow(sin((bt-1)*7.854),4)-1),0);\nbeat=band(above(le,th+hccp),btblock);\nbtblock=1-above(le,th+hccp);\nlastbeat=if(beat,time,lastbeat);\nbeatfreq=if(equal(beatfreq,0),2,\nif(beat,.8*beatfreq+.2*(time-lastbeat),beatfreq));\n// th = threshold\nth=if(above(le,th),le+114/(le+10)-7.407,\nth+th*.07/(th-12)+below(th,2.7)*.1*(2.7-th));\nth=if(above(th,6),6,th);\nq3=30/fps;\nccl=ccl+beat;\nminorccl=minorccl+.01*le;\nq4=beat;\nbeatcounter = if(beat,beatcounter +1, beatcounter);\nbeatcounter = if(above(beatcounter,7), 0, beatcounter);\nbeateven = beatcounter%2;\nq5 = beateven;\nq8 =oldq8+ 0.005*(pow(1.2*bass+0.4*bass_att+0.1*treb+0.1*treb_att+0.1*mid+0.1*mid_att,6)/fps);\noldq8 = q8;\nq9 = 0.0125*(q8 + time);","pixel_eqs_eel":"grid=abs(x*18+3*q5)%2 + abs(y*18+3*q5)%2;\ncx = grid;\ncy = grid;\nzoom=1+0.5*if(bnot(grid),cos(rad*10*sin(q8))*.07,cos(x*10*sin(q8))*.07);\nrot = 0.01*(1-rad);\ndx=0.4*grid*(0.008*sin((y*2-1)*48)+0.008*sin((y*2-1)*64));\ndy=0.4*grid*(0.008*cos((x*2-1)*64)+0.008*cos((x*2-1)*48));","warp":" shader_body { \n  vec2 uv_1;\n  vec2 uv6_2;\n  uv_1 = (uv + ((0.004 * \n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  ).xy * vec2(0.0, 1.0)));\n  uv6_2 = (0.4 * sin((\n    (((uv - 0.2) * aspect.xy) * 18.0)\n   * rand_frame.xy)));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = (((\n    (texture (sampler_main, uv_1).xyz - (((texture (sampler_blur2, \n      fract(uv_1)\n    ).xyz * scale2) + bias2) * 0.03))\n   + \n    (vec3((0.051 / sqrt(dot (uv6_2, uv6_2)))) * vec3(0.15, 0.12, 0.075))\n  ) * 0.99) - 0.02);\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  float ang2_1;\n  vec2 uv2_2;\n  ang2_1 = ((ang * 0.1591549) + (time * 0.025));\n  float tmpvar_3;\n  tmpvar_3 = (3.0 + floor((rand_preset.z * 5.95)));\n  ang2_1 = (fract((ang2_1 * tmpvar_3)) / tmpvar_3);\n  ang2_1 = (abs((ang2_1 - \n    (0.5 / tmpvar_3)\n  )) * 6.283185);\n  vec2 tmpvar_4;\n  tmpvar_4.x = cos(ang2_1);\n  tmpvar_4.y = sin(ang2_1);\n  uv2_2 = (0.5 + ((\n    (0.4 * (rad * sqrt(dot (texsize.xy, texsize.xy))))\n   * tmpvar_4) * texsize.zw));\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = (((texture (sampler_main, uv2_2).y * vec3(0.6, 0.2, 1.5)) + (texture (sampler_fw_main, uv2_2).x * vec3(1.0, 0.66, 0.0))) - (texture (sampler_main, uv2_2).z * vec3(-0.6, 1.0, 2.0)));\n  ret = tmpvar_5.xyz;\n }","warp_hlsl":"sampler sampler_worms;\nfloat3 color, mus;\nfloat dx,dy;\nshader_body {\nfloat2 uv1 = (uv-.2) * aspect.xy;\n\n\nfloat2 uv6 = uv1;\nfloat z = q29*2*length(uv1)+rand_frame * 32;\nfloat2 d = normalize(uv1);\nfloat2 rs = clamp(tan(z)*d,-8,8);\nuv += .004*GetBlur1(uv)*float2 (0,1);//rs/20;\n\n\nuv6 = .4*sin(uv1*18*rand_frame);\nmus = .051/(length(uv6));\nmus *= float3 (1,.8,.5);\n\nfloat3 blur = GetBlur2(frac(uv));\n\nfloat3 crisp= tex2D(sampler_main,uv);\n\nfloat3 ret1 = crisp - blur*.03 + .15*mus;\nfloat2 uv2 = (uv_orig-.5)-float2(.5,.5+0.1*q25);\n\nq25 = 1;\nret = q25*(ret1*.99-.02) + (1-q25)* GetPixel(uv_orig);\n\n}","comp_hlsl":"shader_body\n{\n    float rad_lq = rad * length(texsize.xy)*0.5;\n    float ang_lq = ang;\n    float2 uv_temp1 = (uv - 0.5) * texsize.xy;\n    float rad_hq = length(uv_temp1);\n    float ang_hq = atan2(-uv_temp1.y, uv_temp1.x);\n\n    float2 uv2 = (uv - 0.5);\n    float rad2 = rad_lq*0.8;\n    float ang2 = ang_lq * M_INV_PI_2;\n\n        // ROTATION OVER TIME\n        #if 1\n          ang2 += time*0.025;   //rotate over time\n        #endif\n\n        // FIN TYPE\n        float fins = 3 + floor(rand_preset.z*5.95);\n        #if 1     // SHARP FINS\n          ang2 = frac(ang2*fins)/fins;\n              // ENABLE THIS TO MAKE THE FINS ALTERNATE: (seamless!)\n              ang2 = abs(ang2 - 0.5/fins);\n        #else     // COSINE FINS - a bit slow\n          ang2 = cos(ang2*M_PI_2*fins) * 0.023;\n        #endif\n\n        // RADIAL KALEIDOSCOPING?\n        #if 0\n          rad2 *= g_fTexSize.z;\n            // choose one:\n            //rad2 = lerp(rad2, frac(rad2*3)/3.0, 0.5);\n            rad2 = cos(rad2*5);\n            //rad2 = sqrt(rad2)*0.5;\n            //rad2 += abs(frac(rad2*7)-0.5)/7.0 * 1.15;  // stepifier\n            //rad2 += cos(rad2*61)*0.02;\n          rad2 *= g_fTexSize.x;\n        #endif\n\n    ang2 *= M_PI_2;\n    uv2 = 0.5 + rad2*float2(cos(ang2),sin(ang2))*texsize.zw;\n\n    ret = tex2D(sampler_main,uv2).y*float3(0.6,0.2,1.5) + tex2D(sampler_fw_main,uv2).x*float3(1,0.66,0) - tex2D(sampler_main,uv2).z*float3(-0.6,1,2);\n}"}