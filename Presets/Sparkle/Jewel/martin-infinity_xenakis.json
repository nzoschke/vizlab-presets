{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_brighten":0,"darken":1,"wave_a":0.002,"wave_scale":0.14,"wave_smoothing":0,"wave_mystery":-0.84,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":2.599,"warpscale":0.01,"zoomexp":0.9999,"zoom":0.9996,"warp":0.01,"sy":1.0017,"wave_g":0,"wave_b":0.6,"ob_size":0,"ob_r":1,"ob_g":1,"ob_b":1,"ib_size":0.075,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":64,"mv_y":48,"mv_l":0,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":23,"textured":1,"rad":0.72143,"tex_ang":0.62832,"tex_zoom":0.0402,"g":1,"b":1,"a":0.9,"r2":0.9,"b2":1,"a2":0.3,"border_a":0},"init_eqs_str":"a.vis=0;a.q27=0;a.q22=0;","frame_eqs_str":"a.vis=div(bnot(mod(a.q27,8))*a.q22,2);a.vis=Math.min(a.vis,1);a.a=div(a.vis,2);a.a2=div(a.vis,2);a.tex_zoom=1;a.rad=.3*a.vis;","init_eqs_eel":"","frame_eqs_eel":"vis = bnot(q27%8)*q22/2;\nvis = min(vis,1);\na = vis/2; a2 = vis/2;\n//tex_ang = 3*(1-vis);\n\ntex_zoom = 1;\nrad = vis*.3; "},{"baseVals":{"sides":5,"textured":1,"rad":4.77803,"tex_zoom":1.78051,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_g":0.99,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang =sin(time/65) ;\nrad = q24/8;","init_eqs_eel":"","frame_eqs_eel":"ang =sin(time/65) ;\nrad = q24/8;"},{"baseVals":{"enabled":1,"sides":5,"additive":1,"num_inst":4,"x":0.9,"rad":0.24732,"tex_zoom":0.40839,"g":0.6,"a":0.4,"g2":0,"b2":0.6,"border_a":0},"init_eqs_str":"a.blue=0;a.ampl=0;a.steps=0;a.k1=0;a.q24=0;a.green=0;a.red=0;a.trig=0;a.q27=0;a.q28=0;","frame_eqs_str":"a.steps=a.q28+1;a.steps=4;a.ampl=.2;a.x=.5+a.ampl*Math.cos(6.28*(div(a.q27,a.steps)+div(a.instance,4)));a.y=.5+a.ampl*Math.sin(6.28*(div(a.q27,a.steps)+div(a.instance,4)));a.a=.4;a.a2=0;a.trig=a.q24*bnot(mod(a.q27,4));a.red=bnot(a.trig)*a.red+div(Math.floor(rand(100)),100)*a.trig;a.green=bnot(a.trig)*a.green+div(Math.floor(rand(100)),100)*a.trig;a.blue=bnot(a.trig)*a.blue+div(Math.floor(rand(100)),100)*a.trig;a.k1=div(a.instance,a.num_inst);a.r=a.red*a.k1;a.g=a.green*(1-a.k1);\na.b=4*a.blue*a.k1*(1-a.k1);a.r=a.red;a.g=a.green;a.b=a.blue;a.r2=a.r;a.b2=a.b;a.g2=a.g;","init_eqs_eel":"","frame_eqs_eel":"steps = q28+1;\nsteps = 4;\nampl = .2; //.2 bis .5 praktisch\n\nx = .5 + ampl*cos((q27/steps+instance/4)*6.28);\ny = .5 + ampl*sin((q27/steps+instance/4)*6.28);\n\na = .4; a2 = .0;\n\n\ntrig = q24 * bnot(q27%4);\nred = bnot(trig)*red+ (int(rand(100))/100)*trig;\ngreen = bnot(trig)*green+ (int(rand(100))/100)*trig;\nblue = bnot(trig)*blue+ (int(rand(100))/100)*trig;\n\nk1 = instance / num_inst;\n\nr = red *k1;\ng = green * (1-k1);\nb = blue * 4*k1*(1-k1);\n\nr = red;\ng = green;\nb = blue;\n\n\n\nr2 = r; b2 = b; g2 = g;"},{"baseVals":{"sides":36,"additive":1,"rad":0.01,"r":0,"g":0.12,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"spectrum":1,"usedots":1,"additive":1,"scaling":0.5033,"r":0.5,"g":0.1,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"x = .5 + .5*sample*sin(sample*50);\ny = .5 + .5*sample*cos(sample*50);\n\ntrel = time;\n\nx = .5 + .5*sample*sin(time); \ny = .5 + .5*sample*cos(time); \n\nx = int(rand(100))/100;\ny = int(rand(100))/100;\n\na=.2;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = .5 + .5*sample*sin(sample*50);\ny = .5 + .5*sample*cos(sample*50);\n\ntrel = time;\n\nx = .5 + .5*sample*sin(time); \ny = .5 + .5*sample*cos(time); \n\nx = int(rand(100))/100;\ny = int(rand(100))/100;\n\na=.2;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.runtreb=0;a.q25=0;a.q12=0;a.redsine=0;a.q18=0;a.q22=0;a.q21=0;a.vt=0;a.bluesine=0;a.q13=0;a.q15=0;a.q29=0;a.q6=0;a.greenif=0;a.q1=0;a.q5=0;a.vb=0;a.q9=0;a.pi23=0;a.q31=0;a.q23=0;a.q24=0;a.q11=0;a.q10=0;a.atime=0;a.q4=0;a.redif=0;a.blueif=0;a.q16=0;a.q26=0;a.runbass=0;a.q19=0;a.q17=0;a.vol=0;a.greensine=0;a.runmids=0;a.q2=0;a.q27=0;a.q14=0;a.q3=0;a.vvm=0;a.q32=0;a.vvb=0;a.q7=0;a.q28=0;a.vm=0;a.q30=0;a.q20=0;a.vvt=0;a.q8=0;a.decay=.1;","frame_eqs_str":"a.vb=.95*a.vb+(1-a.vb)*pow(a.bass_att,2)*.02;a.vvb=.95*a.vvb+(1-a.vvb)*a.vb*.01;a.vm=.95*a.vm+(1-a.vm)*pow(a.mid_att,2)*.02;a.vvm=.95*a.vvm+(1-a.vvm)*a.vm*.01;a.vt=.95*a.vt+(1-a.vt)*pow(a.treb_att,2)*.02;a.vvt=.95*a.vvt+(1-a.vvt)*a.vt*.01;a.vvb=Math.min(1,Math.max(0,a.vvb));a.vvm=Math.min(1,Math.max(0,a.vvm));a.vvt=Math.min(1,Math.max(0,a.vvt));a.q1=10*(a.vvb+a.vvm+a.vvt);a.q2=10*(a.vvb+a.vvm+a.vvt);a.q3=10*(a.vvb+a.vvm+a.vvt);a.q4=10*(a.vvb+a.vvm+a.vvt);a.q5=10*(a.vvb+a.vvm+\na.vvt);a.q6=10*(a.vvb+a.vvm+a.vvt);a.q7=10*(a.vvb+a.vvm+a.vvt);a.runbass+=a.vvb;a.runmids+=a.vvm;a.runtreb+=a.vvt;a.pi23=1.33333333333332*Math.asin(-1);a.atime=.05*(a.runtreb+a.runmids+a.runbass);a.q8=.5*(Math.sin(a.atime-0*a.pi23)+1);a.q9=.5*(Math.sin(a.atime-1*a.pi23)+1);a.q10=.5*(Math.sin(a.atime-2*a.pi23)+1);a.q11=10*(a.vvb+a.vvm+a.vvt);a.q12=10*(a.vvb+a.vvm+a.vvt);a.q13=10*(a.vvb+a.vvm+a.vvt);a.q14=10*(a.vvb+a.vvm+a.vvt);a.q15=10*(a.vvb+a.vvm+a.vvt);a.q16=10*(a.vvb+a.vvm+a.vvt);a.q17=10*(a.vvb+\na.vvm+a.vvt);a.q18=10*(a.vvb+a.vvm+a.vvt);a.q19=10*(a.vvb+a.vvm+a.vvt);a.q20=10*(a.vvb+a.vvm+a.vvt);a.q21=10*(a.vvb+a.vvm+a.vvt);a.q22=10*(a.vvb+a.vvm+a.vvt);a.q23=10*(a.vvb+a.vvm+a.vvt);a.q24=10*(a.vvb+a.vvm+a.vvt);a.q25=10*(a.vvb+a.vvm+a.vvt);a.q26=10*(a.vvb+a.vvm+a.vvt);a.q27=10*(a.vvb+a.vvm+a.vvt);a.q28=10*(a.vvb+a.vvm+a.vvt);a.q29=10*(a.vvb+a.vvm+a.vvt);a.q30=10*(a.vvb+a.vvm+a.vvt);a.q31=10*(a.vvb+a.vvm+a.vvt);a.q32=10*(a.vvb+a.vvm+a.vvt);a.vol=.3333*(a.bass+a.mid+a.treb_att);a.redsine=.5+.15*\na.bass*Math.sin(3*a.time);a.greensine=.5+.15*a.mid*Math.sin(2*a.time);a.bluesine=.5+.15*a.treb*Math.sin(a.time);a.redif=.00001<Math.abs(above(a.bass,1.2))?a.redsine:.00001<Math.abs(above(a.redif,.95))?0:.85*a.redif;a.greenif=.00001<Math.abs(above(a.mid,1.2))?a.greensine:.00001<Math.abs(above(a.greenif,.95))?0:.85*a.greenif;a.blueif=.00001<Math.abs(above(a.treb,1.2))?a.bluesine:.00001<Math.abs(above(a.blueif,.95))?0:.85*a.blueif;a.wave_r=a.redif;a.wave_g=a.greenif;a.wave_b=a.blueif;","pixel_eqs_str":"a.dx+=.08*Math.sin(32*a.x+20*Math.sin(.51*a.time)*Math.cos(.41*a.time));a.dy+=.08*Math.sin(32*a.y+20*Math.sin(.58*a.time)*Math.cos(.33*a.time));","init_eqs_eel":"decay=0.1;","frame_eqs_eel":"//per frame less reactive volume for all unused q vars, put before other q vars are set for cop out mashing\nvb = vb*0.95 + (1-vb)*pow(bass_att,2)*0.02;\nvvb = vvb*0.95 + (1-vvb)*vb*0.01;\nvm = vm*0.95 + (1-vm)*pow(mid_att,2)*0.02;\nvvm = vvm*0.95 + (1-vvm)*vm*0.01;\nvt = vt*0.95 + (1-vt)*pow(treb_att,2)*0.02;\nvvt = vvt*0.95 + (1-vvt)*vt*0.01;\nvvb = min(1,max(0,vvb));\nvvm = min(1,max(0,vvm));\nvvt = min(1,max(0,vvt));\nq1   = (vvb+vvm+vvt)*10;\nq2   = (vvb+vvm+vvt)*10;\nq3   = (vvb+vvm+vvt)*10;\nq4   = (vvb+vvm+vvt)*10;\nq5   = (vvb+vvm+vvt)*10;\nq6   = (vvb+vvm+vvt)*10;\nq7   = (vvb+vvm+vvt)*10;\nrunbass=runbass+vvb;\nrunmids=runmids+vvm ;\nruntreb=runtreb+vvt;\npi23=4*asin(-1)*.33333333333333;\natime=(runtreb+runmids+runbass)*.05;\nq8= (sin(atime-0*pi23)+1)*.5;\nq9= (sin(atime-1*pi23)+1)*.5;\nq10=(sin(atime-2*pi23)+1)*.5;\n\nq11  = (vvb+vvm+vvt)*10;\nq12  = (vvb+vvm+vvt)*10;\nq13  = (vvb+vvm+vvt)*10;\nq14  = (vvb+vvm+vvt)*10;\nq15  = (vvb+vvm+vvt)*10;\nq16  = (vvb+vvm+vvt)*10;\nq17  = (vvb+vvm+vvt)*10;\nq18  = (vvb+vvm+vvt)*10;\nq19  = (vvb+vvm+vvt)*10;\nq20  = (vvb+vvm+vvt)*10;\nq21  = (vvb+vvm+vvt)*10;\nq22  = (vvb+vvm+vvt)*10;\nq23  = (vvb+vvm+vvt)*10;\nq24  = (vvb+vvm+vvt)*10;\nq25  = (vvb+vvm+vvt)*10;\nq26  = (vvb+vvm+vvt)*10;\nq27  = (vvb+vvm+vvt)*10;\nq28  = (vvb+vvm+vvt)*10;\nq29  = (vvb+vvm+vvt)*10;\nq30  = (vvb+vvm+vvt)*10;\nq31  = (vvb+vvm+vvt)*10;\nq32  = (vvb+vvm+vvt)*10;\n\n\nvol=(bass+mid+treb_att)*.3333;\n\nredsine=.5+.15*bass*sin(time*3);\ngreensine=.5+.15*mid*sin(time*2);\nbluesine=.5+.15*treb*sin(time);\n\nredif=if(above(bass,1.2),redsine,if(above(redif,.95),0,redif*.85));\ngreenif=if(above(mid,1.2),greensine,if(above(greenif,.95),0,greenif*.85));\nblueif=if(above(treb,1.2),bluesine,if(above(blueif,.95),0,blueif*.85));\n\nwave_r=redif;\nwave_g=greenif;\nwave_b=blueif;","pixel_eqs_eel":"dx=dx+.08*sin(x*32+sin(time*.51)*20*cos(time*.41));\ndy=dy+.08*sin(y*32+sin(time*.58)*20*cos(time*.33));","warp":" shader_body { \n  vec2 uv6_1;\n  vec2 uv1_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (uv - 0.5);\n  float x_4;\n  x_4 = (abs(tmpvar_3.x) - abs(tmpvar_3.y));\n  float tmpvar_5;\n  tmpvar_5 = (18.0 * sqrt((x_4 * x_4)));\n  uv1_2 = (tmpvar_3 - (clamp (\n    ((sin(tmpvar_5) / cos(tmpvar_5)) * normalize(tmpvar_3))\n  , vec2(-3.0, -3.0), vec2(3.0, 3.0)) / 60.0));\n  uv6_1 = (0.4 * cos((\n    (uv1_2 * 4.0)\n   * q28)));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = (((texture (sampler_main, \n    ((uv1_2 * (q11 + (q10 * tmpvar_5))) + 0.5)\n  ).xyz + \n    (vec3((0.006 / sqrt(dot (uv6_1, uv6_1)))) * (1.0 + roam_cos).xyz)\n  ) * 0.99) - 0.025);\n  ret = tmpvar_6.xyz;\n }","comp":"float xlat_mutableang2;\nvec2 xlat_mutablers0;\nvec2 xlat_mutableuv2;\n shader_body { \n  vec2 uv_1;\n  vec3 ret1_3;\n  uv_1 = ((uv - 0.5) * aspect.xy);\n  vec2 tmpvar_4;\n  tmpvar_4.x = q15;\n  tmpvar_4.y = q16;\n  uv_1 = (uv_1 + tmpvar_4);\n  mat2 tmpvar_5;\n  tmpvar_5[uint(0)] = _qb.xy;\n  tmpvar_5[1u] = _qb.zw;\n  uv_1 = (uv_1 * tmpvar_5);\n  float tmpvar_6;\n  float tmpvar_7;\n  tmpvar_7 = (min (abs(\n    (uv_1.y / uv_1.x)\n  ), 1.0) / max (abs(\n    (uv_1.y / uv_1.x)\n  ), 1.0));\n  float tmpvar_8;\n  tmpvar_8 = (tmpvar_7 * tmpvar_7);\n  tmpvar_8 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_8) + 0.05368138) * tmpvar_8) - 0.1173503)\n     * tmpvar_8) + 0.1938925) * tmpvar_8) - 0.3326756)\n   * tmpvar_8) + 0.9999793) * tmpvar_7);\n  tmpvar_8 = (tmpvar_8 + (float(\n    (abs((uv_1.y / uv_1.x)) > 1.0)\n  ) * (\n    (tmpvar_8 * -2.0)\n   + 1.570796)));\n  tmpvar_6 = (tmpvar_8 * sign((uv_1.y / uv_1.x)));\n  if ((abs(uv_1.x) > (1e-08 * abs(uv_1.y)))) {\n    if ((uv_1.x < 0.0)) {\n      if ((uv_1.y >= 0.0)) {\n        tmpvar_6 += 3.141593;\n      } else {\n        tmpvar_6 = (tmpvar_6 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_6 = (sign(uv_1.y) * 1.570796);\n  };\n  xlat_mutablers0.x = ((tmpvar_6 / 3.1416) * 2.0);\n  xlat_mutablers0.y = (0.03 / sqrt(dot (uv_1, uv_1)));\n  ret1_3 = vec3(0.0, 0.0, 0.0);\n  for (int n_2 = 0; n_2 <= 10; n_2++) {\n    float tmpvar_9;\n    tmpvar_9 = fract((-(q9) + (\n      float(n_2)\n     / 10.0)));\n    xlat_mutableang2 = (((q1 * 3.14) * float(n_2)) / 10.0);\n    float tmpvar_10;\n    tmpvar_10 = cos(xlat_mutableang2);\n    float tmpvar_11;\n    tmpvar_11 = sin(xlat_mutableang2);\n    mat2 tmpvar_12;\n    tmpvar_12[uint(0)].x = tmpvar_10;\n    tmpvar_12[uint(0)].y = -(tmpvar_11);\n    tmpvar_12[1u].x = tmpvar_11;\n    tmpvar_12[1u].y = tmpvar_10;\n    xlat_mutableuv2 = (uv_1 * ((q13 * tmpvar_9) * tmpvar_12));\n    ret1_3 = max (ret1_3, (texture (sampler_main, (xlat_mutableuv2 + 0.5)).xyz * (1.0 - tmpvar_9)));\n  };\n  vec4 tmpvar_13;\n  tmpvar_13.w = 1.0;\n  tmpvar_13.xyz = ((ret1_3 * 2.0) + ((\n    (bass_att * xlat_mutablers0.y)\n   * texture (sampler_main, \n    ((uv_1 * q12) + (time / 32.0))\n  ).yzx) * clamp (\n    (1.0 - (ret1_3 * 32.0))\n  , 0.0, 1.0)));\n  ret = tmpvar_13.xyz;\n }","warp_hlsl":"sampler sampler_worms;\nfloat3 color, mus;\nfloat dx,dy;\nshader_body {\n\n\nfloat2 uv1 = (uv-.5);// * aspect.xy;\n\nfloat2 uv6 = uv1;\n\n//##hier unten statt - auch plus\nfloat z = 18*length((abs(uv1.x)-abs(uv1.y)));\n//z = length(uv1)*12;\n\nfloat2 d = normalize(uv1);\nfloat2 rs = clamp(tan(z)*d,-3,3);\n//uv1 += .01*lum(GetBlur1(uv))*d;\nuv1 -= rs/60; //auch minus und frac versuchen\n\nuv6 = .4*cos(uv1*4*q28);\nmus = .006/(length(uv6));\nmus *= (1+roam_cos);\n\n\n//probier auch 1*z;\nfloat3 crisp= tex2D(sampler_main,uv1*(q11+q10*z)+.5);\n\nfloat3 ret1 = crisp + mus;\n\nq25 = q24+.4; //##hier auf 1 setzen\nq25 = 1;\nret = q25*(ret1*.99-.025) + (1-q25)* GetPixel(uv_orig);\n\n}","comp_hlsl":"sampler sampler_pw_noise_lq;\n\nfloat3 neu, ret1;\nfloat2 rs2,rs0,rss,uv1,uv2;\nfloat ang2,c,s;\nfloat2x2 rota = float2x2(.7,.7,-.7,.7);\nshader_body\n{\nfloat2 uv5 = (uv-.5)*aspect.xy;\n\nuv -= 0.5;\nuv *= aspect.xy;    \nuv += float2 (q15,q16);\nuv = mul(uv,float2x2(_qb));\nuv5 = uv;\n\nrs0.x = atan2(uv5.y, uv5.x)/3.1416*2;\nrs0.y = .03/(length (uv5));\nrss = float2 (rs0.x+time/2,rs0.y+time*2);\n//rss = mul(rss,float2x2(.7,.7,-.7,.7));\nfloat noise = (tex2D(sampler_pw_noise_lq,rss/32)-.7 >= 0);\n//rss = abs(frac(rss*8)-.5)/7;\n\n\nfloat3 ret1 = .0;\nint anz = 10;\nint n = 0;\nfloat2 ofs = .02*float2(q5,q6).yx;\nwhile (n <= anz) {\n    float dist = frac(-q9+1.0*n/anz);\n\n    ang2 = q1*3.14*n/anz;//*q28+time;\n    c = cos(ang2);\n    s = sin(ang2);\n    uv2 = mul(uv,q13*dist*float2x2(c,s,-s,c));\n \n    neu = GetPixel(uv2+.5) ;\n    ret1 = max(ret1,neu*(1-dist));\nn++;\n}\n\n\nret = ret1*2\n+ bass_att*rs0.y*tex2D (sampler_main,uv*q12+time/32).gbr\n*saturate(1-ret1*32);\n\n//ret = GetPixel(uv_orig+.5);\n\n}\n\n"}