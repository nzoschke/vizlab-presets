{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.527,"wave_smoothing":0.45,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.8,"wave_g":0.49,"ob_size":0.015,"ob_a":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b2x":0.3,"b1ed":0},"shapes":[{"baseVals":{"additive":1,"textured":1,"rad":2.37185,"tex_ang":1.5708,"tex_zoom":0.93101,"r":0,"g":1,"b":1,"a":0.4,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":12,"additive":1,"textured":1,"x":0.3,"y":0.8,"rad":1.06345,"tex_ang":1.63363,"tex_zoom":0.46617,"g":1,"g2":0,"a2":1,"border_g":0,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":13,"additive":1,"num_inst":5,"x":0.65,"y":0.38,"rad":0.57049,"tex_zoom":0.73678,"a":0.7,"g2":0,"border_r":0.5,"border_g":0.5,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":14,"additive":1,"thickoutline":1,"textured":1,"x":0.6,"y":0.55,"rad":0.97237,"ang":1.25664,"tex_zoom":0.34933,"g":0.6,"g2":0,"b2":1,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"samples":506,"sep":116,"spectrum":1,"thick":1,"scaling":1.07408,"smoothing":0,"a":0.7},"init_eqs_str":"a.n=0;a.m=0;","frame_eqs_str":"","point_eqs_str":"a.n=Math.floor((a.reg00+.5)*a.sample);a.m=30001+div(a.n,div(a.reg00,a.reg01));a.gmegabuf[Math.floor(a.m)]=a.value1+a.value2;a.x=a.gmegabuf[Math.floor(1E4+a.n)];a.y=a.gmegabuf[Math.floor(15E3+a.n)];a.a=a.gmegabuf[Math.floor(2E4+a.n)];a.b=Math.min(Math.max(a.gmegabuf[Math.floor(25E3+a.n)],0),1);a.r=1-a.b;a.g=.5;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"\nn = int((reg00+.5)*sample);\n\nm = 30001+n/(reg00/reg01);\ngmegabuf(m) = (value1+value2);\n\nx = gmegabuf(10000+n);\ny = gmegabuf(15000+n);\na = gmegabuf(20000+n);\n\nb = min(max(gmegabuf(25000+n),0),1);\nr = 1-b;  \ng = 0.5;"},{"baseVals":{"enabled":1,"samples":506,"thick":1,"scaling":0.89152,"smoothing":0.82},"init_eqs_str":"a.n=0;","frame_eqs_str":"","point_eqs_str":"a.n=Math.floor((a.reg00+.5)*a.sample)+a.reg00;a.x=a.gmegabuf[Math.floor(1E4+a.n)];a.y=a.gmegabuf[Math.floor(15E3+a.n)];a.a=a.gmegabuf[Math.floor(2E4+a.n)];a.b=Math.min(Math.max(a.gmegabuf[Math.floor(25E3+a.n)],0),1);a.r=1-a.b;a.g=.5;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n = int((reg00+.5)*sample) +reg00;\n\nx = gmegabuf(10000+n);\ny = gmegabuf(15000+n);\na = gmegabuf(20000+n);\n\nb = min(max(gmegabuf(25000+n),0),1);\nr = 1-b;  \ng = 0.5;\n"},{"baseVals":{"enabled":1,"samples":506,"thick":1,"scaling":0.89152,"smoothing":0.82},"init_eqs_str":"a.n=0;","frame_eqs_str":"","point_eqs_str":"a.n=Math.floor((a.reg00+.5)*a.sample)+2*a.reg00;a.x=a.gmegabuf[Math.floor(1E4+a.n)];a.y=a.gmegabuf[Math.floor(15E3+a.n)];a.a=a.gmegabuf[Math.floor(2E4+a.n)];a.b=Math.min(Math.max(a.gmegabuf[Math.floor(25E3+a.n)],0),1);a.r=1-a.b;a.g=.5;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n = int((reg00+.5)*sample)+2*reg00;\n\n\nx = gmegabuf(10000+n);\ny = gmegabuf(15000+n);\na = gmegabuf(20000+n);\n\nb = min(max(gmegabuf(25000+n),0),1);\nr = 1-b;  \ng = 0.5;\n"},{"baseVals":{"enabled":1,"samples":506,"spectrum":1,"thick":1},"init_eqs_str":"a.n=0;","frame_eqs_str":"","point_eqs_str":"a.n=Math.floor((a.reg00-.5)*a.sample)+3*a.reg00;a.x=a.gmegabuf[Math.floor(1E4+a.n)];a.y=a.gmegabuf[Math.floor(15E3+a.n)];a.a=a.gmegabuf[Math.floor(2E4+a.n)];a.b=Math.min(Math.max(a.gmegabuf[Math.floor(25E3+a.n)],0),1);a.r=1-a.b;a.g=.5;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n = int((reg00-.5)*sample)+3*reg00;\n\n\nx = gmegabuf(10000+n);\ny = gmegabuf(15000+n);\na = gmegabuf(20000+n);\n\nb = min(max(gmegabuf(25000+n),0),1);\nr = 1-b;  \ng = 0.5;"}],"init_eqs_str":"a.xang=0;a.fov=0;a.hell=0;a.cbeat=0;a.index2=0;a.bindex=0;a.ran4=0;a.index=0;a.yang=0;a.q29=0;a.q6=0;a.amp_=0;a.xlen=0;a.smooth=0;a.q1=0;a.dec_med=0;a.sum=0;a.q5=0;a.dec_f=0;a.trely=0;a.flen=0;a.reg01=0;a.my=0;a.oz=0;a.imag=0;a.is_beat=0;a.yind=0;a.oy0a=0;a.dec_slow=0;a.ran2=0;a.ind=0;a.z0=0;a.ylen=0;a.real=0;a.ran3=0;a.q4=0;a.mz=0;a.oy0=0;a.amp=0;a.tc0=0;a.oy=0;a.avg=0;a.mx=0;a.vol=0;a.peak=0;a.decc=0;a.q2=0;a.bd_bt=0;a.zang=0;a.q3=0;a.reg00=0;a.trelz=0;a.q32=0;a.q28=0;a.trelx=\n0;a.q30=0;a.ox=0;a.xind=0;for(var b=a.index=0;7E4>b;b++)a.megabuf[Math.floor(a.index)]=0,a.gmegabuf[Math.floor(a.index)]=0,a.index+=1;a.zang=1;a.yang=0;a.zang=2;","frame_eqs_str":"a.xlen=45;a.ylen=45;a.flen=20;a.reg00=div(a.xlen*a.ylen,4);a.reg01=div(a.reg00,4);a.dec_med=1-div(.06*30,a.fps);a.dec_slow=1-div(.6,a.fps);a.dec_f=pow(.8,div(30,a.fps));a.q30=a.dec_slow;a.smooth=Math.max(1,pow(6,div(a.fps,30))-2);a.cbeat=a.bass+a.mid+a.treb;a.decc=.00001<Math.abs(a.vol>a.cbeat?1:0)?.8:a.dec_med;a.vol=a.vol*a.decc+(1-a.decc)*a.cbeat;a.avg=a.avg*a.dec_slow+a.cbeat*(1-a.dec_slow);a.is_beat=above(a.cbeat,1.5*a.avg)*above(a.time,a.tc0+.2);a.tc0=.00001<Math.abs(bor(a.is_beat,\na.bd_bt))?a.time:a.tc0;a.peak=.00001<Math.abs(a.is_beat)?a.cbeat:a.peak*a.dec_med;a.ind=0;a.sum=0;a.amp=.01;for(var b=0;b<a.reg01;b++)a.sum+=div(a.gmegabuf[Math.floor(a.ind+3E4)],a.reg01),a.amp+=pow(a.gmegabuf[Math.floor(a.ind+3E4)],2),a.ind+=1;a.ind=0;a.amp_=a.amp_*a.dec_med+600*div((1-a.dec_med)*sqrt(a.amp),a.reg01);for(b=0;b<a.reg01;b++)a.megabuf[Math.floor(a.ind+3E4)]=div(a.gmegabuf[Math.floor(a.ind+3E4)]-a.sum,a.amp_),a.ind+=1;for(b=a.index2=0;b<a.flen;b++){a.index=0;a.real=0;for(var c=a.imag=\n0;c<a.flen;c++)a.real+=Math.cos(6.28*div(a.index,a.flen)*a.index2)*a.megabuf[Math.floor(div(a.index*a.reg01,8)+30002)],a.imag+=Math.sin(6.28*div(a.index,a.flen)*a.index2)*a.megabuf[Math.floor(div(a.index*a.reg01,8)+30002)],a.index+=1;a.megabuf[Math.floor(1E4+a.index2)]=a.megabuf[Math.floor(1E4+a.index2)]*a.dec_f+a.real;a.megabuf[Math.floor(15E3+a.index2)]=a.megabuf[Math.floor(15E3+a.index2)]*a.dec_f+a.imag;a.index2+=1}a.ind=1;for(b=0;b<div(a.flen,2);b++){a.cx=a.megabuf[Math.floor(1E4+a.ind)];a.cy=\na.megabuf[Math.floor(15E3+a.ind)];a.yind=-1;for(c=0;3>c;c++){a.xind=-1;for(var d=0;3>d;d++)a.ox=mod((a.cx+.5)*a.xlen+a.xind,a.xlen),a.oy=mod((a.cy+.5)*a.ylen+a.yind,a.ylen),a.amp=3*(a.cx*a.cx+a.cy*a.cy),a.megabuf[Math.floor(a.oy*a.ylen+a.ox)]-=div(div(60,a.fps)*sqrt(a.amp)*above(a.amp,.02),1+a.xind*a.xind+a.yind*a.yind),a.xind+=1;a.yind+=1}a.ind+=1}for(b=a.yind=0;b<a.ylen;b++){for(c=a.xind=0;c<a.xlen;c++)a.megabuf[Math.floor(a.yind*a.ylen+a.xind+5E3)]=a.dec_med*(div(a.gmegabuf[Math.floor(a.yind*a.ylen+\nmod(a.xind+1,a.xlen))]+a.gmegabuf[Math.floor(a.yind*a.ylen+mod(a.xlen+a.xind-1,a.xlen))]+a.gmegabuf[Math.floor(mod(a.yind+1,a.ylen)*a.ylen+a.xind)]+a.gmegabuf[Math.floor(mod(a.yind+a.ylen-1,a.ylen)*a.ylen+a.xind)]+a.gmegabuf[Math.floor(a.yind*a.ylen+a.xind)]*a.smooth*4,2+2*a.smooth)-a.megabuf[Math.floor(a.yind*a.ylen+a.xind)]),a.xind+=1;a.yind+=1}a.bindex+=a.is_beat;.00001<Math.abs(a.is_beat&&.00001>Math.abs(mod(a.bindex,4)-0)?1:0)?a.ran2=div(rand(100)-50,50):0;.00001<Math.abs(a.is_beat&&.00001>Math.abs(mod(a.bindex,\n4)-2)?1:0)?a.ran3=div(rand(100)-50,50):0;.00001<Math.abs(a.is_beat&&.00001>Math.abs(mod(a.bindex,6)-5)?1:0)?a.ran4=div(rand(100)-50,50):0;a.trelx+=div(div(a.ran2,a.fps),18);a.trely+=div(div(a.ran3,a.fps),2);a.trelz+=div(div(a.ran4,a.fps),6);a.zang=6*Math.sin(a.trelz);a.xang=6*Math.sin(div(a.zang,5)+a.trelx);a.yang=6*Math.sin(0*div(a.zang,3)+a.trely);a.q1=Math.cos(a.xang);a.q2=Math.sin(a.xang);a.q3=Math.cos(a.yang);a.q4=Math.sin(a.yang);a.q5=Math.cos(a.zang);a.q6=Math.sin(a.zang);a.fov=1;for(b=a.yind=\n0;b<a.ylen;b++){for(c=a.xind=0;c<a.xlen;c++)a.ind=a.yind*a.ylen+a.xind,a.megabuf[Math.floor(a.ind)]=a.gmegabuf[Math.floor(a.ind)],a.gmegabuf[Math.floor(a.ind)]=a.megabuf[Math.floor(a.ind+5E3)],a.oz=a.yind-div(a.ylen,2),a.ox=.00001<Math.abs(bnot(mod(a.yind,2)))?a.xind:a.xlen-a.xind-1,a.oy0a=div(a.oy0+a.oy0a,2.5),a.oy=a.gmegabuf[Math.floor(a.yind*a.ylen+a.ox)],a.oy0=a.oy,a.ox-=div(a.xlen,2),a.mx=a.ox*a.q5-a.oy*a.q6,a.my=a.ox*a.q6+a.oy*a.q5,a.ox=a.mx,a.oy=a.my,a.mx=a.ox*a.q3+a.oz*a.q4,a.mz=-a.ox*a.q4+\na.oz*a.q3,a.ox=a.mx,a.oz=a.mz,a.my=a.oy*a.q1-a.oz*a.q2,a.mz=a.oy*a.q2+a.oz*a.q1,a.z0=10*Math.sin(14*a.trelz),a.oy=a.my,a.oz=a.mz+a.z0,a.gmegabuf[Math.floor(1E4+a.ind)]=div(a.fov*a.ox,a.oz+60*a.fov)+.5,a.gmegabuf[Math.floor(15E3+a.ind)]=div(a.fov*a.oy,a.oz+60*a.fov)+.5,a.hell=Math.max(Math.min(.5+div(a.oy0,4),1),.2),a.gmegabuf[Math.floor(2E4+a.ind)]=Math.max(Math.min(a.hell*(.5+.1*(a.oy0a-a.oy0)),1),.1),a.gmegabuf[Math.floor(25E3+a.ind)]=div(a.oy0,16)+.5,a.xind+=1;a.yind+=1}a.q29=div(10,a.z0+15);a.q32=\na.aspecty;a.q28=Math.min(div(a.vol,3)-.25,1);a.monitor=a.q28;","pixel_eqs_str":"a.rot=0;a.zoom=1.1;a.warp=0;a.dy=.02;","init_eqs_eel":"index = 0;\nloop (70000,\n  megabuf(index) = 0;\n  gmegabuf(index) = 0;\n  index = index + 1;\n);\n\nzang = 1;\n\nyang = 0;\nzang = 2;","frame_eqs_eel":"xlen = 45; ylen = 45; flen = 20; reg00 = xlen*ylen/4; reg01=reg00/4;\ndec_med = 1-0.06*30/fps; dec_slow = 1-0.02*30/fps; dec_f = pow (0.8, 30/fps);\nq30 = dec_slow;\nsmooth = max(1,pow(6,fps/30)-2); // >= 0; Ausbreitungsgeschwindigkeit\n\n//\"Classic\" beat reaction\ncbeat = bass+mid+treb;\ndecc = if (vol>cbeat,0.8,dec_med);\nvol  = vol * decc + (1-decc)*cbeat;\navg = avg*dec_slow + cbeat*(1-dec_slow);\nis_beat = above(cbeat, 1.5*avg) * above (time, tc0+.2);\ntc0 = if (bor(is_beat, bd_bt),time,tc0);\npeak = if (is_beat,cbeat,peak*dec_med);\n\n\n//Gleichanteil entfernen und normalisieren\nind = 0; sum = 0; amp = 0.01;\nloop (reg01,\n  sum = sum + gmegabuf(ind+30000)/(reg01);\n  amp = amp + pow(gmegabuf(ind+30000),2);\n  ind = ind+1;\n); \nind = 0; amp_= amp_*dec_med + (1-dec_med)*sqrt(amp)/reg01*600;\nloop (reg01,\n  megabuf(ind+30000)= (gmegabuf(ind+30000)-sum)/amp_;\n  ind = ind+1;\n);\n \n// Spectrum of spectrum  !\nindex2 = 0;\nloop(flen, //Frequency step\n  index=0; real= 0; imag = 0;\n  loop (flen,\n    real = real + cos(index/flen*6.28*index2)*megabuf(index*reg01/8+30002);\n    imag = imag + sin(index/flen*6.28*index2)*megabuf(index*reg01/8+30002);\n    index=index+1;\n  );\n  megabuf(10000+index2)= megabuf(10000+index2) * dec_f + real;\n  megabuf(15000+index2)= megabuf(15000+index2) * dec_f + imag;\n  index2 = index2+1;\n );\n\n//Anregung\nind = 1;\nloop (flen/2,\n  cx = megabuf(10000+ind);\n  cy = megabuf(15000+ind);\n  yind = -1;\n  loop (3,\n    xind = -1;\n    loop (3,\n      ox = ((cx+.5)*xlen+xind)%xlen;\n      oy = ((cy+.5)*ylen+yind)%ylen;\n      amp = (cx*cx+cy*cy)*3;\n      megabuf (oy*ylen+ox) = megabuf (oy*ylen+ox) \n                           - 2*30/fps*sqrt(amp)*above(amp,.02)/(1+xind*xind+yind*yind);\n      xind = xind+1;\n    );\n    yind = yind+1;\n  );\n  ind = ind+1;\n);\n\n//Simulation\nyind = 0;\nloop (ylen,\n  xind = 0;\n  loop (xlen,\n    megabuf(yind*ylen+xind+5000) = //megabuf ab 5000 ist nur Zwischenspeicher\n    dec_med*((gmegabuf(yind*ylen+(xind+1)%xlen) +\n    gmegabuf(yind*ylen+(xlen+xind-1)%xlen) + \n    gmegabuf(((yind+1)%ylen)*ylen+xind) + \n    gmegabuf(((yind+ylen-1)%ylen)*ylen+xind)\n    +gmegabuf(yind*ylen+xind)*smooth*4)/(2+2*smooth) - megabuf(yind*ylen+xind)); \n    xind = xind+1;\n  );\n  yind = yind+1;\n);\n\n//Projektionsparameter\n\nbindex += is_beat;\n\nif (is_beat && (bindex%4==0), ran2 = (rand(100)-50)/50,0 );\nif (is_beat && (bindex%4==2), ran3 = (rand(100)-50)/50,0 );\nif (is_beat && (bindex%6==5), ran4 = (rand(100)-50)/50,0 );\n\ntrelx += ran2/fps/18;\ntrely += ran3/fps/2;\ntrelz += ran4/fps/6;\nzang = 6*sin(trelz);\nxang = 6*sin(zang/5+trelx);\nyang = 6*sin(zang/3*0+trely);\n\nq1 = cos(xang);q2 = sin(xang);q3 = cos(yang);\nq4 = sin(yang);q5 = cos(zang);q6 = sin(zang);\nfov = 1;\n\n//Umkopieren und Projektion\nyind = 0;\nloop (ylen,\n  xind = 0;\n  loop (xlen,\n    ind = yind*ylen+xind;\n    megabuf(ind) = gmegabuf(ind); \n    gmegabuf(ind) = megabuf(ind+5000); \n    oz = yind - ylen/2; //#\n    ox = if(bnot(yind%2),xind,xlen-xind-1);\n    oy0a = (oy0+oy0a)/2.5;\n    oy = gmegabuf(yind*ylen+ox); oy0 = oy;\n    ox = ox - xlen/2;  \n    mx = ox*q5 - oy*q6;  my = ox*q6 + oy*q5;\n    ox = mx; oy = my;  \n    mx = ox*q3 + oz*q4;  mz = - ox*q4 + oz*q3;\n    ox = mx; oz = mz;  \n    my = oy*q1 - oz*q2;  mz = oy*q2 + oz*q1;\n    z0 = (10*sin(trelz*14));\n    oy = my; oz = mz+z0;\n    gmegabuf(10000+ind) = fov*ox/(oz+60*fov)+.5;\n    gmegabuf(15000+ind) = fov*oy/(oz+60*fov)+.5;\n    hell= max(min(.5+oy0/4,1),0.2); //Helligkeit\n    gmegabuf(20000+ind) = max(min(hell* (.5+ (oy0a-oy0)*0.1),1),0.1);\n    gmegabuf(25000+ind) = oy0/16+.5;;\n    xind = xind+1;\n  );\n  yind = yind+1;\n);\n\nq29 = 10/(z0+15);\nq32 = aspecty;\nq28 = min (vol/3-0.25,1);\nmonitor = q28;","pixel_eqs_eel":"rot = 0; zoom = 1.1; warp = 0; dy = 0.02;","warp":"vec2 xlat_mutableball;\nvec2 xlat_mutablers;\nvec2 xlat_mutableuv1;\n shader_body { \n  vec2 uv_1;\n  vec2 uv2_2;\n  xlat_mutableuv1 = ((uv_orig - 0.5) * aspect.xy);\n  float tmpvar_3;\n  tmpvar_3 = ((18.0 * sqrt(\n    dot (xlat_mutableuv1, xlat_mutableuv1)\n  )) + time);\n  xlat_mutablers = (clamp ((\n    (sin(tmpvar_3) / cos(tmpvar_3))\n   * \n    normalize(xlat_mutableuv1)\n  ), vec2(-5.0, -5.0), vec2(5.0, 5.0)) / 2.0);\n  float tmpvar_4;\n  tmpvar_4 = ((q29 * 16.0) + 1.0);\n  vec2 tmpvar_5;\n  tmpvar_5.x = q9;\n  tmpvar_5.y = q10;\n  vec2 tmpvar_6;\n  tmpvar_6 = (tmpvar_5 * sqrt(tmpvar_4));\n  xlat_mutableball = (sin((xlat_mutableuv1 * tmpvar_4)) - tmpvar_6);\n  float tmpvar_7;\n  tmpvar_7 = (sqrt(dot (xlat_mutableball, xlat_mutableball)) / ((0.035 * \n    pow (tmpvar_4, 0.9)\n  ) * (1.0 + \n    sqrt(dot (tmpvar_6, tmpvar_6))\n  )));\n  float tmpvar_8;\n  tmpvar_8 = clamp ((sign(\n    (1.0 - tmpvar_7)\n  ) * sqrt(\n    (1.0 - tmpvar_7)\n  )), 0.0, 1.0);\n  float tmpvar_9;\n  tmpvar_9 = float((tmpvar_8 >= 0.001));\n  xlat_mutablers = ((q28 * xlat_mutablers) + ((1.0 - q28) * xlat_mutablers.yx));\n  uv_1 = (uv_orig + ((\n    ((1.0 - tmpvar_9) * 0.03)\n   * xlat_mutablers.yx) + (\n    ((0.6 * tmpvar_9) * tmpvar_8)\n   * \n    normalize(xlat_mutableball)\n  )));\n  mat2 tmpvar_10;\n  tmpvar_10[uint(0)] = _qb.xy;\n  tmpvar_10[1u] = _qb.zw;\n  vec2 tmpvar_11;\n  tmpvar_11.x = sin((xlat_mutableuv1.y * 16.0));\n  tmpvar_11.y = sin((xlat_mutableuv1.x * 16.0));\n  uv2_2 = (((0.7 * xlat_mutableuv1) + (0.3 * tmpvar_11)) * 0.2);\n  vec4 tmpvar_12;\n  tmpvar_12.w = 1.0;\n  tmpvar_12.xyz = (((\n    ((texture (sampler_main, uv_1).xyz - ((\n      (texture (sampler_blur1, fract(uv_1)).xyz * scale1)\n     + bias1) * 0.03)) + (vec3(1.0, 0.84, 0.6) * ((0.08 * \n      abs(vec3(((0.16 / (\n        sqrt((xlat_mutableuv1 * tmpvar_10).x)\n       + 0.002)) * rad)))\n    ) - (tmpvar_8 * \n      (0.2 + (0.3 * slow_roam_cos.xyz))\n    ))))\n   + vec3(\n    (q26 * clamp ((0.0015 / sqrt(\n      dot (uv2_2, uv2_2)\n    )), 0.0, 1.0))\n  )) * 0.99) - 0.018);\n  ret = tmpvar_12.xyz;\n }","comp":"vec2 xlat_mutablerss;\nvec2 xlat_mutablerss0;\nfloat xlat_mutabletime;\n shader_body { \n  vec2 uv_1;\n  uv_1 = (0.5 + ((uv - 0.5) * aspect.wz));\n  xlat_mutabletime = (time * 0.6);\n  float tmpvar_2;\n  vec3 dots_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = (uv_1 - vec2(0.1, 0.5));\n  float tmpvar_5;\n  float tmpvar_6;\n  tmpvar_6 = (min (abs(\n    (tmpvar_4.x / tmpvar_4.y)\n  ), 1.0) / max (abs(\n    (tmpvar_4.x / tmpvar_4.y)\n  ), 1.0));\n  float tmpvar_7;\n  tmpvar_7 = (tmpvar_6 * tmpvar_6);\n  tmpvar_7 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)\n     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)\n   * tmpvar_7) + 0.9999793) * tmpvar_6);\n  tmpvar_7 = (tmpvar_7 + (float(\n    (abs((tmpvar_4.x / tmpvar_4.y)) > 1.0)\n  ) * (\n    (tmpvar_7 * -2.0)\n   + 1.570796)));\n  tmpvar_5 = (tmpvar_7 * sign((tmpvar_4.x / tmpvar_4.y)));\n  if ((abs(tmpvar_4.y) > (1e-08 * abs(tmpvar_4.x)))) {\n    if ((tmpvar_4.y < 0.0)) {\n      if ((tmpvar_4.x >= 0.0)) {\n        tmpvar_5 += 3.141593;\n      } else {\n        tmpvar_5 = (tmpvar_5 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_5 = (sign(tmpvar_4.x) * 1.570796);\n  };\n  xlat_mutablerss0.x = (tmpvar_5 / 3.1416);\n  xlat_mutablerss0.y = (0.003 / sqrt(dot (tmpvar_4, tmpvar_4)));\n  vec2 tmpvar_8;\n  tmpvar_8.x = (xlat_mutablerss0.x + (q1 / 3.0));\n  tmpvar_8.y = (xlat_mutablerss0.y + xlat_mutabletime);\n  xlat_mutablerss = (tmpvar_8 * mat2(0.7, -0.7, 0.7, 0.7));\n  vec4 tmpvar_9;\n  tmpvar_9 = vec4(greaterThanEqual ((texture (sampler_pw_noise_lq, \n    (xlat_mutablerss / 32.0)\n  ) - 0.5), vec4(0.0, 0.0, 0.0, 0.0)));\n  vec2 tmpvar_10;\n  tmpvar_10 = abs((fract(\n    (xlat_mutablerss * 8.0)\n  ) - 0.5));\n  vec2 tmpvar_11;\n  tmpvar_11.x = xlat_mutablerss0.x;\n  tmpvar_11.y = (xlat_mutablerss0.y + (xlat_mutabletime / 4.0));\n  xlat_mutablerss = (tmpvar_11 * mat2(0.7, -0.7, 0.7, 0.7));\n  vec2 tmpvar_12;\n  tmpvar_12 = abs((fract(\n    (xlat_mutablerss * 8.0)\n  ) - 0.5));\n  dots_3 = (vec3((clamp (\n    (0.04 / sqrt(dot (tmpvar_10, tmpvar_10)))\n  , 0.0, 1.0) * tmpvar_9.x)) + (clamp (\n    (0.02 / sqrt(dot (tmpvar_12, tmpvar_12)))\n  , 0.0, 1.0) * vec4(\n    greaterThanEqual ((texture (sampler_pw_noise_lq, (xlat_mutablerss / 32.0)) - 0.5), vec4(0.0, 0.0, 0.0, 0.0))\n  ).x));\n  dots_3 = (dots_3 * clamp ((0.2 / \n    abs(xlat_mutablerss0.y)\n  ), 0.0, 1.0));\n  tmpvar_2 = (dots_3 * dots_3).x;\n  vec3 dots_13;\n  vec2 tmpvar_14;\n  tmpvar_14 = (uv_1 - vec2(0.9, 0.5));\n  float tmpvar_15;\n  float tmpvar_16;\n  tmpvar_16 = (min (abs(\n    (tmpvar_14.x / tmpvar_14.y)\n  ), 1.0) / max (abs(\n    (tmpvar_14.x / tmpvar_14.y)\n  ), 1.0));\n  float tmpvar_17;\n  tmpvar_17 = (tmpvar_16 * tmpvar_16);\n  tmpvar_17 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)\n     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)\n   * tmpvar_17) + 0.9999793) * tmpvar_16);\n  tmpvar_17 = (tmpvar_17 + (float(\n    (abs((tmpvar_14.x / tmpvar_14.y)) > 1.0)\n  ) * (\n    (tmpvar_17 * -2.0)\n   + 1.570796)));\n  tmpvar_15 = (tmpvar_17 * sign((tmpvar_14.x / tmpvar_14.y)));\n  if ((abs(tmpvar_14.y) > (1e-08 * abs(tmpvar_14.x)))) {\n    if ((tmpvar_14.y < 0.0)) {\n      if ((tmpvar_14.x >= 0.0)) {\n        tmpvar_15 += 3.141593;\n      } else {\n        tmpvar_15 = (tmpvar_15 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_15 = (sign(tmpvar_14.x) * 1.570796);\n  };\n  xlat_mutablerss0.x = (tmpvar_15 / 3.1416);\n  xlat_mutablerss0.y = (0.003 / sqrt(dot (tmpvar_14, tmpvar_14)));\n  vec2 tmpvar_18;\n  tmpvar_18.x = (xlat_mutablerss0.x + (q1 / 3.0));\n  tmpvar_18.y = ((xlat_mutablerss0.y + xlat_mutabletime) + 2.0);\n  xlat_mutablerss = (tmpvar_18 * mat2(0.7, -0.7, 0.7, 0.7));\n  vec4 tmpvar_19;\n  tmpvar_19 = vec4(greaterThanEqual ((texture (sampler_pw_noise_lq, \n    (xlat_mutablerss / 32.0)\n  ) - 0.5), vec4(0.0, 0.0, 0.0, 0.0)));\n  vec2 tmpvar_20;\n  tmpvar_20 = abs((fract(\n    (xlat_mutablerss * 8.0)\n  ) - 0.5));\n  vec2 tmpvar_21;\n  tmpvar_21.x = xlat_mutablerss0.x;\n  tmpvar_21.y = (xlat_mutablerss0.y + ((xlat_mutabletime + 2.0) / 4.0));\n  xlat_mutablerss = (tmpvar_21 * mat2(0.7, -0.7, 0.7, 0.7));\n  vec2 tmpvar_22;\n  tmpvar_22 = abs((fract(\n    (xlat_mutablerss * 8.0)\n  ) - 0.5));\n  dots_13 = (vec3((clamp (\n    (0.04 / sqrt(dot (tmpvar_20, tmpvar_20)))\n  , 0.0, 1.0) * tmpvar_19.x)) + (clamp (\n    (0.02 / sqrt(dot (tmpvar_22, tmpvar_22)))\n  , 0.0, 1.0) * vec4(\n    greaterThanEqual ((texture (sampler_pw_noise_lq, (xlat_mutablerss / 32.0)) - 0.5), vec4(0.0, 0.0, 0.0, 0.0))\n  ).x));\n  dots_13 = (dots_13 * clamp ((0.2 / \n    abs(xlat_mutablerss0.y)\n  ), 0.0, 1.0));\n  float tmpvar_23;\n  tmpvar_23 = (tmpvar_2 + (dots_13 * dots_13).x);\n  vec2 tmpvar_24;\n  tmpvar_24.x = q26;\n  tmpvar_24.y = q27;\n  vec2 coord_25;\n  coord_25 = (tmpvar_24 * vec2(8.0, 1.0));\n  vec2 numerator_26;\n  numerator_26 = (uv_1 - vec2(0.1, 0.5));\n  vec2 denominator_27;\n  denominator_27 = (uv_1 - vec2(0.9, 0.5));\n  vec2 tmpvar_28;\n  tmpvar_28.x = ((numerator_26.x * denominator_27.x) + (numerator_26.y * denominator_27.y));\n  tmpvar_28.y = ((numerator_26.y * denominator_27.x) - (numerator_26.x * denominator_27.y));\n  vec2 tmpvar_29;\n  tmpvar_29 = (((tmpvar_28 / \n    ((denominator_27.x * denominator_27.x) + (denominator_27.y * denominator_27.y))\n  ) + 0.5) - vec2(0.5, 0.5));\n  float tmpvar_30;\n  tmpvar_30 = sqrt(dot (tmpvar_29, tmpvar_29));\n  float tmpvar_31;\n  float tmpvar_32;\n  tmpvar_32 = (min (abs(\n    (tmpvar_29.x / tmpvar_29.y)\n  ), 1.0) / max (abs(\n    (tmpvar_29.x / tmpvar_29.y)\n  ), 1.0));\n  float tmpvar_33;\n  tmpvar_33 = (tmpvar_32 * tmpvar_32);\n  tmpvar_33 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_33) + 0.05368138) * tmpvar_33) - 0.1173503)\n     * tmpvar_33) + 0.1938925) * tmpvar_33) - 0.3326756)\n   * tmpvar_33) + 0.9999793) * tmpvar_32);\n  tmpvar_33 = (tmpvar_33 + (float(\n    (abs((tmpvar_29.x / tmpvar_29.y)) > 1.0)\n  ) * (\n    (tmpvar_33 * -2.0)\n   + 1.570796)));\n  tmpvar_31 = (tmpvar_33 * sign((tmpvar_29.x / tmpvar_29.y)));\n  if ((abs(tmpvar_29.y) > (1e-08 * abs(tmpvar_29.x)))) {\n    if ((tmpvar_29.y < 0.0)) {\n      if ((tmpvar_29.x >= 0.0)) {\n        tmpvar_31 += 3.141593;\n      } else {\n        tmpvar_31 = (tmpvar_31 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_31 = (sign(tmpvar_29.x) * 1.570796);\n  };\n  vec2 tmpvar_34;\n  tmpvar_34.x = ((tmpvar_31 * 2.0) + coord_25.x);\n  tmpvar_34.y = ((0.3 * log(tmpvar_30)) + coord_25.y);\n  uv_1 = (0.5 + ((\n    (1.0 - abs(((\n      fract((vec2(0.07957745, 0.5) * tmpvar_34))\n     * 2.0) - 1.0)))\n   - 0.5) * 0.98));\n  uv_1 = uv_1.yx;\n  vec4 tmpvar_35;\n  tmpvar_35.w = 1.0;\n  tmpvar_35.xyz = mix (texture (sampler_main, uv_1).xyz, (1.0 - (texture (sampler_main, uv_1).xyz * 1.5)), vec3(tmpvar_23));\n  ret = tmpvar_35.xyz;\n }","warp_hlsl":"float3 mus;\nfloat2 rs,ball, uv1, uv6, uv7;\nfloat dx,dy;\nshader_body {\nuv = uv_orig;\nuv1 = (uv-.5) * aspect.xy;\n\n//GOLD\nfloat z = 18*length(uv1)+time;\nfloat2 uvn =normalize(uv1);\nrs = clamp(tan(z)*uvn,-5,5)/2;\n\n// KUGEL\nfloat mult = q29*16+1;\nuv7 = sin(uv1*mult);\nfloat2 p0 = float2(q9,q10)*sqrt(mult);\nball = uv7 - p0;\nfloat size = .035* pow(mult,.9) * (1+length(p0));\nfloat dist = length(ball)  / size;\nz = saturate(sign(1-dist)* sqrt(1-dist));\n\n//ADD\nfloat mask = (z >= .001); \nrs = q28*rs + (1-q28)*rs.yx;\nuv += (1-mask)*.03*(rs.yx) + .6*mask*z*normalize(ball);\n\n\nuv6 = mul (uv1,float2x2(_qb));\nmus = (.16/(sqrt(uv6.x)+.002))*rad;\nmus = .08*abs(mus) - z* (.2 + .3*slow_roam_cos.xyz);\n\nfloat3 gold = float3 (1,.84,.6); \n\nfloat2 uv2 = .7*uv1+.3*float2 (sin(uv1.y*16), sin(uv1.x*16));\nuv2 *= .2;\nfloat3 dots = q26*saturate(.0015/(length(uv2)));\n\nfloat3 col = gold;\n\nfloat3 blur = GetBlur1(frac(uv));\nfloat3 crisp= tex2D(sampler_main,uv);\n\nfloat3 ret1 = crisp - blur*.03 + col*(mus) + dots;\nret = ret1*.99-.018;\n}","comp_hlsl":"sampler sampler_pw_noise_lq;\n\nfloat2 rs, rss, rss0, tmp, uvo;\nfloat3 noise;\n\nfloat2 complex_div(float2 numerator, float2 denominator){\n   return float2( numerator.x*denominator.x + numerator.y*denominator.y,\n                  numerator.y*denominator.x - numerator.x*denominator.y)/\n          (denominator.x*denominator.x + denominator.y*denominator.y);\n}\n\nfloat2 uv_polar(float2 domain, float2 center){\n   float2 c = domain - center;\n   float rad_hq = length(c);\n   float ang_hq = atan2(c.x,c.y);\n   return float2(ang_hq, rad_hq);\n}\n\nfloat2 uv_polar_logarithmic(float2 domain, float2 center, int fins, float log_factor, float2 coord){\n   float2 polar = uv_polar(domain, center);\n   return float2(polar.x*fins+coord.x, log_factor*log(polar.y) + coord.y);\n}\n\nfloat2 uv_moebius_transformation(float2 domain, float2 zeroPoint, float2 infinityPoint,float zoom){\n   return complex_div((domain - zeroPoint)*zoom, domain - infinityPoint)+0.5;\n}\n\nfloat2 uv_bipolar_logarithmic(float2 domain, float2 northPole, float2 southPole, int fins, float log_factor, float2 coord){\n   float2 help_uv = uv_moebius_transformation(domain, northPole, southPole, 1);\n   return uv_polar_logarithmic(help_uv,0.5,fins,log_factor,coord)*float2(M_INV_PI_2,1);\n}\n\nfloat2 uv_scale(float2 domain, float2 center, float2 scale){\n   return center + (domain-center)*scale;\n}\nfloat2 uv_lens_half_sphere(float2 domain, float2 position, float radius, float refractivity){\n   float2 polar = uv_polar(domain, position);\n   float cone = saturate(1-polar.y/radius);\n   float halfsphere = sqrt(1-pow(cone-1,2));\n   float w = atan2(1-cone,halfsphere);\n   float refrac_w = w-asin(sin(w)/refractivity);\n   float refrac_d = 1-cone - sin(refrac_w)*halfsphere/cos(refrac_w);\n   float2 refrac_uv =position+float2(sin(polar.x),cos(polar.x))*refrac_d*radius;\n   bool mask =(length(domain-position)<radius);\n   return !mask*domain + \n           mask*refrac_uv;\n}\n\n/* code from Martins hardcore mix - Danke ;) */\nfloat hardcore_stars(float2 domain, float2 center, float o){\n\n   float2 uv1 = domain-center;\n   rss0.x = atan2(uv1.x, uv1.y)/3.1416;\n   rss0.y = .003/(length (uv1));\n   rss = float2 (rss0.x+q1/3,rss0.y+time+o);\n   rss = mul(rss,float2x2(.7,.7,-.7,.7));\n   float noise = (tex2D(sampler_pw_noise_lq,rss/32)-.5 >= 0);\n   tmp = abs(frac(rss*8)-.5);\n   float3 dots = saturate(.04/length(tmp)) *noise;\n   rss = float2 (rss0.x,rss0.y+(time+o)/4);\n   rss = mul(rss,float2x2(.7,.7,-.7,.7));\n   noise = (tex2D(sampler_pw_noise_lq,rss/32)-.5 >= 0);\n   tmp = abs(frac(rss*8)-.5);\n   dots += saturate(.02/length(tmp)) * noise;\n   dots *= saturate(.2/abs(rss0.y));\n   return dots*dots;\nreturn 0;\n}\n\n\n\n\n\n\nshader_body\n{\nuv = 0.5 + (uv-0.5)*aspect.wz;\ntime *= 0.6;\n\nfloat2 pole1 =float2(0.1,0.5);\nfloat2 pole2 =float2(0.9,0.5);\n\nfloat stars = hardcore_stars(uv,pole1,0) + hardcore_stars(uv,pole2,2);\n\nuv = uv_bipolar_logarithmic(uv, pole1, pole2, 2, 0.3, float2(q26,q27)*float2(8,1));\nuv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5)*0.98; // Eo.S. mirror code with cutted borders\nuv = uv.yx;\nret = lerp(GetPixel(uv),1-GetPixel(uv)*1.5,stars);\n}\n\n"}