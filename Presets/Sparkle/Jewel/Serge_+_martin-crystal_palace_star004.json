{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.95,"echo_zoom":1.007,"echo_orient":3,"wave_mode":1,"additivewave":1,"wave_thick":1,"wave_brighten":0,"darken":1,"wave_a":100,"wave_scale":1.311,"wave_smoothing":0.5,"modwavealphastart":0.5,"modwavealphaend":1,"warpanimspeed":1.335,"warpscale":1.328,"zoomexp":1.02651,"fshader":1,"zoom":1.37451,"rot":0.02,"cx":0.17,"cy":0.83,"warp":1.77946,"sx":0.9901,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"ob_size":0.005,"ob_r":0.36,"ob_g":0.36,"ob_b":0.36,"ob_a":0.58,"ib_r":0.45,"ib_g":0.45,"ib_b":0.45,"ib_a":0.53,"mv_x":0,"mv_y":0,"mv_l":1,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":100,"thickoutline":1,"textured":1,"rad":0.54279,"tex_ang":4.39823,"tex_zoom":0.90528,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0},"init_eqs_str":"a.shpt=0;a.sdx_r=0;a.sdy_r=0;a.sg1=0;a.sg2=0;a.sg3=0;","frame_eqs_str":"a.shpt=2*above(a.bass_att,a.shpt)+(1-above(a.bass_att,a.shpt))*(.96*(a.shpt-1.3)+1.3);a.sdx_r=.015*equal(a.shpt,2)*Math.sin(5*a.time)+(1-equal(a.shpt,2))*a.sdx_r;a.sdy_r=.015*equal(a.shpt,2)*Math.sin(6*a.time)+(1-equal(a.shpt,2))*a.sdy_r;a.sg1=Math.abs(Math.sin(a.time));a.sg2=12*a.sdx_r*above(a.sg1,.5)+12*a.sdy_r*below(a.sg1,.5);a.sg3=.00001<Math.abs(equal(a.shpt,2))?a.sg2:a.sg3;a.ang=a.ang+6*a.time+2;a.rad+=a.sg3;","init_eqs_eel":"","frame_eqs_eel":"shpt = above(bass_att,shpt)*2+(1-above(bass_att,shpt))*((shpt-1.3)*0.96+1.3);\nsdx_r = equal(shpt,2)*0.015*sin(5*time)+(1-equal(shpt,2))*sdx_r;\nsdy_r = equal(shpt,2)*0.015*sin(6*time)+(1-equal(shpt,2))*sdy_r;\nsg1 = abs(sin(time));\nsg2 = 12*sdx_r*above(sg1,0.5) + 12*sdy_r*below(sg1,0.5);\nsg3 = if(equal(shpt,2),sg2,sg3);\n\n\nang = ang + 6*time+2;\nrad = rad + sg3;"},{"baseVals":{"enabled":1,"sides":100,"thickoutline":1,"rad":0.20068,"tex_ang":4.39823,"tex_zoom":1.48886,"g2":0,"border_a":0},"init_eqs_str":"a.shpt=0;a.sdx_r=0;a.sdy_r=0;a.sg1=0;a.sg2=0;a.sg3=0;","frame_eqs_str":"a.shpt=2*above(a.bass_att,a.shpt)+(1-above(a.bass_att,a.shpt))*(.96*(a.shpt-1.3)+1.3);a.sdx_r=.015*equal(a.shpt,2)*Math.sin(5*a.time)+(1-equal(a.shpt,2))*a.sdx_r;a.sdy_r=.015*equal(a.shpt,2)*Math.sin(6*a.time)+(1-equal(a.shpt,2))*a.sdy_r;a.sg1=Math.abs(Math.sin(a.time));a.sg2=12*a.sdx_r*above(a.sg1,.5)+12*a.sdy_r*below(a.sg1,.5);a.sg3=.00001<Math.abs(equal(a.shpt,2))?a.sg2:a.sg3;a.ang=a.ang+6*a.time+2;a.x+=.32*Math.sin(3*a.time);a.y+=.32*Math.cos(3*a.time);","init_eqs_eel":"","frame_eqs_eel":"shpt = above(bass_att,shpt)*2+(1-above(bass_att,shpt))*((shpt-1.3)*0.96+1.3);\nsdx_r = equal(shpt,2)*0.015*sin(5*time)+(1-equal(shpt,2))*sdx_r;\nsdy_r = equal(shpt,2)*0.015*sin(6*time)+(1-equal(shpt,2))*sdy_r;\nsg1 = abs(sin(time));\nsg2 = 12*sdx_r*above(sg1,0.5) + 12*sdy_r*below(sg1,0.5);\nsg3 = if(equal(shpt,2),sg2,sg3);\n\n\nang = ang + 6*time+2;\nx = x + 0.32*sin(3*time);\ny = y + 0.32*cos(3*time);"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"usedots":1,"scaling":2.15546,"smoothing":0},"init_eqs_str":"a.q1=0;a.q2=0;a.q3=0;","frame_eqs_str":"a.r=a.q1;a.g=a.q2;a.b=a.q3;","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"r = q1;\ng = q2;\nb = q3;","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.bass_residual=0;a.old_treb_flop=0;a.bass_flop=0;a.q1=0;a.q5=0;a.treb_flop=0;a.bass_thresh=0;a.old_bass_flop=0;a.treb_thresh=0;a.pulse=0;a.bass_changed=0;a.mid_thresh=0;a.q4=0;a.mid_changed=0;a.entropy=0;a.old_mid_flop=0;a.mid_residual=0;a.treb_residual=0;a.chaos=0;a.mid_flop=0;a.q2=0;a.treb_changed=0;a.q3=0;a.radix=0;","frame_eqs_str":"a.warp=0;a.old_bass_flop=a.bass_flop;a.old_treb_flop=a.treb_flop;a.old_mid_flop=a.mid_flop;a.chaos=.9+.1*Math.sin(a.pulse);a.entropy=.00001<Math.abs(bnot(a.entropy))?2:.00001<Math.abs(equal(a.pulse,-20))?1+rand(3):a.entropy;a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*((a.bass_thresh-1.3)*a.chaos+1.3);a.bass_flop=Math.abs(a.bass_flop-equal(a.bass_thresh,2));a.treb_thresh=2*above(a.treb_att,a.treb_thresh)+(1-above(a.treb_att,a.treb_thresh))*\n((a.treb_thresh-1.3)*a.chaos+1.3);a.treb_flop=Math.abs(a.treb_flop-equal(a.treb_thresh,2));a.mid_thresh=2*above(a.mid_att,a.mid_thresh)+(1-above(a.mid_att,a.mid_thresh))*((a.mid_thresh-1.3)*a.chaos+1.3);a.mid_flop=Math.abs(a.mid_flop-equal(a.mid_thresh,2));a.bass_changed=bnot(equal(a.old_bass_flop,a.bass_flop));a.mid_changed=bnot(equal(a.old_mid_flop,a.mid_flop));a.treb_changed=bnot(equal(a.old_treb_flop,a.treb_flop));a.bass_residual=a.bass_changed*Math.sin(a.pulse*a.bass_thresh*.1*a.entropy)+bnot(a.bass_changed)*\na.bass_residual;a.treb_residual=a.treb_changed*Math.sin(a.pulse*a.treb_thresh*.1*a.entropy)+bnot(a.treb_changed)*a.treb_residual;a.mid_residual=a.mid_changed*Math.sin(a.pulse*a.mid_thresh*.1*a.entropy)+bnot(a.mid_changed)*a.mid_residual;a.pulse=.00001<Math.abs(above(Math.abs(a.pulse),20))?-20:a.pulse+.2*bor(bor(a.bass_changed*bnot(a.treb_changed),a.treb_changed*bnot(a.bass_changed))*bnot(a.mid_changed),a.mid_changed)+(a.mid+a.bass+a.treb)*a.entropy*.025;a.q1=a.mid_residual;a.q2=a.bass_residual;a.q3=\na.treb_residual;a.q4=Math.sin(a.pulse);a.q5=Math.sin(div(a.pulse,2));a.wave_r+=.5*a.bass_residual;a.wave_r=a.wave_g+.5*a.mid_residual;a.wave_r=a.wave_b+.5*a.treb_residual;a.wave_mystery=a.mid_residual;a.ob_r=.00001<Math.abs(a.bass_flop)?a.treb_flop:a.wave_r;a.ob_b=.00001<Math.abs(a.treb_flop)?a.mid_flop:a.wave_b;a.ob_g=.00001<Math.abs(a.mid_flop)?a.bass_flop:a.wave_g;a.ob_a=.03+.02*a.wave_r;a.ob_size=.05+.04*a.treb_residual;a.ib_r=.00001<Math.abs(a.bass_flop)?a.ob_b:a.ob_g;a.ib_b=.00001<Math.abs(a.treb_flop)?\na.ob_g:a.ob_r;a.ib_g=.00001<Math.abs(a.mid_flop)?a.ob_r:a.ob_b;a.ib_a=.03+.02*a.wave_g;a.ib_size=.05+.04*a.bass_residual;a.ib_r+=.2*Math.sin(.5413*a.time);a.ib_g+=.2*Math.sin(.6459*a.time);a.ib_b+=.2*Math.sin(.4354*a.time);a.rot+=.04*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*a.time));a.zoom=Math.max(.98,Math.min(.15+.8*a.bass_att,1.75));","pixel_eqs_str":"a.radix=.00001<Math.abs(above(a.q3,0))?Math.min(a.x,a.y):Math.max(a.x,a.y);a.radix=.00001<Math.abs(above(a.q2,0))?Math.min(a.radix,a.rad):Math.max(a.radix,a.rad);a.rot=.00001<Math.abs(above(a.q4,0))?.2*a.rad*a.q5:0;a.zoom=.00001<Math.abs(above(a.q2,0))?a.zoom:.00001<Math.abs(above(a.q3,0))?1+.05*a.q1:1+.07*Math.cos(10*a.radix*a.q1);","init_eqs_eel":"","frame_eqs_eel":"warp=0;\nold_bass_flop=bass_flop;\nold_treb_flop=treb_flop;\nold_mid_flop=mid_flop;\nchaos=.9+.1*sin(pulse);\nentropy=if(bnot(entropy),2,if(equal(pulse,-20),1+rand(3),entropy));\nbass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.3)*chaos+1.3);\nbass_flop=abs(bass_flop-equal(bass_thresh,2));\ntreb_thresh=above(treb_att,treb_thresh)*2 + (1-above(treb_att,treb_thresh))*((treb_thresh-1.3)*chaos+1.3);\ntreb_flop=abs(treb_flop-equal(treb_thresh,2));\nmid_thresh=above(mid_att,mid_thresh)*2 + (1-above(mid_att,mid_thresh))*((mid_thresh-1.3)*chaos+1.3);\nmid_flop=abs(mid_flop-equal(mid_thresh,2));\nbass_changed=bnot(equal(old_bass_flop,bass_flop));\nmid_changed=bnot(equal(old_mid_flop,mid_flop));\ntreb_changed=bnot(equal(old_treb_flop,treb_flop));\nbass_residual = bass_changed*sin(pulse*bass_thresh*.1*entropy) + bnot(bass_changed)*bass_residual;\ntreb_residual = treb_changed*sin(pulse*treb_thresh*.1*entropy) + bnot(treb_changed)*treb_residual;\nmid_residual = mid_changed*sin(pulse*mid_thresh*.1*entropy) + bnot(mid_changed)*mid_residual;\npulse=if(above(abs(pulse),20),-20,pulse+.2*bor(bor(bass_changed*bnot(treb_changed),treb_changed*bnot(bass_changed))*bnot(mid_changed),mid_changed)+(mid+bass+treb)*entropy*.025);\nq1=mid_residual;\nq2=bass_residual;\nq3=treb_residual;\nq4=sin(pulse);\nq5=sin(pulse/2);\nwave_r=wave_r+.5*bass_residual;\nwave_r=wave_g+.5*mid_residual;\nwave_r=wave_b+.5*treb_residual;\nwave_mystery=mid_residual;\nob_r=if(bass_flop,treb_flop,wave_r);\nob_b=if(treb_flop,mid_flop,wave_b);\nob_g=if(mid_flop,bass_flop,wave_g);\nob_a=.03+.02*wave_r;\nob_size=.05+.04*treb_residual;\nib_r=if(bass_flop,ob_b,ob_g);\nib_b=if(treb_flop,ob_g,ob_r);\nib_g=if(mid_flop,ob_r,ob_b);\nib_a=.03+.02*wave_g;\nib_size=.05+.04*bass_residual;\nib_r = ib_r + 0.2*sin(time*0.5413);\nib_g = ib_g + 0.2*sin(time*0.6459);\nib_b = ib_b + 0.2*sin(time*0.4354);\nrot = rot + 0.040*( 0.60*sin(0.381*time) + 0.40*sin(0.579*time) );\nzoom=max(0.98, min(0.15+0.8*bass_att, 1.75 ));","pixel_eqs_eel":"radix=if(above(q3,0),min(x,y),max(x,y));\nradix=if(above(q2,0),min(radix,rad),max(radix,rad));\nrot=if(above(q4,0),rad*.2*q5,0);\nzoom=if(above(q2,0),zoom,if(above(q3,0),1+q1*.05,1+.07*cos(radix*10*q1)));","warp":"vec2 xlat_mutablers;\nvec2 xlat_mutableuv1;\nvec2 xlat_mutableuv6;\n shader_body { \n  vec2 uv_1;\n  vec3 xlat_varmod_2;\n  vec2 uv2_3;\n  float ang2_4;\n  float dist_5;\n  float z_6;\n  vec3 ret_7;\n  uv_1 = uv_orig;\n  xlat_mutableuv1 = ((uv_orig - 0.2) * aspect.xy);\n  float tmpvar_8;\n  tmpvar_8 = ((16.0 * sqrt(\n    dot (xlat_mutableuv1, xlat_mutableuv1)\n  )) + time);\n  z_6 = tmpvar_8;\n  xlat_mutablers = (clamp ((\n    (sin(tmpvar_8) / cos(tmpvar_8))\n   * \n    normalize(xlat_mutableuv1)\n  ), vec2(-5.0, -5.0), vec2(5.0, 5.0)) / 2.0);\n  vec2 tmpvar_9;\n  tmpvar_9 = sin((xlat_mutableuv1 * q31));\n  dist_5 = (sqrt(dot (tmpvar_9, tmpvar_9)) * ((\n    abs(xlat_mutableuv1.x)\n   + \n    abs(xlat_mutableuv1.y)\n  ) + q32));\n  float tmpvar_10;\n  float tmpvar_11;\n  tmpvar_11 = (min (abs(\n    (tmpvar_9.y / tmpvar_9.x)\n  ), 1.0) / max (abs(\n    (tmpvar_9.y / tmpvar_9.x)\n  ), 1.0));\n  float tmpvar_12;\n  tmpvar_12 = (tmpvar_11 * tmpvar_11);\n  tmpvar_12 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_12) + 0.05368138) * tmpvar_12) - 0.1173503)\n     * tmpvar_12) + 0.1938925) * tmpvar_12) - 0.3326756)\n   * tmpvar_12) + 0.9999793) * tmpvar_11);\n  tmpvar_12 = (tmpvar_12 + (float(\n    (abs((tmpvar_9.y / tmpvar_9.x)) > 1.0)\n  ) * (\n    (tmpvar_12 * -2.0)\n   + 1.570796)));\n  tmpvar_10 = (tmpvar_12 * sign((tmpvar_9.y / tmpvar_9.x)));\n  if ((abs(tmpvar_9.x) > (1e-08 * abs(tmpvar_9.y)))) {\n    if ((tmpvar_9.x < 0.0)) {\n      if ((tmpvar_9.y >= 0.0)) {\n        tmpvar_10 += 3.141593;\n      } else {\n        tmpvar_10 = (tmpvar_10 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_10 = (sign(tmpvar_9.y) * 1.570796);\n  };\n  ang2_4 = (0.1 * floor((16.0 * tmpvar_10)));\n  vec2 tmpvar_13;\n  tmpvar_13.x = cos(ang2_4);\n  tmpvar_13.y = sin(ang2_4);\n  z_6 = (1.0 - cos((2.0 * dist_5)));\n  float tmpvar_14;\n  tmpvar_14 = clamp (z_6, 0.0, 1.0);\n  z_6 = tmpvar_14;\n  float tmpvar_15;\n  tmpvar_15 = float((tmpvar_14 >= 0.5));\n  xlat_mutablers = ((q28 * xlat_mutablers) + ((1.0 - q28) * xlat_mutablers.yx));\n  uv_1 = (uv_orig + ((\n    ((1.0 - tmpvar_15) * 0.03)\n   * xlat_mutablers.yx) + (\n    ((0.5 * tmpvar_15) * tmpvar_14)\n   * \n    normalize(((0.5 * tmpvar_9) + tmpvar_13))\n  )));\n  mat2 tmpvar_16;\n  tmpvar_16[uint(0)] = _qb.xy;\n  tmpvar_16[1u] = _qb.zw;\n  xlat_mutableuv6 = (xlat_mutableuv1 * tmpvar_16);\n  vec2 tmpvar_17;\n  tmpvar_17.x = q5;\n  tmpvar_17.y = q6;\n  uv2_3 = (((0.7 * xlat_mutableuv1) + (0.3 * \n    sin(((xlat_mutableuv1 * 16.0) + (4.0 * tmpvar_17)))\n  )) * 0.2);\n  vec4 tmpvar_18;\n  tmpvar_18 = texture (sampler_main, uv_1);\n  vec3 tmpvar_19;\n  tmpvar_19 = ((tmpvar_18.xyz + vec3((\n    abs((0.01 / (sqrt(xlat_mutableuv6.x) + 0.001)))\n   * \n    (rad + 0.2)\n  ))) + vec3((q26 * clamp (\n    (0.001 / sqrt(dot (uv2_3, uv2_3)))\n  , 0.0, 1.0))));\n  xlat_varmod_2 = (1.0 - ((texture (sampler_noise_lq, \n    ((0.5 * uv_1) + (time * 0.01))\n  ) - 0.2).xyz * (tmpvar_18.xyz - \n    (0.5 * ((texture (sampler_blur1, fract(uv_1)).xyz * scale1) + bias1))\n  )));\n  ret_7 = (((\n    (1.0 - tmpvar_15)\n   * tmpvar_19) * xlat_varmod_2) + ((tmpvar_15 * tmpvar_19) * xlat_varmod_2));\n  ret_7 = ((ret_7 * 0.75) - 0.03);\n  vec4 tmpvar_20;\n  tmpvar_20.w = 1.0;\n  tmpvar_20.xyz = ret_7;\n  ret = tmpvar_20.xyz;\n }","comp":"vec3 xlat_mutableblur;\nvec3 xlat_mutableret1;\n shader_body { \n  vec2 uv_1;\n  vec2 uv2_2;\n  vec3 ret_3;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  float tmpvar_4;\n  tmpvar_4 = (0.02 * q27);\n  xlat_mutableblur = ((texture (sampler_blur1, (\n    (uv_1 + 0.4)\n   + tmpvar_4)).xyz * scale1) + bias1);\n  xlat_mutableret1 = max (vec3(0.0, 0.0, 0.0), (texture (sampler_main, (\n    (uv_1 + 0.4)\n   + tmpvar_4)).xyz + (xlat_mutableblur * 2.0)));\n  uv2_2.x = ((uv_1.x * 0.3096228) - (uv_1.y * 0.9508595));\n  uv2_2.y = ((uv_1.x * 0.9508595) + (uv_1.y * 0.3096228));\n  xlat_mutableblur = ((texture (sampler_blur1, (\n    (uv2_2 + 0.4)\n   + tmpvar_4)).xyz * scale1) + bias1);\n  xlat_mutableret1 = max (xlat_mutableret1, (texture (sampler_main, (\n    (uv2_2 + 0.4)\n   + tmpvar_4)).xyz + (xlat_mutableblur * 2.0)));\n  uv2_2.x = ((uv_1.x * -0.8082675) - (uv_1.y * 0.5888155));\n  uv2_2.y = ((uv_1.x * 0.5888155) + (uv_1.y * -0.8082675));\n  xlat_mutableblur = ((texture (sampler_blur1, (\n    (uv2_2 + 0.4)\n   + tmpvar_4)).xyz * scale1) + bias1);\n  xlat_mutableret1 = max (xlat_mutableret1, (texture (sampler_main, (\n    (uv2_2 + 0.4)\n   + tmpvar_4)).xyz + (xlat_mutableblur * 2.0)));\n  uv2_2.x = ((uv_1.x * -0.8101388) - (uv_1.y * -0.5862381));\n  uv2_2.y = ((uv_1.x * -0.5862381) + (uv_1.y * -0.8101388));\n  xlat_mutableblur = ((texture (sampler_blur1, (\n    (uv2_2 + 0.4)\n   + tmpvar_4)).xyz * scale1) + bias1);\n  xlat_mutableret1 = max (xlat_mutableret1, (texture (sampler_main, (\n    (uv2_2 + 0.4)\n   + tmpvar_4)).xyz + (xlat_mutableblur * 2.0)));\n  uv2_2.x = ((uv_1.x * 0.3065926) - (uv_1.y * -0.9518408));\n  uv2_2.y = ((uv_1.x * -0.9518408) + (uv_1.y * 0.3065926));\n  xlat_mutableblur = ((texture (sampler_blur1, (\n    (uv2_2 + 0.4)\n   + tmpvar_4)).xyz * scale1) + bias1);\n  xlat_mutableret1 = max (xlat_mutableret1, (texture (sampler_main, (\n    (uv2_2 + 0.4)\n   + tmpvar_4)).xyz + (xlat_mutableblur * 2.0)));\n  uv2_2.x = ((uv_1.x * 0.9999949) - (uv_1.y * -0.003185092));\n  uv2_2.y = ((uv_1.x * -0.003185092) + (uv_1.y * 0.9999949));\n  xlat_mutableblur = ((texture (sampler_blur1, (\n    (uv2_2 + 0.4)\n   + tmpvar_4)).xyz * scale1) + bias1);\n  xlat_mutableret1 = max (xlat_mutableret1, (texture (sampler_main, (\n    (uv2_2 + 0.4)\n   + tmpvar_4)).xyz + (xlat_mutableblur * 2.0)));\n  ret_3 = ((xlat_mutableret1 - 0.0125) * 0.7);\n  vec3 tmpvar_5;\n  tmpvar_5 = (1.0 - ((ret_3 * \n    (1.0 - ret_3)\n  ) * 4.0));\n  vec3 tmpvar_6;\n  tmpvar_6.xy = (tmpvar_5.xy * vec2(0.5, 0.5));\n  tmpvar_6.z = tmpvar_5.z;\n  ret_3 = (tmpvar_6 * 0.5);\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ret_3;\n  ret = tmpvar_7.xyz;\n }","warp_hlsl":"float3 mus;\nfloat2 rs, uv1, uv6, uv7, uv8;\nfloat dx,dy;\nshader_body {\nuv = uv_orig;\nuv1 = (uv-.2) * aspect.xy;\n\n//BACKGROUND\nfloat z = 16*length(uv1)+time;\nfloat2 uvn =normalize(uv1);\nrs = clamp(tan(z)*uvn,-5,5)/2;\n\n//CRYSTAL\nfloat mult = q31;\nuv7 = sin(uv1*mult);\nuv8 = uv7;\nfloat dist = length(uv8);\ndist *= (abs(uv1.x) + abs(uv1.y))+ q32;\n\nfloat ang2 = atan2 (uv8.y,uv8.x);\nang2 =  .1*floor (16* ang2);\nfloat2 dir = .5*uv8+float2 (cos(ang2), sin(ang2));\n\n\nz = (1-cos(2*dist));\nz = saturate (z);\n\n//ADD\nfloat mask = (z >= .5); //momentan beliebig\nrs = q28*rs + (1-q28)*rs.yx;\nuv += (1-mask)*.03*(rs.yx) + .5*mask*z*normalize(dir);\n\n//ZENTRALSTRAHL\nuv6 = mul (uv1,float2x2(_qb));\nmus = abs(0.01/(sqrt(uv6.x)+.001))*(rad+.2);\n\n//DOTS\nfloat2 uv2 = .7*uv1+.3*sin(uv1*16+4*float2 (q5,q6));\nuv2 *= .2;\nfloat3 dots = q26*saturate(.001/(length(uv2)));\nfloat3 blur = GetBlur1(frac(uv));\nfloat3 crisp= GetPixel(uv);\nfloat3 diff = (crisp) - .5*blur;\nfloat3 ret1 = crisp + mus + dots;\n\nfloat3 mod = tex2D (sampler_noise_lq,.5*uv+time*.01)-.2;\nmod = 1 - mod*diff;\n\nret = (1-mask)*ret1*mod + mask*ret1*mod;\nret = ret *.75- .03;\n\n}","comp_hlsl":"float3 ret1, neu, blur;\n\nshader_body\n{\nfloat2 uv2;\nfloat ang2, c, s;\nuv -= 0.5;\nuv *= aspect.xy;    \n\nfloat2 tmp = uv;\nret1 = 0;\nint anz = 5;\nint n = 0;\nwhile (n <= anz) {\n    ang2 = 6.28*n/anz;\n    c = cos(ang2);\n    s = sin(ang2);\n    uv2.x =  uv.x*c - uv.y*s;\n    uv2.y =  uv.x*s + uv.y*c;\n    neu = GetPixel (uv2 + 0.4 + .02*q27 );\n    blur= GetBlur1 (uv2 + 0.4 + .02*q27 );\n    ret1 = max(ret1, neu+blur*2);\nn++;\n}\n\n\n// I think this bit's from ORB\nret = (ret1-0.0125)*0.7;\n    float3 retish = 1 - ret*(1-ret)*4; //solarize\n    ret = float3(retish[0]*0.5,retish[1]*0.5,retish[2]);\n    ret *= 0.5;\n\n\n}"}