{"version":2,"baseVals":{"rating":5,"echo_zoom":2.948,"echo_alpha":0.5,"echo_orient":1,"wave_mode":5,"wave_dots":1,"wave_brighten":0,"wrap":0,"wave_a":1.396,"wave_scale":0.969,"wave_smoothing":0.666,"modwavealphastart":1.38,"modwavealphaend":1.02,"warpanimspeed":2,"zoomexp":0.0567,"fshader":0.7,"zoom":0.5393,"sx":0.8195,"sy":0.81954,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"ob_r":0.5,"ob_g":0.01,"ob_b":0.01,"ob_a":0.95,"ib_r":0.01,"ib_g":0.01,"ib_b":0.5,"ib_a":0.95,"mv_x":9,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"","frame_eqs_str":"a.warp=0;a.wave_r=.5*a.bass;a.wave_g=.5*a.treb;a.wave_b=.5*a.mid;a.decay=.99;a.rot+=.04*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*a.time));a.zoom=Math.max(.98,Math.min(.15+.8*a.bass_att,1.75));","pixel_eqs_str":"a.zoom=1.2+.1*a.rad;a.zoomexp=1-Math.sin(a.rad*a.time*100);","init_eqs_eel":"","frame_eqs_eel":"warp = 0;\nwave_r = bass*.5;\nwave_g = treb*.5;\nwave_b = mid*.5;\ndecay = .99;\nrot = rot + 0.040*( 0.60*sin(0.381*time) + 0.40*sin(0.579*time) );\nzoom=max(0.98, min(0.15+0.8*bass_att, 1.75 ));","pixel_eqs_eel":"zoom = 1.2+rad*.1;\nzoomexp =1 - 1*sin(rad*time*100);","warp":" shader_body { \n  vec2 uv_1;\n  vec2 uv6_2;\n  uv_1 = (uv + ((0.004 * \n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  ).xy * vec2(0.0, 1.0)));\n  uv6_2 = (0.4 * sin((\n    (((uv - 0.5) * aspect.xy) * 18.0)\n   * rand_frame.xy)));\n  vec3 tmpvar_3;\n  tmpvar_3.x = (treb * 0.5);\n  tmpvar_3.y = (bass * 0.5);\n  tmpvar_3.z = (mid * 0.5);\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = (((\n    (texture (sampler_main, uv_1).xyz - (((texture (sampler_blur2, \n      fract(uv_1)\n    ).xyz * scale2) + bias2) * 0.03))\n   + \n    (0.15 * (vec3((0.051 / sqrt(\n      dot (uv6_2, uv6_2)\n    ))) * tmpvar_3))\n  ) * 0.99) - 0.02);\n  ret = tmpvar_4.xyz;\n }","comp":"uniform sampler2D sampler_seaweed;\n shader_body { \n  float tmpvar_1;\n  tmpvar_1 = abs((texture (sampler_main, uv).z - texture (sampler_pw_main, (\n    ((uv - 0.5) * 0.08)\n   + 0.5)).z));\n  vec2 tmpvar_2;\n  tmpvar_2.x = slow_roam_cos.x;\n  tmpvar_2.y = slow_roam_sin.y;\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ((pow (tmpvar_1, 0.5) * (1.0 - texture (sampler_seaweed, \n    (tmpvar_2 + (vec2(0.1, 0.0) * tmpvar_1))\n  ))).xyz * 2.0);\n  ret = tmpvar_3.xyz;\n }","warp_hlsl":"sampler sampler_worms;\nfloat3 color, mus;\nfloat dx,dy;\nshader_body {\nfloat2 uv1 = (uv-.5) * aspect.xy;\n\n\nfloat2 uv6 = uv1;\nfloat z = q29*2*length(uv1)+rand_frame * 64;\nfloat2 d = normalize(uv1);\nfloat2 rs = clamp(tan(z)*d,-8,8);\nuv += .004*GetBlur1(uv)*float2 (0,1);//rs/20;\n\n\nuv6 = .4*sin(uv1*18*rand_frame);\nmus = .051/(length(uv6));\nmus *= float3 (treb*.5,bass*.5,mid*.5);\n\nfloat3 blur = GetBlur2(frac(uv));\n\nfloat3 crisp= tex2D(sampler_main,uv);\n\nfloat3 ret1 = crisp - blur*.03 + .15*mus;\nfloat2 uv2 = (uv_orig-.5)-float3(bass*.1,treb*.1+0.1*q25,mid*.1);\n\nq25 = 1;\nret = q25*(ret1*.99-.02) + (1-q25)* GetPixel(uv_orig);\n\n}","comp_hlsl":"sampler sampler_seaweed;\n\nshader_body\n{\n    float lum = tex2D(sampler_main, uv).z;\n\n      // note the use of the _pw suffix here; the 'p' stands\n      // for 'point sampling' - it turns off\n      // bilinear interpolation ('f'), giving is \"blocky\" pixels.\n      // (the 'w' is for wrap - alternative is 'c' for clamp.)\n      lum = abs(lum - tex2D(sampler_pw_main, (uv-0.5)*0.08 + 0.5).z);\n\n    ret = lum + 0.13*cos(lum*29+2.8);\n\n    float2 texc = float2(slow_roam_cos.x, slow_roam_sin.y);\n    ret = pow(lum,0.5) * (1-tex2D(sampler_seaweed, texc + float2(0.1,0)*lum));\n\n    ret *= 2; // a little bit of overbright\n}\n\n"}