{"version":2,"baseVals":{"rating":5,"gammaadj":1.7,"decay":0.96,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":6.301,"warpscale":53.522,"zoomexp":0.9216,"zoom":0.99989,"rot":0.28,"warp":0.62644,"sx":0.9896,"sy":0.9901,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_a":0.29,"ib_size":0.33,"ib_a":0.1,"mv_a":0},"shapes":[{"baseVals":{"textured":1,"rad":5.3898,"tex_ang":1.19381,"tex_zoom":0.18923,"g":0.97,"b":1,"a":0.94,"r2":1,"b2":1,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"textured":1,"rad":3.99882,"tex_zoom":0.25005,"g":1,"b":1,"a":0.6,"r2":1,"b2":1,"a2":0.6,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":18,"textured":1,"num_inst":10,"x":0.463,"rad":1.60089,"tex_zoom":0.67634,"g":1,"b":1,"r2":0.7,"g2":0.8,"b2":0.8,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":16,"num_inst":353,"x":0.503,"rad":0.0376,"tex_zoom":1.11234,"g":1,"b":1,"g2":0,"border_a":0.06},"init_eqs_str":"a.my_z=0;a.d=0;a.y3=0;a.z2=0;a.y1=0;a.w=0;a.w2=0;a.x1=0;a.zoom=0;a.p=0;a.q1=0;a.z3=0;a.w3=0;a.my_x=0;a.x3=0;a.my_y=0;a.q10=0;a.p2=0;a.w1=0;a.x2=0;a.l=0;a.p1=0;a.y2=0;a.q2=0;a.z1=0;a.q3=0;a.sample=0;","frame_eqs_str":"a.sample=div(a.instance,a.num_inst);a.rad=.05+.04*Math.sin(a.sample);a.q10=250*a.sample;a.my_x=-.22*Math.cos(a.q10)-1.28*Math.sin(a.q10)-.44*Math.cos(3*a.q10)-.78*Math.sin(3*a.q10);a.my_y=-.1*Math.cos(2*a.q10)-.27*Math.sin(2*a.q10)+.38*Math.cos(4*a.q10)+.46*Math.sin(4*a.q10);a.my_z=.7*Math.cos(3*a.q10)-.4*Math.sin(3*a.q10);a.d=.2;a.zoom=1;a.w3=a.q1;a.w2=a.q2;a.w1=a.q3;a.x1=Math.cos(a.w1)*a.my_x+Math.sin(a.w1)*a.my_y;a.y1=-Math.sin(a.w1)*a.my_x+Math.cos(a.w1)*a.my_y;a.z1=a.my_z;\na.x2=Math.cos(a.w2)*a.x1+Math.sin(a.w2)*a.z1;a.z2=-Math.sin(a.w2)*a.x1+Math.cos(a.w2)*a.z1;a.y2=a.y1;a.y3=Math.cos(a.w3)*a.y2+Math.sin(a.w3)*a.z2;a.z3=-Math.sin(a.w3)*a.y2+Math.cos(a.w3)*a.z2;a.x3=a.x2;a.l=sqrt(a.x3*a.x3+a.y3*a.y3);a.w=Math.atan2(a.x3,a.y3);a.p=Math.tan(Math.asin(1)+Math.atan2(a.d+a.z3,a.l));a.d=sqrt(a.x3*a.x3+a.y3*a.y3+(a.z3+a.d)*(a.z3+a.d));a.my_x=a.zoom*Math.sin(a.w)*a.p;a.my_y=a.zoom*Math.cos(a.w)*a.p;a.p1=.2*Math.sin(50*a.sample);a.p2=.2*Math.sin(80*a.sample);a.x=.5+a.my_x*a.p1;\na.y=.5+a.my_y*a.p2;a.r=.4*Math.sin(80*a.sample);a.b=.8*Math.sin(66*a.sample);a.g=.6*Math.sin(120*a.sample);","init_eqs_eel":"","frame_eqs_eel":"sample=instance/num_inst;\nrad=.05+.04*sin(sample);\n\n/////  Knot\n\nq10=250*sample;\nmy_x = -.22*cos(q10)-1.28*sin(q10)-.44*cos(3*q10)-.78*sin(3*q10);\nmy_y= -.1*cos(2*q10)-.27*sin(2*q10)+.38*cos(4*q10)+.46*sin(4*q10);\nmy_z=.7*cos(3*q10)-.4*sin(3*q10);\n\n\n/////// rotations... by flexi\n\nd = .2; \nzoom = 1;\n\nw3 = q1;\nw2 = q2;\nw1 = q3;\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\np1 = .2*sin(sample*50);\np2 = .2*sin(sample*80);\n\nx = .5+my_x*p1;\ny = .5+my_y*p2;\n\nr = .4*sin(sample*80);\nb = .8*sin(sample*66);\ng = .6*sin(sample*120);"}],"waves":[{"baseVals":{"spectrum":1,"additive":1,"smoothing":0,"r":0.4,"g":0.4,"b":0.4,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"smoothing":0,"r":0,"g":0,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"r":0,"g":0,"b":0,"a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.q1=0;a.pre_zoom=0;a.q5=0;a.pulse=0;a.bass_changed=0;a.q4=0;a.mid_changed=0;a.studiomusic_factor=0;a.state=0;a.q2=0;a.treb_changed=0;a.q3=0;","frame_eqs_str":"a.warp=0;a.bass_changed=Math.abs(a.bass_changed-1*above(a.bass_att,1.2));a.treb_changed=Math.abs(a.treb_changed-1*above(a.treb_att,1.2));a.mid_changed=Math.abs(a.mid_changed-1*above(a.mid_att,1.2));a.state=1+2*a.bass_changed+a.treb_changed;a.wave_r=.00001<Math.abs(equal(Math.abs(a.state-3),1))?.2*Math.sin(.6*a.time):.00001<Math.abs(above(a.state,2))?.6+.2*Math.sin(a.time):.6+.08*Math.sin(a.time);a.wave_g=.00001<Math.abs(equal(Math.abs(a.state-3),1))?0:.00001<Math.abs(equal(a.state,\n3))?0:.19;a.wave_b=.00001<Math.abs(equal(Math.abs(a.state-3),1))?.8+.2*Math.sin(.27*a.time):0;a.ob_r=a.wave_g;a.ob_g=a.wave_b;a.ob_b=a.wave_r;a.ob_a=.3*(4-a.state);a.ob_size=.005*(4-a.state);a.pulse=.00001<Math.abs(above(Math.abs(a.pulse),9.4))?-9.4:a.pulse+.1*bor(bor(a.bass_changed*bnot(a.treb_changed),a.treb_changed*bnot(a.bass_changed))*bnot(a.mid_changed),a.mid_changed)+div(a.mid+a.bass+a.treb,3);a.q2=Math.sin(a.time*a.state*.1);a.q3=Math.cos(a.time*a.state*.1);a.q1=(1+1*a.bass_changed*above(a.q3,\n0))*(1+2*a.treb_changed*below(a.q3,0))*(1+4*a.mid_changed*above(a.q3,0))*(1+6*a.mid_changed*below(a.q3,0))*(1+10*a.treb_changed*above(a.q3,0))*(1+12*a.bass_changed*below(a.q3,0));a.q4=a.time*a.q1*.3*a.q1;a.q5=Math.sin(a.pulse);a.rot=a.treb_changed*Math.sin(.01*mod(a.pulse,a.q1))*-.2;a.zoom=a.zoom+.1*a.bass_changed-.1*a.treb_changed;","pixel_eqs_str":"a.studiomusic_factor=Math.sin(a.ang*a.q1+.2*a.time*a.q1)*Math.sin(10*a.rad*Math.sin(a.time)-10*Math.sin(.5*a.time))*Math.sin(.27*a.time*a.q1);a.pre_zoom=a.zoom-.1*Math.acos(2*a.y-1)*Math.sin(1.2*a.time*a.q5)-.7*Math.cos(2*a.x-1)*Math.sin(1.1*a.time*a.q5);a.zoom=.00001<Math.abs(above(a.q3,0))?a.pre_zoom-.2*a.studiomusic_factor:a.zoom-.05*Math.sin(.02*a.rad*a.q1);a.rot=(.00001<Math.abs(above(Math.abs(a.zoom-1),.03))?-.4+.2*a.q1:a.rot)*(.00001<Math.abs(above(a.q2,0))?-1:1);a.rot=\n.00001<Math.abs(below(a.bass,1))?a.rot-.3*Math.sin(.88*a.time)*a.rad:a.rot;a.sx=.00001<Math.abs(above(a.treb,.7))?a.sx+(a.zoom-1)*a.q2:a.sx;a.sy=.00001<Math.abs(above(a.treb,.7))?a.sy+(a.zoom-1)*a.q3:a.sy;","init_eqs_eel":"","frame_eqs_eel":"warp=0;\nbass_changed=abs(bass_changed-above(bass_att,1.2)*1);\ntreb_changed=abs(treb_changed-above(treb_att,1.2)*1);\nmid_changed=abs(mid_changed-above(mid_att,1.2)*1);\nstate=1+bass_changed*2+treb_changed;\nwave_r=if(equal(abs(state-3),1),0+.2*sin(time*.6),if(above(state,2),.6+.2*sin(time),.6+.08*sin(time)));\nwave_g=if(equal(abs(state-3),1),0,if(equal(state,3),0,.19));\nwave_b=if(equal(abs(state-3),1),.8+.2*sin(time*.27),0);\nob_r=wave_g;\nob_g=wave_b;\nob_b=wave_r;\nob_a=.3*(4-state);\nob_size=.005*(4-state);\npulse=if(above(abs(pulse),9.4),-9.4,pulse+.1*bor(bor(bass_changed*bnot(treb_changed),treb_changed*bnot(bass_changed))*bnot(mid_changed),mid_changed)+(mid+bass+treb)/3);\nq2=sin(time*state*.1);\nq3=cos(time*state*.1);\nq1=(1+1*bass_changed*above(q3,0))*(1+2*treb_changed*below(q3,0))*(1+4*mid_changed*above(q3,0))*(1+6*mid_changed*below(q3,0))*(1+10*treb_changed*above(q3,0))*(1+12*bass_changed*below(q3,0));\nq4=time*q1*.3*q1;\nq5=sin(pulse);\nrot=treb_changed*sin(pulse%q1*.01)*-.2;\nzoom=zoom+.1*bass_changed-.1*treb_changed;","pixel_eqs_eel":"studiomusic_factor=sin(ang*q1+time*.2*q1)*sin(rad*10*sin(time)-10*sin(time*.5))*sin(time*.27*q1);\npre_zoom=zoom-.1*acos(y*2-1)*sin(time*1.2*q5)-.7*cos(x*2-1)*sin(time*1.1*q5);\nzoom=if(above(q3,0),pre_zoom-studiomusic_factor*.2,zoom-.05*sin(rad*.02*q1));\nrot=if(above(abs(zoom-1),.03),-.4+.2*q1,rot)*if(above(q2,0),-1,1);\nrot = if(below(bass,1),rot-sin(time*0.88)*.3*rad,rot);\nsx=if(above(treb,.7),sx+(zoom-1)*q2,sx);\nsy=if(above(treb,.7),sy+(zoom-1)*q3,sy);","warp":"vec3 xlat_mutablenoise;\nvec2 xlat_mutablers;\nvec2 xlat_mutablers0;\nvec2 xlat_mutableuv1;\n shader_body { \n  vec3 copy_1;\n  vec2 tmpvar_2;\n  tmpvar_2.x = 0.5;\n  tmpvar_2.y = q5;\n  xlat_mutableuv1 = (uv - tmpvar_2);\n  float tmpvar_3;\n  tmpvar_3 = (1.0/(xlat_mutableuv1.y));\n  xlat_mutablers0.x = (xlat_mutableuv1.x * tmpvar_3);\n  xlat_mutablers0.y = tmpvar_3;\n  xlat_mutablers.x = xlat_mutablers0.x;\n  xlat_mutablers.y = (tmpvar_3 + (time * 0.3));\n  xlat_mutablenoise = (vec3(dot (texture (sampler_pw_noise_lq, (xlat_mutablers / 63.0)), vec4(0.32, 0.49, 0.29, 0.0))) * (dot (texture (sampler_pw_noise_lq, \n    (xlat_mutablers / 12.0)\n  ), vec4(0.32, 0.49, 0.29, 0.0)) + 0.5));\n  xlat_mutablenoise = (xlat_mutablenoise * (clamp (\n    ((10.0 * xlat_mutablenoise) - 8.0)\n  , 0.0, 1.0) * clamp (\n    (2.0 / tmpvar_3)\n  , 0.0, 1.0)));\n  vec2 tmpvar_4;\n  tmpvar_4.x = uv.x;\n  tmpvar_4.y = (uv.y - (0.024 / tmpvar_3));\n  vec2 tmpvar_5;\n  tmpvar_5.x = uv.x;\n  tmpvar_5.y = (uv.y - (0.012 / tmpvar_3));\n  copy_1 = (texture (sampler_main, tmpvar_4).xyz + texture (sampler_main, tmpvar_5).xyz);\n  vec2 tmpvar_6;\n  tmpvar_6.x = uv.x;\n  tmpvar_6.y = (uv.y - (0.006 / tmpvar_3));\n  copy_1 = (copy_1 + texture (sampler_main, tmpvar_6).xyz);\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ((xlat_mutablenoise + (\n    (((copy_1 / 3.0) * (1.0 + slow_roam_cos).xyz) / 2.0)\n   * 0.99)) - 0.005);\n  ret = tmpvar_7.xyz;\n }","comp":" shader_body { \n  vec2 uv_rr_1;\n  vec2 uv_r_2;\n  vec3 ret_3;\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_main, uv);\n  ret_3 = ((tmpvar_4.xyz * tmpvar_4.xyz) * tmpvar_4.xyz);\n  vec2 tmpvar_5;\n  tmpvar_5.x = q13;\n  tmpvar_5.y = q14;\n  vec2 tmpvar_6;\n  tmpvar_6 = ((uv - tmpvar_5) * aspect.xy);\n  vec2 tmpvar_7;\n  tmpvar_7.x = ((q12 * tmpvar_6.x) - (q11 * tmpvar_6.y));\n  tmpvar_7.y = ((q11 * tmpvar_6.x) + (q12 * tmpvar_6.y));\n  uv_r_2 = (q15 * tmpvar_7);\n  uv_r_2 = (tmpvar_5 + (uv_r_2 * aspect.zw));\n  uv_r_2 = (1.0 - abs((\n    (fract((uv_r_2 * 0.5)) * 2.0)\n   - 1.0)));\n  vec2 tmpvar_8;\n  tmpvar_8 = (uv_r_2 - tmpvar_5);\n  vec2 tmpvar_9;\n  tmpvar_9.x = ((q18 * tmpvar_8.x) - (q17 * tmpvar_8.y));\n  tmpvar_9.y = ((q17 * tmpvar_8.x) + (q18 * tmpvar_8.y));\n  uv_rr_1 = (q16 * tmpvar_9);\n  uv_rr_1 = (tmpvar_5 + uv_rr_1);\n  vec2 tmpvar_10;\n  tmpvar_10 = (uv_rr_1 - 0.5);\n  float tmpvar_11;\n  float tmpvar_12;\n  tmpvar_12 = (min (abs(\n    (tmpvar_10.x / tmpvar_10.y)\n  ), 1.0) / max (abs(\n    (tmpvar_10.x / tmpvar_10.y)\n  ), 1.0));\n  float tmpvar_13;\n  tmpvar_13 = (tmpvar_12 * tmpvar_12);\n  tmpvar_13 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_13) + 0.05368138) * tmpvar_13) - 0.1173503)\n     * tmpvar_13) + 0.1938925) * tmpvar_13) - 0.3326756)\n   * tmpvar_13) + 0.9999793) * tmpvar_12);\n  tmpvar_13 = (tmpvar_13 + (float(\n    (abs((tmpvar_10.x / tmpvar_10.y)) > 1.0)\n  ) * (\n    (tmpvar_13 * -2.0)\n   + 1.570796)));\n  tmpvar_11 = (tmpvar_13 * sign((tmpvar_10.x / tmpvar_10.y)));\n  if ((abs(tmpvar_10.y) > (1e-08 * abs(tmpvar_10.x)))) {\n    if ((tmpvar_10.y < 0.0)) {\n      if ((tmpvar_10.x >= 0.0)) {\n        tmpvar_11 += 3.141593;\n      } else {\n        tmpvar_11 = (tmpvar_11 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_11 = (sign(tmpvar_10.x) * 1.570796);\n  };\n  vec2 tmpvar_14;\n  tmpvar_14.x = ((tmpvar_11 * q21) * 1.5);\n  tmpvar_14.y = (((0.666 * \n    log(sqrt(dot (tmpvar_10, tmpvar_10)))\n  ) - (tmpvar_11 * q21)) + q22);\n  ret_3 = texture (sampler_main, clamp ((ret_3.xy + (0.5 + \n    ((0.5 - abs((\n      (fract((tmpvar_14 * 0.5)) * 2.0)\n     - 1.0))) * vec2(0.96, 1.02))\n  )), 0.0, 1.0)).xyz;\n  vec4 tmpvar_15;\n  tmpvar_15.w = 1.0;\n  tmpvar_15.xyz = ret_3;\n  ret = tmpvar_15.xyz;\n }","warp_hlsl":"sampler sampler_pw_noise_lq;\nfloat3 color, mus, neu, ret1, noise, noise2;\nfloat2 uv1, rs0, rs, uv2, uv3, dz, hor, ver;\nfloat dx,dy,speed;\nshader_body {\nspeed = .3;\nuv1 = uv-float2(0.5,q5);\nfloat z = 1/(uv1.y);\nrs0.x = (uv1.x)*z;\nrs0.y = z;\nrs.x = rs0.x *1;\nrs.y = rs0.y + time*speed;\n\n\n//Kacheln\nnoise = lum(tex2D(sampler_pw_noise_lq,rs/63 ));\nnoise *= lum(tex2D(sampler_pw_noise_lq,rs/12 ))+.5;\nnoise *= saturate(10*noise - 8) * saturate(2/z);\nnoise2 = saturate(8* (lum(tex2D(sampler_pw_noise_lq,uv))-.5));\n\nspeed *= 2;\nfloat3 copy = + GetPixel(float2(uv.x,uv.y-.04*speed/z));\ncopy +=GetPixel(float2(uv.x,uv.y-.02*speed/z));\ncopy +=GetPixel(float2(uv.x,uv.y-.01*speed/z));\n\nret = noise*1 + copy/3*(1+slow_roam_cos)/2*.99-.005;\n\n\n}","comp_hlsl":"shader_body\n{\nfloat3 sample = tex2D(sampler_main, uv);\nret = sample*sample*sample;\n//spiral collide comp\n// ***** Flexis rotating caleidoscope code *****\nfloat2 cntr = float2(q13,q14); float sin = q11; float cos = q12; float scale = q15;\nfloat2 uv_r = (uv-cntr)*aspect.xy;\n       uv_r = scale*float2( cos*uv_r.x - sin*uv_r.y, sin*uv_r.x + cos*uv_r.y); // rotation\n       uv_r = cntr + uv_r*aspect.zw;\n       uv_r = 1.0 - abs( frac( uv_r * 0.5 ) * 2.0 - 1.0 ); // mirror\nsin = q17; cos = q18; scale = q16;\nfloat2 uv_rr = (uv_r-cntr);\n       uv_rr = scale*float2( cos*uv_rr.x - sin*uv_rr.y, sin*uv_rr.x + cos*uv_rr.y); // counter-rotation\n       uv_rr = cntr + (uv_rr);\nfloat t = q22;\nfloat2 c = ((uv_rr-0.5));\nfloat1 ang_hq = atan2(c.x,c.y);\nfloat2 spiral = float2(ang_hq*q21*1.5,0.666*log(length(c))-ang_hq*q21+t);\nspiral = 0.5 + (0.5 - abs( frac( spiral * 0.5 ) * 2.0 - 1.0 ))*float2(0.96,1.02); // mirror\nret = GetPixel(saturate(ret+spiral));\n}"}