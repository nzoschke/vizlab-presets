{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"wave_mode":7,"additivewave":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.772,"zoomexp":4.401,"zoom":1.031,"rot":0.003,"warp":0,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"mv_x":64,"mv_y":48,"mv_l":0,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":3,"textured":1,"rad":1.46815,"tex_zoom":0.63904,"g":1,"b":1,"a":0.5,"r2":1,"b2":1,"a2":1,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.ang=.1*a.time;a.sides=Math.floor(Math.abs(7*Math.sin(.5*a.time)));","init_eqs_eel":"","frame_eqs_eel":"ang=time*.1;\n\nsides=int(abs(sin(time*.5)*7));"},{"baseVals":{"enabled":1,"sides":3,"additive":1,"thickoutline":1,"rad":0.02743,"a":0.05,"r2":1,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.ang=.1*a.time;a.r=.7+.3*Math.sin(a.time);a.g=.7+.3*Math.cos(a.time);a.b=.7+.3*Math.sin(a.time+.12);a.rad+=a.treb_att*a.bass_att*.5;a.x=.5+.5*Math.sin(a.time);","init_eqs_eel":"","frame_eqs_eel":"ang=time*.1;\n\nr=.7+(sin(time)*.3);\ng=.7+(cos(time)*.3);\nb=.7+(sin(time+.12)*.3);\n\nrad=rad+(treb_att*bass_att*.5);\nx=.5+(sin(time)*.5);"},{"baseVals":{"enabled":1,"sides":5,"additive":1,"rad":0.02508,"a":0.05,"r2":1,"b2":1,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.ang=.25*a.time;a.g=.7+.3*Math.sin(a.time);a.b=.7+.3*Math.cos(a.time);a.r=.7+.3*Math.sin(a.time+.12);a.r2=.7+.3*Math.sin(a.time);a.g2=.7+.3*Math.cos(a.time);a.b2=.7+.3*Math.sin(a.time+.12);a.rad+=a.treb_att*a.bass_att*.5;a.y=.5+.25*Math.sin(a.time);","init_eqs_eel":"","frame_eqs_eel":"ang=time*.25;\n\ng=.7+(sin(time)*.3);\nb=.7+(cos(time)*.3);\nr=.7+(sin(time+.12)*.3);\n\nr2=.7+(sin(time)*.3);\ng2=.7+(cos(time)*.3);\nb2=.7+(sin(time+.12)*.3);\n\nrad=rad+(treb_att*bass_att*.5);\ny=.5+(sin(time)*.25);"},{"baseVals":{"additive":1,"textured":1,"rad":2.66717,"tex_zoom":0.60804,"a":0.1,"a2":0.01,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"usedots":1,"additive":1},"init_eqs_str":"a.branch=0;a.wx=0;a.sc=0;a.wy=0;a.d=0;a.wainc=0;a.wa=0;","frame_eqs_str":"","point_eqs_str":"a.branch=Math.floor(rand(2));a.wx=.00001<Math.abs(equal(a.sc,0))?.5:a.wx;a.wy=.00001<Math.abs(equal(a.sc,0))?0:a.wy;a.wx=.00001<Math.abs(equal(a.sc,1))?.5:a.wx;a.wy=.00001<Math.abs(equal(a.sc,1))?.1:a.wy;a.d=.00001<Math.abs(below(a.sc,2))?.3:.7*a.d;a.wainc=.00001<Math.abs(equal(a.branch,1))?.2+Math.sin(a.time):-.2;a.wa=.00001<Math.abs(below(a.sc,2))?1.57079635:a.wa+a.wainc;a.wx=.00001<Math.abs(above(a.sc,2))?a.wx+Math.cos(a.wa)*a.d:a.wx;a.wy=.00001<Math.abs(above(a.sc,2))?a.wy+\nMath.sin(a.wa)*a.d:a.wy;a.sc=.00001<Math.abs(equal(a.sc,11))?0:a.sc+1;a.a=.00001<Math.abs(below(a.sc,2))?0:.1;a.x=a.wx;a.y=a.wy;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"branch=int(rand(2));\n\n//base\nwx=if(equal(sc,0),.5,wx);\nwy=if(equal(sc,0),0,wy);\n\nwx=if(equal(sc,1),.5,wx);\nwy=if(equal(sc,1),.1,wy);\n\n//calculate previous branch length\nd=if(below(sc,2),.3,.7*d);\n\n//angle\nwainc=if(equal(branch,1),.2+sin(time),-.2);\n\nwa=if(below(sc,2),3.1415927*.5,wa+wainc);\n\n//branches\nwx=if(above(sc,2),wx+cos(wa)*d,wx);\nwy=if(above(sc,2),wy+sin(wa)*d,wy);\n\n//sample count\nsc=if(equal(sc,11),0,sc+1);\n\na=if(below(sc,2),0,.1);\n\nx=wx;\ny=wy;"},{"baseVals":{"enabled":1,"usedots":1,"additive":1},"init_eqs_str":"a.branch=0;a.wx=0;a.sc=0;a.wy=0;a.d=0;a.wainc=0;a.wa=0;","frame_eqs_str":"","point_eqs_str":"a.branch=Math.floor(rand(2));a.wx=.00001<Math.abs(equal(a.sc,0))?.5:a.wx;a.wy=.00001<Math.abs(equal(a.sc,0))?1:a.wy;a.wx=.00001<Math.abs(equal(a.sc,1))?.5:a.wx;a.wy=.00001<Math.abs(equal(a.sc,1))?.9:a.wy;a.d=.00001<Math.abs(below(a.sc,2))?.3:.7*a.d;a.wainc=.00001<Math.abs(equal(a.branch,1))?.2+Math.sin(a.time):-.2;a.wa=.00001<Math.abs(below(a.sc,2))?4.71238905:a.wa+a.wainc;a.wx=.00001<Math.abs(above(a.sc,2))?a.wx+Math.cos(a.wa)*a.d:a.wx;a.wy=.00001<Math.abs(above(a.sc,2))?a.wy+\nMath.sin(a.wa)*a.d:a.wy;a.sc=.00001<Math.abs(equal(a.sc,11))?0:a.sc+1;a.a=.00001<Math.abs(below(a.sc,2))?0:.1;a.x=a.wx;a.y=a.wy;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"branch=int(rand(2));\n\n//base\nwx=if(equal(sc,0),.5,wx);\nwy=if(equal(sc,0),1,wy);\n\nwx=if(equal(sc,1),.5,wx);\nwy=if(equal(sc,1),.9,wy);\n\n//calculate previous branch length\nd=if(below(sc,2),.3,.7*d);\n\n//angle\nwainc=if(equal(branch,1),.2+sin(time),-.2);\n\nwa=if(below(sc,2),3.1415927*1.5,wa+wainc);\n\n//branches\nwx=if(above(sc,2),wx+cos(wa)*d,wx);\nwy=if(above(sc,2),wy+sin(wa)*d,wy);\n\n//sample count\nsc=if(equal(sc,11),0,sc+1);\n\na=if(below(sc,2),0,.1);\n\nx=wx;\ny=wy;"},{"baseVals":{"enabled":1,"usedots":1,"additive":1},"init_eqs_str":"a.branch=0;a.wx=0;a.sc=0;a.wy=0;a.d=0;a.wainc=0;a.wa=0;","frame_eqs_str":"","point_eqs_str":"a.branch=Math.floor(rand(2));a.wx=.00001<Math.abs(equal(a.sc,0))?0:a.wx;a.wy=.00001<Math.abs(equal(a.sc,0))?.5:a.wy;a.wx=.00001<Math.abs(equal(a.sc,1))?.1:a.wx;a.wy=.00001<Math.abs(equal(a.sc,1))?.5:a.wy;a.d=.00001<Math.abs(below(a.sc,2))?.3:.7*a.d;a.wainc=.00001<Math.abs(equal(a.branch,1))?.25+Math.cos(a.time):-.25;a.wa=.00001<Math.abs(below(a.sc,2))?6.2831854:a.wa+a.wainc;a.wx=.00001<Math.abs(above(a.sc,2))?a.wx+Math.cos(a.wa)*a.d:a.wx;a.wy=.00001<Math.abs(above(a.sc,2))?\na.wy+Math.sin(a.wa)*a.d:a.wy;a.sc=.00001<Math.abs(equal(a.sc,11))?0:a.sc+1;a.a=.00001<Math.abs(below(a.sc,2))?0:.1;a.x=a.wx;a.y=a.wy;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"branch=int(rand(2));\n\n//base\nwx=if(equal(sc,0),0,wx);\nwy=if(equal(sc,0),.5,wy);\n\nwx=if(equal(sc,1),.1,wx);\nwy=if(equal(sc,1),.5,wy);\n\n//calculate previous branch length\nd=if(below(sc,2),.3,.7*d);\n\n//angle\nwainc=if(equal(branch,1),.25+cos(time),-.25);\n\nwa=if(below(sc,2),3.1415927*2,wa+wainc);\n\n//branches\nwx=if(above(sc,2),wx+cos(wa)*d,wx);\nwy=if(above(sc,2),wy+sin(wa)*d,wy);\n\n//sample count\nsc=if(equal(sc,11),0,sc+1);\n\na=if(below(sc,2),0,.1);\n\nx=wx;\ny=wy;"},{"baseVals":{"enabled":1,"usedots":1,"additive":1},"init_eqs_str":"a.branch=0;a.wx=0;a.sc=0;a.wy=0;a.d=0;a.wainc=0;a.wa=0;","frame_eqs_str":"","point_eqs_str":"a.branch=Math.floor(rand(2));a.wx=.00001<Math.abs(equal(a.sc,0))?1:a.wx;a.wy=.00001<Math.abs(equal(a.sc,0))?.5:a.wy;a.wx=.00001<Math.abs(equal(a.sc,1))?.9:a.wx;a.wy=.00001<Math.abs(equal(a.sc,1))?.5:a.wy;a.d=.00001<Math.abs(below(a.sc,2))?.3:.7*a.d;a.wainc=.00001<Math.abs(equal(a.branch,1))?.25+Math.cos(a.time):-.25;a.wa=.00001<Math.abs(below(a.sc,2))?3.1415927:a.wa+a.wainc;a.wx=.00001<Math.abs(above(a.sc,2))?a.wx+Math.cos(a.wa)*a.d:a.wx;a.wy=.00001<Math.abs(above(a.sc,2))?\na.wy+Math.sin(a.wa)*a.d:a.wy;a.sc=.00001<Math.abs(equal(a.sc,11))?0:a.sc+1;a.a=.00001<Math.abs(below(a.sc,2))?0:.1;a.x=a.wx;a.y=a.wy;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"branch=int(rand(2));\n\n//base\nwx=if(equal(sc,0),1,wx);\nwy=if(equal(sc,0),.5,wy);\n\nwx=if(equal(sc,1),.9,wx);\nwy=if(equal(sc,1),.5,wy);\n\n//calculate previous branch length\nd=if(below(sc,2),.3,.7*d);\n\n//angle\nwainc=if(equal(branch,1),.25+cos(time),-.25);\n\nwa=if(below(sc,2),3.1415927*1,wa+wainc);\n\n//branches\nwx=if(above(sc,2),wx+cos(wa)*d,wx);\nwy=if(above(sc,2),wy+sin(wa)*d,wy);\n\n//sample count\nsc=if(equal(sc,11),0,sc+1);\n\na=if(below(sc,2),0,.1);\n\nx=wx;\ny=wy;"}],"init_eqs_str":"","frame_eqs_str":"a.wave_r=Math.min(1,Math.max(0,1.3*(a.bass_att-1)));a.wave_g=.7*a.wave_r;a.wave_b=.1*a.wave_r;a.rot+=.01*(.6*Math.sin(.038*a.time)+.4*Math.sin(.054*a.time));a.dx+=.002*(.6*Math.sin(.434*a.time)+.4*Math.sin(.277*a.time));a.dy+=.002*(.6*Math.sin(.384*a.time)+.4*Math.sin(.477*a.time));","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"wave_r = min(1,max(0,(bass_att-1)*1.3));\nwave_g = wave_r*0.7;\nwave_b = wave_r*0.1;\nrot = rot + 0.010*( 0.60*sin(0.038*time) + 0.40*sin(0.054*time) );\ndx = dx + 0.002*( 0.60*sin(0.434*time) + 0.40*sin(0.277*time) );\ndy = dy + 0.002*( 0.60*sin(0.384*time) + 0.40*sin(0.477*time) );","pixel_eqs_eel":"","warp":"mat2 ofs;\nvec2 xlat_mutableuv2;\nfloat xlat_mutablezv;\n shader_body { \n  mat2 tmpvar_1;\n  tmpvar_1[uint(0)].x = texsize.z;\n  tmpvar_1[uint(0)].y = 0.0;\n  tmpvar_1[1u].x = 0.0;\n  tmpvar_1[1u].y = texsize.w;\n  ofs = (tmpvar_1 * 4.0);\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3.x = ((uv.x - 0.5) + q19);\n  tmpvar_3.y = (uv.y - 0.5);\n  vec2 v_4;\n  v_4.x = ofs[0].x;\n  v_4.y = ofs[1].x;\n  vec2 v_5;\n  v_5.x = ofs[0].x;\n  v_5.y = ofs[1].x;\n  vec2 v_6;\n  v_6.x = ofs[0].y;\n  v_6.y = ofs[1].y;\n  vec2 v_7;\n  v_7.x = ofs[0].y;\n  v_7.y = ofs[1].y;\n  vec2 tmpvar_8;\n  tmpvar_8.x = (texture (sampler_main, (uv + v_4)) - texture (sampler_main, (uv - v_5))).z;\n  tmpvar_8.y = (texture (sampler_main, (uv + v_6)) - texture (sampler_main, (uv - v_7))).z;\n  xlat_mutablezv = (time * 0.08);\n  vec2 tmpvar_9;\n  tmpvar_9.x = (0.02 * time);\n  tmpvar_9.y = (-0.05 * time);\n  xlat_mutableuv2 = ((3.0 * tmpvar_3) + tmpvar_9);\n  vec3 tmpvar_10;\n  tmpvar_10.xy = xlat_mutableuv2;\n  tmpvar_10.z = xlat_mutablezv;\n  vec3 tmpvar_11;\n  tmpvar_11.xy = (xlat_mutableuv2 * vec2(2.0, 2.0));\n  tmpvar_11.z = (xlat_mutablezv * 2.0);\n  vec3 tmpvar_12;\n  tmpvar_12.xy = (xlat_mutableuv2 * vec2(4.0, 4.0));\n  tmpvar_12.z = (xlat_mutablezv * 3.0);\n  vec3 tmpvar_13;\n  tmpvar_13.xy = (xlat_mutableuv2 * vec2(8.0, 8.0));\n  tmpvar_13.z = (xlat_mutablezv * 7.0);\n  xlat_mutableuv2 = (tmpvar_3 + ((\n    (((texture (sampler_noisevol_hq, tmpvar_10).z + (texture (sampler_noisevol_hq, tmpvar_11).z / 2.0)) + (texture (sampler_noisevol_hq, tmpvar_12).z / 4.0)) + (texture (sampler_noisevol_hq, tmpvar_13).z / 8.0))\n   - 1.0) * 0.1));\n  ret_2 = (((\n    (((0.2 + (\n      (((1.0 + bass_att) * 0.01) / sqrt(dot (xlat_mutableuv2, xlat_mutableuv2)))\n     * \n      (1.0 + normalize(slow_roam_cos))\n    .xyz)) + ((rand_preset.z - 0.5) * xlat_mutableuv2.y)) * 0.1)\n   / 2.0) + (texture (sampler_main, \n    (uv - (0.02 * tmpvar_8))\n  ).xyz * 0.9)) - 0.01);\n  vec4 tmpvar_14;\n  tmpvar_14 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv.xyy) * (texsize.xyy * texsize_noisevol_hq.zww)) + (vec3(0.0, 0.0, 0.4) * time)));\n  float tmpvar_15;\n  tmpvar_15 = ((ret_2.x + ret_2.y) + ret_2.z);\n  if (((tmpvar_15 > 0.1) && (tmpvar_15 <= 0.21))) {\n    ret_2 = (ret_2 + (tmpvar_14 * 0.5).xyz);\n  };\n  vec4 tmpvar_16;\n  tmpvar_16.w = 1.0;\n  tmpvar_16.xyz = ret_2;\n  ret = tmpvar_16.xyz;\n }","comp":" shader_body { \n  float ang2_1;\n  vec2 uv2_2;\n  ang2_1 = ((ang * 0.1591549) + (time * 0.025));\n  float tmpvar_3;\n  tmpvar_3 = (3.0 + floor((rand_preset.z * 5.95)));\n  ang2_1 = (fract((ang2_1 * tmpvar_3)) / tmpvar_3);\n  ang2_1 = (abs((ang2_1 - \n    (0.5 / tmpvar_3)\n  )) * 6.283185);\n  vec2 tmpvar_4;\n  tmpvar_4.x = cos(ang2_1);\n  tmpvar_4.y = sin(ang2_1);\n  uv2_2 = (0.5 + ((\n    (0.4 * (rad * sqrt(dot (texsize.xy, texsize.xy))))\n   * tmpvar_4) * texsize.zw));\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = (((texture (sampler_main, uv2_2).y * vec3(0.6, 0.2, 1.5)) + (texture (sampler_fw_main, uv2_2).x * vec3(1.0, 0.66, 0.0))) - (texture (sampler_main, uv2_2).z * vec3(-0.6, 1.0, 2.0)));\n  ret = tmpvar_5.xyz;\n }","warp_hlsl":"sampler sampler_pw_noise_lq;\nfloat3 crisp,dx,dy,ret1;\nfloat2 zz, uv1,uv2;\nfloat  n1,n2,n3,n4,zv,z, noise, k1, wave;\nstatic float2 sunpos = float2 (0*sin(time/3),-.0);\nstatic float2x2 ofs = float2x2 (texsize.z,0,0,texsize.w)*4;\nstatic float3 suncol = 1+normalize(slow_roam_cos);\nfloat3 cloud (float2 uv_in) {\nreturn (.2+(1+bass_att)*.01/length(uv_in-sunpos)*suncol+(rand_preset.z-.5)*uv_in.y);} \n\nshader_body {\n\nfloat2 uv1 = float2(uv.x-0.5+q19,uv.y-0.5);//*aspect.xy;\n\ndx = tex2D(sampler_main,uv+ofs[0]) - tex2D(sampler_main,uv-ofs[0]);\ndy = tex2D(sampler_main,uv+ofs[1]) - tex2D(sampler_main,uv-ofs[1]);\nzz = float2(dx.b,dy.b);\n\n//clouds\nzv = time*.06 ;\nzv = time*.08+ .0*GetPixel(uv); //##\nuv2 = 3*uv1+ float2(0.02*time,-.05*time);\n\nn1 = tex3D(sampler_noisevol_hq,float3 (uv2.x,uv2.y,zv)).b;\nn2 = tex3D(sampler_noisevol_hq,float3 (uv2.x*2,uv2.y*2,zv*2)).b;\nn3 = tex3D(sampler_noisevol_hq,float3 (uv2.x*4,uv2.y*4,zv*3)).b;\nn4 = tex3D(sampler_noisevol_hq,float3 (uv2.x*8,uv2.y*8,zv*7)).b;\nnoise = n1 + n2/2 + n3/4 + n4/8 -1;\nnoise = pow(noise,1);\nuv2 = uv1+noise*.1;\n\n//*******************************\nret1 = cloud(uv2);\nfloat k1 = .1;\nret = ret1*k1/2 + GetPixel(uv-.02*zz)*(1-k1)-.01;\n\nfloat4 noise2 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*0.4 \n                     );\nfloat br = ret.x+ret.y+ret.z;\nif(br>.1 && br<=.21)ret += (noise2)*.5; \n}","comp_hlsl":"shader_body\n{\n    float rad_lq = rad * length(texsize.xy)*0.5;\n    float ang_lq = ang;\n    float2 uv_temp1 = (uv - 0.5) * texsize.xy;\n    float rad_hq = length(uv_temp1);\n    float ang_hq = atan2(-uv_temp1.y, uv_temp1.x);\n\n    float2 uv2 = (uv - 0.5);\n    float rad2 = rad_lq*0.8;\n    float ang2 = ang_lq * M_INV_PI_2;\n\n        // ROTATION OVER TIME\n        #if 1\n          ang2 += time*0.025;   //rotate over time\n        #endif\n\n        // FIN TYPE\n        float fins = 3 + floor(rand_preset.z*5.95);\n        #if 1     // SHARP FINS\n          ang2 = frac(ang2*fins)/fins;\n              // ENABLE THIS TO MAKE THE FINS ALTERNATE: (seamless!)\n              ang2 = abs(ang2 - 0.5/fins);\n        #else     // COSINE FINS - a bit slow\n          ang2 = cos(ang2*M_PI_2*fins) * 0.023;\n        #endif\n\n        // RADIAL KALEIDOSCOPING?\n        #if 0\n          rad2 *= g_fTexSize.z;\n            // choose one:\n            //rad2 = lerp(rad2, frac(rad2*3)/3.0, 0.5);\n            rad2 = cos(rad2*5);\n            //rad2 = sqrt(rad2)*0.5;\n            //rad2 += abs(frac(rad2*7)-0.5)/7.0 * 1.15;  // stepifier\n            //rad2 += cos(rad2*61)*0.02;\n          rad2 *= g_fTexSize.x;\n        #endif\n\n    ang2 *= M_PI_2;\n    uv2 = 0.5 + rad2*float2(cos(ang2),sin(ang2))*texsize.zw;\n\n    ret = tex2D(sampler_main,uv2).y*float3(0.6,0.2,1.5) + tex2D(sampler_fw_main,uv2).x*float3(1,0.66,0) - tex2D(sampler_main,uv2).z*float3(-0.6,1,2);\n}"}