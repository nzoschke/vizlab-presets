{"version":2,"baseVals":{"rating":5,"decay":0.5,"echo_zoom":0.999609,"echo_alpha":0.5,"echo_orient":3,"wave_mode":7,"solarize":1,"wave_a":0.001,"warpanimspeed":2.006759,"warpscale":3.7492,"zoomexp":1.074096,"zoom":1.0004,"warp":3.544901,"wave_r":0,"wave_g":0.4,"wave_b":0,"mv_x":6.4,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"textured":1,"rad":2.667177,"tex_zoom":0.374092,"g":1,"b":1,"a":0.8,"r2":1,"b2":1,"a2":0.4},"init_eqs_str":"a.basstime=0;a.ob_r=0;a.ob_g=0;a.ob_b=0;","frame_eqs_str":"a.ang=a.basstime;a.tex_ang=Math.sin(a.basstime);a.ob_r=.5*Math.sin(1.12*a.basstime);a.ob_g=.5*Math.sin(1.5*a.basstime);a.ob_b=.5*Math.sin(2.12*a.basstime);","init_eqs_eel":"","frame_eqs_eel":"ang = basstime;\ntex_ang = sin(basstime);\n\nob_r = 0.5 * sin(basstime*1.12);\nob_g = 0.5 * sin(basstime*1.5);\nob_b = 0.5 * sin(basstime*2.12);"},{"baseVals":{"enabled":1,"textured":1,"rad":2.667177,"tex_zoom":0.377131,"g":1,"b":1,"a":0.7,"r2":0.8,"b2":1,"a2":0.5},"init_eqs_str":"a.tex_capture=0;","frame_eqs_str":"a.tex_capture=above(a.bass,1);","init_eqs_eel":"","frame_eqs_eel":"tex_capture = above(bass,1);"},{"baseVals":{"sides":100,"g2":0.7999,"b2":1,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"b2 = sin(q5*0.4);","init_eqs_eel":"","frame_eqs_eel":"b2 = sin(q5*0.4);"},{"baseVals":{"x":0.54,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"spectrum":1,"usedots":1,"smoothing":0,"a":0.3},"init_eqs_str":"a.xx=0;a.xs=0;a.xd=0;a.zd=0;a.v=0;a.yx=0;a.angle2=0;a.zs=0;a.angle=0;a.ys=0;a.xn=0;a.yd=0;a.angle3=0;a.yn=0;a.u=0;a.q2=0;a.zx=0;","frame_eqs_str":"","point_eqs_str":"a.u=6.28*a.sample;a.v=6.28*a.sample*20;a.xs=Math.cos(a.u)*Math.sin(a.v);a.ys=Math.sin(a.u)*Math.sin(a.v);a.zs=pow(Math.sin(a.v),3);a.angle=.3*a.q2;a.yx=a.ys*Math.cos(a.angle)-a.zs*Math.sin(a.angle);a.zx=a.ys*Math.sin(a.angle)+a.zs*Math.cos(a.angle);a.xx=a.xs;a.angle2=.5*a.q2;a.xd=a.xx*Math.cos(a.angle2)-a.zx*Math.sin(a.angle2);a.zd=a.xx*Math.sin(a.angle2)+a.zx*Math.cos(a.angle2);a.yd=a.yx;a.angle3=.41*a.q2;a.xn=a.xd*Math.cos(a.angle3)-a.yd*Math.sin(a.angle3);a.yn=a.xd*Math.sin(a.angle3)+\na.yd*Math.cos(a.angle3);a.zd+=2;a.x=.5*div(a.xn,a.zd)+.5;a.y=.5*div(a.yn,a.zd)+.5;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"u = sample*3.14*2;\nv = sample*6.28*20;\n\nxs = cos(u)*sin(v);\nys = sin(u)*sin(v);\nzs = pow(sin(v),3);\n\n\n//rotate x axis\nangle = q2*0.3;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = q2*0.5;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = q2*0.41;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\n\nzd = zd +2;\n\nx = xn/zd*0.5+ 0.5;\ny = yn/zd*0.5+ 0.5;"},{"baseVals":{"spectrum":1,"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.basstime=0;a.stickybit=0;a.volavg2=0;a.q6=0;a.q1=0;a.q5=0;a.q9=0;a.sample1=0;a.diff=0;a.edge=0;a.q4=0;a.volavg=0;a.bit2=0;a.vol=0;a.q2=0;a.q3=0;a.basssum=0;a.q7=0;a.sample2=0;","frame_eqs_str":"a.basstime+=.006*a.bass;a.q2=5*a.basstime;a.q1=.001*a.basstime;a.q7=100*a.basstime;a.q4=1;a.q5=0;a.vol=pow(a.bass+a.mid+a.treb,2);a.basssum=a.vol;a.stickybit=mod(a.time,2);a.volavg+=a.vol*equal(a.stickybit,1);a.sample1+=equal(a.stickybit,1);a.volavg2+=a.vol*equal(a.stickybit,0);a.sample2+=equal(a.stickybit,0);a.edge=bnot(equal(a.bit2,a.stickybit));a.volavg-=a.volavg*a.edge*a.stickybit;a.volavg2-=a.volavg2*a.edge*equal(a.stickybit,0);a.sample1-=a.sample1*a.edge*a.stickybit;a.sample2-=\na.sample2*a.edge*equal(a.stickybit,0);a.diff=.00001<Math.abs(equal(a.stickybit,1))?div(a.basssum,div(a.volavg2,a.sample2)):0;a.diff=.00001<Math.abs(equal(a.stickybit,0))?div(a.basssum,div(a.volavg,a.sample1)):a.diff;a.q3=5-3*a.diff;a.q6=a.diff;a.bit2=mod(a.time,2);a.q9=4;a.monitor=5*(a.diff-1);a.warp=5*a.bass_att;","pixel_eqs_str":"a.zoom=1;a.rot=0;","init_eqs_eel":"","frame_eqs_eel":"basstime  = basstime + bass*0.006;\nq2 = basstime*5;\nq1 = basstime*0.001;\n\nq7= basstime*100;\n\nq4 = 1;//cos(basstime);\nq5 = 0;//sin(basstime);\n\n//Transision detection\nvol = pow(bass+mid+treb,2);\nbasssum = vol;\n\nstickybit = time%2;\n\n//avg vol\n//buffer 1\nvolAvg = volAvg + vol*equal(stickybit,1);\n//number of samples 1 or framerate\nsample1 = sample1 + equal(stickybit,1);\n//buffer 2\nvolAvg2 = volAvg2 + vol*equal(stickybit,0);\n//number of samples 2\nsample2 = sample2 + equal(stickybit,0);\n\n//transision\nedge = bnot(equal(bit2,stickybit));\n\nvolAvg = volAvg - volAvg*edge*stickybit;\nvolAvg2 = volAvg2 - volAvg2*edge*equal(stickybit,0);\n\nsample1 = sample1  - sample1*edge*stickybit;\nsample2 = sample2  - sample2*edge*equal(stickybit,0);\n\n//test vol against avg buffer lvl\ndiff = if(equal(stickybit,1), (basssum/(volAvg2/sample2)) , 0);\ndiff = if(equal(stickybit,0), (basssum/(volAvg/sample1)), diff);\n\nq3 = 5 - (diff)*3;\nq6 = diff;\nbit2 = time%2;\nq9 = 4;\n\nmonitor = (diff-1)*5;\nwarp = 5*bass_att;","pixel_eqs_eel":"zoom = 1;\nrot = 0;","warp":" shader_body { \n  float final_noise_1;\n  mat2 tmpvar_2;\n  tmpvar_2[uint(0)].x = q5;\n  tmpvar_2[uint(0)].y = -(q4);\n  tmpvar_2[1u].x = q4;\n  tmpvar_2[1u].y = q5;\n  vec3 tmpvar_3;\n  tmpvar_3.xy = uv;\n  tmpvar_3.z = (q2 * 0.1);\n  final_noise_1 = ((1.0/(pow (q9, 0.0))) * ((texture (sampler_noisevol_lq, \n    (tmpvar_3 * pow (q3, 0.0))\n  ) * 2.0) - 1.0)).x;\n  final_noise_1 = (final_noise_1 + ((1.0/(q9)) * (\n    (texture (sampler_noisevol_lq, (tmpvar_3 * q3)) * 2.0)\n   - 1.0)).x);\n  final_noise_1 = (final_noise_1 + ((1.0/(\n    (q9 * q9)\n  )) * (\n    (texture (sampler_noisevol_lq, (tmpvar_3 * (q3 * q3))) * 2.0)\n   - 1.0)).x);\n  final_noise_1 = (final_noise_1 + ((1.0/(\n    pow (q9, 3.0)\n  )) * (\n    (texture (sampler_noisevol_lq, (tmpvar_3 * pow (q3, 3.0))) * 2.0)\n   - 1.0)).x);\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = (texture (sampler_main, ((\n    (((uv - 0.5) * tmpvar_2) * (1.0 - (0.74 * rad)))\n   * final_noise_1) + 0.5)).xyz - 0.2);\n  ret = tmpvar_4.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  mat2 tmpvar_2;\n  tmpvar_2[uint(0)].x = q4;\n  tmpvar_2[uint(0)].y = -(q5);\n  tmpvar_2[1u].x = q5;\n  tmpvar_2[1u].y = q4;\n  vec2 tmpvar_3;\n  tmpvar_3 = (uv - 0.5);\n  ret_1 = (mix (texture (sampler_main, (\n    ((tmpvar_3 * tmpvar_2) * 0.9)\n   + 0.5)).xyz, texture (sampler_main, (\n    ((((\n      -(tmpvar_3)\n     + 0.5) - 0.5) * -(tmpvar_2)) * 0.9)\n   + 0.5)).xyz, vec3(0.5, 0.5, 0.5)) * 2.0);\n  vec3 tmpvar_4;\n  tmpvar_4.x = (ret_1.x * 10.0);\n  tmpvar_4.y = ret_1.y;\n  tmpvar_4.z = -(ret_1.z);\n  ret_1 = tmpvar_4;\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = tmpvar_4;\n  ret = tmpvar_5.xyz;\n }","warp_hlsl":"shader_body\n{\n    \n    float2x2 rot =  {  q5, q4,\n                       -q4, q5 };\n\n    float3 txr = float3(uv,q2*0.1);\n\n    float final_noise = 0;\n    final_noise += (1.0/pow(q9,0))*(tex3D(sampler_noisevol_lq, txr*pow(q3,0))*2-1);\n    final_noise += (1.0/pow(q9,1))*(tex3D(sampler_noisevol_lq, txr*pow(q3,1))*2-1);\n    final_noise += (1.0/pow(q9,2))*(tex3D(sampler_noisevol_lq, txr*pow(q3,2))*2-1);\n    final_noise += (1.0/pow(q9,3))*(tex3D(sampler_noisevol_lq, txr*pow(q3,3))*2-1);\n\n    final_noise =  pow(final_noise,1);\n    \n    ret = tex2D(sampler_main, mul(uv-0.5,rot)*(1-rad*3.7*(1 - 0.8))*final_noise + 0.5).xyz; \n   \n    // darken (decay) over time\n    ret = ret - 0.2; //or try: ret -= 0.004;\n}","comp_hlsl":"shader_body\n{\n    float2x2 rot =  {  q4, q5,\n                       -q5, q4 };\n    float2 uv_echo = (uv - 0.5)*1.000*float2(-1,-1) + 0.5;\n    ret = lerp( tex2D(sampler_main, mul(uv-0.5, rot)*0.9 + 0.5).xyz, \n                tex2D(sampler_main, mul(uv_echo-0.5, -rot)*0.9 + 0.5).xyz, \n                0.50 \n              ); //video echo\n    ret *= 2.00; //gamma\n    float3 retp = ret; //1 - ret*(1-ret)*4; //solarize\n    ret = (float3(retp[0]*10,retp[1],-retp[2]));\n}"}