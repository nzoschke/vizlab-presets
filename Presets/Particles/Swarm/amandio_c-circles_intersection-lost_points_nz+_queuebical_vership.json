{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.5,"echo_zoom":0.997,"echo_orient":3,"wave_mode":2,"wrap":0,"brighten":1,"wave_scale":0.01,"warp":0.01,"ob_size":0,"ob_a":1,"ib_size":0,"mv_a":0},"shapes":[{"baseVals":{"rad":4.44951,"tex_ang":4.52389,"tex_zoom":0.40034,"r":0.7,"g":0.2,"b":0.1,"g2":0,"a2":1,"border_g":0.4,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"y=1.5;","init_eqs_eel":"","frame_eqs_eel":"y=1.5;"},{"baseVals":{"sides":60,"x":0.68,"rad":0.59125,"b":0.3,"a":0,"g2":0,"border_r":0.3,"border_g":0.4,"border_a":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":100,"num_inst":20,"rad":3.99407,"g":1,"b":1,"a":0,"g2":0,"border_r":0.6,"border_a":0.5},"init_eqs_str":"a.i=0;a.q1=0;a.q6=0;","frame_eqs_str":"a.i=a.instance;a.x=.5+div(a.q1*a.gmegabuf[Math.floor(1E4+3*a.i)],a.q6);a.y=.5+a.q1*a.gmegabuf[Math.floor(10001+3*a.i)];a.rad=2*a.q1*a.gmegabuf[Math.floor(10002+3*a.i)];a.border_r=.5+.5*Math.sin(.2*a.i);a.border_b=.5+.5*Math.sin(.2*a.i);","init_eqs_eel":"","frame_eqs_eel":"i=instance;\n\n/// circles\n\nx= .5+ q1*gmegabuf(10000+3*i)/q6;\ny= .5+ q1*gmegabuf(10001+3*i);\nrad=2*q1*gmegabuf(10002+3*i);\n\nborder_r=.5+.5*sin(.2*i);\nborder_b=.5+.5*sin(.2*i);"},{"baseVals":{"enabled":1,"sides":10,"thickoutline":1,"num_inst":400,"x":0.3,"y":0.8,"rad":0.02988,"tex_zoom":1.85319,"g":1,"g2":0,"a2":1,"border_r":0.1,"border_g":0.3,"border_b":0.7,"border_a":0},"init_eqs_str":"a.i=0;a.q1=0;a.q6=0;","frame_eqs_str":"a.i=a.instance;a.x=.5+div(a.q1*a.gmegabuf[Math.floor(3*a.i)],a.q6);a.y=.5+a.q1*a.gmegabuf[Math.floor(3*a.i+1)];a.a2=a.a;a.rad*=a.q1;a.r=.6+.4*Math.sin(.1*a.i);a.g=a.r;a.b=a.r;a.r2=.3*a.r;a.g2=.3*a.g;a.b2=.3*a.b;","init_eqs_eel":"","frame_eqs_eel":"\n//// intersection points\n\ni=instance;   \n\nx= .5+ q1*gmegabuf(3*i)/q6;\ny= .5+ q1*gmegabuf(3*i+1);\n//a= gmegabuf(3*i+2);\na2=a;\n\nrad=rad*q1;\n\nr=.6+.4*sin(.1*i);   g=r;       b=r;\nr2=.3*r;             g2=.3*g;   b2=.3*b;"}],"waves":[{"baseVals":{"usedots":1,"scaling":0.01,"smoothing":1,"r":0.4,"g":0.4,"a":0.12,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"usedots":1,"scaling":0.20929,"smoothing":0,"r":0.3,"g":0.2,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"r":0.3,"g":0.2,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"smoothing":0.4,"g":0.6,"a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.mq29=0;a.cthr=0;a.d=0;a.n=0;a.mq1=0;a.q25=0;a.q12=0;a.q22=0;a.q21=0;a.q13=0;a.q29=0;a.q6=0;a.p=0;a.q1=0;a.mq31=0;a.ya=0;a.mq21=0;a.mq24=0;a.x=0;a.chng=0;a.mq28=0;a.mq23=0;a.q31=0;a.q23=0;a.q24=0;a.ind=0;a.q11=0;a.yb=0;a.atime=0;a.i1=0;a.a=0;a.q26=0;a.xb=0;a.y=0;a.mq27=0;a.ra=0;a.mq25=0;a.mq22=0;a.vol=0;a.mq26=0;a.q27=0;a.h=0;a.i2=0;a.xa=0;a.q28=0;a.rb=0;a.sample=0;for(var b=a.i=0;1E5>b;b++)a.gmegabuf[Math.floor(a.i)]=0,a.i+=1;","frame_eqs_str":"a.chng=Math.sin(.5*a.time);a.cthr=.9999;a.mq21=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq21;a.mq22=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq22;a.mq23=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq23;a.mq24=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq24;a.mq25=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq25;a.mq26=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq26;a.mq27=.00001<Math.abs(above(a.chng,a.cthr))?rand(1):a.mq27;a.mq28=.00001<Math.abs(above(a.chng,\na.cthr))?rand(1):a.mq28;a.mq29=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq29;a.mq31=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq31;a.monitor=a.chng;a.q21=a.mq21;a.q22=a.mq22;a.q23=a.mq23;a.q24=a.mq24;a.q25=a.mq25;a.q26=a.mq26;a.q27=a.mq27;a.q28=a.mq28;a.q29=a.mq29;a.q31=a.mq31;a.monitor=a.mq1;a.vol=a.bass+a.treb+a.mid;a.atime+=a.vol;a.q11=.4+.4*Math.sin(.006*a.atime);a.q12=.4+.4*Math.cos(.00613828348*a.atime);a.q13=.4+.4*Math.sin(.00598593455*a.atime);a.monitor=a.q13;a.warp=0;a.wave_a=\n0;a.zoom=1;a.decay=0;a.q6=a.aspecty;a.q1=10+0*Math.sin(.2*a.time);a.n=20;a.ind=0;for(var b=a.i1=0;b<a.n;b++){a.sample=div(a.i1,a.n);a.xa=.5*Math.sin(a.time+3*a.sample);a.ya=0;a.ra=.3*a.sample;a.gmegabuf[Math.floor(1E4+3*a.i1)]=a.xa;a.gmegabuf[Math.floor(10001+3*a.i1)]=a.ya;a.gmegabuf[Math.floor(10002+3*a.i1)]=a.ra;for(var c=a.i2=0;c<a.n;c++)a.sample=div(a.i2,a.n),a.xb=.5*Math.sin(a.time+3*a.sample),a.yb=0,a.rb=.3*a.sample,a.d=sqrt(sqr(a.xa-a.xb)+sqr(a.ya-a.yb)),a.p=div(a.ra*a.ra-a.rb*a.rb+a.d*a.d,\n2*a.d),a.h=sqrt(a.ra*a.ra-a.p*a.p),a.x=a.xa+div(a.p*(a.xb-a.xa),a.d),a.y=a.ya+div(a.p*(a.yb-a.ya),a.d),a.x-=div(a.h*(a.yb-a.ya),a.d),a.y+=div(a.h*(a.xb-a.xa),a.d),a.a=below(a.d,a.ra+a.rb)*above(a.d,Math.abs(a.ra-a.rb))*above(a.d,0),a.gmegabuf[Math.floor(3*a.ind)]=a.x,a.gmegabuf[Math.floor(3*a.ind+1)]=a.y,a.gmegabuf[Math.floor(3*a.ind+2)]=a.a,a.ind+=a.a,a.i2+=1;a.i1+=1}a.q1*=.1;","pixel_eqs_str":"","init_eqs_eel":"i=0; loop(100000, gmegabuf(i)=0;  i=i+1;);","frame_eqs_eel":"chng=sin(time*.5);\ncthr=.9999;\nmq21=if(above(chng,cthr),rand(3),mq21);\nmq22=if(above(chng,cthr),rand(3),mq22);\nmq23=if(above(chng,cthr),rand(3),mq23);\nmq24=if(above(chng,cthr),rand(2),mq24);\nmq25=if(above(chng,cthr),rand(2),mq25);\nmq26=if(above(chng,cthr),rand(2),mq26);\nmq27=if(above(chng,cthr),rand(1),mq27);\nmq28=if(above(chng,cthr),rand(1),mq28);\nmq29=if(above(chng,cthr),rand(1)*.3,mq29);\nmq31=if(above(chng,cthr),rand(1)*.3,mq31);\nmonitor=chng;\nq21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;\nq27=mq27;q28=mq28;q29=mq29;q31=mq31;\n\nmonitor=mq1;\nvol=bass+treb+mid;\natime=atime+vol;\nq11=.4+sin(atime*.006        )*.4;\nq12=.4+cos(atime*.00613828348)*.4;\nq13=.4+sin(atime*.00598593455)*.4;\nmonitor=q13;\nwarp=0;    wave_a=0;   zoom=1;   decay=0;    q6=aspecty;\n\nq1=10+0*sin(.2*time);        //// zoom\n\nn=20;   /////  number of circles (2 to 32) - number of instances of shape 3 must be equal to n;\n        /////  number of instances of shape 4 must be equal to n x n\n\nind=0;  i1=0;  loop(n,  sample=i1/n;\n\n//////////  circles coordinates and radius --- copy and paste below, changing a to b   /////////\n\nxa = .5*sin(time+3*sample);\nya = 0;\nra=.3*sample;\n\n////////////////////////////////////\n\ngmegabuf(10000+3*i1)=xa;   gmegabuf(10001+3*i1)=ya;   gmegabuf(10002+3*i1)=ra;\ni2=0;  loop(n,    sample=i2/n;\n\n//////////// copy of circles coordinates and radius  ///////////////\n\nxb = .5*sin(time+3*sample);\nyb = 0;\nrb=.3*sample;\n\n////////////////////////////////////\n\nd=sqrt(sqr(xa-xb)+sqr(ya-yb));   p=(ra*ra-rb*rb+d*d)/(2*d);   h=sqrt(ra*ra-p*p);\nx=xa+p*(xb-xa)/d;                y=ya+p*(yb-ya)/d;\nx=x-h*(yb-ya)/d;                 y=y+h*(xb-xa)/d;            /// intersection points\na=below(d,ra+rb)*above(d,abs(ra-rb))*above(d,0);             /// lost points\n\ngmegabuf(3*ind)=x;      gmegabuf(3*ind+1)=y;   gmegabuf(3*ind+2)=a;\n\n\nind=ind+a;   i2=i2+1;);    i1=i1+1;);    q1=.1*q1;","pixel_eqs_eel":"","warp":"mat2 ofs;\nvec2 xlat_mutableuv2;\nfloat xlat_mutablezv;\n shader_body { \n  mat2 tmpvar_1;\n  tmpvar_1[uint(0)].x = texsize.z;\n  tmpvar_1[uint(0)].y = 0.0;\n  tmpvar_1[1u].x = 0.0;\n  tmpvar_1[1u].y = texsize.w;\n  ofs = (tmpvar_1 * 4.0);\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3.x = ((uv.x - 0.5) + q19);\n  tmpvar_3.y = (uv.y - 0.5);\n  vec2 v_4;\n  v_4.x = ofs[0].x;\n  v_4.y = ofs[1].x;\n  vec2 v_5;\n  v_5.x = ofs[0].x;\n  v_5.y = ofs[1].x;\n  vec2 v_6;\n  v_6.x = ofs[0].y;\n  v_6.y = ofs[1].y;\n  vec2 v_7;\n  v_7.x = ofs[0].y;\n  v_7.y = ofs[1].y;\n  vec2 tmpvar_8;\n  tmpvar_8.x = (texture (sampler_main, (uv + v_4)) - texture (sampler_main, (uv - v_5))).z;\n  tmpvar_8.y = (texture (sampler_main, (uv + v_6)) - texture (sampler_main, (uv - v_7))).z;\n  xlat_mutablezv = (time * 0.08);\n  vec2 tmpvar_9;\n  tmpvar_9.x = (0.02 * time);\n  tmpvar_9.y = (-0.05 * time);\n  xlat_mutableuv2 = ((3.0 * tmpvar_3) + tmpvar_9);\n  vec3 tmpvar_10;\n  tmpvar_10.xy = xlat_mutableuv2;\n  tmpvar_10.z = xlat_mutablezv;\n  vec3 tmpvar_11;\n  tmpvar_11.xy = (xlat_mutableuv2 * vec2(2.0, 2.0));\n  tmpvar_11.z = (xlat_mutablezv * 2.0);\n  vec3 tmpvar_12;\n  tmpvar_12.xy = (xlat_mutableuv2 * vec2(4.0, 4.0));\n  tmpvar_12.z = (xlat_mutablezv * 3.0);\n  vec3 tmpvar_13;\n  tmpvar_13.xy = (xlat_mutableuv2 * vec2(8.0, 8.0));\n  tmpvar_13.z = (xlat_mutablezv * 7.0);\n  xlat_mutableuv2 = (tmpvar_3 + ((\n    (((texture (sampler_noisevol_hq, tmpvar_10).z + (texture (sampler_noisevol_hq, tmpvar_11).z / 2.0)) + (texture (sampler_noisevol_hq, tmpvar_12).z / 4.0)) + (texture (sampler_noisevol_hq, tmpvar_13).z / 8.0))\n   - 1.0) * 0.1));\n  ret_2 = (((\n    (((0.2 + (\n      (((1.0 + bass_att) * 0.01) / sqrt(dot (xlat_mutableuv2, xlat_mutableuv2)))\n     * \n      (1.0 + normalize(slow_roam_cos))\n    .xyz)) + ((rand_preset.z - 0.5) * xlat_mutableuv2.y)) * 0.1)\n   / 2.0) + (texture (sampler_main, \n    (uv - (0.02 * tmpvar_8))\n  ).xyz * 0.9)) - 0.01);\n  vec4 tmpvar_14;\n  tmpvar_14 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * xlat_mutableuv2.xyy) * (\n    (q27 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q29)));\n  if (((ret_2.x > (q21 * q13)) && (ret_2.x <= (q24 * q11)))) {\n    ret_2.y = (ret_2.y - (tmpvar_14.x * 0.5));\n  };\n  if (((ret_2.y > (q22 * q11)) && (ret_2.y <= (q25 * q12)))) {\n    ret_2.z = (ret_2.z - (tmpvar_14.y * 0.5));\n  };\n  if (((ret_2.z > (q23 * q12)) && (ret_2.z <= (q26 * q13)))) {\n    ret_2.x = (ret_2.x - (tmpvar_14.z * 0.5));\n  };\n  vec4 tmpvar_15;\n  tmpvar_15.w = 1.0;\n  tmpvar_15.xyz = ret_2;\n  ret = tmpvar_15.xyz;\n }","comp":"vec3 xlat_mutableblur;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv2;\nvec2 xlat_mutableuv3;\n shader_body { \n  vec2 uv_1;\n  float t_rel_2;\n  float inten_4;\n  float dist_5;\n  float ang2_6;\n  vec3 ret_7;\n  vec4 tmpvar_8;\n  tmpvar_8 = texture (sampler_fc_main, uv);\n  ret_7 = tmpvar_8.xyz;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  dist_5 = 0.0;\n  inten_4 = 0.0;\n  xlat_mutableret1 = vec3(0.0, 0.0, 0.0);\n  t_rel_2 = q29;\n  for (float n_3 = 0.0; n_3 <= 14.0; n_3 += 1.0) {\n    ang2_6 = (((6.28 * n_3) / 14.0) + q30);\n    float tmpvar_9;\n    tmpvar_9 = cos(ang2_6);\n    float tmpvar_10;\n    tmpvar_10 = sin(ang2_6);\n    xlat_mutableuv2.x = ((uv_1.x * tmpvar_9) - (uv_1.y * tmpvar_10));\n    xlat_mutableuv2.y = ((uv_1.x * tmpvar_10) + (uv_1.y * tmpvar_9));\n    xlat_mutableuv2 = (xlat_mutableuv2 * aspect.yx);\n    dist_5 = (1.0 - fract((\n      (n_3 / 14.0)\n     + t_rel_2)));\n    inten_4 = ((16.0 * dist_5) * (1.0 - (dist_5 * dist_5)));\n    xlat_mutableuv3 = ((3.75 * dist_5) * xlat_mutableuv2);\n    xlat_mutableblur = (((texture (sampler_blur1, \n      fract(xlat_mutableuv3)\n    ).xyz * scale1) + bias1) * vec3(0.5, 0.9, 1.0));\n    xlat_mutableret1 = max (xlat_mutableret1, ((\n      (texture (sampler_main, (xlat_mutableuv3 * 1.2)).xyz * 2.0)\n     + xlat_mutableblur) * inten_4));\n  };\n  ret_7 = (tmpvar_8.xyz * texture (sampler_main, (0.5 + (\n    (uv_orig * aspect.yx)\n   * 10.0))).xyz);\n  ret_7 = (ret_7 + texture (sampler_main, (0.5 - (\n    (uv_orig * aspect.xy)\n   * 10.0))).xyz);\n  ret_7 = (ret_7 * (0.5 - (dist_5 * xlat_mutableret1.y)));\n  ret_7 = (ret_7 + ((xlat_mutableret1 * 2.0) + (8.0 * \n    ((texture (sampler_blur2, ((5.0 * aspect.xy) * xlat_mutableuv2)).xyz * scale2) + bias2)\n  )));\n  ret_7 = (ret_7 * ((texture (sampler_blur1, \n    (0.5 + (uv_1 * aspect.xy))\n  ).xyz * scale1) + bias1));\n  vec4 tmpvar_11;\n  tmpvar_11 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv_1.xyy) * (\n    (q28 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q31)));\n  if (((ret_7.x > (q26 * q13)) && (ret_7.x <= (q23 * q11)))) {\n    ret_7.z = (ret_7.z - (tmpvar_11.x * 0.5));\n  };\n  if (((ret_7.y > (q25 * q11)) && (ret_7.y <= (q22 * q12)))) {\n    ret_7.x = (ret_7.x - (tmpvar_11.y * 0.5));\n  };\n  if (((ret_7.z > (q24 * q12)) && (ret_7.z <= (q21 * q13)))) {\n    ret_7.y = (ret_7.y - (tmpvar_11.z * 0.5));\n  };\n  vec3 tmpvar_12;\n  tmpvar_12.z = 0.0;\n  tmpvar_12.xy = (xlat_mutableuv2 * aspect.xy);\n  vec3 tmpvar_13;\n  tmpvar_13.z = 0.0;\n  tmpvar_13.xy = (xlat_mutableuv2 * aspect.xy);\n  ret_7 = (ret_7 - (10.0 * (\n    dot (tmpvar_12, vec3(0.32, 0.49, 0.29))\n   * \n    dot (tmpvar_13, vec3(0.32, 0.49, 0.29))\n  )));\n  ret_7 = (ret_7 * 2.0);\n  vec4 tmpvar_14;\n  tmpvar_14.w = 1.0;\n  tmpvar_14.xyz = ret_7;\n  ret = tmpvar_14.xyz;\n }","warp_hlsl":"sampler sampler_pw_noise_lq;\nfloat3 crisp,dx,dy,ret1;\nfloat2 zz, uv1,uv2;\nfloat  n1,n2,n3,n4,zv,z, noise, k1, wave;\nstatic float2 sunpos = float2 (0*sin(time/3),-.0);\nstatic float2x2 ofs = float2x2 (texsize.z,0,0,texsize.w)*4;\nstatic float3 suncol = 1+normalize(slow_roam_cos);\nfloat3 cloud (float2 uv_in) {\nreturn (.2+(1+bass_att)*.01/length(uv_in-sunpos)*suncol+(rand_preset.z-.5)*uv_in.y);} \n\nshader_body {\n\nfloat2 uv1 = float2(uv.x-0.5+q19,uv.y-0.5);//*aspect.xy;\n\ndx = tex2D(sampler_main,uv+ofs[0]) - tex2D(sampler_main,uv-ofs[0]);\ndy = tex2D(sampler_main,uv+ofs[1]) - tex2D(sampler_main,uv-ofs[1]);\nzz = float2(dx.b,dy.b);\n\n//clouds\nzv = time*.06 ;\nzv = time*.08+ .0*GetPixel(uv); //##\nuv2 = 3*uv1+ float2(0.02*time,-.05*time);\n\nn1 = tex3D(sampler_noisevol_hq,float3 (uv2.x,uv2.y,zv)).b;\nn2 = tex3D(sampler_noisevol_hq,float3 (uv2.x*2,uv2.y*2,zv*2)).b;\nn3 = tex3D(sampler_noisevol_hq,float3 (uv2.x*4,uv2.y*4,zv*3)).b;\nn4 = tex3D(sampler_noisevol_hq,float3 (uv2.x*8,uv2.y*8,zv*7)).b;\nnoise = n1 + n2/2 + n3/4 + n4/8 -1;\nnoise = pow(noise,1);\nuv2 = uv1+noise*.1;\n\n//*******************************\nret1 = cloud(uv2);\nfloat k1 = .1;\nret = ret1*k1/2 + GetPixel(uv-.02*zz)*(1-k1)-.01;\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv2.xyy*q27\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q29\n                     );\nif(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y -= (noise9).x*.5; \nif(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z -= (noise9).y*.5; \nif(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x -= (noise9).z*.5; \n\n//ret = 0;\n}","comp_hlsl":"float3 ret1, neu, crisp, blur;\nfloat2 uv2, uv3;\n\nshader_body\n{\nret=tex2D(sampler_fc_main, uv);\n\nfloat ang2, c, s;\nuv -= .5;\nuv *= aspect.xy;    \n\nfloat2 tmp = uv_orig.xyy*ret.x;\nfloat dist = 0;\nfloat inten = 0;\nfloat mask = 0;\nret1 = .0;\nint anz = 14;\nfloat n = 0;\nfloat t_rel = q29;\nwhile (n <= anz) {\n    ang2 = 6.28*n/anz+q30;\n    c = cos(ang2);\n    s = sin(ang2);\n    uv2.x =  uv.x*c - uv.y*s;\n    uv2.y =  uv.x*s + uv.y*c;\n    uv2*= aspect.yx;\n\n    dist = 1-frac(n/anz+t_rel); //evtl sqrt !\n\n    inten =  16*dist*(1-dist*dist);\n    uv3 = 3*uv2*dist*1.25;\n    crisp = GetPixel(uv3*1.2);\n    blur = GetBlur1(frac(uv3)) * float3 (.5,.9,1);\n    ret1 = max(ret1,(crisp*2+blur)*inten);\nn++;\n}\n\nfloat3 ret1 = ret1 ;\nret *= GetPixel(.5+uv_orig*aspect.yx*10);\nret+=GetPixel(.5-uv_orig*aspect.xy*10);\n\nret*=.5-dist*(ret1.y);\nret += ret1*2+8*GetBlur2(.5*uv2.xy*aspect.xy*10);\nret*=1*GetBlur1(.5+uv*aspect.xy);\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy*q28\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q31\n                     );\nif(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; \nif(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; \nif(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; \nret-=10*(lum(uv2*aspect.xy)*lum(uv2*aspect.xy));\nret*=2;\n}"}