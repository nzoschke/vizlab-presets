{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.76,"echo_zoom":0.454,"echo_orient":3,"wave_thick":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.01,"wave_smoothing":0.27,"wave_mystery":-0.38,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.772,"zoomexp":4.401,"fshader":0.32,"zoom":1.031,"rot":0.001,"warp":0,"mv_x":64,"mv_y":48,"mv_l":0.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"sides":3,"rad":0.34,"ang":0.53,"r":0.56,"g":0.36,"r2":0.9,"border_r":0,"border_g":0,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang = ang + time;","init_eqs_eel":"","frame_eqs_eel":"ang = ang + time;"},{"baseVals":{"sides":3,"rad":0.41,"r":0,"g":0.8,"b":0.7,"g2":0.4,"b2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang = ang - time*.333;","init_eqs_eel":"","frame_eqs_eel":"ang = ang - time*.333;"},{"baseVals":{"sides":3,"rad":0.21,"r":0.84,"r2":1,"g2":0.58,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang = ang + time*4;","init_eqs_eel":"","frame_eqs_eel":"ang = ang + time*4;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"a.x=.5+.2*a.bass*Math.sin(20*a.sample*a.time*a.treb);a.y=.5+.2*a.bass*Math.cos(20*a.sample*a.time*a.treb);a.r=1+.5*Math.sin(.1*a.sample+10*a.time*a.bass);a.g=1+.5*Math.sin(2*a.sample+50*a.time*a.treb);a.b=1+.5*Math.sin(5*a.sample+20*a.time*a.mid);a.a=a.r;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = .5 + (bass*.2)*sin(sample*2*(time*10*treb));\ny = .5 + (bass*.2)*cos(sample*2*(time*10*treb));\nr = 1 + .5*sin(sample*.10+(time*10*bass));\ng = 1 + .5*sin(sample*2+(time*50*treb));\nb = 1 + .5*sin(sample*5+(time*20*mid));\na = r;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.q1=0;a.counter=0;","frame_eqs_str":"a.wave_x+=.3*Math.sin(8.4152*a.time);a.cx=a.wave_x;a.wave_y+=.3*Math.cos(6.28*a.time);a.cy=a.wave_y;a.rot=.00001<Math.abs(above(a.bass_att,1))?.05:-.05;a.rot+=.00001<Math.abs(above(a.mid_att,1))?.05:-.05;a.rot+=.00001<Math.abs(above(a.treb_att,1))?.05:-.05;a.wave_r=Math.min(1,2*Math.max(a.bass_att-1,0));a.wave_b=Math.min(1,2*Math.max(a.treb_att-1,0));a.wave_g=Math.min(1,2*Math.max(a.mid_att-1,0));a.monitor=a.wave_g;a.q1=.1*(a.bass+a.treb+a.mid);","pixel_eqs_str":"","init_eqs_eel":"counter=0;","frame_eqs_eel":"wave_x = wave_x + 0.3*sin(6.28*1.34*time);\ncx=wave_x;\n\n//cx = cx + 0.1*sin(6.28*1.34*time);\n\nwave_y = wave_y + 0.3*cos(6.28*time);\ncy=wave_y;\n\n//cy = cy + 0.1*cos(6.28*time);\n//rot=rot+.1*sin(.2*6.28*time);\n\nrot=if(above(bass_att,1),0.05,-0.05);\nrot=rot+if(above(mid_att,1),0.05,-0.05);\nrot=rot+if(above(treb_att,1),0.05,-0.05);\n\n//wave_r=1;\n//wave_g=0;\n//wave_b=.5+.5*sin(.4*6.28*time);\n\nwave_r=min(1,2*max((bass_att-1),0));\nwave_b=min(1,2*max((treb_att-1),0));\nwave_g=min(1,2*max((mid_att-1),0)); \n\nmonitor=wave_g;\nq1=(bass+treb+mid)*.1;","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 rsamp_1;\n  vec3 ret_2;\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy));\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_pw_main, uv);\n  ret_2 = tmpvar_4.xyz;\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_pw_main, (uv + ((\n    (tmpvar_3.xy - 0.5)\n   * 12.0) * texsize.zw)));\n  vec3 tmpvar_6;\n  tmpvar_6 = tmpvar_5.xyz;\n  rsamp_1 = tmpvar_6;\n  float tmpvar_7;\n  vec2 x_8;\n  x_8 = (tmpvar_4.xy - uv);\n  tmpvar_7 = sqrt(dot (x_8, x_8));\n  float tmpvar_9;\n  vec2 x_10;\n  x_10 = (tmpvar_5.xy - uv);\n  tmpvar_9 = sqrt(dot (x_10, x_10));\n  if ((tmpvar_7 > tmpvar_9)) {\n    ret_2.xy = tmpvar_6.xy;\n  };\n  vec4 tmpvar_11;\n  tmpvar_11 = texture (sampler_pw_main, (uv + ((\n    (tmpvar_3.zw - 0.5)\n   * 48.0) * texsize.zw)));\n  rsamp_1 = tmpvar_11.xyz;\n  float tmpvar_12;\n  vec2 x_13;\n  x_13 = (ret_2.xy - uv);\n  tmpvar_12 = sqrt(dot (x_13, x_13));\n  float tmpvar_14;\n  vec2 x_15;\n  x_15 = (tmpvar_11.xy - uv);\n  tmpvar_14 = sqrt(dot (x_15, x_15));\n  if ((tmpvar_12 > tmpvar_14)) {\n    ret_2.xy = rsamp_1.xy;\n  };\n  ret_2.z = texture (sampler_fw_main, ret_2.xy).z;\n  ret_2.z = (ret_2.z + (q1 * 0.03));\n  ret_2.y = (ret_2.y - (q1 * 0.031));\n  ret_2.z = (ret_2.z + (q1 * 0.023));\n  ret_2 = (ret_2 - (roam_sin.xyz * roam_cos.wzy));\n  if ((((ret_2.z + ret_2.x) + ret_2.y) < 0.3)) {\n    ret_2.x = (ret_2.x * 0.1);\n    ret_2.y = (ret_2.y * 0.3);\n    ret_2.z = (ret_2.z * 0.21);\n  };\n  vec4 tmpvar_16;\n  tmpvar_16.w = 1.0;\n  tmpvar_16.xyz = ret_2;\n  ret = tmpvar_16.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (texture (sampler_main, ((texture (sampler_blur1, uv).xyz * scale1) + bias1).xy).xyz * 2.0);\n  ret = tmpvar_1.xyz;\n }","warp_hlsl":"shader_body\n{\nfloat2 pixelsize = texsize.zw;\nfloat2 uvm = uv;//_orig;\n\nfloat2 noise_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\nfloat4 noiseVal = tex2D(sampler_noise_lq, noise_uv);\n\nret.xyz = saturate(tex2D( sampler_pw_main,uvm).xyz*float3(1,1,1) - float3(.0,.0,.0));\nret.xyz = tex2D( sampler_pw_main,uvm).xyz;\n\n\nfloat3 rsamp = tex2D(sampler_pw_main,uvm + (noiseVal.xy-.5)*12*pixelsize).xyz;\nif (length(ret.xy - uvm) > length(rsamp.xy - uvm)) {\nret.xy = rsamp.xy;\n}\n\nrsamp = tex2D(sampler_pw_main,uvm + (noiseVal.zw-.5)*48*pixelsize).xyz;\nif (length(ret.xy - uvm) > length(rsamp.xy - uvm)) {\nret.xy = rsamp.xy;\n}\n\nret.z = tex2D(sampler_fw_main,ret.xy).z;\n\nret.z += q1*.03;\nret.y -= q1*.031;\nret.z += q1*.023;\nret-=roam_sin*roam_cos.wzy;\nif (ret.z+ret.x+ret.y < .3) {\nret.x*=.1;\nret.y*=.3;\nret.z*=.21;\n}\n\n\n}","comp_hlsl":"shader_body\n{\n    float2 uv_echo = (uv - 0.5)*1.000*float2(-1,-1) + 0.5;\n    float3 output =  tex2D(sampler_main, uv).xyz;\noutput-=roam_sin.yzw*roam_cos;\n    float3 blur =  tex2D(sampler_main, GetBlur1(uv)).xyz;\n    \n   ret = blur;\n\n    ret *= 2.00; //gamma\n    ret = ret;\n//ret=1-ret;\n}"}