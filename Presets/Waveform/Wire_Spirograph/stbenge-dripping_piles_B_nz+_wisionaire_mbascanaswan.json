{"version":2,"baseVals":{"rating":5,"decay":1,"echo_zoom":1.007,"echo_orient":3,"wave_thick":1,"wave_brighten":0,"wave_a":0.001,"wave_scale":0.01,"wave_smoothing":0.27,"wave_mystery":-0.38,"modwavealphastart":0.71,"modwavealphaend":1.3,"mv_x":64,"mv_y":48,"mv_l":0.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"sides":3,"rad":0.34,"ang":0.53,"r":0.56,"g":0.36,"r2":0.9,"border_r":0,"border_g":0,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang = ang + time;","init_eqs_eel":"","frame_eqs_eel":"ang = ang + time;"},{"baseVals":{"sides":3,"rad":0.41,"r":0,"g":0.8,"b":0.7,"g2":0.4,"b2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang = ang - time*.333;","init_eqs_eel":"","frame_eqs_eel":"ang = ang - time*.333;"},{"baseVals":{"sides":3,"rad":0.21,"r":0.84,"r2":1,"g2":0.58,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang = ang + time*4;","init_eqs_eel":"","frame_eqs_eel":"ang = ang + time*4;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"a.x=.5+.2*a.bass*Math.sin(20*a.sample*a.time*a.treb);a.y=.5+.2*a.bass*Math.cos(20*a.sample*a.time*a.treb);a.r=1+.5*Math.sin(.1*a.sample+10*a.time*a.bass);a.g=1+.5*Math.sin(2*a.sample+50*a.time*a.treb);a.b=1+.5*Math.sin(5*a.sample+20*a.time*a.mid);a.a=a.r;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = .5 + (bass*.2)*sin(sample*2*(time*10*treb));\ny = .5 + (bass*.2)*cos(sample*2*(time*10*treb));\nr = 1 + .5*sin(sample*.10+(time*10*bass));\ng = 1 + .5*sin(sample*2+(time*50*treb));\nb = 1 + .5*sin(sample*5+(time*20*mid));\na = r;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.q1=0;a.q2=0;a.q3=0;","frame_eqs_str":"a.warp=0;a.q1=.6+.3*Math.sin(.95242*a.time);a.q2=.6+.3*Math.sin(1.332211*a.time);a.q3=.6+.3*Math.sin(.44556*a.time);","pixel_eqs_str":"a.zoom=.995+.4*pow(Math.abs(a.y-.5),1.4)*a.bass;","init_eqs_eel":"","frame_eqs_eel":"warp = 0;\nq1 = .6+.3*sin(time*.95242);\nq2 = .6+.3*sin(time*1.332211);\nq3 = .6+.3*sin(time*.44556);","pixel_eqs_eel":"zoom = .995+pow(abs(y-.5),1.4)*(bass*.4);","warp":" shader_body { \n  vec3 ret_1;\n  ret_1.x = (((\n    ((((texture (sampler_pw_main, uv) + texture (sampler_pw_main, \n      (uv + (texsize.zw * vec2(-1.0, 0.0)))\n    )) + texture (sampler_pw_main, (uv + \n      (texsize.zw * vec2(1.0, 0.0))\n    ))) + texture (sampler_pw_main, (uv + (texsize.zw * vec2(0.0, -1.0))))) + texture (sampler_pw_main, (uv + (texsize.zw * vec2(0.0, -2.0)))))\n   * 42.0).x + (\n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  .z * 0.76)) + 0.03);\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv.xyy) * (\n    (q27 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q29)));\n  if (((ret_1.x > (q21 * q13)) && (ret_1.x <= (q24 * q11)))) {\n    ret_1.y = (ret_1.y + (tmpvar_2.x * 0.5));\n  };\n  if (((ret_1.y > (q22 * q11)) && (ret_1.y <= (q25 * q12)))) {\n    ret_1.z = (ret_1.z + (tmpvar_2.y * 0.5));\n  };\n  if (((ret_1.z > (q23 * q12)) && (ret_1.z <= (q26 * q13)))) {\n    ret_1.x = (ret_1.x + (tmpvar_2.z * 0.5));\n  };\n  if ((ret_1.x > 18.0)) {\n    ret_1.x = 0.0;\n  };\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_pw_main, uv);\n  ret_1.y = dot (tmpvar_3.xxx, vec3(0.32, 0.49, 0.29));\n  ret_1.z = dot (tmpvar_3.yyy, vec3(0.32, 0.49, 0.29));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_1;\n  ret = tmpvar_4.xyz;\n }","comp":"vec2 xlat_mutabledz;\nvec3 xlat_mutableneu;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv3;\n shader_body { \n  vec2 uv2_1;\n  vec2 tmpvar_2;\n  tmpvar_2.y = 0.0;\n  tmpvar_2.x = texsize.z;\n  vec2 tmpvar_3;\n  tmpvar_3.x = 0.0;\n  tmpvar_3.y = texsize.w;\n  xlat_mutabledz.x = dot ((texture (sampler_main, (uv + tmpvar_2)).xyz - texture (sampler_main, (uv - tmpvar_2)).xyz), vec3(0.32, 0.49, 0.29));\n  xlat_mutabledz.y = dot ((texture (sampler_main, (uv + tmpvar_3)).xyz - texture (sampler_main, (uv - tmpvar_3)).xyz), vec3(0.32, 0.49, 0.29));\n  uv2_1 = (uv - 0.5);\n  xlat_mutableuv3 = ((0.2 * uv2_1) + 0.5);\n  float tmpvar_4;\n  tmpvar_4 = (time / 2.0);\n  xlat_mutableuv3 = ((0.2 * cos(\n    ((42.0 * fract(xlat_mutableuv3)) + tmpvar_4)\n  )) + (99.0 * xlat_mutabledz));\n  float tmpvar_5;\n  tmpvar_5 = clamp ((0.01 / sqrt(\n    dot (xlat_mutableuv3, xlat_mutableuv3)\n  )), 0.0, 1.0);\n  xlat_mutableneu = ((0.1 * vec3(tmpvar_5)) + (0.9 * dot (vec3(tmpvar_5), vec3(0.32, 0.49, 0.29))));\n  xlat_mutableret1 = max (vec3(0.0, 0.0, 0.0), (xlat_mutableneu * 1.252262));\n  xlat_mutableuv3 = ((0.2 * uv2_1) + 0.5);\n  xlat_mutableuv3 = ((0.2 * cos(\n    ((42.0 * fract(xlat_mutableuv3)) + tmpvar_4)\n  )) + (99.0 * xlat_mutabledz));\n  float tmpvar_6;\n  tmpvar_6 = clamp ((0.01 / sqrt(\n    dot (xlat_mutableuv3, xlat_mutableuv3)\n  )), 0.0, 1.0);\n  xlat_mutableneu = ((0.1 * vec3(tmpvar_6)) + (0.9 * dot (vec3(tmpvar_6), vec3(0.32, 0.49, 0.29))));\n  xlat_mutableret1 = max (xlat_mutableret1, (xlat_mutableneu * 1.252262));\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = (xlat_mutableret1 + clamp ((\n    (16.0 * ((0.5 * texture (sampler_main, (uv + \n      (0.1 * xlat_mutabledz)\n    )).xyz) + 0.01))\n   * \n    (0.1 + xlat_mutableret1)\n  ), 0.0, 1.0));\n  ret = tmpvar_7.xyz;\n }","warp_hlsl":" shader_body{\n  float2 d=texsize.zw*1;\n  float3 blur=GetBlur1(uv);\n  float3 sum=\n   (\n    tex2D(sampler_pw_main,uv+d*float2(0,0))\n    +tex2D(sampler_pw_main,uv+d*float2(-1,0))\n    +tex2D(sampler_pw_main,uv+d*float2(1,0))\n    +tex2D(sampler_pw_main,uv+d*float2(0,-1))\n   +tex2D(sampler_pw_main,uv+d*float2(0,-2))\n  )*42; // the meaning of life, the universe, everything\n ret.x=(sum.x+blur.z*.76+.03);\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy*q27\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q29\n                     );\nif(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y += (noise9).x*.5; \nif(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z += (noise9).y*.5; \nif(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x += (noise9).z*.5; \n if(ret.x>18)ret.x=0;\n ret.y=lum(tex2D(sampler_pw_main,uv).x); // preparation for combining layers, below\n ret.z=lum(tex2D(sampler_pw_main,uv).y); //    \"  \"\n}","comp_hlsl":"float z;\nfloat3 ret1, neu, mus;\nfloat2 rs,rs2,uv1,uv2, uv3,uv4,uv6,dz,dz1;\nshader_body\n{\nfloat2 uv2;\n//uv = (uv-0.5) * aspect.xy + .5;    \ndz = 0;\n\n\nfloat2 hor = float2(texsize.z,0);\nfloat2 ver = float2(0,texsize.w);\n\nfloat dist = 1;\nfloat inten = 1;\nret1 = 0;\nfloat anz = 1;\nfloat n = 0;\nuv4 = (uv);\n    dz.x = lum(GetPixel(uv4+hor)- GetPixel (uv4-hor));\n    dz.y = lum(GetPixel(uv4+ver)- GetPixel (uv4-ver));\n\n//uv4 = 0;\n\nmus = .5*GetPixel(uv4+.1*dz)+0*dz.x+.01;\n\nuv2 = uv-.5;\nwhile (n <= anz) {\n    dist = 1-frac(1.0/anz*n-.1); //evtl sqrt !;\n\n    inten =  sqrt(dist)*(1-dist*dist)*4;\n\n    uv3 = 2*uv2*dist + .5 + 0.0*time;\n\n//    uv3 *= aspect.yx;\n    uv3 = frac(uv3);\n\n    uv3 = .2 * cos(42*uv3+time/2) + 99*dz;\n    neu = saturate(.01/length(uv3)) ;\n    neu = dist*neu + (1-dist)*lum(neu);\n    ret1 = max(ret1,neu*inten);\nn++;\n}\n\n\nret = ret1  +  saturate(16*mus*(.1+ret1));\n}"}