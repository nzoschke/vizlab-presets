{"version":2,"baseVals":{"rating":5,"wave_mode":1,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_a":1.078,"wave_scale":1.294,"wave_smoothing":0,"wave_mystery":-0.5,"modwavealphastart":0.2,"modwavealphaend":2,"warpanimspeed":100,"warpscale":0.01,"zoomexp":0.17914,"zoom":1.04908,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":32,"textured":1,"rad":0.14741,"ang":1.5708,"tex_zoom":0.99999,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.r=.5+.5*Math.sin(.75*a.time);a.b=.5+.5*Math.sin(1.5*a.time);a.g=.5+.5*Math.sin(2*a.time);a.r2=a.r;a.b2=a.b;a.g2=a.g;","init_eqs_eel":"","frame_eqs_eel":"r = .5+.5*sin(time*.75);\nb = .5+.5*sin(time*1.5);\ng = .5+.5*sin(time*2);\nr2 = r;\nb2= b;\ng2 = g;"},{"baseVals":{"enabled":1,"sides":32,"textured":1,"num_inst":2,"rad":0.24486,"g":1,"b":1,"r2":1,"b2":1,"border_a":0},"init_eqs_str":"a.xmod=0;a.ymod=0;","frame_eqs_str":"a.xmod=.25*Math.sin(.542*a.time)+.125*Math.cos(.367*a.time);a.ymod=.25*Math.cos(.542*a.time)+.125*Math.sin(.367*a.time);a.x=.5+a.xmod*equal(a.instance,0)-a.xmod*equal(a.instance,1);a.y=.5+a.ymod*equal(a.instance,0)-a.ymod*equal(a.instance,1);","init_eqs_eel":"","frame_eqs_eel":"xmod = +.25*sin(0.542*time)+.125*cos(0.367*time);\nymod = +.25*cos(0.542*time)+.125*sin(0.367*time);\n\nx = .5+xmod*equal(instance,0)-xmod*equal(instance,1);\ny = .5+ymod*equal(instance,0)-ymod*equal(instance,1);"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.q29=0;","frame_eqs_str":"a.warp=0;a.q29=.6*(a.bass+a.treb+a.mid);","pixel_eqs_str":"a.warp=.75*above(a.rad,.2-.05*a.treb)*below(a.rad,.25-.05*a.treb)*(a.bass_att-.5);","init_eqs_eel":"","frame_eqs_eel":"warp = 0;\nq29=(bass+treb+mid)*.6;","pixel_eqs_eel":"warp = .75*above(rad,.2-.05*treb)*below(rad,.25-.05*treb)*(bass_att-.5);","warp":" shader_body { \n  vec3 rsamp_1;\n  vec3 ret_2;\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_noise_lq, (((uv * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy));\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_main, uv);\n  ret_2 = tmpvar_4.xyz;\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_main, (uv + ((\n    (tmpvar_3.xy - 0.5)\n   * 12.0) * texsize.zw)));\n  vec3 tmpvar_6;\n  tmpvar_6 = tmpvar_5.xyz;\n  rsamp_1 = tmpvar_6;\n  float tmpvar_7;\n  vec2 x_8;\n  x_8 = (tmpvar_4.xy - uv);\n  tmpvar_7 = sqrt(dot (x_8, x_8));\n  float tmpvar_9;\n  vec2 x_10;\n  x_10 = (tmpvar_5.xy - uv);\n  tmpvar_9 = sqrt(dot (x_10, x_10));\n  if ((tmpvar_7 > tmpvar_9)) {\n    ret_2.xy = tmpvar_6.xy;\n  };\n  vec4 tmpvar_11;\n  tmpvar_11 = texture (sampler_main, (uv + ((\n    (tmpvar_3.zw - 0.5)\n   * 48.0) * texsize.zw)));\n  rsamp_1 = tmpvar_11.xyz;\n  float tmpvar_12;\n  vec2 x_13;\n  x_13 = (ret_2.xy - uv);\n  tmpvar_12 = sqrt(dot (x_13, x_13));\n  float tmpvar_14;\n  vec2 x_15;\n  x_15 = (tmpvar_11.xy - uv);\n  tmpvar_14 = sqrt(dot (x_15, x_15));\n  if ((tmpvar_12 > tmpvar_14)) {\n    ret_2.xy = rsamp_1.xy;\n  };\n  ret_2.z = texture (sampler_main, ret_2.xy).z;\n  ret_2.z = (ret_2.z - ((q29 * roam_sin.w) * 0.005));\n  ret_2.x = (ret_2.x - ((q29 * roam_sin.z) * 0.005));\n  ret_2.y = (ret_2.y - ((q29 * roam_sin.y) * 0.005));\n  if ((((ret_2.z + ret_2.y) + ret_2.x) < 0.3)) {\n    ret_2 = (ret_2 * 0.1);\n  };\n  vec4 tmpvar_16;\n  tmpvar_16.w = 1.0;\n  tmpvar_16.xyz = ret_2;\n  ret = tmpvar_16.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  vec3 ret_2;\n  uv_1 = (0.05 + (0.9 * uv));\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_main, uv_1);\n  vec2 theta_4;\n  theta_4 = (3.0 * (tmpvar_3.zz + tmpvar_3.yx));\n  uv_1 = (uv_1 + (-0.05 * (\n    sin(theta_4)\n   / \n    cos(theta_4)\n  )));\n  ret_2 = (texture (sampler_main, uv_1).xyz * 4.0);\n  ret_2 = (ret_2 - ((\n    (texture (sampler_blur1, uv_1).xyz * scale1)\n   + bias1) * 3.0));\n  ret_2 = (ret_2 * (1.0 + (0.12 * \n    ((texture (sampler_noise_lq, (rand_frame.xy + (\n      (uv_1 * texsize.xy)\n     * texsize_noise_lq.zw))).xxx * 2.0) - 1.0)\n  )));\n  ret_2 = ((pow (ret_2, vec3(0.5, 0.5, 0.7)) - 0.1) * 1.1);\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = ret_2;\n  ret = tmpvar_5.xyz;\n }","warp_hlsl":"shader_body\n{\nfloat2 pixelsize = texsize.zw;\nfloat2 uvm = uv;\n\nfloat2 noise_uv = uv*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\nfloat4 noiseVal = tex2D(sampler_noise_lq, noise_uv);\n\nret.xyz = saturate(tex2D( sampler_main,uvm).xyz*float3(1,1,1) - float3(.0,.0,.0));\nret.xyz = tex2D( sampler_main,uvm).xyz;\n\n\nfloat3 rsamp = tex2D(sampler_main,uvm + (noiseVal.xy-.5)*12*pixelsize).xyz;\nif (length(ret.xy - uvm) > length(rsamp.xy - uvm)) {\nret.xy = rsamp.xy;\n}\n\nrsamp = tex2D(sampler_main,uvm + (noiseVal.zw-.5)*48*pixelsize).xyz;\nif (length(ret.xy - uvm) > length(rsamp.xy - uvm)) {\nret.xy = rsamp.xy;\n}\n\nret.z = tex2D(sampler_main,ret.xy).z;\n\nret.z -= q29*roam_sin.w*.005;\nret.x -= q29*roam_sin.z*.005;\nret.y -= q29*roam_sin.y*.005;\n\nif(ret.z+ret.y+ret.x<.3)ret*=.1;\n}","comp_hlsl":"shader_body\n{\n    uv = 0.05 + 0.9*uv;\n\nret = GetPixel(uv);\n    uv += -.05*tan(3*(ret.zz+ret.yx));\n    \n\n    // equivalent of a laplacian: [center*4 - each of the 4 neighbors*1]\n    ret = 0;\n    ret += tex2D(sampler_main, uv ).xyz*4;\n    ret -= GetBlur1(uv)*3;\n\n    // little bit of noise:\n    ret *= 1 + 0.12*(tex2D(sampler_noise_lq, rand_frame.xy \n           + uv*texsize.xy*texsize_noise_lq.zw).xxx*2-1);\n \n    // palettize:\n    ret = pow(ret, float3(0.5, 0.5, 0.7));\n\n    ret = (ret-0.1)*1.1;\n   \n    //ret.xyz *= 2; // a little bit of overbright\n//ret=1-ret;\n}\n\n"}