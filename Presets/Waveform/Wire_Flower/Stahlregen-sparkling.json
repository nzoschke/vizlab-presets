{"version":2,"baseVals":{"rating":5,"wave_dots":1,"wave_thick":1,"modwavealphabyvolume":1,"wrap":0,"wave_scale":2.988,"wave_smoothing":0.36,"wave_mystery":-0.2,"modwavealphastart":0,"modwavealphaend":2,"rot":0.04,"warp":0.01,"ob_a":1,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.fade=0;a.count=0;a.mc=0;a.is_beat=0;a.timp=0;a.reha=0;a.bimp=0;a.mimp=0;a.tc=0;a.bc=0;","frame_eqs_str":"a.warp=0;a.count+=1;a.bc+=a.bass;a.tc+=a.treb;a.mc+=a.mid;a.bimp=.00001<Math.abs(above(3.25*a.bass,a.bass+a.treb+a.mid))?1:0;a.timp=.00001<Math.abs(above(2.75*a.treb,a.bass+a.treb+a.mid))?1:0;a.mimp=.00001<Math.abs(above(2.75*a.mid,a.bass+a.treb+a.mid))?1:0;a.is_beat=.00001<Math.abs(above(.75*a.bass,div(a.bc,a.count)))?1*a.bimp:.00001<Math.abs(above(.75*a.treb,div(a.tc,a.count)))?1*a.timp:.00001<Math.abs(above(.75*a.mid,div(a.mc,a.count)))?1*a.mimp:0;a.is_beat=.00001<Math.abs(above(a.reha,\n0))?0:a.is_beat;a.reha=.00001<Math.abs(a.is_beat)?.25*a.fps:.00001<Math.abs(below(a.reha,1))?0:a.reha-1;a.fade=.00001<Math.abs(a.is_beat)?25+rand(50)*(a.bass_att+a.treb_att+a.mid_att):.95*a.fade-1;a.fade=.00001<Math.abs(below(a.fade,1))?0:a.fade;a.zoom=1+.001*a.fade;","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"warp = 0;\n\n// <<-- Stahlregen's (off)beat detection \n// frame counter for average\ncount = count+1;\n// counters of the bass/treb/mid values for average\nbc = bc+bass;\ntc = tc+treb;\nmc = mc+mid;\n// checking for impact: highest of bass/mid/treb has impact\nbimp = if(above(3.25*bass,bass+treb+mid),1,0);\ntimp = if(above(2.75*treb,bass+treb+mid),1,0);\nmimp = if(above(2.75*mid,bass+treb+mid),1,0);\n// checking for beats: compare adjusted buffered \n// vs. average value and check for impact\nis_beat = if(above(.75*bass,bc/count),1*bimp,\nif(above(.75*treb,tc/count),1*timp,\nif(above(.75*mid,mc/count),1*mimp,\n0))); \n// restricting max number of beats per second (fraction of fps)\nis_beat = if(above(reha,0),0,is_beat);\nreha = if(is_beat,fps*.25,if(below(reha,1),0,reha-1));\n// end of (off)beat detection -->\n\nfade = if(is_beat,25+rand(50)*(bass_att+treb_att+mid_att),.95*fade-1);\n\nfade = if(below(fade,1),0,fade);\n\nzoom = 1+.001*fade;","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_fc_main, uv);\n  ret_1.yz = tmpvar_2.yz;\n  vec2 tmpvar_3;\n  tmpvar_3.y = 0.0;\n  float tmpvar_4;\n  tmpvar_4 = (0.5 + rad);\n  tmpvar_3.x = tmpvar_4;\n  vec2 tmpvar_5;\n  tmpvar_5.y = 0.0;\n  tmpvar_5.x = tmpvar_4;\n  vec2 tmpvar_6;\n  tmpvar_6.x = 0.0;\n  tmpvar_6.y = tmpvar_4;\n  vec2 tmpvar_7;\n  tmpvar_7.x = 0.0;\n  tmpvar_7.y = tmpvar_4;\n  ret_1.x = (tmpvar_2.x + max (max (texture (sampler_main, \n    (uv + (tmpvar_3 * texsize.zw))\n  ).x, texture (sampler_main, \n    (uv - (tmpvar_5 * texsize.zw))\n  ).x), max (texture (sampler_main, \n    (uv + (tmpvar_6 * texsize.zw))\n  ).x, texture (sampler_main, \n    (uv - (tmpvar_7 * texsize.zw))\n  ).x)));\n  ret_1.x = (ret_1.x - texture (sampler_main, uv).x);\n  ret_1 = ((ret_1 * vec3(0.98, 0.0, 0.0)) - 0.03);\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = ret_1;\n  ret = tmpvar_8.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1 = texture (sampler_main, fract(uv));\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = mix (tmpvar_1.xxx, (dot (tmpvar_1.xxx, vec3(0.32, 0.49, 0.29)) * (\n    (hue_shader * 7.0)\n   - 5.25)), vec3((0.9 - rad)));\n  ret = tmpvar_2.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_fc_main, uv ).xyz;\n\n    \nret.x += max(\nmax(GetPixel(uv+float2(.5+rad,0)*texsize.zw).x,GetPixel(uv-float2(.5+rad,0)*texsize.zw).x),\nmax(GetPixel(uv+float2(0,.5+rad)*texsize.zw).x,GetPixel(uv-float2(0,.5+rad)*texsize.zw).x));\nret.x -= GetPixel(uv).x;\n    // darken (decay) over time\nret = ret*float3(.98,0,0)-.03; //or try: ret -= 0.004;\n}","comp_hlsl":"shader_body\n{\n    ret = tex2D(sampler_main, frac(uv)).xxx;\n    ret = lerp(ret,lum(ret)*((hue_shader*7)-5.25),.9-rad);\n    //ret = sqrt(ret); //gamma\n}"}