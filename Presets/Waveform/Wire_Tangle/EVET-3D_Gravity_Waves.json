{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"wave_thick":1,"wave_brighten":0,"darken":1,"wave_a":1.059,"wave_scale":1.821,"wave_smoothing":0,"modwavealphastart":0.91,"modwavealphaend":1.3,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_g":0.94,"wave_b":0.97,"wave_y":0.49,"ob_size":0,"ob_a":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"textured":1,"rad":2.12158,"tex_ang":0.06283,"tex_zoom":0.46943,"g":1,"b":1,"r2":0.99,"b2":1},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.sw2=0;a.index2=0;a.q25=0;a.index=0;a.q12=0;a.q18=0;a.q22=0;a.q21=0;a.q13=0;a.sw3=0;a.q15=0;a.q6=0;a.dec_med=0;a.q5=0;a.mindev=0;a.trel=0;a.q9=0;a.t0a=0;a.itrel=0;a.my=0;a.is_beat=0;a.q31=0;a.q24=0;a.dec_slow=0;a.q11=0;a.q10=0;a.sdev=0;a.ma=0;a.q4=0;a.spb=0;a.spb_=0;a.q16=0;a.q26=0;a.avg=0;a.mx=0;a.q19=0;a.beat=0;a.q17=0;a.trel2=0;a.peak=0;a.jmp=0;a.itrel_=0;a.q2=0;a.q27=0;a.q14=0;a.sw1=0;a.tmp=0;a.q3=0;a.t0=0;a.q7=0;a.q28=0;a.q30=0;a.q20=0;a.q8=0;a.avg=1;a.index=Math.floor(rand(8));\na.index2=Math.floor(rand(8));a.ran=1;a.spb_=.3;a.sdev=.1;a.trel2=div(rand(100),100);","frame_eqs_str":"a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.98,div(30,a.fps));a.beat=a.bass+a.mid+a.treb;a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.2+a.avg+a.peak)*above(a.time,a.t0+.1);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,16);a.index2=mod(a.index2+a.is_beat*bnot(a.index),12);a.spb=Math.min(a.t0-a.t0a+.01,2);a.t0a=a.t0;a.spb_=.00001<Math.abs(a.is_beat)?.9*a.spb_+.1*a.spb:a.spb_;\na.mindev=Math.min(Math.min(Math.abs(a.spb-a.spb_),Math.abs(2*a.spb-a.spb_)),Math.abs(a.spb-2*a.spb_));a.sdev=.00001<Math.abs(a.is_beat)?.9*a.sdev+.1*pow(a.mindev+.02,2):a.sdev;a.q20=a.avg;a.q21=a.beat;a.q22=a.peak+.1;a.q24=a.is_beat;a.q27=a.index;a.q28=a.index2;a.trel+=4*div(div(1,a.fps),a.spb_);a.itrel=Math.floor(a.trel);a.q25=above(a.itrel,a.itrel_);a.q30=mod(a.itrel,2);a.itrel_=a.itrel;a.q31=div(a.trel,8)-Math.floor(div(a.trel,8));a.ma+=div(a.peak,a.fps);a.mx=a.mx*a.dec_med+(1-a.dec_med)*Math.cos(a.ma);\na.my=a.my*a.dec_med+(1-a.dec_med)*Math.sin(a.ma+div(a.trel,16));a.q15=a.mx;a.q16=a.my;a.q17=a.ma;a.sw1=.00001<Math.abs(a.sw1)?bnot(a.q24*bnot(Math.floor(rand(10)))):a.q24*bnot(Math.floor(rand(20)));a.sw2=.00001<Math.abs(a.sw2)?bnot(a.q24*bnot(Math.floor(rand(40)))):a.q24*bnot(Math.floor(rand(80)));a.sw3=.00001<Math.abs(a.sw3)?bnot(a.q24*bnot(Math.floor(rand(10)))):a.q24*bnot(Math.floor(rand(100+1E4*a.sdev)));a.q6=Math.sin(div(a.time,15))*Math.sin(div(a.time,27))*.1;a.q10=Math.sin(div(a.time,8));a.q10=\na.q10*a.q10*.1;a.q11=1.5+Math.sin(div(a.time,7.8));a.q12=.00001<Math.abs(below(a.sdev,.02)*bnot(a.q8))?a.q25:1;a.q13=.5+Math.sin(div(a.time,17));a.q19=.4*Math.sin(div(a.time,5.3));a.q3=a.sw1;a.q4=div(.02,a.sdev);a.q5=.4*Math.max(Math.min(4*Math.sin(div(a.trel,64))-3,1),0);a.q7=below(a.sdev,.004)*mod(a.index2,2);a.q2=Math.abs(a.q19)*sqrt(a.q15*a.q15+a.q16*a.q16);a.trel2+=div(.003*a.q22*a.q22,a.fps);a.tmp=Math.sin(a.trel2);a.tmp=20*a.tmp-19;a.q8=a.tmp*above(a.tmp,0)*(div(4,Math.max(a.q22-4,.2))+4);\na.q26=above(a.q22,16)*(a.q22-16)*2;a.tmp=div(a.index2,6);a.q14=6*Math.abs(a.tmp-Math.floor(a.tmp)-.5)+1;a.tmp=Math.sin(3.14*div(a.trel,4));a.jmp+=8*div(above(a.tmp,.5)*a.tmp,a.fps)*a.sw2;a.q9=a.jmp*equal(a.q14,1)*below(a.sdev,.04)+a.time*above(Math.sin(div(a.q17,23)),.9);a.q18=div(a.tmp*a.tmp,2)*bnot(a.q8)*a.sw3;a.monitor=a.avg;a.rot=.003;a.warp=.1;a.zoom=1+div(a.avg-Math.log(a.sdev),200)+Math.min(a.q26,1);","pixel_eqs_str":"","init_eqs_eel":"avg = 1;\nindex = int(rand(8));\nindex2 = int(rand(8));\nran = 1;\nspb_=.3;\nsdev = .1;\ntrel2 = rand (100)/100;","frame_eqs_eel":"dec_med = pow (0.9, 30/fps); dec_slow = pow (0.98, 30/fps);\nbeat = bass+mid+treb;\navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .2+avg+peak) * above (time, t0+.1);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %16;\nindex2 = (index2 + is_beat*bnot(index))%12;\n\nspb = min(t0-t0a + .01,2); t0a = t0;\nspb_ = if(is_beat,spb_ *.9 +.1*spb, spb_);\nmindev = min(min(abs(spb-spb_),abs(spb*2-spb_)),abs(spb-spb_*2));\nsdev = if(is_beat,sdev * .9 + .1*pow(mindev+.02,2),sdev);\n\nq20 = avg; q21 = beat;\nq22 = peak+.1; \nq24 = is_beat;\nq27 = index; q28 = index2;\n\ntrel = trel + 1/fps/spb_*4; itrel = int(trel);\nq25 =  above(itrel, itrel_);\nq30 = itrel%2;\nitrel_ = itrel;\nq31 = trel/8-int(trel/8);\n\nma = ma + peak/fps ;\nmx=mx*dec_med+(1-dec_med)*cos(ma);\nmy=my*dec_med+(1-dec_med)*sin(ma+trel/16);\nq15 = mx ; q16 = my ; q17 = ma;\n\n//first par: off; second: on\nsw1 = if(sw1,bnot(q24*bnot(int(rand(10)))),q24*bnot(int(rand(20))));\nsw2 = if(sw2,bnot(q24*bnot(int(rand(40)))),q24*bnot(int(rand(80))));\nsw3 = if(sw3,bnot(q24*bnot(int(rand(10)))),q24*bnot(int(rand(100+10000*sdev))));\n\n//********* variation parameters warp shader\nq6 = sin(time/15)*sin(time/27)*.1; //zz weighting\nq10 = sin(time/8); //ring\nq10 = q10*q10*.1; \nq11 = 1.5+sin(time/7.8); //zoom uv2\nq12 = if(below(sdev,.02)*bnot(q8),q25,1); //go\nq13 = .5+sin(time/17); //pow noise \nq19 = sin(time/5.3)*.4; //sunpos \n\n//********* variation parameters comp shader\nq3 = sw1;//mirror \nq4 = .02/sdev; //unused ###\nq5 = max(min(4*sin(trel/64)-3,1),0)*.4; //water\nq7 = below(sdev,.004)*(index2%2); //flash\nq2 = abs(q19)*sqrt(q15*q15+q16*q16); //avoid black - frame eq2\n\ntrel2 = trel2+.003*q22*q22/fps;\ntmp = sin(trel2);\ntmp = 20*tmp-19;\nq8 =  tmp*above(tmp,0)*(4/max(q22-4,0.2)+4); // dyn zoom\nq26 = above(q22,16)*(q22-16)*2; //# ok???\n\ntmp = index2/6;\nq14 = abs((tmp-int(tmp))-.5)*6+1; //ang multi ####\n\ntmp =sin(trel/4*3.14); //sym rot\njmp = jmp + above(tmp,.5)*tmp/fps*8*sw2;\nq9 = jmp*equal(q14,1)*below(sdev,0.04)+time*above(sin(q17/23),.9);\nq18 = tmp*tmp/2 * bnot(q8) * sw3; //waber\n\nmonitor = avg;\nrot = .003;\nwarp = .1; \nzoom = 1+(avg-log(sdev))/200+min(q26,1);\n//dx = tmp*.01*above(abs(tmp),.95);","pixel_eqs_eel":"","warp":"float lav_gnd;\nfloat xlat_mutablelavmask;\nvec3 xlat_mutableret1;\nfloat xlat_mutabletmp;\nvec2 xlat_mutableuv1;\n shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1.x = q5;\n  tmpvar_1.y = q6;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3.x = 0.5;\n  tmpvar_3.y = q7;\n  xlat_mutableuv1 = ((uv * aspect.xy) - tmpvar_3);\n  mat2 tmpvar_4;\n  tmpvar_4[uint(0)].x = q1;\n  tmpvar_4[uint(0)].y = -(q2);\n  tmpvar_4[1u].x = q2;\n  tmpvar_4[1u].y = q1;\n  xlat_mutableuv1 = (xlat_mutableuv1 * tmpvar_4);\n  float tmpvar_5;\n  tmpvar_5 = -(q4);\n  vec2 rs_6;\n  float z_7;\n  z_7 = (8.0 / (xlat_mutableuv1.y - 0.5));\n  float tmpvar_8;\n  tmpvar_8 = clamp (z_7, -32.0, 1.0);\n  z_7 = tmpvar_8;\n  rs_6.x = (xlat_mutableuv1.x * tmpvar_8);\n  rs_6.y = tmpvar_8;\n  mat2 tmpvar_9;\n  tmpvar_9[uint(0)].x = q3;\n  tmpvar_9[uint(0)].y = tmpvar_5;\n  tmpvar_9[1u].x = q4;\n  tmpvar_9[1u].y = q3;\n  rs_6 = (rs_6 * tmpvar_9);\n  vec3 tmpvar_10;\n  tmpvar_10.xy = ((-(rs_6) / 64.0) + (tmpvar_1 / -128.0));\n  tmpvar_10.z = tmpvar_8;\n  vec2 uvi_11;\n  uvi_11 = (tmpvar_10.xy * 2.0);\n  float tmpvar_12;\n  tmpvar_12 = (0.006 * time);\n  xlat_mutabletmp = clamp (dot ((texture (sampler_noise_hq, \n    (tmpvar_10.xy + (0.03 * ((\n      (dot (texture (sampler_noise_hq, uvi_11), vec4(0.32, 0.49, 0.29, 0.0)) + (dot (texture (sampler_noise_hq, (\n        (uvi_11 * 2.0)\n       + tmpvar_12)), vec4(0.32, 0.49, 0.29, 0.0)) / 2.0))\n     + \n      (dot (texture (sampler_noise_hq, ((uvi_11 * 4.0) + tmpvar_12)), vec4(0.32, 0.49, 0.29, 0.0)) / 4.0)\n    ) + (\n      dot (texture (sampler_noise_hq, ((uvi_11 * 8.0) + (4.0 * tmpvar_12))), vec4(0.32, 0.49, 0.29, 0.0))\n     / 8.0))))\n  ) - 0.5), vec4(0.32, 0.49, 0.29, 0.0)), 0.0, 1.0);\n  vec2 rs_13;\n  float z_14;\n  z_14 = (8.0 / ((xlat_mutableuv1.y - \n    (xlat_mutabletmp * 0.03)\n  ) - 0.5));\n  float tmpvar_15;\n  tmpvar_15 = clamp (z_14, -32.0, 1.0);\n  z_14 = tmpvar_15;\n  rs_13.x = (xlat_mutableuv1.x * tmpvar_15);\n  rs_13.y = tmpvar_15;\n  mat2 tmpvar_16;\n  tmpvar_16[uint(0)].x = q3;\n  tmpvar_16[uint(0)].y = tmpvar_5;\n  tmpvar_16[1u].x = q4;\n  tmpvar_16[1u].y = q3;\n  rs_13 = (rs_13 * tmpvar_16);\n  vec3 tmpvar_17;\n  tmpvar_17.xy = ((-(rs_13) / 64.0) + (tmpvar_1 / -128.0));\n  tmpvar_17.z = tmpvar_15;\n  vec2 uvi_18;\n  uvi_18 = (tmpvar_17.xy * 2.0);\n  xlat_mutabletmp = clamp (dot ((texture (sampler_noise_hq, \n    (tmpvar_17.xy + (0.03 * ((\n      (dot (texture (sampler_noise_hq, uvi_18), vec4(0.32, 0.49, 0.29, 0.0)) + (dot (texture (sampler_noise_hq, (\n        (uvi_18 * 2.0)\n       + tmpvar_12)), vec4(0.32, 0.49, 0.29, 0.0)) / 2.0))\n     + \n      (dot (texture (sampler_noise_hq, ((uvi_18 * 4.0) + tmpvar_12)), vec4(0.32, 0.49, 0.29, 0.0)) / 4.0)\n    ) + (\n      dot (texture (sampler_noise_hq, ((uvi_18 * 8.0) + (4.0 * tmpvar_12))), vec4(0.32, 0.49, 0.29, 0.0))\n     / 8.0))))\n  ) - 0.5), vec4(0.32, 0.49, 0.29, 0.0)), 0.0, 1.0);\n  vec2 rs_19;\n  float z_20;\n  z_20 = (8.0 / ((xlat_mutableuv1.y - \n    (xlat_mutabletmp * 0.03)\n  ) - 0.5));\n  float tmpvar_21;\n  tmpvar_21 = clamp (z_20, -32.0, 1.0);\n  z_20 = tmpvar_21;\n  rs_19.x = (xlat_mutableuv1.x * tmpvar_21);\n  rs_19.y = tmpvar_21;\n  mat2 tmpvar_22;\n  tmpvar_22[uint(0)].x = q3;\n  tmpvar_22[uint(0)].y = tmpvar_5;\n  tmpvar_22[1u].x = q4;\n  tmpvar_22[1u].y = q3;\n  rs_19 = (rs_19 * tmpvar_22);\n  vec3 tmpvar_23;\n  tmpvar_23.xy = ((-(rs_19) / 64.0) + (tmpvar_1 / -128.0));\n  tmpvar_23.z = tmpvar_21;\n  vec2 uvi_24;\n  uvi_24 = (tmpvar_23.xy * 2.0);\n  xlat_mutabletmp = clamp (dot ((texture (sampler_noise_hq, \n    (tmpvar_23.xy + (0.03 * ((\n      (dot (texture (sampler_noise_hq, uvi_24), vec4(0.32, 0.49, 0.29, 0.0)) + (dot (texture (sampler_noise_hq, (\n        (uvi_24 * 2.0)\n       + tmpvar_12)), vec4(0.32, 0.49, 0.29, 0.0)) / 2.0))\n     + \n      (dot (texture (sampler_noise_hq, ((uvi_24 * 4.0) + tmpvar_12)), vec4(0.32, 0.49, 0.29, 0.0)) / 4.0)\n    ) + (\n      dot (texture (sampler_noise_hq, ((uvi_24 * 8.0) + (4.0 * tmpvar_12))), vec4(0.32, 0.49, 0.29, 0.0))\n     / 8.0))))\n  ) - 0.5), vec4(0.32, 0.49, 0.29, 0.0)), 0.0, 1.0);\n  float tmpvar_25;\n  tmpvar_25 = clamp ((pow (xlat_mutabletmp, 1.4) * sign(xlat_mutabletmp)), 0.0, 1.0);\n  xlat_mutabletmp = tmpvar_25;\n  vec2 uvi_26;\n  uvi_26 = (tele * xlat_mutableuv1);\n  vec2 rs_27;\n  float z_28;\n  z_28 = ((8.0 / uvi_26.y) * q8);\n  float tmpvar_29;\n  float tmpvar_30;\n  tmpvar_30 = (80.0 * hordist);\n  tmpvar_29 = clamp (z_28, -8.0, tmpvar_30);\n  z_28 = tmpvar_29;\n  rs_27.x = (uvi_26.x * tmpvar_29);\n  rs_27.y = tmpvar_29;\n  mat2 tmpvar_31;\n  tmpvar_31[uint(0)].x = q3;\n  tmpvar_31[uint(0)].y = tmpvar_5;\n  tmpvar_31[1u].x = q4;\n  tmpvar_31[1u].y = q3;\n  rs_27 = (rs_27 * tmpvar_31);\n  vec3 tmpvar_32;\n  tmpvar_32.xy = ((rs_27 / 64.0) + tmpvar_1);\n  tmpvar_32.z = tmpvar_29;\n  lav_gnd = -(((\n    ((((\n      clamp ((texture (sampler_noise_hq, (tmpvar_32.xy / 16.0)) - 0.5), vec4(-0.25, -0.25, -0.25, -0.25), vec4(0.25, 0.25, 0.25, 0.25))\n     * 2.0) + (\n      (texture (sampler_noise_hq, (tmpvar_32.xy / 8.0)) - 0.5)\n     / 4.0)) + (texture (sampler_noise_hq, vec2((\n      (tmpvar_32.x - sin((tmpvar_32.y * 2.0)))\n     / 2.0))) / 12.0)).x / 4.0)\n   * 3.5) / sqrt(tmpvar_29)));\n  vec2 uvi_33;\n  uvi_33 = (tele * xlat_mutableuv1);\n  vec2 rs_34;\n  float z_35;\n  z_35 = ((8.0 / uvi_33.y) * (q8 - (4.0 * lav_gnd)));\n  float tmpvar_36;\n  tmpvar_36 = clamp (z_35, -8.0, tmpvar_30);\n  z_35 = tmpvar_36;\n  rs_34.x = (uvi_33.x * tmpvar_36);\n  rs_34.y = tmpvar_36;\n  mat2 tmpvar_37;\n  tmpvar_37[uint(0)].x = q3;\n  tmpvar_37[uint(0)].y = tmpvar_5;\n  tmpvar_37[1u].x = q4;\n  tmpvar_37[1u].y = q3;\n  rs_34 = (rs_34 * tmpvar_37);\n  vec3 tmpvar_38;\n  tmpvar_38.xy = ((rs_34 / 64.0) + tmpvar_1);\n  tmpvar_38.z = tmpvar_36;\n  lav_gnd = (lav_gnd - ((\n    ((((\n      clamp ((texture (sampler_noise_hq, (tmpvar_38.xy / 16.0)) - 0.5), vec4(-0.25, -0.25, -0.25, -0.25), vec4(0.25, 0.25, 0.25, 0.25))\n     * 2.0) + (\n      (texture (sampler_noise_hq, (tmpvar_38.xy / 8.0)) - 0.5)\n     / 4.0)) + (texture (sampler_noise_hq, vec2((\n      (tmpvar_38.x - sin((tmpvar_38.y * 2.0)))\n     / 2.0))) / 12.0)).x / 4.0)\n   * 3.5) / sqrt(tmpvar_36)));\n  vec2 uvi_39;\n  uvi_39 = (tele * xlat_mutableuv1);\n  vec2 rs_40;\n  float z_41;\n  z_41 = ((8.0 / uvi_39.y) * (q8 - (4.0 * lav_gnd)));\n  float tmpvar_42;\n  tmpvar_42 = clamp (z_41, -8.0, tmpvar_30);\n  z_41 = tmpvar_42;\n  rs_40.x = (uvi_39.x * tmpvar_42);\n  rs_40.y = tmpvar_42;\n  mat2 tmpvar_43;\n  tmpvar_43[uint(0)].x = q3;\n  tmpvar_43[uint(0)].y = tmpvar_5;\n  tmpvar_43[1u].x = q4;\n  tmpvar_43[1u].y = q3;\n  rs_40 = (rs_40 * tmpvar_43);\n  vec3 tmpvar_44;\n  tmpvar_44.xy = ((rs_40 / 64.0) + tmpvar_1);\n  tmpvar_44.z = tmpvar_42;\n  lav_gnd = (lav_gnd - ((\n    ((((\n      clamp ((texture (sampler_noise_hq, (tmpvar_44.xy / 16.0)) - 0.5), vec4(-0.25, -0.25, -0.25, -0.25), vec4(0.25, 0.25, 0.25, 0.25))\n     * 2.0) + (\n      (texture (sampler_noise_hq, (tmpvar_44.xy / 8.0)) - 0.5)\n     / 4.0)) + (texture (sampler_noise_hq, vec2((\n      (tmpvar_44.x - sin((tmpvar_44.y * 2.0)))\n     / 2.0))) / 12.0)).x / 4.0)\n   * 3.5) / sqrt(tmpvar_42)));\n  vec2 uvi_45;\n  uvi_45 = (tele * xlat_mutableuv1);\n  vec2 rs_46;\n  float z_47;\n  z_47 = ((8.0 / uvi_45.y) * (q8 - (4.0 * lav_gnd)));\n  float tmpvar_48;\n  tmpvar_48 = clamp (z_47, -8.0, tmpvar_30);\n  z_47 = tmpvar_48;\n  rs_46.x = (uvi_45.x * tmpvar_48);\n  rs_46.y = tmpvar_48;\n  mat2 tmpvar_49;\n  tmpvar_49[uint(0)].x = q3;\n  tmpvar_49[uint(0)].y = tmpvar_5;\n  tmpvar_49[1u].x = q4;\n  tmpvar_49[1u].y = q3;\n  rs_46 = (rs_46 * tmpvar_49);\n  vec3 tmpvar_50;\n  tmpvar_50.xy = ((rs_46 / 64.0) + tmpvar_1);\n  tmpvar_50.z = tmpvar_48;\n  float tmpvar_51;\n  tmpvar_51 = (((\n    clamp ((texture (sampler_noise_hq, (tmpvar_50.xy / 16.0)) - 0.5), vec4(-0.25, -0.25, -0.25, -0.25), vec4(0.25, 0.25, 0.25, 0.25))\n   * 2.0) + (\n    (texture (sampler_noise_hq, (tmpvar_50.xy / 8.0)) - 0.5)\n   / 4.0)) + (texture (sampler_noise_hq, vec2((\n    (tmpvar_50.x - sin((tmpvar_50.y * 2.0)))\n   / 2.0))) / 12.0)).x;\n  lav_gnd = (lav_gnd - ((\n    (tmpvar_51 / 4.0)\n   * 3.5) / sqrt(tmpvar_48)));\n  vec2 uvi_52;\n  uvi_52 = (tele * xlat_mutableuv1);\n  vec2 rs_53;\n  float z_54;\n  z_54 = ((8.0 / uvi_52.y) * (q8 - (4.0 * lav_gnd)));\n  float tmpvar_55;\n  tmpvar_55 = clamp (z_54, -8.0, tmpvar_30);\n  z_54 = tmpvar_55;\n  rs_53.x = (uvi_52.x * tmpvar_55);\n  rs_53.y = tmpvar_55;\n  mat2 tmpvar_56;\n  tmpvar_56[uint(0)].x = q3;\n  tmpvar_56[uint(0)].y = tmpvar_5;\n  tmpvar_56[1u].x = q4;\n  tmpvar_56[1u].y = q3;\n  rs_53 = (rs_53 * tmpvar_56);\n  vec3 tmpvar_57;\n  tmpvar_57.xy = ((rs_53 / 64.0) + tmpvar_1);\n  tmpvar_57.z = tmpvar_55;\n  vec3 tmpvar_58;\n  tmpvar_58 = (tmpvar_57 + vec3(-0.1, 0.0, 0.0));\n  xlat_mutablelavmask = (clamp ((\n    (4.0 * hordist)\n   - \n    (tmpvar_55 / 18.0)\n  ), 0.0, 1.0) * float((tmpvar_55 >= 0.0)));\n  xlat_mutableret1 = ((clamp (\n    (1.0 - tmpvar_25)\n  , 0.0, 1.0) * uv.y) * vec3(0.3, 0.4, 1.0));\n  xlat_mutableret1 = (xlat_mutableret1 + (vec3(tmpvar_25) * 2.0));\n  xlat_mutableret1 = (xlat_mutableret1 * clamp ((1.0 - xlat_mutablelavmask), 0.0, 1.0));\n  xlat_mutableret1 = (xlat_mutableret1 + ((\n    (texture (sampler_noise_lq, (tmpvar_57 * 8.0).xy).x * (0.3 + (4.0 * clamp (\n      ((0.2 + tmpvar_51) - (((\n        clamp ((texture (sampler_noise_hq, (tmpvar_58.xy / 16.0)) - 0.5), vec4(-0.25, -0.25, -0.25, -0.25), vec4(0.25, 0.25, 0.25, 0.25))\n       * 2.0) + (\n        (texture (sampler_noise_hq, (tmpvar_58.xy / 8.0)) - 0.5)\n       / 4.0)) + (texture (sampler_noise_hq, vec2((\n        (tmpvar_58.x - sin((tmpvar_58.y * 2.0)))\n       / 2.0))) / 12.0)).x)\n    , 0.0, 1.0))))\n   * xlat_mutablelavmask) * vec3(1.0, 0.4, 0.0)));\n  ret_2 = (1.0 - exp((\n    ((-(xlat_mutableret1) * 2.0) + 0.1)\n   + \n    (0.1 * sin((time / 7.0)))\n  )));\n  vec3 tmpvar_59;\n  tmpvar_59.x = (xlat_mutableuv1.y - tmpvar_23.x);\n  tmpvar_59.y = (tmpvar_23.x + xlat_mutableuv1.x);\n  tmpvar_59.z = (uv.x * uv.y);\n  vec4 tmpvar_60;\n  tmpvar_60 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * tmpvar_59) * (\n    (q27 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q29)));\n  if (((ret_2.x > (q21 * roam_cos.y)) && (ret_2.x <= (q24 * roam_sin.x)))) {\n    ret_2.y = (ret_2.y - (tmpvar_60.x * 0.5));\n  };\n  if (((ret_2.y > (q22 * roam_sin.x)) && (ret_2.y <= (q25 * roam_cos.x)))) {\n    ret_2.z = (ret_2.z - (tmpvar_60.y * 0.5));\n  };\n  if (((ret_2.z > (q23 * roam_cos.x)) && (ret_2.z <= (q26 * roam_sin.y)))) {\n    ret_2.x = (ret_2.x - (tmpvar_60.z * 0.5));\n  };\n  vec4 tmpvar_61;\n  tmpvar_61.w = 1.0;\n  tmpvar_61.xyz = ret_2;\n  ret = tmpvar_61.xyz;\n }","comp":"vec3 xlat_mutableneu;\nvec3 xlat_mutableret1;\n shader_body { \n  vec2 uv_1;\n  float inten_2;\n  float dist_3;\n  vec2 uv2_4;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  float tmpvar_5;\n  tmpvar_5 = (time / 2.0);\n  dist_3 = (1.0 - fract(tmpvar_5));\n  inten_2 = ((sqrt(dist_3) * (1.0 - dist_3)) * 8.0);\n  vec2 tmpvar_6;\n  tmpvar_6.x = q1;\n  tmpvar_6.y = q2;\n  vec2 tmpvar_7;\n  tmpvar_7 = fract(((\n    ((3.0 * uv_1) * dist_3)\n   + 0.5) + (tmpvar_6 * 0.05)));\n  xlat_mutableneu = (texture (sampler_main, tmpvar_7).xyz - ((texture (sampler_blur1, \n    (tmpvar_7 + 0.003)\n  ).xyz * scale1) + bias1));\n  xlat_mutableret1 = max (vec3(0.0, 0.0, 0.0), (xlat_mutableneu * inten_2));\n  uv2_4.x = ((uv_1.x * -0.4990803) - (uv_1.y * 0.8665558));\n  uv2_4.y = ((uv_1.x * 0.8665558) + (uv_1.y * -0.4990803));\n  dist_3 = (1.0 - fract((0.3333333 + tmpvar_5)));\n  inten_2 = ((sqrt(dist_3) * (1.0 - dist_3)) * 8.0);\n  vec2 tmpvar_8;\n  tmpvar_8.x = q1;\n  tmpvar_8.y = q2;\n  vec2 tmpvar_9;\n  tmpvar_9 = fract(((\n    ((3.0 * uv2_4) * dist_3)\n   + 0.5) + (tmpvar_8 * 0.05)));\n  xlat_mutableneu = (texture (sampler_main, tmpvar_9).xyz - ((texture (sampler_blur1, \n    (tmpvar_9 + 0.003)\n  ).xyz * scale1) + bias1));\n  xlat_mutableret1 = max (xlat_mutableret1, (xlat_mutableneu * inten_2));\n  uv2_4.x = ((uv_1.x * -0.5018377) - (uv_1.y * -0.8649619));\n  uv2_4.y = ((uv_1.x * -0.8649619) + (uv_1.y * -0.5018377));\n  dist_3 = (1.0 - fract((0.6666667 + tmpvar_5)));\n  inten_2 = ((sqrt(dist_3) * (1.0 - dist_3)) * 8.0);\n  vec2 tmpvar_10;\n  tmpvar_10.x = q1;\n  tmpvar_10.y = q2;\n  vec2 tmpvar_11;\n  tmpvar_11 = fract(((\n    ((3.0 * uv2_4) * dist_3)\n   + 0.5) + (tmpvar_10 * 0.05)));\n  xlat_mutableneu = (texture (sampler_main, tmpvar_11).xyz - ((texture (sampler_blur1, \n    (tmpvar_11 + 0.003)\n  ).xyz * scale1) + bias1));\n  xlat_mutableret1 = max (xlat_mutableret1, (xlat_mutableneu * inten_2));\n  uv2_4.x = ((uv_1.x * 0.9999949) - (uv_1.y * -0.003185092));\n  uv2_4.y = ((uv_1.x * -0.003185092) + (uv_1.y * 0.9999949));\n  dist_3 = (1.0 - fract((1.0 + tmpvar_5)));\n  inten_2 = ((sqrt(dist_3) * (1.0 - dist_3)) * 8.0);\n  vec2 tmpvar_12;\n  tmpvar_12.x = q1;\n  tmpvar_12.y = q2;\n  vec2 tmpvar_13;\n  tmpvar_13 = fract(((\n    ((3.0 * uv2_4) * dist_3)\n   + 0.5) + (tmpvar_12 * 0.05)));\n  xlat_mutableneu = (texture (sampler_main, tmpvar_13).xyz - ((texture (sampler_blur1, \n    (tmpvar_13 + 0.003)\n  ).xyz * scale1) + bias1));\n  xlat_mutableret1 = max (xlat_mutableret1, (xlat_mutableneu * inten_2));\n  vec4 tmpvar_14;\n  tmpvar_14.w = 1.0;\n  tmpvar_14.xyz = (xlat_mutableret1 * 4.0);\n  ret = tmpvar_14.xyz;\n }","warp_hlsl":"static const float quality = 4, depth = 3.5;\nfloat3 rsl, rsl2, rss, ret1,screen3,cloud;\nfloat2 uv0, uv1, uv2;\nfloat tmp, lprof,lprof2,sprof,sprof2, n, stone,stone_lit,sun,sky;\nfloat hormask, lavmask,ilavmask,cldmask,ncloud;\nstatic float lav_gnd = 0,hordist = 8, tele = 1;\nstatic float2 mov = float2 (q5,q6);\n\nfloat hq_n (float3 uvi) {return lum(tex2D (sampler_noise_hq ,uvi.xy));}\nfloat noise2 (float3 uvi) {return tex2D (sampler_noise_lq,uvi*8);}\n\nfloat noise4 (float2 uvi) { float n1,n2,n3,n4,zv; zv = 0.006*time;\n  n1 = lum(tex2D(sampler_noise_hq, (uvi)));\n  n2 = lum(tex2D(sampler_noise_hq, (uvi*2+zv)));\n  n3 = lum(tex2D(sampler_noise_hq, (uvi*4+zv)));\n  n4 = lum(tex2D(sampler_noise_hq, (uvi*8+4*zv)));\n  return n1 + n2/2 + n3/4 + n4/8;}\n\nfloat noise3 (float3 uvi) {float arg;\nreturn  clamp(tex2D (sampler_noise_hq,uvi.xy/16)-.5,-.25,.25)*2\n        +(tex2D (sampler_noise_hq,uvi.xy/8)-.5)/4\n        +(tex2D (sampler_noise_hq,(uvi.x-sin(uvi.y*2))/2))/12;}\n\nfloat3 rs_lav (float2 uvi, float berg) {  float z; float2 rs;\n  z = 8/(uvi.y)*(q8-4*berg); z = clamp(z,-8,80*hordist); //#final check !\n  rs.x = uvi.x*z ; rs.y = z; \n  rs = mul(rs,float2x2(q3,q4,-q4,q3));  \n  return float3(rs/64 + mov,z); } \n\nfloat3 rs_sky (float2 uvi, float berg) {  float z; float2 rs;\n  z = 8/(uvi.y - berg-.5); z = clamp(z,-32,1);\n  rs.x = (uvi.x)*z ; rs.y = z; \n  rs = mul(rs,float2x2(q3,q4,-q4,q3));\n  return float3(-rs/64+mov/-128,z); }\n\nshader_body {\nuv1 = uv*aspect.xy-float2(.5,q7);\nuv1 = mul(uv1,float2x2(q1,q2,-q2,q1));\nscreen3 = float3 (float2(uv.x*2-1,uv.y-.5)*aspect.yx,1);\n\n//CLOUDS\nuv2 = rs_sky(uv1,0);tmp = 0;\nfor (int n = 1; n <= 3; n++) {\n  uv2 = rs_sky(uv1,tmp*.03);\n  tmp = saturate(lum(tex2D (sampler_noise_hq,uv2 +.03*noise4(uv2*2))-.5));}\ntmp = saturate(pow(tmp,1.4) * sign(tmp));\ncloud = tmp;\nncloud = saturate(1-tmp);\n\n//DUNES\nfor (n=1; n <= quality; n++) {\n  rsl = rs_lav(tele*uv1,lav_gnd); //#spiele an uv-Vorfakt - zoom, auch bei sky !\n  lprof = noise3(rsl);\n  lav_gnd -= lprof/quality*depth/sqrt(rsl.z); } \nrsl = rs_lav(tele*uv1,lav_gnd); \nstone = noise2(rsl);\n\nfloat3 rsl3 = rsl + float3(-.1,.0,0);\nlprof2 = noise3(rsl3);\nstone_lit = .3+4*saturate(.2+lprof-lprof2);\n\n//------------------- masking -----------------------------------------\nlavmask = saturate (4*hordist-rsl.z/18) * (rsl.z >= 0); // # !\nilavmask = saturate(1-lavmask);\n\n//---------------- skylight first-----------------\nret1 = ncloud*uv.y*float3 (.3,.4,1); \nret1 += cloud*2;\nret1 *= ilavmask;  \n\n//----------------lava / stone  -----------------\nret1 += stone *stone_lit*lavmask * float3(1,.4,.0);\n\n\nret = 1-exp(-ret1*2+.1+.1*sin(time/7)); \n\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((float3(uv1.y-uv2.x,uv2.x+uv1.x,uv.x*uv.y)*q27\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q29\n                     );\nif(ret.x> q21*roam_cos.y && ret.x<= q24*roam_sin.x)ret.y -= (noise9).x*.5; \nif(ret.y> q22*roam_sin.x && ret.y<= q25*roam_cos.x)ret.z -= (noise9).y*.5; \nif(ret.z> q23*roam_cos.x && ret.z<= q26*roam_sin.y)ret.x -= (noise9).z*.5; \n}\n\nwritten by martin\nEND","comp_hlsl":"float3 ret1, neu;\nfloat2 rs,rs2,uv1;\nshader_body\n{\nfloat2 uv2;\nfloat ang2, c, s;\nuv -= 0.5;\nuv *= aspect.xy;    \n\nfloat dist = 1;\nfloat inten = 1;\nfloat mask = 0;\nret1 = 0;\nint anz = 3;\nfloat n = 0;\nwhile (n <= anz) {\n    ang2 = 6.28*n/anz;\n    c = cos(ang2);\n    s = sin(ang2);\n    uv2.x =  uv.x*c - uv.y*s;\n    uv2.y =  uv.x*s + uv.y*c;\n\n    dist = 1-frac(1.0/anz*n+time/2); //evtl sqrt !\n\n    inten =  sqrt(dist)*(1-dist)*8;\nfloat2 uv3 =  frac(3*uv2*dist + 0.5+float2(q1,q2)*.05);\n    neu = 1*GetPixel(uv3) -GetBlur1(uv3+.003);\n    ret1 = max(ret1,neu*inten);\nn++;\n}\n\nrs2 = .5*cos(uv*13) - ret1;;\nfloat dots = saturate(.05/length(rs2)) ;\n\n\nret = 2*ret1.gbr + 21*dots*(.1+3*ret1) ;\nret = ret1*4;\n}"}