{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":1,"darken_center":1,"darken":1,"wave_a":1,"wave_scale":0.821,"wave_smoothing":0.1,"wave_mystery":-0.24,"warpanimspeed":0.442,"warpscale":0.498,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"ob_size":0,"ob_r":1,"ob_g":1,"ob_b":1,"ob_a":0.05,"ib_size":0.26,"mv_x":64,"mv_y":1,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.index2=0;a.index=0;a.q22=0;a.q21=0;a.q29=0;a.q1=0;a.dec_med=0;a.rott=0;a.ava=0;a.is_beat=0;a.q31=0;a.q23=0;a.k1=0;a.q24=0;a.dec_slow=0;a.kmov=0;a.q26=0;a.p2=0;a.mov=0;a.avg=0;a.movez=0;a.trig=0;a.beat=0;a.p1=0;a.peak=0;a.q2=0;a.q27=0;a.cont=0;a.t0=0;a.q32=0;a.q28=0;a.q30=0;a.q20=0;a.dirx=1;","frame_eqs_str":"a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.9,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.2+a.avg+a.peak)*above(a.time,a.t0+.1);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,8);a.index2=mod(a.index2+a.is_beat*bnot(a.index),8);a.q20=a.avg;a.q21=a.beat;a.q22=a.peak;a.q23=a.index;a.q24=a.is_beat;a.q26=a.bass+\na.mid+a.treb;a.ava=a.ava*a.dec_slow+a.q26*(1-a.dec_slow);a.k1=a.is_beat*equal(mod(a.index,4),0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_med*a.p2+(1-a.dec_med)*a.p1;a.rott=div(3.1416*a.p2,4);a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.q27=8-a.index;a.q28=div(a.index2,6);a.q29=.1*a.q27+.1*a.time;a.trig=bnot(mod(a.index,4))*a.q24;a.mov=a.trig*(Math.floor(rand(100))-50)+(1-a.trig)*a.mov;a.movez+=div(.02,a.fps)*a.mov;a.q30=a.movez;a.trig=a.q24*bnot(a.index);a.kmov=bnot(a.trig)*(a.kmov+div(.1,a.fps));\na.q31=82*a.kmov*a.kmov;a.cont+=div(.2*a.q1,a.fps)*below(a.index,2);a.q31=a.cont;a.q32=a.q31-a.q30;","pixel_eqs_str":"","init_eqs_eel":"dirx = 1;","frame_eqs_eel":"dec_med = pow (0.9, 30/fps);\ndec_slow = pow (0.9, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .2+avg+peak) * above (time, t0+.1);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %8;\nindex2 = (index2 + is_beat*bnot(index))%8;\n\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq23 = index;\nq24 = is_beat;\nq26 = bass + mid + treb;\nava = ava*dec_slow + q26*(1-dec_slow);\n\nk1 =  is_beat*equal(index%4,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\nrott = p2 * 3.1416/4;\nq1 = cos(rott);\nq2 = sin(rott);\n\nq27 = 8-index;\nq28 = index2/6;\nq29 = .1*q27+time*.1;\n\ntrig = bnot(index%4)*q24;\nmov = trig*(int(rand(100))-50) + (1-trig)*mov ;\nmovez = movez + .02/fps*mov;\nq30 = movez;\n\n\ntrig = q24 * bnot(index);\nkmov = bnot(trig)* (kmov + .1/fps); \nq31 = kmov*82*kmov;\n\ncont = cont + q1*.2/fps*below(index,2);\nq31 = cont;\nq32=q31-q30;\n\n\n\n\n//**************************","pixel_eqs_eel":"","warp":"vec2 xlat_mutabledenominator;\nvec2 xlat_mutablenumerator;\n shader_body { \n  vec2 uv_1;\n  float fnord_2;\n  uv_1 = ((uv_orig - 0.5) * aspect.xy);\n  vec2 tmpvar_3;\n  tmpvar_3.x = ((uv_1.x * q1) - (uv_1.y * q2));\n  tmpvar_3.y = ((uv_1.x * q2) + (uv_1.y * q1));\n  vec2 tmpvar_4;\n  tmpvar_4.x = q3;\n  tmpvar_4.y = q4;\n  xlat_mutablenumerator = (tmpvar_3 + tmpvar_4);\n  vec2 tmpvar_5;\n  tmpvar_5.x = ((uv_1.x * q5) - (uv_1.y * q6));\n  tmpvar_5.y = ((uv_1.x * q6) + (uv_1.y * q5));\n  vec2 tmpvar_6;\n  tmpvar_6.x = q7;\n  tmpvar_6.y = q8;\n  xlat_mutabledenominator = (tmpvar_5 + tmpvar_6);\n  vec2 tmpvar_7;\n  tmpvar_7.x = ((xlat_mutablenumerator.x * xlat_mutabledenominator.x) + (xlat_mutablenumerator.y * xlat_mutabledenominator.y));\n  tmpvar_7.y = ((xlat_mutablenumerator.y * xlat_mutabledenominator.x) - (xlat_mutablenumerator.x * xlat_mutabledenominator.y));\n  uv_1 = ((tmpvar_7 / (\n    (xlat_mutabledenominator.x * xlat_mutabledenominator.x)\n   + \n    (xlat_mutabledenominator.y * xlat_mutabledenominator.y)\n  )) * 0.2);\n  vec2 tmpvar_8;\n  tmpvar_8 = fract(uv_1);\n  uv_1 = tmpvar_8;\n  vec2 tmpvar_9;\n  tmpvar_9 = ((tmpvar_8 - 0.5) * texsize.xy);\n  float tmpvar_10;\n  float tmpvar_11;\n  tmpvar_11 = (time * 200.0);\n  tmpvar_10 = clamp (((float(mod (\n    ((abs(tmpvar_9.x) + abs(tmpvar_9.y)) + tmpvar_11)\n  , 128.0))) - 64.0), 0.0, 1.0);\n  float tmpvar_12;\n  tmpvar_12 = clamp (((float(mod (\n    ((-(abs(tmpvar_9.x)) - abs(tmpvar_9.y)) + tmpvar_11)\n  , 128.0))) - 64.0), 0.0, 1.0);\n  float tmpvar_13;\n  tmpvar_13 = sqrt(dot (tmpvar_9, tmpvar_9));\n  if ((tmpvar_13 > (0.25 * texsize.y))) {\n    fnord_2 = tmpvar_12;\n  } else {\n    fnord_2 = tmpvar_10;\n  };\n  vec4 tmpvar_14;\n  tmpvar_14.w = 1.0;\n  tmpvar_14.xyz = vec3(fnord_2);\n  ret = tmpvar_14.xyz;\n }","comp":"vec3 xlat_mutableneu;\nvec3 xlat_mutableret1;\nvec2 xlat_mutablers2;\n shader_body { \n  vec2 uv_1;\n  float inten_3;\n  float dist_4;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  dist_4 = 1.0;\n  inten_3 = 1.0;\n  xlat_mutableret1 = vec3(0.0, 0.0, 0.0);\n  for (float n_2 = 0.0; n_2 <= 3.0; n_2 += 1.0) {\n    vec2 uv3_5;\n    vec2 tmpvar_6;\n    tmpvar_6 = abs((fract(\n      (uv_1 + 0.5)\n    ) - 0.5));\n    float tmpvar_7;\n    tmpvar_7 = (float(mod (n_2, 3.0)));\n    if ((tmpvar_7 == 0.0)) {\n      dist_4 = (1.0 - fract((\n        (0.3333333 * n_2)\n       + q30)));\n    } else {\n      float tmpvar_8;\n      tmpvar_8 = (float(mod (n_2, 3.0)));\n      if ((tmpvar_8 == 1.0)) {\n        dist_4 = (1.0 - fract((\n          (0.3333333 * n_2)\n         + q31)));\n      } else {\n        dist_4 = (1.0 - fract((\n          (0.3333333 * n_2)\n         + q32)));\n      };\n    };\n    inten_3 = ((sqrt(dist_4) * (1.0 - dist_4)) * 4.0);\n    uv3_5 = vec2(0.0, 0.0);\n    float tmpvar_9;\n    tmpvar_9 = (float(mod (n_2, 3.0)));\n    if ((tmpvar_9 == 0.0)) {\n      vec2 tmpvar_10;\n      tmpvar_10.y = 0.0;\n      tmpvar_10.x = (q31 + (dist_4 / 3.0));\n      uv3_5 = fract(((\n        ((3.0 * tmpvar_6) * dist_4)\n       + q29) + tmpvar_10));\n    } else {\n      float tmpvar_11;\n      tmpvar_11 = (float(mod (n_2, 3.0)));\n      if ((tmpvar_11 == 1.0)) {\n        vec2 tmpvar_12;\n        tmpvar_12.y = 0.0;\n        tmpvar_12.x = (q29 + (dist_4 / 3.0));\n        uv3_5 = fract(((\n          ((3.0 * tmpvar_6) * dist_4)\n         + q29) + tmpvar_12));\n      } else {\n        vec2 tmpvar_13;\n        tmpvar_13.y = 0.0;\n        tmpvar_13.x = (q29 + (dist_4 / 3.0));\n        uv3_5 = fract(((\n          ((3.0 * tmpvar_6) * dist_4)\n         + q31) + tmpvar_13));\n      };\n    };\n    xlat_mutableneu = texture (sampler_main, uv3_5).xyz;\n    xlat_mutableneu = (xlat_mutableneu * vec3(greaterThanEqual (xlat_mutableneu, vec3(0.0, 0.0, 0.0))));\n    xlat_mutableret1 = max (xlat_mutableret1, (xlat_mutableneu * inten_3));\n  };\n  xlat_mutablers2 = ((0.3 * cos(\n    (uv_1 * 16.0)\n  )) - xlat_mutableret1.xy);\n  vec4 tmpvar_14;\n  tmpvar_14.w = 1.0;\n  tmpvar_14.xyz = ((-0.1 * xlat_mutableret1) + ((\n    ((2.0 * (clamp (\n      (0.05 / sqrt(dot (xlat_mutablers2, xlat_mutablers2)))\n    , 0.0, 1.0) * (1.0 + \n      (q22 / 4.0)\n    ))) * (0.4 + (4.0 * xlat_mutableret1)))\n   * \n    (1.0 + roam_cos)\n  .xyz) / 2.0));\n  ret = tmpvar_14.xyz;\n }","warp_hlsl":"sampler sampler_fc_wrenches;\nfloat2 factorA, factorB, product;\nfloat2 numerator, denominator, fraction;\n\nshader_body\n{\nuv = lerp(uv_orig,uv,0); // this is scaling the input motion from the per-vertex-calc\nuv = (uv-0.5)*aspect.xy;\n\nfactorA = uv;\nfactorB = float2(q1,q2);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y,   // the products real part\n                  factorA.x*factorB.y + factorA.y*factorB.x);  // the products imaginary part\n\nnumerator = product + float2(q3,q4);\n\nfactorA = uv;\nfactorB = float2(q5,q6);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y,   // the products real part\n                  factorA.x*factorB.y + factorA.y*factorB.x);  // the products imaginary part\n\n\ndenominator = product + float2(q7,q8);\n\nfraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,   // the fractions real part\n                   numerator.y*denominator.x - numerator.x*denominator.y)/  // the fractions imaginary part\n                   (denominator.x*denominator.x + denominator.y*denominator.y);\n\nuv = fraction*0.2;\n\n//uv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5)*0.99; // Eo.S. mirror code with cutted borders\nuv = frac(uv);\nret = tex2D( sampler_fc_wrenches, uv );\n\n float2 bg = (uv-0.5)*texsize.xy;\n float bg1 = saturate((abs(bg.x)+abs(bg.y)+time*200)%128-64);\n float bg2 = saturate((-abs(bg.x)-abs(bg.y)+time*200)%128-64);\n float fnord;\n if(length(bg)> 0.25*texsize.y){\n  fnord = bg2;\n }else{\n  fnord = bg1;\n }\nret = fnord;\n}","comp_hlsl":"float3 ret1, neu;\nfloat2 rs,rs2,uv1,rsk;\nshader_body\n{\nfloat2 uv2;\nfloat ang2, c, s;\nuv -= 0.5 ;\nuv *= aspect.xy;    \nfloat dist = 1;\nfloat inten = 1;\nret1 = 0;\nint anz = 3;\nfloat n = 0;\nwhile (n <= anz) {\n    uv2 =  abs(frac(uv+.5)-.5) ;\n    if      (n%3==0) dist = 1-frac(1.0/anz*n+q30);\n    else if (n%3==1) dist = 1-frac(1.0/anz*n+q31);\n    else             dist = 1-frac(1.0/anz*n+q32);\n\n    inten =  sqrt(dist)*(1-dist)*4;\n    float2 uv3 = 0;\n    if      (n%3==0) uv3 =  frac(3*uv2*dist+q29+float2(q31+dist/3,0));\n    else if (n%3==1) uv3 =  frac(3*uv2*dist+q29+float2(q29+dist/3,0));\n    else             uv3 =  frac(3*uv2*dist+q31+float2(q29+dist/3,0));\n    neu = 1*GetPixel(uv3) +GetBlur3(uv3*1.1)*0;\n    neu *= (neu >= 0);\n    ret1 = max(ret1,neu*inten);\nn++;\n}\nrs2 = .3*cos(uv*16+0*time) -  (ret1);\nfloat dots = saturate(.05/length(rs2))*(1+q22/4) ;\nret = -0.1*ret1 + 2*dots*(.4+4*ret1)*(1+roam_cos)/2 ;\n}"}