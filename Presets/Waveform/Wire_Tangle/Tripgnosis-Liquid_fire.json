{"version":2,"baseVals":{"rating":5,"gammaadj":1.9,"echo_zoom":1.169,"wave_mode":1,"additivewave":1,"wave_dots":1,"wave_thick":1,"wave_a":0.5,"wave_scale":0.5,"wave_smoothing":0.387,"wave_mystery":0.26,"modwavealphastart":1.33,"modwavealphaend":1.81,"warpanimspeed":4.136,"warpscale":0.02,"zoomexp":0.74935,"zoom":0.97059,"warp":0.01,"sx":1.10462,"sy":1.10462,"wave_r":0.8,"wave_g":0.5,"wave_b":0.3,"ob_size":0,"ob_r":0.11,"ob_b":0.1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.zm=0;a.vol=0;a.mtime=0;a.q1=0;a.gamma=0;","frame_eqs_str":"a.rot+=.006*Math.sin(.5*(.023*a.time+.161*a.bass_att));a.vol=.25*(a.bass+a.mid+a.treb);a.vol*=a.vol;a.mtime+=.01*a.vol;a.q1=.5*a.time;a.gamma=1+.7*Math.min(.8*a.vol,1);","pixel_eqs_str":"a.zm=1;a.sx=a.zm;a.sy=a.zm;","init_eqs_eel":"","frame_eqs_eel":"rot = rot + 0.006*sin(0.5*((time*0.023) + (bass_att*0.161)));\n\nvol=(bass+mid+treb)*0.25;\nvol=vol*vol;\n\nmtime=mtime+vol*0.01;\n\nq1=time*0.5;\n\n\ngamma=1 + min(vol*0.8,1)*0.7","pixel_eqs_eel":"zm=1.00;\n\nsx=zm;\nsy=zm;","warp":" shader_body { \n  vec3 xfer_1;\n  vec3 ret_2;\n  vec4 tmpvar_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = (uv - 0.5);\n  tmpvar_3 = texture (sampler_main, (tmpvar_4 + 0.5));\n  ret_2 = (tmpvar_3.xyz / ((tmpvar_3.x + tmpvar_3.y) + tmpvar_3.z));\n  ret_2 = texture (sampler_main, ((tmpvar_4 * dot (ret_2, vec3(1.0, 0.985, 0.95))) + 0.5)).xyz;\n  vec3 tmpvar_5;\n  tmpvar_5 = clamp (((ret_2 - 0.05) * 99.0), 0.0, 1.0);\n  xfer_1.x = tmpvar_5.x;\n  xfer_1.yz = (tmpvar_5.yz * clamp ((\n    (0.1 - ret_2.xy)\n   * 99.0), 0.0, 1.0));\n  ret_2 = (ret_2 + (vec3(-0.014, 0.014, 0.0) * tmpvar_5.xxx));\n  ret_2 = (ret_2 + (vec3(0.0, -0.08, 0.08) * xfer_1.yyy));\n  ret_2 = (ret_2 + (vec3(0.0, 0.0, -0.02) * xfer_1.zzz));\n  ret_2 = (ret_2 + (vec3(5.0, 15.0, 40.0) * (\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)).xyz - 0.5)\n   / 256.0)));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_2;\n  ret = tmpvar_6.xyz;\n }","comp":"uniform sampler2D sampler_seaweed;\n shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  ret_1 = tmpvar_2.xyz;\n  vec2 tmpvar_3;\n  tmpvar_3.x = ret_1.x;\n  tmpvar_3.y = (time * 0.003);\n  vec3 tmpvar_4;\n  tmpvar_4 = ((texture (sampler_seaweed, (0.4 + tmpvar_3)) * tmpvar_2.z) * 3.0).xyz;\n  ret_1 = tmpvar_4;\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = tmpvar_4;\n  ret = tmpvar_5.xyz;\n }","warp_hlsl":"shader_body\n{\n    ret = tex2D( sampler_main, (uv-0.5)*1.00 + 0.5 );\n    ret /= ret.x+ret.y+ret.z;\n    float zoom = dot(ret, float3(1,0.985,0.95));\n\n    ret.xyz = tex2D( sampler_main, (uv-0.5)*zoom + 0.5 );\n\n    // shift mass from red to green and on to blue (corresponds to AGE of pixel)\n    // .x = fastest layer, .z = slowest\n    float r = 0.02; \n    float3 xfer = saturate((ret - 0.05)*99);\n    xfer.yz *= saturate((0.1-ret.xy)*99);\n    ret += xfer.xxx*float3(-1,1,0)*r*0.7;\n    ret += xfer.yyy*float3(0,-1,1)*r*4;\n    ret += xfer.zzz*float3(0,0,-1)*r;\n\n    // ERROR DIFFUSION DITHER - looks great\n    float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\n    ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0*float3(1,3,8)*5;\n}","comp_hlsl":"sampler sampler_seaweed;\n\nshader_body\n{\n    ret = tex2D(sampler_main, uv).xyz;\n    //float lum = ret.x;\n    //ret = lum;\n\n    float2 texc = 0.4 + float2(ret.x, time*0.003);\n    ret = tex2D(sampler_seaweed, texc) * ret.z * 3;\n\n    // add some stripes:\n    //ret += 0.04*cos(lum*29+2.8);\n}"}