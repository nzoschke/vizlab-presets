{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.76,"echo_zoom":0.454,"echo_orient":3,"wave_thick":1,"wave_brighten":0,"darken":1,"wave_a":1,"wave_scale":100,"wave_smoothing":0.9,"wave_mystery":1,"warpscale":1.772,"zoomexp":4.401,"fshader":0.32,"zoom":1.031,"rot":0.001,"warp":0,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"mv_x":63.936,"mv_y":19.048,"mv_l":5,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"thick":1,"scaling":0.46374,"smoothing":0,"enabled":0},"init_eqs_str":"//pi\nt8=3.14159265;\nt5 = 1;","frame_eqs_str":"rotx = rotx+bass;\nroty = roty+mid;\nrotz = rotz+treb;\n//rotx = 0;\n//roty =0;\n//rotz = 0;\n\n//convert rotation values from degrees to radians\nt1= t8*rotx/180;\nt2 = t8*roty/180;\nt3 = t8*rotz/180;\n\nt4 = 3*sin(time);\nt5 = 10+8*cos(time);\n\ng = 0.5-0.4*cos(time);\nr = 0.5-0.4*sin(time);","point_eqs_str":"//Define 3D Shape\n\n//Spiral\nx1 = 0.5*sin(8*t8*sample);\ny1 = 2*(sample-0.5)-value1;\nz1= 0.5*cos(8*t8*sample);\n\n//modulate values to adjust for rotation on multiple axes, convert to world co-ordinates\ny2 = y1*cos(t1)-z1*sin(t1);\nz2 = y1*sin(t1)+z1*cos(t1);\nx2 = z2*sin(t2)+x1*cos(t2);\nz3 = z2*cos(t2)-x1*sin(t2);\nx3 = x2*cos(t3)-y2*sin(t3);\ny3 = y2*cos(t3)+x2*sin(t3);\n//move resulting shape in 3d space\nx4 = x3+t4;\ny4 = y3;\nz4 = z3+t5;\n//draw 3d shape in 2d\nx=0.5+0.5*(x4/(1+z4*0.5));\ny=0.5+0.5*(y4/(1+z4*0.5));\n\nb= r+value1;","init_eqs_eel":"//pi\nt8=3.14159265;\nt5 = 1;","frame_eqs_eel":"rotx = rotx+bass;\nroty = roty+mid;\nrotz = rotz+treb;\n//rotx = 0;\n//roty =0;\n//rotz = 0;\n\n//convert rotation values from degrees to radians\nt1= t8*rotx/180;\nt2 = t8*roty/180;\nt3 = t8*rotz/180;\n\nt4 = 3*sin(time);\nt5 = 10+8*cos(time);\n\ng = 0.5-0.4*cos(time);\nr = 0.5-0.4*sin(time);","point_eqs_eel":"//Define 3D Shape\n\n//Spiral\nx1 = 0.5*sin(8*t8*sample);\ny1 = 2*(sample-0.5)-value1;\nz1= 0.5*cos(8*t8*sample);\n\n//modulate values to adjust for rotation on multiple axes, convert to world co-ordinates\ny2 = y1*cos(t1)-z1*sin(t1);\nz2 = y1*sin(t1)+z1*cos(t1);\nx2 = z2*sin(t2)+x1*cos(t2);\nz3 = z2*cos(t2)-x1*sin(t2);\nx3 = x2*cos(t3)-y2*sin(t3);\ny3 = y2*cos(t3)+x2*sin(t3);\n//move resulting shape in 3d space\nx4 = x3+t4;\ny4 = y3;\nz4 = z3+t5;\n//draw 3d shape in 2d\nx=0.5+0.5*(x4/(1+z4*0.5));\ny=0.5+0.5*(y4/(1+z4*0.5));\n\nb= r+value1;"},{"baseVals":{"thick":1,"scaling":100,"smoothing":0,"enabled":0},"init_eqs_str":"//pi\nt8=3.14159265;\nt5 = 1;","frame_eqs_str":"rotx = rotx+bass;\nroty = roty+mid;\nrotz = rotz+treb;\n//rotx = 0;\n//roty =0;\n//rotz = 0;\n\n//convert rotation values from degrees to radians\nt1= t8*rotx/180;\nt2 = t8*roty/180;\nt3 = t8*rotz/180;\n\nt4 = 3*sin(0.66*t8);\nt5 = 10+8*cos(0.66*t8);","point_eqs_str":"//Define 3D Shape\n\n//Sphere\nfvar = sample*512;\nsvar = fvar/32;\ntvar = 0&svar;\nnsample = tvar*3.5;\nx1 = (1)*sin(nsample+value1*5);\ny1 = (4)*cos(sample*t8*2);\nz1= (4)*sin(sample*(t8*2));\n\n//modulate values to adjust for rotation on multiple axes, convert to world co-ordinates\ny2 = y1*cos(t1)-z1*sin(t1);\nz2 = y1*sin(t1)+z1*cos(t1);\nx2 = z2*sin(t2)+x1*cos(t2);\nz3 = z2*cos(t2)-x1*sin(t2);\nx3 = x2*cos(t3)-y2*sin(t3);\ny3 = y2*cos(t3)+x2*sin(t3);\n//move resulting shape in 3d space\nx4 = x3;\ny4 = y3;\nz4 = z3+10;\n//draw 3d shape in 2d\nx=0.5+0.5*(x4/(1+z4*0.5));\ny=0.5+0.5*(y4/(1+z4*0.5));\n\nr = sin(nsample);\ng = -.3+cos(sample*20+(time*5));\nb = -.3-cos(-sample*20+(time*5));\ng = if(below(g,0),0,g);\nb = if(below(b,0),0,b);","init_eqs_eel":"//pi\nt8=3.14159265;\nt5 = 1;","frame_eqs_eel":"rotx = rotx+bass;\nroty = roty+mid;\nrotz = rotz+treb;\n//rotx = 0;\n//roty =0;\n//rotz = 0;\n\n//convert rotation values from degrees to radians\nt1= t8*rotx/180;\nt2 = t8*roty/180;\nt3 = t8*rotz/180;\n\nt4 = 3*sin(0.66*t8);\nt5 = 10+8*cos(0.66*t8);","point_eqs_eel":"//Define 3D Shape\n\n//Sphere\nfvar = sample*512;\nsvar = fvar/32;\ntvar = 0&svar;\nnsample = tvar*3.5;\nx1 = (1)*sin(nsample+value1*5);\ny1 = (4)*cos(sample*t8*2);\nz1= (4)*sin(sample*(t8*2));\n\n//modulate values to adjust for rotation on multiple axes, convert to world co-ordinates\ny2 = y1*cos(t1)-z1*sin(t1);\nz2 = y1*sin(t1)+z1*cos(t1);\nx2 = z2*sin(t2)+x1*cos(t2);\nz3 = z2*cos(t2)-x1*sin(t2);\nx3 = x2*cos(t3)-y2*sin(t3);\ny3 = y2*cos(t3)+x2*sin(t3);\n//move resulting shape in 3d space\nx4 = x3;\ny4 = y3;\nz4 = z3+10;\n//draw 3d shape in 2d\nx=0.5+0.5*(x4/(1+z4*0.5));\ny=0.5+0.5*(y4/(1+z4*0.5));\n\nr = sin(nsample);\ng = -.3+cos(sample*20+(time*5));\nb = -.3-cos(-sample*20+(time*5));\ng = if(below(g,0),0,g);\nb = if(below(b,0),0,b);"},{"baseVals":{"enabled":1,"spectrum":1,"thick":1,"scaling":0.46374,"smoothing":0},"init_eqs_str":"a.y3=0;a.z2=0;a.y1=0;a.t5=0;a.t1=0;a.x1=0;a.z4=0;a.y0=0;a.t8=0;a.x0=0;a.z3=0;a.t3=0;a.rotz=0;a.x3=0;a.z0=0;a.x4=0;a.x2=0;a.t2=0;a.y2=0;a.z1=0;a.roty=0;a.t4=0;a.y4=0;a.rotx=0;a.t8=3.14159265;a.t5=1;","frame_eqs_str":"a.rotx+=a.bass;a.roty+=a.mid;a.rotz+=a.treb;a.t1=div(a.t8*a.rotx,180);a.t2=div(a.t8*a.roty,180);a.t3=div(a.t8*a.rotz,180);a.t4=3*Math.sin(a.time+1.33*a.t8);a.t5=10+8*Math.cos(a.time+1.33*a.t8);a.r=.5-.4*Math.cos(a.time+1.33*a.t8);a.b=.5-.4*Math.sin(a.time+1.33*a.t8);","point_eqs_str":"a.x0=.00001<Math.abs(below(12*a.sample,1))?12*a.sample:.00001<Math.abs(below(12*a.sample,2))?1:.00001<Math.abs(below(12*a.sample,3))?Math.abs(12*a.sample-3):.00001<Math.abs(below(12*a.sample,6))?0:.00001<Math.abs(below(12*a.sample,8))?1:.00001<Math.abs(below(12*a.sample,9))?Math.abs(12*a.sample-9):.00001<Math.abs(below(12*a.sample,10))?0:.00001<Math.abs(below(12*a.sample,11))?12*a.sample-10:1;a.y0=.00001<Math.abs(below(12*a.sample,1))?0:.00001<Math.abs(below(12*a.sample,2))?\n12*a.sample-1:.00001<Math.abs(below(12*a.sample,3))?1:.00001<Math.abs(below(12*a.sample,4))?Math.abs(12*a.sample-4):.00001<Math.abs(below(12*a.sample,5))?0:.00001<Math.abs(below(12*a.sample,7))?1:.00001<Math.abs(below(12*a.sample,9))?0:.00001<Math.abs(below(12*a.sample,10))?12*a.sample-9:.00001<Math.abs(below(12*a.sample,11))?1:Math.abs(12*a.sample-12);a.z0=.00001<Math.abs(below(12*a.sample,4))?0:.00001<Math.abs(below(12*a.sample,5))?12*a.sample-4:.00001<Math.abs(below(12*a.sample,6))?Math.abs(12*\na.sample-6):.00001<Math.abs(below(12*a.sample,7))?12*a.sample-6:.00001<Math.abs(below(12*a.sample,8))?Math.abs(12*a.sample-8):1;a.x1=.5-a.x0+(.00001<Math.abs(below(Math.sin(37.698*a.sample),0))?a.value1:0);a.y1=.5-a.y0+(.00001<Math.abs(below(Math.cos(3.1415*(12*a.sample-1.5)),0))?a.value1:0);a.z1=.5-a.z0+(.00001<Math.abs(below(12*a.sample,4))?0:.00001<Math.abs(below(12*a.sample,8))?a.value1:0);a.y2=a.y1*Math.cos(a.t1)-a.z1*Math.sin(a.t1);a.z2=a.y1*Math.sin(a.t1)+a.z1*Math.cos(a.t1);a.x2=a.z2*Math.sin(a.t2)+\na.x1*Math.cos(a.t2);a.z3=a.z2*Math.cos(a.t2)-a.x1*Math.sin(a.t2);a.x3=a.x2*Math.cos(a.t3)-a.y2*Math.sin(a.t3);a.y3=a.y2*Math.cos(a.t3)+a.x2*Math.sin(a.t3);a.x4=a.x3+a.t4;a.y4=a.y3;a.z4=a.z3+a.t5;a.x=.5+.5*div(a.x4,1+.5*a.z4);a.y=.5+.5*div(a.y4,1+.5*a.z4);a.g=a.b+a.value1;","init_eqs_eel":"//pi\nt8=3.14159265;\nt5 = 1;","frame_eqs_eel":"rotx = rotx+bass;\nroty = roty+mid;\nrotz = rotz+treb;\n//rotx = 0;\n//roty =0;\n//rotz = 0;\n\n//convert rotation values from degrees to radians\nt1= t8*rotx/180;\nt2 = t8*roty/180;\nt3 = t8*rotz/180;\n\nt4 = 3*sin(time+1.33*t8);\nt5 = 10+8*cos(time+1.33*t8);\n\nr = 0.5-0.4*cos(time+1.33*t8);\nb = 0.5-0.4*sin(time+1.33*t8);","point_eqs_eel":"//Define 3D Shape\n\n//Cube\nx0 = if(below(sample*12,1),sample*12, if(below(sample*12,2),1, if(below(sample*12,3),abs(sample*12-3), if(below(sample*12,6),0, if(below(sample*12,8),1, if(below(sample*12,9),abs(sample*12-9), if(below(sample*12,10),0, if(below(sample*12,11),sample*12-10,1))))))));\ny0 = if(below(sample*12,1),0, if(below(sample*12,2),sample*12-1, if(below(sample*12,3),1, if(below(sample*12,4),abs(sample*12-4), if(below(sample*12,5),0, if(below(sample*12,7),1, if(below(sample*12,9),0, if(below(sample*12,10),sample*12-9, if(below(sample*12,11),1,abs(sample*12-12))))))))));\nz0 = if(below(sample*12,4),0, if(below(sample*12,5),sample*12-4, if(below(sample*12,6),abs(sample*12-6), if(below(sample*12,7),sample*12-6, if(below(sample*12,8),abs(sample*12-8),1)))));\nx1 = 0.5-x0+if(below(sin(sample*12*3.1415),0),value1,0);\ny1 = 0.5-y0+if(below(cos((sample*12-1.5)*3.1415),0),value1,0);\nz1 = 0.5-z0+if(below(sample*12,4),0,if(below(sample*12,8),value1,0));\n\n//modulate values to adjust for rotation on multiple axes, convert to world co-ordinates\ny2 = y1*cos(t1)-z1*sin(t1);\nz2 = y1*sin(t1)+z1*cos(t1);\nx2 = z2*sin(t2)+x1*cos(t2);\nz3 = z2*cos(t2)-x1*sin(t2);\nx3 = x2*cos(t3)-y2*sin(t3);\ny3 = y2*cos(t3)+x2*sin(t3);\n//move resulting shape in 3d space\nx4 = x3+t4;\ny4 = y3;\nz4 = z3+t5;\n//draw 3d shape in 2d\nx=0.5+0.5*(x4/(1+z4*0.5));\ny=0.5+0.5*(y4/(1+z4*0.5));\n\ng = b+value1;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"x = .5 + (.12 + .02*sin(time*.8))*cos(sample*(100*sin(time*.1))+time*.8);\ny = .5 + (.12 + .02*sin(time))*sin(sample*(100*sin(time*.5))+time*.5);\na = -.7+sin(sample*1000+time*2);\na = above(a,0);\n\nr = -.7+sin(sample*100+time*2);\ng = -.7+sin((sample+.40)*100+time*2);\nb = -.7+sin((sample+.77)*100+time*2);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = .5 + (.12 + .02*sin(time*.8))*cos(sample*(100*sin(time*.1))+time*.8);\ny = .5 + (.12 + .02*sin(time))*sin(sample*(100*sin(time*.5))+time*.5);\na = -.7+sin(sample*1000+time*2);\na = above(a,0);\n\nr = -.7+sin(sample*100+time*2);\ng = -.7+sin((sample+.40)*100+time*2);\nb = -.7+sin((sample+.77)*100+time*2);"}],"init_eqs_str":"a.q1=0;a.counter=0;","frame_eqs_str":"a.wave_x+=.3*Math.sin(8.4152*a.time);a.cx=a.wave_x;a.wave_y+=.3*Math.cos(6.28*a.time);a.cy=a.wave_y;a.rot=.00001<Math.abs(above(a.bass_att,1))?.05:-.05;a.rot+=.00001<Math.abs(above(a.mid_att,1))?.05:-.05;a.rot+=.00001<Math.abs(above(a.treb_att,1))?.05:-.05;a.wave_r=Math.min(1,2*Math.max(a.bass_att-1,0));a.wave_b=Math.min(1,2*Math.max(a.treb_att-1,0));a.wave_g=Math.min(1,2*Math.max(a.mid_att-1,0));a.monitor=a.wave_g;a.q1=.1*(a.bass+a.treb+a.mid);","pixel_eqs_str":"","init_eqs_eel":"counter=0;","frame_eqs_eel":"wave_x = wave_x + 0.3*sin(6.28*1.34*time);\ncx=wave_x;\n\n//cx = cx + 0.1*sin(6.28*1.34*time);\n\nwave_y = wave_y + 0.3*cos(6.28*time);\ncy=wave_y;\n\n//cy = cy + 0.1*cos(6.28*time);\n//rot=rot+.1*sin(.2*6.28*time);\n\nrot=if(above(bass_att,1),0.05,-0.05);\nrot=rot+if(above(mid_att,1),0.05,-0.05);\nrot=rot+if(above(treb_att,1),0.05,-0.05);\n\n//wave_r=1;\n//wave_g=0;\n//wave_b=.5+.5*sin(.4*6.28*time);\n\nwave_r=min(1,2*max((bass_att-1),0));\nwave_b=min(1,2*max((treb_att-1),0));\nwave_g=min(1,2*max((mid_att-1),0)); \n\nmonitor=wave_g;\nq1=(bass+treb+mid)*.1;","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 rsamp_1;\n  vec3 ret_2;\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy));\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_pw_main, uv);\n  ret_2 = tmpvar_4.xyz;\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_pw_main, (uv + ((\n    (tmpvar_3.xy - 0.5)\n   * 12.0) * texsize.zw)));\n  vec3 tmpvar_6;\n  tmpvar_6 = tmpvar_5.xyz;\n  rsamp_1 = tmpvar_6;\n  float tmpvar_7;\n  vec2 x_8;\n  x_8 = (tmpvar_4.xy - uv);\n  tmpvar_7 = sqrt(dot (x_8, x_8));\n  float tmpvar_9;\n  vec2 x_10;\n  x_10 = (tmpvar_5.xy - uv);\n  tmpvar_9 = sqrt(dot (x_10, x_10));\n  if ((tmpvar_7 > tmpvar_9)) {\n    ret_2.xy = tmpvar_6.xy;\n  };\n  vec4 tmpvar_11;\n  tmpvar_11 = texture (sampler_pw_main, (uv + ((\n    (tmpvar_3.zw - 0.5)\n   * 48.0) * texsize.zw)));\n  rsamp_1 = tmpvar_11.xyz;\n  float tmpvar_12;\n  vec2 x_13;\n  x_13 = (ret_2.xy - uv);\n  tmpvar_12 = sqrt(dot (x_13, x_13));\n  float tmpvar_14;\n  vec2 x_15;\n  x_15 = (tmpvar_11.xy - uv);\n  tmpvar_14 = sqrt(dot (x_15, x_15));\n  if ((tmpvar_12 > tmpvar_14)) {\n    ret_2.xy = rsamp_1.xy;\n  };\n  ret_2.z = texture (sampler_fw_main, ret_2.xy).z;\n  ret_2.z = (ret_2.z + (q1 * 0.03));\n  ret_2.y = (ret_2.y - (q1 * 0.031));\n  ret_2.z = (ret_2.z + (q1 * 0.023));\n  ret_2 = (ret_2 - (roam_sin.xyz * roam_cos.wzy));\n  if ((((ret_2.z + ret_2.x) + ret_2.y) < 0.3)) {\n    ret_2.x = (ret_2.x * 0.1);\n    ret_2.y = (ret_2.y * 0.3);\n    ret_2.z = (ret_2.z * 0.21);\n  };\n  vec4 tmpvar_16;\n  tmpvar_16.w = 1.0;\n  tmpvar_16.xyz = ret_2;\n  ret = tmpvar_16.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (texture (sampler_main, ((texture (sampler_blur1, uv).xyz * scale1) + bias1).xy).xyz * 2.0);\n  ret = tmpvar_1.xyz;\n }","warp_hlsl":"shader_body\n{\nfloat2 pixelsize = texsize.zw;\nfloat2 uvm = uv;//_orig;\n\nfloat2 noise_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\nfloat4 noiseVal = tex2D(sampler_noise_lq, noise_uv);\n\nret.xyz = saturate(tex2D( sampler_pw_main,uvm).xyz*float3(1,1,1) - float3(.0,.0,.0));\nret.xyz = tex2D( sampler_pw_main,uvm).xyz;\n\n\nfloat3 rsamp = tex2D(sampler_pw_main,uvm + (noiseVal.xy-.5)*12*pixelsize).xyz;\nif (length(ret.xy - uvm) > length(rsamp.xy - uvm)) {\nret.xy = rsamp.xy;\n}\n\nrsamp = tex2D(sampler_pw_main,uvm + (noiseVal.zw-.5)*48*pixelsize).xyz;\nif (length(ret.xy - uvm) > length(rsamp.xy - uvm)) {\nret.xy = rsamp.xy;\n}\n\nret.z = tex2D(sampler_fw_main,ret.xy).z;\n\nret.z += q1*.03;\nret.y -= q1*.031;\nret.z += q1*.023;\nret-=roam_sin*roam_cos.wzy;\nif (ret.z+ret.x+ret.y < .3) {\nret.x*=.1;\nret.y*=.3;\nret.z*=.21;\n}\n\n\n}","comp_hlsl":"shader_body\n{\n    float2 uv_echo = (uv - 0.5)*1.000*float2(-1,-1) + 0.5;\n    float3 output =  tex2D(sampler_main, uv).xyz;\noutput-=roam_sin.yzw*roam_cos;\n    float3 blur =  tex2D(sampler_main, GetBlur1(uv)).xyz;\n    \n   ret = blur;\n\n    ret *= 2.00; //gamma\n    ret = ret;\n//ret=1-ret;\n}"}