{"version":2,"baseVals":{"rating":5,"wave_mode":6,"wave_a":4,"wave_scale":1.692,"wave_smoothing":0.18,"warpscale":2.853,"zoom":1.00001,"warp":0,"sx":1.01,"sy":0.9803,"wave_y":0.52,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"samples":50,"smoothing":0.27,"b":0.8,"a":0.12},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.q1=0;a.q2=0;","frame_eqs_str":"a.q1=.5+.32*Math.cos(.4*a.time);a.q2=.5+.22*Math.sin(.4*a.time);a.wave_y=a.q2;","pixel_eqs_str":"a.dx=.02*(a.x-a.q1);a.dy=.02*(a.y-a.q2);","init_eqs_eel":"","frame_eqs_eel":"// in this example, q1 and q2 act as the center of zooming\n// AND as the position of custom shape #1..\nq1 = 0.5 + 0.32*cos(time*0.4);\nq2 = 0.5 + 0.22*sin(time*0.4);\n\n//wave_x = q1;\nwave_y = q2;","pixel_eqs_eel":"dx = (x-q1)*0.02;\ndy = (y-q2)*0.02;","warp":" shader_body { \n  vec2 uv_1;\n  uv_1.y = uv.y;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3.x = roam_cos.x;\n  tmpvar_3.y = roam_sin.x;\n  vec2 tmpvar_4;\n  tmpvar_4 = (texsize_noise_lq.zw * texsize.xy);\n  uv_1.x = (uv.x + ((0.02 * \n    ((texture (sampler_noise_lq, ((\n      (0.1 * tmpvar_4)\n     * uv) + (tmpvar_3 * 0.1))).y * 2.0) - 1.0)\n  ) * aspect.x));\n  vec2 tmpvar_5;\n  tmpvar_5.x = roam_sin.y;\n  tmpvar_5.y = -(roam_cos.y);\n  uv_1.x = (uv_1.x + ((0.04 * \n    ((texture (sampler_noise_lq, ((\n      (0.0125 * tmpvar_4)\n     * uv_1) + (tmpvar_5 * 0.03))).z * 2.0) - 1.0)\n  ) * aspect.x));\n  ret_2 = (texture (sampler_main, uv_1).xyz * vec3(0.99, 0.98, 0.97));\n  ret_2 = (ret_2 + ((\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)).x - 0.5)\n   / 256.0) * 2.0));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_2;\n  ret = tmpvar_6.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  ret_1.x = tmpvar_2.x;\n  ret_1.yz = (tmpvar_2.x * vec2(0.9, 0.7));\n  ret_1 = (pow (ret_1, vec3(1.7, 2.0, 2.2)) * 5.0);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }","warp_hlsl":"// to access a texture on disk: make a sampler.  This example loads \"noise_lq.{tga/jpg/etc}\".\n\n     // auto-binds; .xy = (w,h); .zw = (1/w,1/h)\n\nshader_body \n{\n    uv.x += 0.02 * (tex2D( sampler_noise_lq, \n                         uv*0.050*texsize_noise_lq.zw*texsize.xy*2\n                         + float2(roam_cos.x,roam_sin.x)*0.1 ).y*2-1)*aspect.x;\n    uv.x += 0.04 * (tex2D( sampler_noise_lq, \n                         uv*0.025*texsize_noise_lq.zw*texsize.xy*0.5\n                         + float2(roam_sin.y,-roam_cos.y)*0.03  ).z*2-1)*aspect.x;\n\n    ret = tex2D( sampler_main, uv ).xyz;\n\n    // darken over time\n    // cool idea: different falloff rates for the 3 colors-\n    ret *= float3(0.99,0.98,0.97);\n\n    // ERROR DIFFUSION DITHER - looks great\n    float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\n    ret.xyz += (tex2D(sampler_noise_lq, dither_uv).x-0.5)/256.0*2; \n}","comp_hlsl":"shader_body\n{\n    ret = tex2D(sampler_main, uv).xyz;\n    //ret += GetBlur1(uv)*0.7; ret *= 0.6;\n    \n    ret.yz = ret.x * float2(0.9,0.7);\n    ret = pow(ret, float3(1.7,2.0,2.2));\n    ret *= 5; //gamma\n}"}