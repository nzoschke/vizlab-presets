{"version":2,"baseVals":{"rating":5,"wave_mode":7,"wave_thick":1,"wrap":0,"wave_scale":1.474,"warpanimspeed":1.645,"warpscale":0.01,"zoomexp":0.60804,"zoom":0.9802,"warp":0.06623,"sx":1.0406,"wave_r":0,"wave_g":0,"wave_b":0.1,"wave_y":0.01,"mv_a":0},"shapes":[{"baseVals":{"sides":3,"num_inst":81,"x":0.2,"y":0,"rad":0.05996,"ang":1.88496,"r":0,"g2":0,"a2":1,"border_r":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = .25*instance/num_instance;","init_eqs_eel":"","frame_eqs_eel":"x = .25*instance/num_instance;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.q1=0;a.count=0;a.mc=0;a.is_beat=0;a.timp=0;a.reha=0;a.bimp=0;a.wave_size=0;a.mimp=0;a.tc=0;a.bc=0;","frame_eqs_str":"a.count+=1;a.bc+=a.bass;a.tc+=a.treb;a.mc+=a.mid;a.bimp=.00001<Math.abs(above(3.25*a.bass,a.bass+a.treb+a.mid))?1:0;a.timp=.00001<Math.abs(above(2.75*a.treb,a.bass+a.treb+a.mid))?1:0;a.mimp=.00001<Math.abs(above(2.75*a.mid,a.bass+a.treb+a.mid))?1:0;a.is_beat=.00001<Math.abs(above(.85*a.bass,div(a.bc,a.count)))?1*a.bimp:.00001<Math.abs(above(.85*a.treb,div(a.tc,a.count)))?1*a.timp:.00001<Math.abs(above(.85*a.mid,div(a.mc,a.count)))?1*a.mimp:0;a.is_beat=.00001<Math.abs(above(a.reha,\n0))?0:a.is_beat;a.reha=.00001<Math.abs(a.is_beat)?.5*a.fps:.00001<Math.abs(below(a.reha,1))?0:a.reha-1;a.wave_b=.00001<Math.abs(a.is_beat)?0:.5+.4*Math.sin(a.time+a.bass+a.treb+a.mid);a.wave_r=a.is_beat;a.wave_g=a.is_beat;a.wave_thick=1-a.is_beat;a.wave_brighten=a.is_beat;a.q1=a.is_beat;a.wave_mystery=.00001<Math.abs(a.is_beat)?1-.002*rand(100):0;a.wave_x=.00001<Math.abs(a.is_beat)?.1+.01*rand(80):.6;a.wave_size=.00001<Math.abs(a.is_beat)?1:2;a.dy=.01;a.warp=.1+.125*a.bass_att;","pixel_eqs_str":"a.sx=1+.2*(1-a.y);","init_eqs_eel":"","frame_eqs_eel":"// <<-- Stahlregen's (off)beat detection \n// frame counter for average\ncount = count+1;\n// counters of the bass/treb/mid values for average\nbc = bc+bass;\ntc = tc+treb;\nmc = mc+mid;\n// checking for impact: highest of bass/mid/treb has impact\nbimp = if(above(3.25*bass,bass+treb+mid),1,0);\ntimp = if(above(2.75*treb,bass+treb+mid),1,0);\nmimp = if(above(2.75*mid,bass+treb+mid),1,0);\n// checking for beats: compare adjusted buffered \n// vs. average value and check for impact\nis_beat = if(above(.85*bass,bc/count),1*bimp,\nif(above(.85*treb,tc/count),1*timp,\nif(above(.85*mid,mc/count),1*mimp,\n0))); \n// restricting max number of beats per second (fraction of fps)\nis_beat = if(above(reha,0),0,is_beat);\nreha = if(is_beat,.5*fps,if(below(reha,1),0,reha-1));\n// end of (off)beat detection -->\n\nwave_b = if(is_beat,0,.5+.4*sin(time+bass+treb+mid));\n\nwave_r = is_beat;\nwave_g = is_beat;\nwave_thick = 1-is_beat;\nwave_brighten = is_beat;\nq1 = is_beat;\n\nwave_mystery = if(is_beat,1-.002*rand(100),0);\n\nwave_x = if(is_beat,.1+rand(80)*0.01,.6);\n\nwave_size = if(is_beat,1,2);\n\n\ndy = .01;\n\nwarp = .1+.125*bass_att;","pixel_eqs_eel":"sx = 1+0.2*(1-y);","warp":" shader_body { \n  vec3 ret_1;\n  ret_1.xy = ((texture (sampler_blur1, uv_orig).xyz * scale1) + bias1).xy;\n  vec2 tmpvar_2;\n  tmpvar_2 = fract(uv);\n  ret_1.z = mix (mix (texture (sampler_main, tmpvar_2).xyz, (\n    (texture (sampler_blur1, tmpvar_2).xyz * scale1)\n   + bias1), vec3(0.5, 0.5, 0.5)), texture (sampler_fc_main, tmpvar_2).xyz, vec3((1.0 - rad))).z;\n  ret_1.z = (ret_1.z + ((\n    (0.5 * (texture (sampler_noise_lq, ((\n      (uv_orig * texsize.xy)\n     * texsize_noise_lq.zw) + rand_frame.xy)).z - 0.5))\n   / 256.0) * 15.0));\n  ret_1 = (ret_1 * vec3(0.75, 0.6, 0.98));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = (uv_orig - vec2(0.5, 0.6));\n  float tmpvar_3;\n  tmpvar_3 = (3.0 / tmpvar_2.y);\n  vec2 tmpvar_4;\n  tmpvar_4.x = ((tmpvar_2.x * tmpvar_3) * 0.4);\n  tmpvar_4.y = (tmpvar_3 * 0.4);\n  ret_1 = (texture (sampler_main, fract((\n    (1.0 - abs(((\n      fract(((tmpvar_2 + vec2(0.5, 1.0)) * 0.5))\n     * 2.0) - 1.0)))\n   - \n    (((texture (sampler_noise_hq, (\n      (tmpvar_4 * 0.05)\n     + \n      (vec2(0.1, -0.05) * time)\n    )) - 0.5) * float(int(\n      (tmpvar_2.y > 0.0)\n    ))).xy * 0.025)\n  ))).xyz * (1.0 + (3.0 * q1)));\n  ret_1 = (ret_1 * 1.33);\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = ret_1;\n  ret = tmpvar_5.xyz;\n }","warp_hlsl":"shader_body\n{\n\n// sample previous frame\nret.xy = GetBlur1(uv_orig).xy;\nuv = frac(uv);    \nret.z = lerp(lerp(GetPixel(uv),GetBlur1(uv),.5),tex2D( sampler_fc_main, uv ).xyz,1-rad).z;\n\n//error diffusion dither by Geiss\nfloat2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\nret.z += .5*(tex2D(sampler_noise_lq, dither_uv).z-0.5)/256.0*15;\n    \n// darken (decay) over time\nret *= float3(0.75,0.6,0.98); //or try: ret -= 0.004;\n\n}","comp_hlsl":"shader_body\n{\n\n\n\n\n// ***** Martin's ripples on water surface code, parameterized by Flexi *****\n\n\nfloat h = .4;                      // height of the horizon\nfloat cut_off = 0.0;              // cut off lower border\nfloat2 t = float2(0.1,-0.05)*time;  // velocity\nfloat strength = 0.025;\n\n\nfloat2 c = uv_orig-float2(0.5,1-h);\nfloat z = 3/c.y;\nfloat2 uv_water = float2(c.x*z*h,z*h)*0.05+t;\nint mask = (c.y>0);\nuv_water = (tex2D(sampler_noise_hq,uv_water)-0.5)*mask;\nfloat2 uv_mirror = 1.0-abs(frac((c+float2(0.5,1))*0.5)*2-1)+float2(0,-cut_off);\nuv_mirror =frac(uv_mirror-uv_water.xy*strength);\n\n// ***** :)\n\nuv = uv_mirror;\n\nret = GetPixel(uv)*(1+3*q1);\nret *= 1.33;\n}"}