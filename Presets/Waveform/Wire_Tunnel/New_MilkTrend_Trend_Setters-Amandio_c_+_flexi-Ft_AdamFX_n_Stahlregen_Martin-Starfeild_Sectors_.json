{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":1,"wave_mode":7,"modwavealphabyvolume":1,"wrap":0,"brighten":1,"invert":1,"wave_a":100,"wave_scale":0.466,"wave_smoothing":0.9,"warpscale":0.01,"zoomexp":1.001,"fshader":0.6,"warp":0,"wave_y":0.71,"ob_size":0.005,"ob_r":1,"ob_g":0.37,"ob_b":0.49,"ob_a":1,"ib_size":0.005,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":0,"mv_y":0,"mv_l":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":3,"textured":1,"y":0.04,"rad":0.01,"ang":1.31947,"tex_zoom":0.67165,"r":0,"r2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"a.q5=0;a.q6=0;","frame_eqs_str":"a.rad=.25+.03*(.2*a.q5+.8*a.q6+2*a.bass_att);","init_eqs_eel":"","frame_eqs_eel":"rad=.25+.03*(.2*q5+.8*q6+2*bass_att);"},{"baseVals":{"enabled":1,"textured":1,"x":0.42,"y":0,"rad":0.10721,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"thick":1,"scaling":0.16217,"smoothing":1,"r":0,"g":0,"b":0},"init_eqs_str":"a.q2=0;","frame_eqs_str":"","point_eqs_str":"a.x=a.sample;a.y=.5+.05*Math.tan(6.28*a.x)+.1*Math.tan(6.28*a.q2*a.x);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x=sample;\ny=.5+.05*tan(2*3.14*x)+.1*tan(2*3.14*q2*x);"},{"baseVals":{"scaling":0.01,"smoothing":1,"r":0,"g":0,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"x=sample;\ny=.17+.02*sin(7*3.14*x);\nx=x+3.14*.022*sin(7*time)","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x=sample;\ny=.17+.02*sin(7*3.14*x);\nx=x+3.14*.022*sin(7*time)"},{"baseVals":{"enabled":1,"thick":1,"scaling":0.01,"smoothing":1,"r":0,"g":0.01,"b":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"a.x=.5+.05*a.sample;a.y=.19+.03*Math.cos(23.5*a.x);a.x+=.003*Math.sin(a.time);a.y+=.11*Math.sin(a.time)*Math.sin(6.28*a.x);a.y+=.02*Math.sin(.4*a.time);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x=.5+.05*sample;\ny=.19+.03*cos(23.5*x);\nx=x+.003*(sin(time));\ny=y+.11*sin(time)*sin(2*3.14*x);\ny=y+.02*sin(.4*time);"},{"baseVals":{"enabled":1,"thick":1,"b":0},"init_eqs_str":"a.q7=0;","frame_eqs_str":"","point_eqs_str":"a.x=.52+.01*a.sample;a.y=.2+.04*a.sample;a.x+=.001*a.q7*Math.sin(15*a.q7);a.y+=.001*a.q7*Math.cos(15*a.q7);a.b=a.sample;a.g=a.sample;a.r=a.sample;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x=.52+.01*sample;\ny=.2+.04*sample;\n\nx=x+.001*q7*sin(15*q7);\ny=y+.001*q7*cos(15*q7);\n\n//x=x+.2*(sin(time)+cos(time));\n//y=y+.2*(sin(time)-cos(time));\n\nb=sample;\ng=sample;\nr=sample;"}],"init_eqs_str":"a.q25=0;a.t1=0;a.q22=0;a.q21=0;a.q6=0;a.q1=0;a.q5=0;a.q9=0;a.v=0;a.mm=0;a.tt=0;a.t3=0;a.bm=0;a.q23=0;a.q24=0;a.q4=0;a.q26=0;a.mt=0;a.mx=0;a.mn=0;a.t2=0;a.bb=0;a.q2=0;a.q27=0;a.q3=0;a.q7=0;a.q8=0;","frame_eqs_str":"a.q1=Math.sin(a.time);a.q2=Math.sin(.3*a.time);a.q3=Math.sin(.2*a.time);a.q4=Math.sin(.1*a.time);a.q5=Math.sin(20*a.time);a.q6=Math.sin(25*a.time);a.ib_g=.9+.1*a.q4;a.ib_r=.7+.15*a.q2;a.ib_b=.8+.2*a.q3;a.ob_g=.6+.1*a.q4;a.ob_r=.4+.15*a.q2;a.ob_b=.5+.2*a.q3;a.t1=.008+a.t1;a.t1*=above(15,a.t1);a.t2=.004+a.t2;a.t2*=above(20,a.t2);a.t3=.006+a.t3;a.t3*=above(15,a.t3);a.q7=a.t1;a.q8=a.t2;a.q9=a.t3;a.monitor=a.q7;a.bb=.99*a.bb+.02*a.bass;a.mm=.99*a.mm+.02*a.mid;a.tt=.99*a.tt+.02*a.treb;\na.mx=Math.max(Math.max(a.bb,a.mm),a.tt);a.mn=Math.min(Math.min(a.bb,a.mm),a.tt);a.t1=div(a.bb-a.mn,a.mx-a.mn);a.t2=div(a.mm-a.mn,a.mx-a.mn);a.t3=div(a.tt-a.mn,a.mx-a.mn);a.v=div(.3,a.fps);a.bm+=(a.t1-a.t2)*a.v;a.mt+=(a.t2-a.t3)*a.v;a.q21=0;a.q22=.5;a.q23=0;a.q24=-.5;a.q25=div(.5,Math.asin(1));a.q26=a.bm;a.q27=a.mt;","pixel_eqs_str":"a.dx=.006*Math.sin(a.y)+.003*Math.tan(10+20*a.y);a.dy=.005*Math.sin(a.x)+.02*Math.tan(30*a.x);","init_eqs_eel":"","frame_eqs_eel":"q1=sin(time);\nq2=sin(.3*time);\nq3=sin(.2*time);\nq4=sin(.1*time);\nq5=sin(20*time);\nq6=sin(25*time);\n\nib_g=.9+.1*q4;\nib_r=.7+.15*q2;\nib_b=.8+.2*q3;\nob_g=.6+.1*q4;\nob_r=.4+.15*q2;\nob_b=.5+.2*q3;\n\nt1=.008+t1;\nt1=above(15,t1)*t1;\nt2=.004+t2;\nt2=above(20,t2)*t2;\nt3=.006+t3;\nt3=above(15,t3)*t3;\n\nq7=t1;\nq8=t2;\nq9=t3;\n\nmonitor=q7;\n\n// lines below belong to the bipolar composite shader \n\nbb = bb*0.99 + bass*0.02;\nmm = mm*0.99 + mid*0.02;\ntt = tt*0.99 + treb*0.02;\n\nmx = max(max(bb,mm),tt);\nmn = min(min(bb,mm),tt);\n\nt1 = (bb-mn)/(mx-mn);\nt2 = (mm-mn)/(mx-mn);\nt3 = (tt-mn)/(mx-mn);\n\nv = 0.3/fps;\nbm = bm + (t1-t2)*v;\nmt = mt + (t2-t3)*v;\n\n// coordinates pole 1\nq21 = 0; // X\nq22 = 0.5; // Y\n\n// coordinates pole 2\nq23 = 0;\nq24 = -0.5;\n\nq25 = 0.5/asin(1); // pi/4\n\nq26 = bm; // longitude\nq27 = mt; // latitude","pixel_eqs_eel":"dx= 0.006*sin(y) + 0.003*tan(10+20*y);\ndy= 0.005*sin(x) +  0.02*tan(30*x);","warp":" shader_body { \n  vec2 uv_z_1;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (1.0 - abs((\n    (fract((uv * 0.5)) * 2.0)\n   - 1.0)));\n  ret_2.x = (texture (sampler_fc_main, tmpvar_3).y * 0.65);\n  vec2 tmpvar_4;\n  tmpvar_4 = (texsize.zw * 6.0);\n  vec2 tmpvar_5;\n  vec2 tmpvar_6;\n  tmpvar_6 = (uv_orig - 0.5);\n  tmpvar_5 = ((tmpvar_6 * 0.996) + 0.5);\n  vec2 tmpvar_7;\n  tmpvar_7.x = (((texture (sampler_blur1, \n    (tmpvar_5 + (vec2(1.0, 0.0) * tmpvar_4))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (tmpvar_5 - (vec2(1.0, 0.0) * tmpvar_4))\n  ).xyz * scale1) + bias1)).z;\n  tmpvar_7.y = (((texture (sampler_blur1, \n    (tmpvar_5 + (vec2(0.0, 1.0) * tmpvar_4))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (tmpvar_5 - (vec2(0.0, 1.0) * tmpvar_4))\n  ).xyz * scale1) + bias1)).z;\n  uv_z_1 = (tmpvar_5 - ((tmpvar_7 * texsize.zw) * 2.0));\n  ret_2.z = max (((\n    (texture (sampler_fc_main, tmpvar_3).x - 0.5)\n   * 3.0) * clamp (\n    (1.0 - (sqrt(dot (tmpvar_6, tmpvar_6)) * 3.2))\n  , 0.0, 1.0)), texture (sampler_fc_main, uv_z_1).z);\n  ret_2.z = (ret_2.z + ((texture (sampler_fc_main, uv_z_1).z - \n    ((texture (sampler_blur1, clamp (uv_z_1, 0.0, 1.0)).xyz * scale1) + bias1)\n  .z) * 0.02));\n  ret_2.y = (max (texture (sampler_fc_main, mix (uv, uv_orig, vec2(1.0004, 1.0004))).y, texture (sampler_fc_main, uv_orig).z) - 0.008);\n  ret_2.z = (ret_2.z * (1.0 + (ret_2.y * 0.024)));\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = ret_2;\n  ret = tmpvar_8.xyz;\n }","comp":" shader_body { \n  vec3 crisp_1;\n  vec2 uv3_2;\n  vec2 uv2_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = ((uv - 0.5) * aspect.xy);\n  float tmpvar_5;\n  tmpvar_5 = (0.1 / (sqrt(\n    dot (tmpvar_4, tmpvar_4)\n  ) + 0.05));\n  vec2 tmpvar_6;\n  float tmpvar_7;\n  tmpvar_7 = (ang / 3.14);\n  tmpvar_6.x = tmpvar_7;\n  tmpvar_6.y = (tmpvar_5 * 1.5);\n  uv2_3.y = (tmpvar_6.y + (0.1 * time));\n  uv2_3.x = (tmpvar_7 + (0.02 * time));\n  uv3_2.y = (tmpvar_5 + q30);\n  uv3_2.x = (tmpvar_7 + (time / 32.0));\n  crisp_1 = ((texture (sampler_main, uv2_3).xyz + (2.0 * texture (sampler_main, uv3_2).xyz)) + ((2.0 * \n    ((texture (sampler_blur2, fract(uv2_3)).xyz * scale2) + bias2)\n  ) + (2.0 * \n    ((texture (sampler_blur2, fract(uv3_2)).xyz * scale2) + bias2)\n  )));\n  crisp_1 = ((3.0 * crisp_1) * rad);\n  float tmpvar_8;\n  tmpvar_8 = clamp ((1.0 - (4.0 * rad)), 0.0, 1.0);\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ((crisp_1 + (\n    ((vec3(1.0, 0.0, 1.0) * uv.y) * pow ((1.0 - rad), 8.0))\n   * tmpvar_8)) + (tmpvar_8 * texture (sampler_main, uv).xyz));\n  ret = tmpvar_9.xyz;\n }","warp_hlsl":"shader_body\n{\nfloat2 uv_m = 1.0 - abs( frac( uv * 0.5 ) * 2.0 - 1.0 ); // Eo.S' mirror code\nret.x = tex2D( sampler_fc_main, uv_m ).y*0.65;\n\n\nfloat2 d = texsize.zw*6;\nfloat2 uv_z = (uv_orig-0.5)*0.996 + 0.5; // a small dose of zoom-in\nfloat3 dx = ( GetBlur1(uv_z + float2(1,0)*d) - GetBlur1(uv_z-float2(1,0)*d) );\nfloat3 dy = ( GetBlur1(uv_z + float2(0,1)*d) - GetBlur1(uv_z-float2(0,1)*d) );\nuv_z -=float2(dx.z,dy.z)*texsize.zw*2; //shortening of the nebulous matter\nret.z = max((tex2d(sampler_fc_main,uv_m).x-0.5)*3*saturate(1-length(uv_orig-0.5)*3.2), // feeded by the inner of the red channel\n             tex2d(sampler_fc_main,uv_z).z);\nret.z += (tex2d(sampler_fc_main,uv_z).z - GetBlur1(saturate(uv_z)).z)*0.02; // sort of geiss' skin dot code\n\n\nfloat2 uv_y = lerp(uv,uv_orig,1.0004); // pushing the glassy stuff a little bit\nret.y =max(tex2d(sampler_fc_main,uv_y).y ,tex2d(sampler_fc_main,uv_orig).z)-0.008; // feeded by the green channel and fade-out\n\nret.z *=1+ret.y*0.024;\n}","comp_hlsl":"shader_body\n{\nfloat2 uv1 = (uv-0.5)*aspect.xy;\n\nfloat rad2 = length(uv1) + .05;\nfloat rad1 = .1/rad2 ;\n\nfloat2 uv2 = float2 (ang/3.14, rad1*1.5);\nuv2.y = uv2.y  +0.1*time;\nuv2.x = uv2.x  +.02*time;\n\nfloat2 uv3 = float2 (ang/3.14, rad1);\nuv3.y = uv3.y  + q30 ;\nuv3.x = uv3.x  + time/32;\n\n\nfloat3 crisp = GetPixel(uv2) + 2*GetPixel(uv3);\ncrisp += 2*GetBlur2(frac(uv2)) + 2*GetBlur2(frac(uv3));\n\nfloat3 lay1 = float3 (1,0,1)*uv.y*pow(1-rad,8);\n\ncrisp = 3*crisp * pow(rad,1);\n\nfloat mask = saturate(1-4*rad);\n\nret = crisp + lay1*mask + mask * GetPixel(uv);\n\n}"}