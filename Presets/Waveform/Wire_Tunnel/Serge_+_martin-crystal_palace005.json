{"version":2,"baseVals":{"rating":5,"gammaadj":1.9,"echo_zoom":1.169,"wave_mode":2,"wave_brighten":0,"wrap":0,"wave_a":1,"wave_scale":0,"wave_smoothing":0.9,"wave_mystery":0.173,"warpscale":1.331,"zoom":0.99951,"cx":-1,"warp":0.72142,"sy":0.9803,"wave_g":0,"wave_b":0,"wave_x":0.448,"wave_y":0.122,"ob_size":0.5,"ob_r":1,"ib_size":0.5,"ib_r":1,"ib_g":0,"ib_b":0,"mv_x":1,"mv_y":1,"mv_dx":0.087,"mv_dy":0.343,"mv_l":1.663,"mv_r":0.89,"mv_g":0.03,"mv_b":0.881,"mv_a":0.199},"shapes":[{"baseVals":{"enabled":1,"sides":11,"textured":1,"rad":0.85699,"tex_zoom":0.01,"g":1,"b":1,"a":0.7,"r2":1,"g2":0,"b2":0.06,"border_a":0},"init_eqs_str":"a.q2=0;a.my_ang=0;","frame_eqs_str":"a.border_r+=1.5*Math.sin(1.13*a.q2);a.border_b+=.5*Math.sin(1.23*a.q2);a.border_g+=.5*Math.sin(1.33*a.q2);a.my_ang-=.03*a.treb+.03;a.ang=a.my_ang;","init_eqs_eel":"","frame_eqs_eel":"border_r = border_r + 1.5*sin(q2*1.13);\nborder_b = border_b + 0.5*sin(q2*1.23);\nborder_g = border_g + 0.5*sin(q2*1.33);\n//ang = 0.503 + (bass_att * 0.04);\nmy_ang = my_ang - ((treb * 0.03) + 0.03);\nang = my_ang;"},{"baseVals":{"enabled":1,"sides":6,"rad":0.7,"ang":1.22832,"tex_zoom":0.14977,"r":0,"a":0.2,"g2":0,"a2":1,"border_a":0},"init_eqs_str":"a.q1=0;a.q2=0;a.q3=0;","frame_eqs_str":"a.r2=a.q1;a.g2=a.q2;a.b2=a.q3;a.x=.2+Math.sin(a.q3);a.y=a.q1;","init_eqs_eel":"","frame_eqs_eel":"r2 = q1;\ng2 = q2;\nb2 = q3;\nx = .2+sin(q3);\ny = q1;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.bl=0;a.tic=0;a.swi=0;a.q6=0;a.it=0;a.q1=0;a.q5=0;a.bvb=0;a.itar=0;a.mid_avg=0;a.tin=0;a.bass_avg=0;a.vav=0;a.rate=0;a.bd=0;a.q4=0;a.cha=0;a.ra=0;a.treb_avg=0;a.ul=0;a.db=0;a.gv=0;a.q2=0;a.iter=0;a.q3=0;a.vm=0;a.cma=0;a.cm=0;a.rb=0;","frame_eqs_str":"a.bl=3.8;a.ul=7.9;a.rate=11.9;a.cha=.01;a.gv=.00001<Math.abs(above(a.gv,a.bl))?.00001<Math.abs(below(a.gv,a.ul))?.00001<Math.abs(above(a.fps,a.rate))?a.gv+a.cha:a.gv-a.cha:a.ul-.1:a.bl+.1;a.monitor=a.gv;a.wave_a=0;a.tic=Math.min(a.time-a.tin,1);a.tin=a.time;a.ra=10;a.treb_avg=a.tic*(a.treb_avg*(div(1,a.tic)-a.ra)+a.ra*a.treb);a.mid_avg=a.tic*(a.mid_avg*(div(1,a.tic)-a.ra)+a.ra*a.mid);a.bass_avg=a.tic*(a.bass_avg*(div(1,a.tic)-a.ra)+a.ra*a.bass);a.rb=1;a.vav=a.tic*(a.vav*(div(1,\na.tic)-a.rb)+a.rb*(a.bass+a.treb+a.mid)*.33333);a.q1=a.treb_avg;a.q2=a.mid_avg;a.q3=a.bass_avg;a.db=a.bass-a.bass_avg;a.it=(a.it+a.tic)*below(a.it,1);a.rb=.5*div(1,a.tic);a.bvb=a.tic*(a.bass*a.rb+(div(1,a.tic)-a.rb)*a.bvb);a.bd=a.bass-a.bvb;a.vm=a.vm-a.tic+a.swi;a.swi=above(a.bd-a.vm,0);a.q4=1-a.swi;a.cm=.00001<Math.abs(above(a.iter,30)+equal(a.time,0))?rand(3)+1:a.cm;a.iter=(a.iter+a.tic)*(1-above(a.iter,30));a.q5=.00001<Math.abs(equal(a.cm,0))?3:a.cm;a.cma=.00001<Math.abs(above(a.itar,5)+equal(a.time,\n0))?Math.floor(5*a.vav):a.cma;a.itar=(a.itar+a.tic)*(1-above(a.itar,5));a.q6=Math.floor(5*a.vav);a.decay=.97;a.zoom=1.01;a.sx=1;a.sy=1;","pixel_eqs_str":"a.warp=a.bass;","init_eqs_eel":"","frame_eqs_eel":"bl = 3.8;\nul = 7.9;\nrate = 11.9;\ncha = .01;\n\ngv = if(above(gv,bl),  if(below(gv,ul),  if(above(fps,rate),gv + cha,gv - cha),  ul-.1),bl+.1);\n\n\n\nmonitor = gv;\n\nwave_a = 0;\n\ntic = min(time - tin,1);\ntin = time;\n\nra = 10;\n\n\ntreb_avg = tic*(treb_avg*(1/tic - ra) + ra*treb);\nmid_avg = tic*(mid_avg*(1/tic - ra) + ra*mid);\nbass_avg = tic*(bass_avg*(1/tic - ra) + ra*bass);\n\nrb = 1;\nvav = tic*(vav*(1/tic - rb) + rb*(bass+treb+mid)*.33333);\nq1 = treb_avg;\nq2 = mid_avg;\nq3 = bass_avg;\n\ndb = bass - bass_avg;\n\nit = (it + tic)*below(it,1);\n\nrb = .5*(1/tic);\nbvb = tic*(bass*rb + (1/tic-rb)*bvb);\nbd = bass - bvb;\n\nvm = vm - tic + swi;\nswi = above(bd - vm,0);\n\nq4 = 1-swi;\n\ncm = if(above(iter,30) + equal(time,0),rand(3) + 1,cm);\niter = (iter + tic)*(1-above(iter,30));\nq5 = if(equal(cm,0),3,cm);\n\ncma = if(above(itar,5) + equal(time,0),int(vav*5),cma);\nitar = (itar + tic)*(1-above(itar,5));\n\nq6 = int(vav*5);\n\n\ndecay=0.97;\nzoom=1.01;\nsx=1;sy=1;","pixel_eqs_eel":"warp = bass;","warp":"vec2 xlat_mutablers;\nvec2 xlat_mutableuv1;\nvec2 xlat_mutableuv6;\n shader_body { \n  vec2 uv_1;\n  vec3 xlat_varmod_2;\n  vec2 uv2_3;\n  float ang2_4;\n  float dist_5;\n  float z_6;\n  vec3 ret_7;\n  uv_1 = uv_orig;\n  xlat_mutableuv1 = ((uv_orig - 0.2) * aspect.xy);\n  float tmpvar_8;\n  tmpvar_8 = ((16.0 * sqrt(\n    dot (xlat_mutableuv1, xlat_mutableuv1)\n  )) + time);\n  z_6 = tmpvar_8;\n  xlat_mutablers = (clamp ((\n    (sin(tmpvar_8) / cos(tmpvar_8))\n   * \n    normalize(xlat_mutableuv1)\n  ), vec2(-5.0, -5.0), vec2(5.0, 5.0)) / 2.0);\n  vec2 tmpvar_9;\n  tmpvar_9 = sin((xlat_mutableuv1 * q31));\n  dist_5 = (sqrt(dot (tmpvar_9, tmpvar_9)) * ((\n    abs(xlat_mutableuv1.x)\n   + \n    abs(xlat_mutableuv1.y)\n  ) + q32));\n  float tmpvar_10;\n  float tmpvar_11;\n  tmpvar_11 = (min (abs(\n    (tmpvar_9.y / tmpvar_9.x)\n  ), 1.0) / max (abs(\n    (tmpvar_9.y / tmpvar_9.x)\n  ), 1.0));\n  float tmpvar_12;\n  tmpvar_12 = (tmpvar_11 * tmpvar_11);\n  tmpvar_12 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_12) + 0.05368138) * tmpvar_12) - 0.1173503)\n     * tmpvar_12) + 0.1938925) * tmpvar_12) - 0.3326756)\n   * tmpvar_12) + 0.9999793) * tmpvar_11);\n  tmpvar_12 = (tmpvar_12 + (float(\n    (abs((tmpvar_9.y / tmpvar_9.x)) > 1.0)\n  ) * (\n    (tmpvar_12 * -2.0)\n   + 1.570796)));\n  tmpvar_10 = (tmpvar_12 * sign((tmpvar_9.y / tmpvar_9.x)));\n  if ((abs(tmpvar_9.x) > (1e-08 * abs(tmpvar_9.y)))) {\n    if ((tmpvar_9.x < 0.0)) {\n      if ((tmpvar_9.y >= 0.0)) {\n        tmpvar_10 += 3.141593;\n      } else {\n        tmpvar_10 = (tmpvar_10 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_10 = (sign(tmpvar_9.y) * 1.570796);\n  };\n  ang2_4 = (0.1 * floor((16.0 * tmpvar_10)));\n  vec2 tmpvar_13;\n  tmpvar_13.x = cos(ang2_4);\n  tmpvar_13.y = sin(ang2_4);\n  z_6 = (1.0 - cos((2.0 * dist_5)));\n  float tmpvar_14;\n  tmpvar_14 = clamp (z_6, 0.0, 1.0);\n  z_6 = tmpvar_14;\n  float tmpvar_15;\n  tmpvar_15 = float((tmpvar_14 >= 0.5));\n  xlat_mutablers = ((q28 * xlat_mutablers) + ((1.0 - q28) * xlat_mutablers.yx));\n  uv_1 = (uv_orig + ((\n    ((1.0 - tmpvar_15) * 0.03)\n   * xlat_mutablers.yx) + (\n    ((0.5 * tmpvar_15) * tmpvar_14)\n   * \n    normalize(((0.5 * tmpvar_9) + tmpvar_13))\n  )));\n  mat2 tmpvar_16;\n  tmpvar_16[uint(0)] = _qb.xy;\n  tmpvar_16[1u] = _qb.zw;\n  xlat_mutableuv6 = (xlat_mutableuv1 * tmpvar_16);\n  vec2 tmpvar_17;\n  tmpvar_17.x = q5;\n  tmpvar_17.y = q6;\n  uv2_3 = (((0.7 * xlat_mutableuv1) + (0.3 * \n    sin(((xlat_mutableuv1 * 16.0) + (4.0 * tmpvar_17)))\n  )) * 0.2);\n  vec4 tmpvar_18;\n  tmpvar_18 = texture (sampler_main, uv_1);\n  vec3 tmpvar_19;\n  tmpvar_19 = ((tmpvar_18.xyz + vec3((\n    abs((0.01 / (sqrt(xlat_mutableuv6.x) + 0.001)))\n   * \n    (rad + 0.2)\n  ))) + vec3((q26 * clamp (\n    (0.001 / sqrt(dot (uv2_3, uv2_3)))\n  , 0.0, 1.0))));\n  xlat_varmod_2 = (1.0 - ((texture (sampler_noise_lq, \n    ((0.5 * uv_1) + (time * 0.01))\n  ) - 0.2).xyz * (tmpvar_18.xyz - \n    (0.5 * ((texture (sampler_blur1, fract(uv_1)).xyz * scale1) + bias1))\n  )));\n  ret_7 = (((\n    (1.0 - tmpvar_15)\n   * tmpvar_19) * xlat_varmod_2) + ((tmpvar_15 * tmpvar_19) * xlat_varmod_2));\n  ret_7 = ((ret_7 * 0.98) - 0.03);\n  vec4 tmpvar_20;\n  tmpvar_20.w = 1.0;\n  tmpvar_20.xyz = ret_7;\n  ret = tmpvar_20.xyz;\n }","comp":" shader_body { \n  vec3 crisp_1;\n  vec2 uv3_2;\n  vec2 uv2_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = ((uv - 0.5) * aspect.xy);\n  float tmpvar_5;\n  tmpvar_5 = (0.1 / (sqrt(\n    dot (tmpvar_4, tmpvar_4)\n  ) + 0.05));\n  vec2 tmpvar_6;\n  float tmpvar_7;\n  tmpvar_7 = (ang / 3.14);\n  tmpvar_6.x = tmpvar_7;\n  tmpvar_6.y = (tmpvar_5 * 1.5);\n  uv2_3.y = (tmpvar_6.y + (0.1 * time));\n  uv2_3.x = (tmpvar_7 + (0.02 * time));\n  uv3_2.y = (tmpvar_5 + q30);\n  uv3_2.x = (tmpvar_7 + (time / 32.0));\n  crisp_1 = ((texture (sampler_main, uv2_3).xyz + (2.0 * texture (sampler_main, uv3_2).xyz)) + ((2.0 * \n    ((texture (sampler_blur2, fract(uv2_3)).xyz * scale2) + bias2)\n  ) + (2.0 * \n    ((texture (sampler_blur2, fract(uv3_2)).xyz * scale2) + bias2)\n  )));\n  crisp_1 = ((3.0 * crisp_1) * rad);\n  float tmpvar_8;\n  tmpvar_8 = clamp ((1.0 - (4.0 * rad)), 0.0, 1.0);\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ((crisp_1 + (\n    ((vec3(1.0, 0.0, 1.0) * uv.y) * pow ((1.0 - rad), 8.0))\n   * tmpvar_8)) + (tmpvar_8 * texture (sampler_main, uv).xyz));\n  ret = tmpvar_9.xyz;\n }","warp_hlsl":"float3 mus;\nfloat2 rs, uv1, uv6, uv7, uv8;\nfloat dx,dy;\nshader_body {\nuv = uv_orig;\nuv1 = (uv-.2) * aspect.xy;\n\n//BACKGROUND\nfloat z = 16*length(uv1)+time;\nfloat2 uvn =normalize(uv1);\nrs = clamp(tan(z)*uvn,-5,5)/2;\n\n//CRYSTAL\nfloat mult = q31;\nuv7 = sin(uv1*mult);\nuv8 = uv7;\nfloat dist = length(uv8);\ndist *= (abs(uv1.x) + abs(uv1.y))+ q32;\n\nfloat ang2 = atan2 (uv8.y,uv8.x);\nang2 =  .1*floor (16* ang2);\nfloat2 dir = .5*uv8+float2 (cos(ang2), sin(ang2));\n\n\nz = (1-cos(2*dist));\nz = saturate (z);\n\n//ADD\nfloat mask = (z >= .5); //momentan beliebig\nrs = q28*rs + (1-q28)*rs.yx;\nuv += (1-mask)*.03*(rs.yx) + .5*mask*z*normalize(dir);\n\n//ZENTRALSTRAHL\nuv6 = mul (uv1,float2x2(_qb));\nmus = abs(0.01/(sqrt(uv6.x)+.001))*(rad+.2);\n\n//DOTS\nfloat2 uv2 = .7*uv1+.3*sin(uv1*16+4*float2 (q5,q6));\nuv2 *= .2;\nfloat3 dots = q26*saturate(.001/(length(uv2)));\nfloat3 blur = GetBlur1(frac(uv));\nfloat3 crisp= GetPixel(uv);\nfloat3 diff = (crisp) - .5*blur;\nfloat3 ret1 = crisp + mus + dots;\n\nfloat3 mod = tex2D (sampler_noise_lq,.5*uv+time*.01)-.2;\nmod = 1 - mod*diff;\n\nret = (1-mask)*ret1*mod + mask*ret1*mod;\nret = ret *.98- .03;\n\n}","comp_hlsl":"shader_body\n{\nfloat2 uv1 = (uv-0.5)*aspect.xy;\n\nfloat rad2 = length(uv1) + .05;\nfloat rad1 = .1/rad2 ;\n\nfloat2 uv2 = float2 (ang/3.14, rad1*1.5);\nuv2.y = uv2.y  +0.1*time;\nuv2.x = uv2.x  +.02*time;\n\nfloat2 uv3 = float2 (ang/3.14, rad1);\nuv3.y = uv3.y  + q30 ;\nuv3.x = uv3.x  + time/32;\n\n\nfloat3 crisp = GetPixel(uv2) + 2*GetPixel(uv3);\ncrisp += 2*GetBlur2(frac(uv2)) + 2*GetBlur2(frac(uv3));\n\nfloat3 lay1 = float3 (1,0,1)*uv.y*pow(1-rad,8);\n\ncrisp = 3*crisp * pow(rad,1);\n\nfloat mask = saturate(1-4*rad);\n\nret = crisp + lay1*mask + mask * GetPixel(uv);\n\n}"}