{"version":2,"baseVals":{"rating":5,"decay":0.99,"echo_zoom":2.978,"echo_alpha":0.5,"wave_mode":2,"additivewave":1,"wave_dots":1,"red_blue":1,"wave_a":4.696,"wave_scale":1.497,"wave_smoothing":0.88,"warpanimspeed":1.459,"warpscale":2.007,"fshader":1,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.7,"wave_g":0.7,"wave_b":0.7,"ob_size":0,"ob_a":0.8,"ib_size":0.26,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.mq29=0;a.cthr=0;a.mq1=0;a.index2=0;a.q25=0;a.index=0;a.q12=0;a.copy=0;a.q22=0;a.q21=0;a.q13=0;a.q29=0;a.q1=0;a.mq31=0;a.dec_med=0;a.str=0;a.index3=0;a.mq21=0;a.mq24=0;a.chng=0;a.mq28=0;a.rott=0;a.mq23=0;a.is_beat=0;a.q31=0;a.q23=0;a.k1=0;a.q24=0;a.dec_slow=0;a.q11=0;a.atime=0;a.q4=0;a.q26=0;a.p2=0;a.avg=0;a.movez=0;a.mq27=0;a.mq25=0;a.mq22=0;a.beat=0;a.vol=0;a.p1=0;a.peak=0;a.mq26=0;a.q2=0;a.q27=0;a.p3=0;a.q3=0;a.t0=0;a.rot1=0;a.q28=0;a.q30=0;a.q20=0;","frame_eqs_str":"a.chng=Math.sin(.5*a.time);a.cthr=.9999;a.mq21=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq21;a.mq22=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq22;a.mq23=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq23;a.mq24=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq24;a.mq25=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq25;a.mq26=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq26;a.mq27=.00001<Math.abs(above(a.chng,a.cthr))?rand(1):a.mq27;a.mq28=.00001<Math.abs(above(a.chng,\na.cthr))?rand(1):a.mq28;a.mq29=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq29;a.mq31=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq31;a.monitor=a.chng;a.q21=a.mq21;a.q22=a.mq22;a.q23=a.mq23;a.q24=a.mq24;a.q25=a.mq25;a.q26=a.mq26;a.q27=a.mq27;a.q28=a.mq28;a.q29=a.mq29;a.q31=a.mq31;a.monitor=a.mq1;a.vol=a.bass+a.treb+a.mid;a.atime+=a.vol;a.q11=.4+.4*Math.sin(.006*a.atime);a.q12=.4+.4*Math.cos(.00613828348*a.atime);a.q13=.4+.4*Math.sin(.00598593455*a.atime);a.monitor=a.q13;a.dec_med=\npow(.9,div(30,a.fps));a.dec_slow=pow(.99,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.5+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,4);a.index2=mod(a.index2+a.is_beat*bnot(a.index),4);a.index3=mod(a.index3+a.is_beat*bnot(a.index)*bnot(a.index2),3);a.q20=a.avg;a.q21=a.beat;a.q22=Math.max(a.peak,4);\na.q23=a.index;a.q24=a.is_beat;a.q26=Math.max(a.bass+a.mid+a.treb,3);a.movez+=div(3*(1+.3*a.q26),a.fps);a.q30=a.movez;a.k1=a.is_beat*equal(a.index,0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_med*a.p2+(1-a.dec_med)*a.p1;a.p3=a.dec_med*a.p3+(1-a.dec_med)*a.p2;a.rott=div(3.1416*a.p3,2);a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.q3=-a.q2;a.q4=a.q1;a.str=a.str*a.dec_slow+(1-a.dec_slow)*a.index3;a.q27=4-a.str;a.mv_a=equal(a.index2,2)*bnot(a.index)*.5;a.rot1=a.dec_med*a.rot1+(1-a.dec_med)*bnot(a.index2);\na.q28=a.rot1;a.copy=a.copy*a.dec_slow+(1-a.dec_slow)*a.index3;a.q29=.3*a.copy;","pixel_eqs_str":"a.dx=.04*a.q28;a.rot=.06*a.q2;a.zoom=.96+.1*Math.sin(div(a.time,7));","init_eqs_eel":"","frame_eqs_eel":"chng=sin(time*.5);\ncthr=.9999;\nmq21=if(above(chng,cthr),rand(3),mq21);\nmq22=if(above(chng,cthr),rand(3),mq22);\nmq23=if(above(chng,cthr),rand(3),mq23);\nmq24=if(above(chng,cthr),rand(2),mq24);\nmq25=if(above(chng,cthr),rand(2),mq25);\nmq26=if(above(chng,cthr),rand(2),mq26);\nmq27=if(above(chng,cthr),rand(1),mq27);\nmq28=if(above(chng,cthr),rand(1),mq28);\nmq29=if(above(chng,cthr),rand(1)*.3,mq29);\nmq31=if(above(chng,cthr),rand(1)*.3,mq31);\nmonitor=chng;\nq21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;\nq27=mq27;q28=mq28;q29=mq29;q31=mq31;\n\nmonitor=mq1;\nvol=bass+treb+mid;\natime=atime+vol;\nq11=.4+sin(atime*.006        )*.4;\nq12=.4+cos(atime*.00613828348)*.4;\nq13=.4+sin(atime*.00598593455)*.4;\nmonitor=q13;\ndec_med = pow (0.9, 30/fps);\ndec_slow = pow (0.99, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .5+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %4;\nindex2 = (index2 + is_beat*bnot(index))%4;\nindex3 = (index3 + is_beat*bnot(index)*bnot(index2))%3;\n\n\nq20 = avg;\nq21 = beat;\nq22 = max(peak,4);\nq23 = index;\nq24 = is_beat;\nq26 = max(bass + mid + treb,3);\n\nmovez = movez + .1*(1+.3*q26)*30/fps;\nq30 = movez;\n\nk1 =  is_beat*equal(index,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\np3 = dec_med * p3+ (1-dec_med)*p2;\nrott = p3*3.1416/2;\n\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\n\nstr = str * dec_slow + (1-dec_slow) * index3;\nq27 = 4 - str;\n\nmv_a = equal(index2,2)*bnot(index)*.5;\n\nrot1 = dec_med * rot1 + (1-dec_med) * bnot(index2) ;\nq28 = rot1;\n\ncopy = copy * dec_slow + (1-dec_slow)*index3;\nq29 = .3*copy;","pixel_eqs_eel":"dx = 0.04*q28;\nrot = .06*q2;\nzoom = .96 + .1*sin(time/7);\n//zoom = 1.04;","warp":"vec3 xlat_mutablemus;\n shader_body { \n  vec2 uv_1;\n  uv_1 = uv;\n  vec2 rs_2;\n  vec2 uv6_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = ((uv_orig - 0.5) * aspect.xy);\n  uv6_3 = tmpvar_4;\n  float theta_5;\n  theta_5 = ((q1 * (\n    (6.0 * q2)\n   * \n    sqrt(dot (tmpvar_4, tmpvar_4))\n  )) + q30);\n  vec2 tmpvar_6;\n  tmpvar_6 = clamp (((\n    sin(theta_5)\n   / \n    cos(theta_5)\n  ) * -(\n    normalize((1.0/(tmpvar_4)))\n  )), vec2(-8.0, -8.0), vec2(8.0, 8.0));\n  rs_2 = tmpvar_6;\n  if ((q28 == 1.0)) {\n    rs_2 = (tmpvar_6 * cos((\n      (tmpvar_4.yx * 3.0)\n     * q27)));\n  };\n  uv_1 = (uv + (rs_2 / 40.0));\n  vec2 tmpvar_7;\n  tmpvar_7.x = rad;\n  tmpvar_7.y = sqrt(dot (tmpvar_4, tmpvar_4));\n  uv6_3 = (0.5 * tmpvar_7);\n  float tmpvar_8;\n  tmpvar_8 = clamp ((0.08 / sqrt(\n    (uv6_3.y - q10)\n  )), 0.0, 1.0);\n  xlat_mutablemus = vec3(tmpvar_8);\n  vec4 tmpvar_9;\n  tmpvar_9 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv6_3.xyy) * (\n    (q27 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q29)));\n  if (((tmpvar_8 > (q21 * q13)) && (tmpvar_8 <= (q24 * q11)))) {\n    xlat_mutablemus.y = (tmpvar_8 + (tmpvar_9.x * 0.5));\n  };\n  if (((xlat_mutablemus.y > (q22 * q11)) && (xlat_mutablemus.y <= (q25 * q12)))) {\n    xlat_mutablemus.z = (tmpvar_8 + (tmpvar_9.y * 0.5));\n  };\n  if (((xlat_mutablemus.z > (q23 * q12)) && (xlat_mutablemus.z <= (q26 * q13)))) {\n    xlat_mutablemus.x = (tmpvar_8 + (tmpvar_9.z * 0.5));\n  };\n  xlat_mutablemus = (xlat_mutablemus * vec3(1.0, 0.84, 0.5));\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = (((\n    (texture (sampler_main, uv_1).xyz - (((texture (sampler_blur1, \n      fract(uv_1)\n    ).xyz * scale1) + bias1) * 0.04))\n   + \n    (0.05 * xlat_mutablemus)\n  ) * 0.98) - 0.006);\n  ret = tmpvar_10.xyz;\n }","comp":" shader_body { \n  vec3 crisp_1;\n  vec2 uv3_2;\n  vec2 uv2_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = ((uv - 0.5) * aspect.xy);\n  float tmpvar_5;\n  tmpvar_5 = (0.1 / (sqrt(\n    dot (tmpvar_4, tmpvar_4)\n  ) + 0.1));\n  vec2 tmpvar_6;\n  float tmpvar_7;\n  tmpvar_7 = (ang / 3.14);\n  tmpvar_6.x = tmpvar_7;\n  tmpvar_6.y = (q27 * tmpvar_5);\n  float tmpvar_8;\n  tmpvar_8 = (0.1 * q30);\n  uv2_3.y = (tmpvar_6.y + tmpvar_8);\n  uv2_3.x = (tmpvar_7 + (0.2 * time));\n  vec2 tmpvar_9;\n  tmpvar_9.x = tmpvar_7;\n  tmpvar_9.y = (4.0 * tmpvar_5);\n  uv3_2.x = tmpvar_9.x;\n  uv3_2.y = (tmpvar_9.y - tmpvar_8);\n  vec3 tmpvar_10;\n  tmpvar_10 = ((2.0 * texture (sampler_main, uv2_3).xyz) + texture (sampler_main, uv3_2).xyz);\n  crisp_1 = tmpvar_10;\n  vec4 tmpvar_11;\n  tmpvar_11 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv3_2.xyy) * (\n    (q28 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q31)));\n  if (((tmpvar_10.x > (q26 * q13)) && (tmpvar_10.x <= (q23 * q11)))) {\n    crisp_1.z = (tmpvar_10.z - (tmpvar_11.x * 0.5));\n  };\n  if (((tmpvar_10.y > (q25 * q11)) && (tmpvar_10.y <= (q22 * q12)))) {\n    crisp_1.x = (tmpvar_10.x - (tmpvar_11.y * 0.5));\n  };\n  if (((crisp_1.z > (q24 * q12)) && (crisp_1.z <= (q21 * q13)))) {\n    crisp_1.y = (tmpvar_10.y - (tmpvar_11.z * 0.5));\n  };\n  crisp_1 = ((3.0 * max (crisp_1, \n    ((2.0 * ((texture (sampler_blur2, \n      fract(uv2_3)\n    ).xyz * scale2) + bias2)) + ((texture (sampler_blur2, fract(uv3_2)).xyz * scale2) + bias2))\n  )) * rad);\n  float tmpvar_12;\n  tmpvar_12 = clamp ((1.0 - (4.0 * rad)), 0.0, 1.0);\n  vec4 tmpvar_13;\n  tmpvar_13.w = 1.0;\n  tmpvar_13.xyz = ((crisp_1 + (\n    ((vec3(0.0, 0.0, 1.0) * uv.y) * pow ((1.0 - rad), 8.0))\n   * tmpvar_12)) + ((tmpvar_12 * 2.0) * (\n    (texture (sampler_blur1, uv).xyz * scale1)\n   + bias1)));\n  ret = tmpvar_13.xyz;\n }","warp_hlsl":"sampler sampler_worms;\nfloat3 color, mus;\nfloat dx,dy;\nshader_body {\n\n\nfloat2 uv1 = (uv_orig-.5) * aspect.xy;\n\nfloat2 uv6 = uv1;\n\nfloat z = 6*q2*length(uv1) ;\nfloat2 d = -normalize(1/uv1);\n\nfloat2 rs = clamp(tan(q1*z+q30)*d,-8,8);\n\nif (q28 ==1) {rs *= cos(uv1.yx*3*q27) ;}\n\nuv += rs/40;\n\nuv6 = .5*float2(rad, length(uv1));\n\n//uv6 = mul(uv6,float2x2(_qa));\n\nmus = saturate(.08/(sqrt(uv6.y-q10)));\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv6.xyy*q27\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q29\n                     );\nif(mus.x> q21*q13         && mus.x<= q24*q11        )mus.y += (noise9).x*.5; \nif(mus.y> q22*q11         && mus.y<= q25*q12        )mus.z += (noise9).y*.5; \nif(mus.z> q23*q12         && mus.z<= q26*q13        )mus.x += (noise9).z*.5; \nmus *= float3 (1,.84,.5);\n\nfloat3 blur = GetBlur1(frac(uv));\n\nfloat3 crisp= tex2D(sampler_main,uv);\n\nfloat3 ret1 = crisp - blur*.04 + .05*mus;\nret = ret1 * .98 -  .006;\n\n\n}","comp_hlsl":"shader_body\n{\nfloat2 uv1 = (uv-0.5)*aspect.xy;\n\nfloat rad2 = length(uv1) + .1;\nfloat rad1 = .1/rad2 ;\n\nfloat2 uv2 = float2 (ang/3.14, q27*rad1);\nuv2.y = uv2.y  +.1*q30;\nuv2.x = uv2.x  +.2*time;\n\nfloat2 uv3 = float2 (ang/3.14, 4*rad1);\nuv3.y = uv3.y  -.1*q30;\n\n\nfloat3 crisp = 2*GetPixel(uv2) + GetPixel(uv3);\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv3.xyy*q28\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q31\n                     );\nif(crisp.x> q26*q13         && crisp.x<= q23*q11        )crisp.z -= (noise9).x*.5; \nif(crisp.y> q25*q11         && crisp.y<= q22*q12        )crisp.x -= (noise9).y*.5; \nif(crisp.z> q24*q12         && crisp.z<= q21*q13        )crisp.y -= (noise9).z*.5; \ncrisp = max(crisp,2*GetBlur2(frac(uv2)) + GetBlur2(frac(uv3)));\n\nfloat3 lay1 = float3 (0,0,1)*uv.y*pow(1-rad,8);\n\ncrisp = 3*crisp * pow(rad,1);\nfloat mask = saturate(1-4*rad);\n\nret = crisp + lay1*mask + mask * 2*GetBlur1(uv);\n\n}"}