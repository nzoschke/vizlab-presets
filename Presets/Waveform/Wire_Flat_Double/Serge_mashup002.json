{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":7,"wave_thick":1,"modwavealphabyvolume":1,"wrap":0,"darken":1,"wave_a":0.303,"wave_scale":2.911,"wave_smoothing":0.9,"modwavealphastart":1.11,"modwavealphaend":1.23,"warpscale":1.331,"zoomexp":60.80368,"zoom":0.99951,"warp":0.01,"wave_r":0.5,"wave_g":0.5,"wave_b":0.8,"ob_size":0.005,"ob_r":0.01,"ob_a":1,"ib_size":0.26,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"sides":12,"textured":1,"num_inst":8,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.bl=0;a.tic=0;a.st=0;a.slide=0;a.toc=0;a.sw=0;a.br=0;a.vt=0;a.swi=0;a.meanbass_att=0;a.tr=0;a.tim=0;a.bt=0;a.q1=0;a.bet=0;a.mid_avg=0;a.tt=0;a.tin=0;a.lastbeat=0;a.beatrate=0;a.bass_avg=0;a.peakbass_att=0;a.vav=0;a.q4=0;a.zm=0;a.rd=0;a.mt=0;a.att=0;a.treb_avg=0;a.volume=0;a.beat=0;a.vol=0;a.sp=0;a.q2=0;a.q3=0;","frame_eqs_str":"a.volume=.3*(a.bass+a.mid+a.att);a.beatrate=equal(a.beatrate,0)+(1-equal(a.beatrate,0))*(below(a.volume,.01)+(1-below(a.volume,.01))*a.beatrate);a.lastbeat+=equal(a.lastbeat,0)*a.time;a.meanbass_att=.1*(9*a.meanbass_att+a.bass_att);a.peakbass_att=Math.max(a.bass_att,a.peakbass_att);a.beatrate=Math.max(.00001<Math.abs(a.beat)?.00001<Math.abs(below(a.time-a.lastbeat,2*a.beatrate))?.1*(9*a.beatrate+a.time-a.lastbeat):a.beatrate:a.beatrate,.1);a.peakbass_att=a.beat*a.bass_att+(1-\na.beat)*a.peakbass_att*(.95*above(a.time-a.lastbeat,2*a.beatrate)+.995*(1-above(a.time-a.lastbeat,2*a.beatrate)));a.lastbeat=a.beat*a.time+(1-a.beat)*a.lastbeat;a.peakbass_att=Math.max(a.peakbass_att,1.1*a.meanbass_att);a.beat=above(a.volume,.8)*below(a.peakbass_att-a.bass_att,.05*a.peakbass_att)*above(a.time-a.lastbeat,.1+.5*(a.beatrate-.1));a.warp=0;a.tic=Math.min(a.time-a.tin,.1);a.tin=a.time;a.vol=.333333*(a.bass_att+a.treb_att+a.mid_att);a.treb_avg=a.tic*(a.treb_avg*(div(1,a.tic)-10)+10*a.treb);\na.mid_avg=a.tic*(a.mid_avg*(div(1,a.tic)-10)+10*a.mid);a.bass_avg=a.tic*(a.bass_avg*(div(1,a.tic)-10)+10*a.bass);a.vav=a.tic*(a.vav*(div(1,a.tic)-10)+10*(a.bass+a.treb+a.mid)*.33333);a.tt+=a.tic*a.treb;a.mt+=a.tic*a.mid;a.bet=Math.min(pow(a.bass,9),4);a.bt+=a.tic*a.bet;a.vt+=a.tic*a.vav;a.sp=.1*Math.abs(a.vav-a.slide);a.slide=(.00001<Math.abs(above(a.slide,a.vav))?a.slide-a.tic*a.sp:a.slide+a.tic*a.sp)+(1-a.toc)*a.vav*.2;a.toc=1;a.tr=.00001<Math.abs(above(a.st,0))?.999:a.tr+a.tic*a.mid;a.tr-=Math.floor(a.tr);\na.st=.00001<Math.abs(above(a.st,0))?a.st-a.tic:.1*above(a.tr,.9);a.q1=a.tt;a.q2=a.bt;a.q3=.1*(a.tt+a.mt);a.q4=a.vt;a.br=.5*a.beatrate;a.sw=above(a.tim,a.br);a.tim=.00001<Math.abs(a.sw)?a.tim-a.br:a.tim;a.tim+=a.tic;a.swi=.00001<Math.abs(a.sw)?1-a.swi:a.swi;a.monitor=a.beatrate;","pixel_eqs_str":"a.sw=div(a.ang,6.2832)+1;a.sw=8*a.sw+.1*a.q4;a.bl=equal(mod(Math.floor(a.sw),2),0);a.sw-=Math.floor(a.sw);a.sw=3*(.00001<Math.abs(a.bl)?a.sw:1-a.sw);a.rd=pow(.8*a.rad,.9);a.rd=12.5664*a.rd-3*(a.q2+a.sw);a.zm=.01+.01*Math.sin(a.rd);a.dx=(a.x-.5)*a.zm;a.dy=(a.y-.5)*a.zm;","init_eqs_eel":"","frame_eqs_eel":"//krash's beat detection code\nvolume = 0.3*(bass+mid+att);\nbeatrate = equal(beatrate,0) + (1-equal(beatrate,0))*(below(volume,0.01) + (1-below(volume,0.01))*beatrate);\nlastbeat = lastbeat + equal(lastbeat,0)*time;\nmeanbass_att = 0.1*(meanbass_att*9 + bass_att);\npeakbass_att = max(bass_att,peakbass_att);\nbeatrate = max(if(beat,if(below(time-lastbeat,2*beatrate),0.1*(beatrate*9 + time - lastbeat),beatrate),beatrate),0.1);\npeakbass_att = beat*bass_att + (1-beat)*peakbass_att*(above(time - lastbeat, 2*beatrate)*0.95 + (1-above(time - lastbeat, 2*beatrate))*0.995);\nlastbeat = beat*time + (1-beat)*lastbeat;\npeakbass_att = max(peakbass_att,1.1*meanbass_att);\nbeat = above(volume,0.8)*below(peakbass_att - bass_att, 0.05*peakbass_att)*above(time - lastbeat, 0.1 + 0.5*(beatrate - 0.1));\n\nwarp = 0;\n\ntic = min(time-tin,.1);\ntin = time;\n\nvol = (bass_att + treb_att + mid_att)*.333333;\n\ntreb_avg = tic*(treb_avg*(1/tic - 10) + 10*treb);\nmid_avg = tic*(mid_avg*(1/tic - 10) + 10*mid);\nbass_avg = tic*(bass_avg*(1/tic - 10) + 10*bass);\nvav = tic*(vav*(1/tic - 10) + 10*(bass+treb+mid)*.33333);\n\ntt = tt + tic*treb;\nmt = mt + tic*mid;\n\nbet = min(pow(bass,9),4);\nbt = bt + tic*bet;\nvt = vt + tic*vav;\n\nsp = abs(vav - slide)*.1;\nslide = if(above(slide,vav),slide-tic*sp,slide+tic*sp) + (1-toc)*vav*.2;\ntoc = 1;\n\n\ntr = if(above(st,0),.999,tr + tic*mid);\ntr = tr - int(tr);\nst = if(above(st,0),st - tic,above(tr,.9)*.1);\n\n\nq1 = tt; // speed of comets\nq2 = bt; // speed of ripples\n//q2 = .5;\nq3 = (tt + mt)*.1; //speed of bands\nq4 = vt; // speed of rotation\n\nbr = beatrate*.5;\nsw = above(tim,br);\ntim = if(sw,tim-br,tim);\ntim = tim + tic;\nswi = if(sw,1-swi,swi);\n//invert = swi;\n\nmonitor = beatrate;","pixel_eqs_eel":"sw = ang/6.2832 + 1;\nsw = sw*8 + q4*.1;\n\nbl = equal(int(sw)%2,0);\nsw = sw - int(sw);\nsw = if(bl,sw,1-sw)*3;\n\n\nrd = pow(rad*.8,.9);\nrd = rd*6.2832*2 - (q2+sw)*3;\nzm = .01 + .01*sin(rd);\n\ndx = (x-.5)*zm;\ndy = (y-.5)*zm;","warp":" shader_body { \n  vec2 uv_1;\n  vec2 uv6_2;\n  uv_1 = (uv + ((0.004 * \n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  ).xy * vec2(0.0, 1.0)));\n  uv6_2 = (0.4 * sin((\n    (((uv - 0.2) * aspect.xy) * 18.0)\n   * rand_frame.xy)));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = (((\n    (texture (sampler_main, uv_1).xyz - (((texture (sampler_blur2, \n      fract(uv_1)\n    ).xyz * scale2) + bias2) * 0.03))\n   + \n    (vec3((0.051 / sqrt(dot (uv6_2, uv6_2)))) * vec3(0.15, 0.12, 0.075))\n  ) * 0.99) - 0.02);\n  ret = tmpvar_3.xyz;\n }","comp":"vec3 xlat_mutableneu;\nvec2 xlat_mutablers0;\nvec2 xlat_mutablerss;\nvec2 xlat_mutableuv2;\n shader_body { \n  vec2 uv_1;\n  vec3 ret1_2;\n  vec3 dots_3;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  float tmpvar_4;\n  float tmpvar_5;\n  tmpvar_5 = (min (abs(\n    (uv_1.y / uv_1.x)\n  ), 1.0) / max (abs(\n    (uv_1.y / uv_1.x)\n  ), 1.0));\n  float tmpvar_6;\n  tmpvar_6 = (tmpvar_5 * tmpvar_5);\n  tmpvar_6 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_6) + 0.05368138) * tmpvar_6) - 0.1173503)\n     * tmpvar_6) + 0.1938925) * tmpvar_6) - 0.3326756)\n   * tmpvar_6) + 0.9999793) * tmpvar_5);\n  tmpvar_6 = (tmpvar_6 + (float(\n    (abs((uv_1.y / uv_1.x)) > 1.0)\n  ) * (\n    (tmpvar_6 * -2.0)\n   + 1.570796)));\n  tmpvar_4 = (tmpvar_6 * sign((uv_1.y / uv_1.x)));\n  if ((abs(uv_1.x) > (1e-08 * abs(uv_1.y)))) {\n    if ((uv_1.x < 0.0)) {\n      if ((uv_1.y >= 0.0)) {\n        tmpvar_4 += 3.141593;\n      } else {\n        tmpvar_4 = (tmpvar_4 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_4 = (sign(uv_1.y) * 1.570796);\n  };\n  xlat_mutablers0.x = ((tmpvar_4 / 3.1416) * 2.0);\n  xlat_mutablers0.y = (0.02 / sqrt(dot (uv_1, uv_1)));\n  vec2 tmpvar_7;\n  tmpvar_7.x = xlat_mutablers0.x;\n  tmpvar_7.y = (xlat_mutablers0.y + time);\n  xlat_mutablerss = (tmpvar_7 * mat2(0.7, -0.7, 0.7, 0.7));\n  vec4 tmpvar_8;\n  tmpvar_8 = vec4(greaterThanEqual ((texture (sampler_pw_noise_lq, \n    (xlat_mutablerss / 32.0)\n  ) - 0.7), vec4(0.0, 0.0, 0.0, 0.0)));\n  vec2 tmpvar_9;\n  tmpvar_9 = abs((fract(\n    (xlat_mutablerss * 8.0)\n  ) - 0.5));\n  vec2 tmpvar_10;\n  tmpvar_10.x = (xlat_mutablers0.x * 2.0);\n  tmpvar_10.y = (xlat_mutablers0.y + (time / 2.0));\n  xlat_mutablerss = (tmpvar_10 * mat2(0.7, -0.7, 0.7, 0.7));\n  vec4 tmpvar_11;\n  tmpvar_11 = vec4(greaterThanEqual ((texture (sampler_pw_noise_lq, \n    (xlat_mutablerss / 32.0)\n  ) - 0.7), vec4(0.0, 0.0, 0.0, 0.0)));\n  vec2 tmpvar_12;\n  tmpvar_12 = abs((fract(\n    (xlat_mutablerss * 8.0)\n  ) - 0.5));\n  xlat_mutablerss = tmpvar_12;\n  dots_3 = (vec3((clamp (\n    (0.04 / sqrt(dot (tmpvar_9, tmpvar_9)))\n  , 0.0, 1.0) * tmpvar_8.x)) + (clamp (\n    (0.04 / sqrt(dot (tmpvar_12, tmpvar_12)))\n  , 0.0, 1.0) * tmpvar_11.x));\n  dots_3 = (dots_3 * clamp ((0.04 / \n    abs(((0.01 / xlat_mutablers0.y) - q6))\n  ), 0.0, 1.0));\n  dots_3 = (dots_3 * (dots_3 * 2.0));\n  xlat_mutableneu = (texture (sampler_main, (uv_1 + 0.5)).xyz + ((texture (sampler_blur1, \n    (uv_1 + 0.5)\n  ).xyz * scale1) + bias1));\n  ret1_2 = max (vec3(0.0, 0.0, 0.0), xlat_mutableneu);\n  xlat_mutableuv2.x = ((uv_1.x * -0.9999987) - (uv_1.y * 0.001592548));\n  xlat_mutableuv2.y = ((uv_1.x * 0.001592548) + (uv_1.y * -0.9999987));\n  xlat_mutableneu = (texture (sampler_main, (xlat_mutableuv2 + 0.5)).xyz + ((texture (sampler_blur1, \n    (xlat_mutableuv2 + 0.5)\n  ).xyz * scale1) + bias1));\n  ret1_2 = max (ret1_2, xlat_mutableneu);\n  xlat_mutableuv2.x = ((uv_1.x * 0.9999949) - (uv_1.y * -0.003185092));\n  xlat_mutableuv2.y = ((uv_1.x * -0.003185092) + (uv_1.y * 0.9999949));\n  xlat_mutableneu = (texture (sampler_main, (xlat_mutableuv2 + 0.5)).xyz + ((texture (sampler_blur1, \n    (xlat_mutableuv2 + 0.5)\n  ).xyz * scale1) + bias1));\n  ret1_2 = max (ret1_2, xlat_mutableneu);\n  vec4 tmpvar_13;\n  tmpvar_13.w = 1.0;\n  tmpvar_13.xyz = (ret1_2 + (dots_3 * (1.0 + ret1_2)));\n  ret = tmpvar_13.xyz;\n }","warp_hlsl":"sampler sampler_worms;\nfloat3 color, mus;\nfloat dx,dy;\nshader_body {\nfloat2 uv1 = (uv-.2) * aspect.xy;\n\n\nfloat2 uv6 = uv1;\nfloat z = q29*2*length(uv1)+rand_frame * 32;\nfloat2 d = normalize(uv1);\nfloat2 rs = clamp(tan(z)*d,-8,8);\nuv += .004*GetBlur1(uv)*float2 (0,1);//rs/20;\n\n\nuv6 = .4*sin(uv1*18*rand_frame);\nmus = .051/(length(uv6));\nmus *= float3 (1,.8,.5);\n\nfloat3 blur = GetBlur2(frac(uv));\n\nfloat3 crisp= tex2D(sampler_main,uv);\n\nfloat3 ret1 = crisp - blur*.03 + .15*mus;\nfloat2 uv2 = (uv_orig-.5)-float2(.5,.5+0.1*q25);\n\nq25 = 1;\nret = q25*(ret1*.99-.02) + (1-q25)* GetPixel(uv_orig);\n\n}","comp_hlsl":"sampler sampler_pw_noise_lq;\n\nfloat3 neu, ret1;\nfloat2 rs2,rs0,rss,uv1,uv2;\nfloat ang2,c,s;\nfloat2x2 rota = float2x2(.7,.7,-.7,.7);\nshader_body\n{\nuv -= 0.5;\nuv *= aspect.xy;    \n\nrs0.x = atan2(uv.y, uv.x)/3.1416*2;\nrs0.y = .02/(length (uv));\nrss = float2 (rs0.x,rs0.y+time);\nrss = mul(rss,float2x2(.7,.7,-.7,.7));\nfloat noise = (tex2D(sampler_pw_noise_lq,rss/32)-.7 >= 0);\nrss = abs(frac(rss*8)-.5);\nfloat3 dots = saturate(.04/length(rss)) *noise;\n\nrss = float2 (rs0.x*2,rs0.y+time/2);\nrss = mul(rss,float2x2(.7,.7,-.7,.7));\nnoise = (tex2D(sampler_pw_noise_lq,rss/32)-.7 >= 0);\nrss = abs(frac(rss*8)-.5);\ndots += saturate(.04/length(rss)) * noise;\n\ndots *= saturate(.04/abs(.01/rs0.y-q6))+.0;\ndots *= dots*2;\n\nfloat3 ret1 = 0;\nint anz = 2;\nint n = 0;\nwhile (n <= anz) {\n    ang2 = 6.28*n/anz;\n    c = cos(ang2);\n    s = sin(ang2);\n    uv2.x =  uv.x*c - uv.y*s;\n    uv2.y =  uv.x*s + uv.y*c;\n\n    neu = GetPixel(uv2+.5) + GetBlur1(uv2+.5);\n    ret1 = max(ret1,neu);\nn++;\n}\n\n\nret = ret1 + dots*(1+ret1);\n}\n\n"}