{"version":2,"baseVals":{"rating":5,"decay":0.973,"echo_zoom":1.047,"wave_mode":7,"additivewave":1,"wave_thick":1,"wave_brighten":0,"darken":1,"wave_a":1,"wave_scale":0.439,"wave_smoothing":0.5,"modwavealphastart":0.5,"modwavealphaend":1,"warpscale":1.331,"zoom":0.99951,"warp":0.01,"wave_y":0.976,"ob_size":0.5,"ob_r":0.01,"ib_size":0.26,"mv_x":0,"mv_y":0,"mv_l":1,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.blue=0;a.red_aim=0;a.bass_thresh=0;a.bass_on=0;a.treb_thresh=0;a.treb_on=0;a.green=0;a.red=0;a.blue_aim=0;a.swapcolour=0;a.green_aim=0;","frame_eqs_str":"a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*(.85*(a.bass_thresh-1.4)+1.4);a.treb_thresh=2*above(a.treb_att,a.treb_thresh)+(1-above(a.treb_att,a.treb_thresh))*(.75*(a.treb_thresh-1.5)+1.5);a.bass_on=above(a.bass_thresh,1.8);a.treb_on=above(a.treb_thresh,1.9);a.swapcolour=a.bass_on-a.treb_on;a.red_aim=.00001<Math.abs(equal(a.swapcolour,1))?1:.00001<Math.abs(equal(a.swapcolour,0))?1:0;a.green_aim=.00001<Math.abs(equal(a.swapcolour,1))?0:\n.00001<Math.abs(equal(a.swapcolour,0))?.5:.25;a.blue_aim=.00001<Math.abs(equal(a.swapcolour,1))?0:.00001<Math.abs(equal(a.swapcolour,0))?0:1;a.red+=(a.red_aim-a.red)*(.00001<Math.abs(equal(a.swapcolour,1))?.65:.45);a.green+=.5*(a.green_aim-a.green);a.blue+=(a.blue_aim-a.blue)*(.00001<Math.abs(equal(a.swapcolour,1))?.45:.65);a.wave_r=a.red;a.wave_g=a.green;a.wave_b=a.blue;","pixel_eqs_str":"a.dy=.00001<Math.abs(above(a.y,.5))?div(Math.sin(.5-a.y),10):div(log10(div(1,a.y)),35);","init_eqs_eel":"","frame_eqs_eel":"bass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.4)*0.85+1.4);\ntreb_thresh = above(treb_att,treb_thresh)*2 + (1-above(treb_att,treb_thresh))*((treb_thresh-1.5)*0.75+1.5);\nbass_on = above(bass_thresh,1.8);\ntreb_on = above(treb_thresh,1.9);\nswapcolour = bass_on - treb_on;\nred_aim = if(equal(swapcolour,1),1,if(equal(swapcolour,0),1,0));\ngreen_aim = if(equal(swapcolour,1),0,if(equal(swapcolour,0),0.5,0.25));\nblue_aim = if(equal(swapcolour,1),0,if(equal(swapcolour,0),0,1));\nred = red + (red_aim - red)*if(equal(swapcolour,1),0.65,0.45);\ngreen = green + (green_aim - green)*0.5;\nblue = blue + (blue_aim - blue)*if(equal(swapcolour,1),0.45,0.65);\nwave_r = red;\nwave_g = green;\nwave_b = blue;","pixel_eqs_eel":"dy = if(above(y,0.5),sin(0.5-y)/10, log10(1/y)/35);","warp":" shader_body { \n  vec3 xfer_1;\n  vec3 ret_2;\n  vec4 tmpvar_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = (uv - 0.5);\n  tmpvar_3 = texture (sampler_main, (tmpvar_4 + 0.5));\n  ret_2 = (tmpvar_3.xyz / ((tmpvar_3.x + tmpvar_3.y) + tmpvar_3.z));\n  ret_2 = texture (sampler_main, ((tmpvar_4 * dot (ret_2, vec3(1.0, 0.975, 0.95))) + 0.5)).xyz;\n  vec3 tmpvar_5;\n  tmpvar_5 = clamp (((ret_2 - 0.05) * 99.0), 0.0, 1.0);\n  xfer_1.x = tmpvar_5.x;\n  xfer_1.yz = (tmpvar_5.yz * clamp ((\n    (0.1 - ret_2.xy)\n   * 99.0), 0.0, 1.0));\n  ret_2 = (ret_2 + (vec3(-0.014, 0.014, 0.0) * tmpvar_5.xxx));\n  ret_2 = (ret_2 + (vec3(0.0, -0.08, 0.08) * xfer_1.yyy));\n  ret_2 = (ret_2 + (vec3(0.0, 0.0, -0.02) * xfer_1.zzz));\n  ret_2 = (ret_2 + (vec3(5.0, 15.0, 40.0) * (\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)).xyz - 0.5)\n   / 256.0)));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_2;\n  ret = tmpvar_6.xyz;\n }","comp":" shader_body { \n  vec2 uv2_1;\n  vec3 ret_2;\n  uv2_1 = (uv + (vec2(0.0, 1.0) * texsize.zw));\n  vec3 tmpvar_3;\n  tmpvar_3 = (((\n    -(texture (sampler_main, uv2_1).xyz)\n   + \n    (((texture (sampler_blur1, uv2_1).xyz * scale1) + bias1) * 0.5)\n  ) + (\n    ((texture (sampler_blur2, uv2_1).xyz * scale2) + bias2)\n   * -4.0)) + ((\n    (texture (sampler_blur3, uv2_1).xyz * scale3)\n   + bias3) * 4.0));\n  uv2_1 = (uv + (vec2(-1.0, 0.0) * texsize.zw));\n  vec3 tmpvar_4;\n  tmpvar_4 = (((\n    -(texture (sampler_main, uv2_1).xyz)\n   + \n    (((texture (sampler_blur1, uv2_1).xyz * scale1) + bias1) * 0.5)\n  ) + (\n    ((texture (sampler_blur2, uv2_1).xyz * scale2) + bias2)\n   * -4.0)) + ((\n    (texture (sampler_blur3, uv2_1).xyz * scale3)\n   + bias3) * 4.0));\n  uv2_1 = (uv + (vec2(1.0, 0.0) * texsize.zw));\n  vec3 tmpvar_5;\n  tmpvar_5 = (((\n    -(texture (sampler_main, uv2_1).xyz)\n   + \n    (((texture (sampler_blur1, uv2_1).xyz * scale1) + bias1) * 0.5)\n  ) + (\n    ((texture (sampler_blur2, uv2_1).xyz * scale2) + bias2)\n   * -4.0)) + ((\n    (texture (sampler_blur3, uv2_1).xyz * scale3)\n   + bias3) * 4.0));\n  uv2_1 = (uv + (vec2(0.0, -1.0) * texsize.zw));\n  vec3 tmpvar_6;\n  tmpvar_6 = (((\n    -(texture (sampler_main, uv2_1).xyz)\n   + \n    (((texture (sampler_blur1, uv2_1).xyz * scale1) + bias1) * 0.5)\n  ) + (\n    ((texture (sampler_blur2, uv2_1).xyz * scale2) + bias2)\n   * -4.0)) + ((\n    (texture (sampler_blur3, uv2_1).xyz * scale3)\n   + bias3) * 4.0));\n  vec3 tmpvar_7;\n  tmpvar_7.z = 0.06;\n  tmpvar_7.x = (tmpvar_3.x - tmpvar_4.x);\n  tmpvar_7.y = (tmpvar_5.x - tmpvar_6.x);\n  vec3 tmpvar_8;\n  tmpvar_8 = normalize(tmpvar_7);\n  vec3 tmpvar_9;\n  tmpvar_9.z = 0.06;\n  tmpvar_9.x = (tmpvar_3.y - tmpvar_4.y);\n  tmpvar_9.y = (tmpvar_5.y - tmpvar_6.y);\n  vec3 tmpvar_10;\n  tmpvar_10 = normalize(tmpvar_9);\n  ret_2 = ((vec3(1.0, 0.6, 0.7) * clamp (\n    dot (tmpvar_8, vec3(0.7053456, 0.7053456, 0.07053456))\n  , 0.0, 1.0)) + (vec3(0.2, 0.1, 0.0) * clamp (\n    dot (tmpvar_8, vec3(0.8164966, 0.4082483, 0.4082483))\n  , 0.0, 1.0)));\n  ret_2 = (ret_2 - ((\n    (vec3(1.0, 0.6, 0.7) * clamp (dot (tmpvar_10, vec3(0.7053456, 0.7053456, 0.07053456)), 0.0, 1.0))\n   + \n    (vec3(0.2, 0.1, 0.0) * clamp (dot (tmpvar_10, vec3(0.8164966, 0.4082483, 0.4082483)), 0.0, 1.0))\n  ) * 0.1));\n  vec4 tmpvar_11;\n  tmpvar_11.w = 1.0;\n  tmpvar_11.xyz = ret_2;\n  ret = tmpvar_11.xyz;\n }","warp_hlsl":"shader_body\n{\n    ret = tex2D( sampler_main, (uv-0.5)*1.00 + 0.5 );\n    ret /= ret.x+ret.y+ret.z;\n    float zoom = dot(ret, float3(1,0.975,0.95));\n\n    ret.xyz = tex2D( sampler_main, (uv-0.5)*zoom + 0.5 );\n\n    // .x = fastest layer, .z = slowest\n    float r = 0.02; \n    float3 xfer = saturate((ret - 0.05)*99);\n    xfer.yz *= saturate((0.1-ret.xy)*99);\n    ret += xfer.xxx*float3(-1,1,0)*r*0.7;\n    ret += xfer.yyy*float3(0,-1,1)*r*4;\n    ret += xfer.zzz*float3(0,0,-1)*r;\n\n    // ERROR DIFFUSION DITHER - looks great\n    float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\n    ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0*float3(1,3,8)*5;\n}","comp_hlsl":"shader_body\n{\n    float2 uv2;\n\n    // the weights of the 4 height value frequencies:\n    float4 c = float4(-1,0.5,-4,4);\n\n    uv2 = uv + float2(0,1)*texsize.zw;\n    float3 gx1 = GetPixel(uv2)*c.x + GetBlur1(uv2)*c.y + GetBlur2(uv2)*c.z + GetBlur3(uv2)*c.w;\n    uv2 = uv + float2(-1,0)*texsize.zw;\n    float3 gx2 = GetPixel(uv2)*c.x + GetBlur1(uv2)*c.y + GetBlur2(uv2)*c.z + GetBlur3(uv2)*c.w;\n\n    uv2 = uv + float2(1,0)*texsize.zw;\n    float3 gy1 = GetPixel(uv2)*c.x + GetBlur1(uv2)*c.y + GetBlur2(uv2)*c.z + GetBlur3(uv2)*c.w;\n    uv2 = uv + float2(0,-1)*texsize.zw;\n    float3 gy2 = GetPixel(uv2)*c.x + GetBlur1(uv2)*c.y + GetBlur2(uv2)*c.z + GetBlur3(uv2)*c.w;\n\n    // compute gradient vector:\n    float3 gr = normalize(float3(gx1.x-gx2.x, gy1.x-gy2.x, 0.06));\n    float3 gg = normalize(float3(gx1.y-gx2.y, gy1.y-gy2.y, 0.06));\n    float3 gb = normalize(float3(gx1.z-gx2.z, gy1.z-gy2.z, 0.06));\n\n    // hacked default lighting from it:\n    float3 dir1 = normalize(float3(1,1,0.1));\n    float3 dir2 = normalize(float3(0.4,0.2,0.2));\n    float3 col1 = float3(1,0.6,0.7);\n    float3 col2 = float3(0.2,0.1,0);\n    ret = col1 * saturate(dot(gr,dir1)) + col2*saturate(dot(gr,dir2));\n    ret -= (col1 * saturate(dot(gg,dir1)) + col2*saturate(dot(gg,dir2)))*0.1;\n//    ret += col1 * saturate(dot(gb,dir1)) + col2*saturate(dot(gb,dir2));\n//    ret *= 0.33;\n\n//ret = GetPixel(uv);;\n}"}