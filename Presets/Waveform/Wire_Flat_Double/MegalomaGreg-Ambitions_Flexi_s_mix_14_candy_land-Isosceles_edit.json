{"version":2,"baseVals":{"rating":5,"gammaadj":1.77,"decay":0.97,"echo_zoom":1.474,"echo_alpha":1,"wave_mode":7,"additivewave":1,"wave_thick":1,"wave_brighten":0,"wave_a":100,"wave_scale":2.685,"wave_smoothing":0.702,"modwavealphastart":2,"modwavealphaend":2,"warpscale":8.728,"zoom":0.99951,"warp":0.03469,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0.5,"ob_a":1,"ib_size":0.015,"ib_a":1,"mv_l":0,"mv_a":0},"shapes":[{"baseVals":{"sides":100,"thickoutline":1,"textured":1,"num_inst":160,"rad":0.31559,"ang":0.7854,"tex_ang":0.77911,"tex_zoom":1.85321,"g":0.65,"b":0.55,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"textured":1,"num_inst":53,"rad":0.54279,"tex_zoom":0.8622,"g":0.51,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"scaling":0.01058,"enabled":0},"init_eqs_str":"pulse = 0;","frame_eqs_str":"pulse = if(above(bass*.05,pulse),pulse+.001,pulse-.001);\npulse = pulse*above(pulse,0);\nt1 = pulse;","point_eqs_str":"x = sqrt(sample*mid*.05);\ny = .5 + (.1+t1)*cos(sample*20);","init_eqs_eel":"pulse = 0;","frame_eqs_eel":"pulse = if(above(bass*.05,pulse),pulse+.001,pulse-.001);\npulse = pulse*above(pulse,0);\nt1 = pulse;","point_eqs_eel":"x = sqrt(sample*mid*.05);\ny = .5 + (.1+t1)*cos(sample*20);"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.cond_treb=0;a.trev=0;a.zoom_out=0;a.below_part=0;a.my_volume=0;a.above_part=0;a.cond_bass=0;a.wave_r_wave_b=0;a.rot1=0;a.zoom_in=0;","frame_eqs_str":"a.ob_size=.05+.3*Math.sin(a.bass);a.wave_b=.00001<Math.abs(1>=(a.treb>bitand(1>=bitand(1.1,a.mid)?1:0,a.bass)?1:0)?1:0)?Math.abs(.5+.1*Math.sin(a.treb)):0;a.wave_r=.00001<Math.abs(1>=(a.bass>bitand(1>=bitand(1.1,a.mid)?1:0,a.treb)?1:0)?1:0)?Math.abs(.5+.1*Math.sin(a.bass)):0;a.wave_g=.00001<Math.abs(1>=(a.mid>bitand(1>=bitand(1.1,a.bass)?1:0,a.trev)?1:0)?1:0)?Math.abs(.5+.1*Math.sin(a.mid)):0;a.ob_a=.5+.1*Math.sin(a.my_volume);a.ib_r=div(a.wave_g+a.wave_b,2);a.ib_g=div(a.wave_r_wave_b,\n2);a.ib_b=div(a.wave_r+a.wave_g,2);a.cx=.5;a.cy=.5;a.cond_bass=a.bass>1+.1*Math.sin(sqr(a.bass))?1:0;a.cond_treb=a.treb>1+.1*Math.sin(sqr(a.treb))?1:0;a.rot1=.1*Math.sin(sqr(a.bass)+sqr(a.treb));","pixel_eqs_str":"a.zoom_out=1-Math.abs(.1*Math.sin(a.ang));a.zoom_in=1+Math.abs(.1*Math.sin(a.ang));a.above_part=bitand(0<a.ang?1:0,a.treb>1+Math.abs(.1*Math.sin(a.ang))?1:0);a.below_part=bitand(0>a.ang?1:0,a.bass>1+Math.abs(.1*Math.sin(a.ang))?1:0);a.zoom=.00001<Math.abs(bitor(a.above_part,a.below_part))?a.zoom_in:a.zoom_out;a.sx=.00001<Math.abs(7.07<a.rad?1:0)?1+Math.abs(.1*Math.sin(a.rad)):1;","init_eqs_eel":"","frame_eqs_eel":"ob_size = 0.05 + 0.3*sin(bass);\n\nwave_b = if (treb>1.1&mid<=1&bass<=1, abs(0.5+0.1*sin(treb)),0);\nwave_r = if (bass>1.1&mid<=1&treb<=1, abs(0.5+0.1*sin(bass)),0);\nwave_g = if (mid>1.1&bass<=1&trev<=1, abs(0.5+0.1*sin(mid)),0);\n\n \n\nob_a = 0.5 + 0.1*sin(my_volume);\n\n\nib_r = (wave_g+wave_b)/2;\nib_g = (wave_r_wave_b)/2;\nib_b = (wave_r+wave_g)/2;\n\ncx = 0.5;\ncy = 0.5;\n\ncond_bass = bass>(1+0.1*sin(sqr(bass)));\ncond_treb = treb>(1+0.1*sin(sqr(treb)));\n\nrot1 = 0.1*sin(sqr(bass)+sqr(treb));\n\n\n//rot = if (cond_treb, rot1,0);\n//rot = if (cond_bass,- rot1, rot);","pixel_eqs_eel":"zoom_out = 1 - abs(0.1*sin(ang));\nzoom_in = 1 + abs(0.1*sin(ang));\nabove_part = ( (ang>0) & (treb>1 + abs(0.1*sin(ang))) );\nbelow_part = ( (ang<0) & (bass>1 + abs(0.1*sin(ang))) );\n\nzoom = if ( above_part | below_part, zoom_in, zoom_out);\n\nsx= if (rad>7.07, 1 + abs(0.1*sin(rad)),1);","warp":" shader_body { \n  vec2 my_uv_1;\n  vec2 d_2;\n  vec3 ret_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = (texsize.zw * 4.0);\n  vec3 tmpvar_5;\n  tmpvar_5 = (((texture (sampler_blur1, \n    fract((uv + (vec2(1.0, 0.0) * tmpvar_4)))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    fract((uv - (vec2(1.0, 0.0) * tmpvar_4)))\n  ).xyz * scale1) + bias1));\n  vec3 tmpvar_6;\n  tmpvar_6 = (((texture (sampler_blur1, \n    fract((uv + (vec2(0.0, 1.0) * tmpvar_4)))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    fract((uv - (vec2(0.0, 1.0) * tmpvar_4)))\n  ).xyz * scale1) + bias1));\n  vec3 tmpvar_7;\n  tmpvar_7 = ((texture (sampler_blur1, uv).xyz * scale1) + bias1);\n  d_2 = -(tmpvar_4);\n  float tmpvar_8;\n  tmpvar_8 = (d_2 * 4.0).x;\n  vec2 tmpvar_9;\n  tmpvar_9.x = tmpvar_5.y;\n  tmpvar_9.y = tmpvar_6.y;\n  vec2 tmpvar_10;\n  tmpvar_10.x = tmpvar_5.x;\n  tmpvar_10.y = tmpvar_6.x;\n  vec2 tmpvar_11;\n  tmpvar_11 = ((uv - (tmpvar_9 * d_2)) - (tmpvar_10 * tmpvar_8));\n  ret_3.y = texture (sampler_fc_main, (tmpvar_11 - floor(tmpvar_11))).y;\n  ret_3.y = (ret_3.y + ((\n    (ret_3.y - tmpvar_7.y)\n   * 0.042) + -0.0075));\n  vec2 tmpvar_12;\n  tmpvar_12.x = tmpvar_5.x;\n  tmpvar_12.y = tmpvar_6.x;\n  vec2 tmpvar_13;\n  tmpvar_13.x = tmpvar_5.z;\n  tmpvar_13.y = tmpvar_6.z;\n  my_uv_1 = ((uv - (tmpvar_12 * d_2)) - (tmpvar_13 * tmpvar_8));\n  ret_3.x = texture (sampler_fc_main, (my_uv_1 - floor(my_uv_1))).x;\n  ret_3.x = (ret_3.x + ((\n    (ret_3.x - tmpvar_7.x)\n   * 0.042) + -0.0075));\n  vec2 tmpvar_14;\n  tmpvar_14.x = tmpvar_5.z;\n  tmpvar_14.y = tmpvar_6.z;\n  vec2 tmpvar_15;\n  tmpvar_15.x = tmpvar_5.y;\n  tmpvar_15.y = tmpvar_6.y;\n  my_uv_1 = ((uv - (tmpvar_14 * d_2)) - (tmpvar_15 * tmpvar_8));\n  ret_3.z = texture (sampler_fc_main, (my_uv_1 - floor(my_uv_1))).z;\n  ret_3.z = (ret_3.z + ((\n    (ret_3.z - tmpvar_7.z)\n   * 0.042) + -0.0075));\n  vec4 tmpvar_16;\n  tmpvar_16.w = 1.0;\n  tmpvar_16.xyz = ret_3;\n  ret = tmpvar_16.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = texture (sampler_main, uv).xyz;\n  ret = tmpvar_1.xyz;\n }","warp_hlsl":"shader_body\n{\n\n    float2 d = texsize.zw*4;\n    float3 dx = GetBlur1(frac(uv+float2(1,0)*d))-GetBlur1(frac(uv-float2(1,0)*d));\n    float3 dy = GetBlur1(frac(uv+float2(0,1)*d))-GetBlur1(frac(uv-float2(0,1)*d));\n    float3 b1 = GetBlur1(uv) - 0;\n    d *= -1;\n    float d2 = d*4;\n    float1 c1 = 0.042;\n    float1 c2 = -0.0075;\n\n\n    float2 my_uv = uv - float2(dx.y,dy.y)*d - float2(dx.x,dy.x)*d2;\n    ret.y = tex2D( sampler_fc_main, my_uv-floor(my_uv)).y;\n    ret.y += (ret.y - b1.y)*c1 + c2;\n\n\n    my_uv = uv - float2(dx.x,dy.x)*d - float2(dx.z,dy.z)*d2;\n    ret.x = tex2D( sampler_fc_main, my_uv-floor(my_uv)).x;\n    ret.x += (ret.x - b1.x)*c1 + c2;\n\n\n    my_uv = uv - float2(dx.z,dy.z)*d - float2(dx.y,dy.y)*d2;\n    ret.z = tex2D( sampler_fc_main, my_uv-floor(my_uv)).z;\n    ret.z += (ret.z - b1.z)*c1 + c2;\n//ret = 0;\n\n}","comp_hlsl":"shader_body\n{\nret = GetPixel(uv);\n}\n"}