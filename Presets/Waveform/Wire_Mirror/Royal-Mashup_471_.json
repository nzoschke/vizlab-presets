{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"echo_zoom":0.952,"wave_thick":1,"wave_brighten":0,"brighten":1,"wave_a":0.401,"wave_scale":3.177,"wave_smoothing":0,"wave_mystery":-0.4,"modwavealphastart":1,"modwavealphaend":1,"warpanimspeed":100,"warpscale":4.142,"zoomexp":4.32547,"zoom":1.0401,"warp":0.01,"wave_g":0,"wave_b":0,"wave_y":0.29,"ob_size":0.5,"ob_r":0.01,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":0,"mv_b":0,"mv_a":0},"shapes":[{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"y":0.28,"rad":0.07419,"tex_zoom":0.7345,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"vx = 0","frame_eqs_str":"","init_eqs_eel":"vx = 0","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"textured":1,"x":0.52,"y":0.41,"rad":0.5216,"ang":0.1885,"tex_zoom":0.73458,"g":1,"b":1,"r2":1,"b2":1,"a2":0.75,"border_a":0,"enabled":0},"init_eqs_str":"vx = 0","frame_eqs_str":"","init_eqs_eel":"vx = 0","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"textured":1,"x":0.48,"y":0.41,"rad":0.61162,"ang":5.96903,"tex_zoom":0.73458,"g":1,"b":1,"r2":1,"b2":1,"a2":0.75,"border_a":0,"enabled":0},"init_eqs_str":"vx = 0","frame_eqs_str":"","init_eqs_eel":"vx = 0","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"y":0.75,"rad":0.07059,"tex_zoom":0.73458,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"vx = 0","frame_eqs_str":"x = q1;\ny = q5;","init_eqs_eel":"vx = 0","frame_eqs_eel":"x = q1;\ny = q5;"}],"waves":[{"baseVals":{"additive":1,"r":0.2,"g":0,"b":0,"a":0.3,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"n=sample*6.283;\nphs=-sample * 0.2;\ntm=time*0.4 + phs;\n\nflip=flip+1;\nflip=flip*below(flip,2);\n\nxp=0;\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\nzp=0;\n\n//wrist movement;\nang=sin(tm*2)*0.5 +0.5;\n\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\nyq=yp;\nzq=zp;\n\nang=tm*8;\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//forearm movement;\nzp=zp-0.3;\nang=3.14 + sin(tm*2 - 0.5)*1.5;\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\n\n//upper arm twist\nang=-1.0 + cos(tm*3 + 0.5);\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//upper arm outward;\nzp=zp-0.35;\nang=cos(tm*2)*0.75 - 1.05;\nxq=xp*sin(ang) + zp*cos(ang);\nyq=yp;\nzq=xp*cos(ang) - zp*sin(ang);\n\n//upper arm up down;\nang=cos(tm)*0.5 - 0.5;\nxp=xq;\nyp=yq*cos(ang) - zq*sin(ang);\nzp=yq*sin(ang) + zq*cos(ang);\n\n//xp=xq;yp=yq;zp=zq;\n\n\n//project into screenspace and draw on screen\nzp=zp+2;\nxs=xp/zp;\nys=yp/zp;\n\nx=xs+0.5;\ny=ys*1.3+0.5;\n\n\n//a=(1-sample)*flip;\n\n//b=b+pow(1-sample,2)*0.3;\n\nx = 0.5 + (x-0.5)/q1;\ny = 0.5 + (y-0.5)/q2 + 0.1;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n=sample*6.283;\nphs=-sample * 0.2;\ntm=time*0.4 + phs;\n\nflip=flip+1;\nflip=flip*below(flip,2);\n\nxp=0;\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\nzp=0;\n\n//wrist movement;\nang=sin(tm*2)*0.5 +0.5;\n\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\nyq=yp;\nzq=zp;\n\nang=tm*8;\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//forearm movement;\nzp=zp-0.3;\nang=3.14 + sin(tm*2 - 0.5)*1.5;\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\n\n//upper arm twist\nang=-1.0 + cos(tm*3 + 0.5);\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//upper arm outward;\nzp=zp-0.35;\nang=cos(tm*2)*0.75 - 1.05;\nxq=xp*sin(ang) + zp*cos(ang);\nyq=yp;\nzq=xp*cos(ang) - zp*sin(ang);\n\n//upper arm up down;\nang=cos(tm)*0.5 - 0.5;\nxp=xq;\nyp=yq*cos(ang) - zq*sin(ang);\nzp=yq*sin(ang) + zq*cos(ang);\n\n//xp=xq;yp=yq;zp=zq;\n\n\n//project into screenspace and draw on screen\nzp=zp+2;\nxs=xp/zp;\nys=yp/zp;\n\nx=xs+0.5;\ny=ys*1.3+0.5;\n\n\n//a=(1-sample)*flip;\n\n//b=b+pow(1-sample,2)*0.3;\n\nx = 0.5 + (x-0.5)/q1;\ny = 0.5 + (y-0.5)/q2 + 0.1;"},{"baseVals":{"additive":1,"r":0.2,"g":0,"b":0,"a":0.3,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"n=sample*6.283;\nphs=-sample * 0.2;\ntm=time*0.4 + phs;\n\nflip=flip+1;\nflip=flip*below(flip,2);\n\nxp=0;\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\nyp=-yp;\nzp=0;\n\n//wrist movement;\nang=sin(tm*2)*0.5 +0.5;\n\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\nyq=yp;\nzq=zp;\n\nang=tm*8;\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//forearm movement;\nzp=zp-0.3;\nang=3.14 + sin(tm*2 - 0.5)*1.5;\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\n\n//upper arm twist\nang=-1.0 + cos(tm*3 + 0.5);\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//upper arm outward;\nzp=zp-0.35;\nang=cos(tm*2)*0.75 - 1.05;\nxq=xp*sin(ang) + zp*cos(ang);\nyq=yp;\nzq=xp*cos(ang) - zp*sin(ang);\n\n//upper arm up down;\nang=cos(tm)*0.5 - 0.5;\nxp=xq;\nyp=yq*cos(ang) - zq*sin(ang);\nzp=yq*sin(ang) + zq*cos(ang);\n\n//xp=xq;yp=yq;zp=zq;\n\n\n//project into screenspace and draw on screen\nzp=zp+2;\nxs=xp/zp;\nys=yp/zp;\n\nx=xs+0.5;\ny=ys*1.3+0.5;\n\n\n//a=(1-sample)*flip;\n\n\n//b=b+pow(1-sample,2)*0.3;\n\n\nx = 0.5 + (x-0.5)/q1;\ny = 0.5 + (y-0.5)/q2 + 0.1;\n","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n=sample*6.283;\nphs=-sample * 0.2;\ntm=time*0.4 + phs;\n\nflip=flip+1;\nflip=flip*below(flip,2);\n\nxp=0;\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\nyp=-yp;\nzp=0;\n\n//wrist movement;\nang=sin(tm*2)*0.5 +0.5;\n\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\nyq=yp;\nzq=zp;\n\nang=tm*8;\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//forearm movement;\nzp=zp-0.3;\nang=3.14 + sin(tm*2 - 0.5)*1.5;\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\n\n//upper arm twist\nang=-1.0 + cos(tm*3 + 0.5);\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//upper arm outward;\nzp=zp-0.35;\nang=cos(tm*2)*0.75 - 1.05;\nxq=xp*sin(ang) + zp*cos(ang);\nyq=yp;\nzq=xp*cos(ang) - zp*sin(ang);\n\n//upper arm up down;\nang=cos(tm)*0.5 - 0.5;\nxp=xq;\nyp=yq*cos(ang) - zq*sin(ang);\nzp=yq*sin(ang) + zq*cos(ang);\n\n//xp=xq;yp=yq;zp=zq;\n\n\n//project into screenspace and draw on screen\nzp=zp+2;\nxs=xp/zp;\nys=yp/zp;\n\nx=xs+0.5;\ny=ys*1.3+0.5;\n\n\n//a=(1-sample)*flip;\n\n\n//b=b+pow(1-sample,2)*0.3;\n\n\nx = 0.5 + (x-0.5)/q1;\ny = 0.5 + (y-0.5)/q2 + 0.1;\n"},{"baseVals":{"samples":61,"thick":1,"scaling":2.44415,"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_str":"x = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\ny = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;","init_eqs_eel":"","frame_eqs_eel":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_eel":"x = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\ny = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;"},{"baseVals":{"samples":61,"scaling":2.44415,"smoothing":0,"enabled":0},"init_eqs_str":"t2 = 0","frame_eqs_str":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_str":"x = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\ny = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;","init_eqs_eel":"t2 = 0","frame_eqs_eel":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_eel":"x = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\ny = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;"}],"init_eqs_str":"a.dec_med=0;a.is_beat=0;a.dec_slow=0;a.fr=0;a.avg=0;a.beat=0;a.peak=0;a.q2=0;a.t0=0;","frame_eqs_str":"a.warp=.2*a.bass;a.warp+=above(a.bass,1)*a.bass*.2;a.echo_alpha=.9*above(a.bass,1.25);a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.99,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.5+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.fr=.00001<Math.abs(a.is_beat)?.00001<Math.abs(above(a.fr,0))?-1:1:a.fr;a.q2+=\nabove(a.bass,1.3)*Math.sin(a.time)*.02;a.rot=(a.rot+a.q2)*a.fr;a.zoom+=above(a.bass,1.3)*a.bass*.03;a.sy+=above(a.treb_att,1.2)*a.treb_att*.002*Math.sin(a.time);a.sx+=above(a.treb_att,1.2)*a.treb_att*.002*Math.sin(a.time);","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"warp=bass*.2;\nwarp=warp+(above(bass,1)*bass*.2);\n\necho_alpha=(above(bass,1.25)*.9);\n\n//mv_a=(above(bass,1)*bass*.5);\n\n// Awesome beat code by martin!\ndec_med = pow (0.9, 30/fps);\ndec_slow = pow (0.99, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .5+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\n\nFR = if(is_beat,if(above(FR,0),-1,1),FR);\n\nq2=q2+(above(bass,1.3)*sin(time)*.02);\n\nrot=(rot+q2)*FR;\n\nzoom=zoom+(above(bass,1.3)*bass*.03);\n\nsy=sy+(above(treb_att,1.2)*treb_att*.002*sin(time));\nsx=sx+(above(treb_att,1.2)*treb_att*.002*sin(time));","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 noise2_1;\n  vec3 rc_2;\n  vec3 p_3;\n  vec2 polar_4;\n  vec3 ret_5;\n  vec2 tmpvar_6;\n  tmpvar_6 = ((q27 * (uv - 0.5)) * aspect.xy);\n  float tmpvar_7;\n  tmpvar_7 = sqrt(dot (tmpvar_6, tmpvar_6));\n  float tmpvar_8;\n  float tmpvar_9;\n  tmpvar_9 = (min (abs(\n    (tmpvar_7 / q30)\n  ), 1.0) / max (abs(\n    (tmpvar_7 / q30)\n  ), 1.0));\n  float tmpvar_10;\n  tmpvar_10 = (tmpvar_9 * tmpvar_9);\n  tmpvar_10 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)\n     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)\n   * tmpvar_10) + 0.9999793) * tmpvar_9);\n  tmpvar_10 = (tmpvar_10 + (float(\n    (abs((tmpvar_7 / q30)) > 1.0)\n  ) * (\n    (tmpvar_10 * -2.0)\n   + 1.570796)));\n  tmpvar_8 = (tmpvar_10 * sign((tmpvar_7 / q30)));\n  if ((abs(q30) > (1e-08 * abs(tmpvar_7)))) {\n    if ((q30 < 0.0)) {\n      if ((tmpvar_7 >= 0.0)) {\n        tmpvar_8 += 3.141593;\n      } else {\n        tmpvar_8 = (tmpvar_8 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_8 = (sign(tmpvar_7) * 1.570796);\n  };\n  bool tmpvar_11;\n  tmpvar_11 = (q32 >= tmpvar_8);\n  float tmpvar_12;\n  float tmpvar_13;\n  tmpvar_13 = (min (abs(\n    (tmpvar_6.x / tmpvar_6.y)\n  ), 1.0) / max (abs(\n    (tmpvar_6.x / tmpvar_6.y)\n  ), 1.0));\n  float tmpvar_14;\n  tmpvar_14 = (tmpvar_13 * tmpvar_13);\n  tmpvar_14 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_14) + 0.05368138) * tmpvar_14) - 0.1173503)\n     * tmpvar_14) + 0.1938925) * tmpvar_14) - 0.3326756)\n   * tmpvar_14) + 0.9999793) * tmpvar_13);\n  tmpvar_14 = (tmpvar_14 + (float(\n    (abs((tmpvar_6.x / tmpvar_6.y)) > 1.0)\n  ) * (\n    (tmpvar_14 * -2.0)\n   + 1.570796)));\n  tmpvar_12 = (tmpvar_14 * sign((tmpvar_6.x / tmpvar_6.y)));\n  if ((abs(tmpvar_6.y) > (1e-08 * abs(tmpvar_6.x)))) {\n    if ((tmpvar_6.y < 0.0)) {\n      if ((tmpvar_6.x >= 0.0)) {\n        tmpvar_12 += 3.141593;\n      } else {\n        tmpvar_12 = (tmpvar_12 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_12 = (sign(tmpvar_6.x) * 1.570796);\n  };\n  float x_15;\n  x_15 = (q31 * sin(tmpvar_8));\n  vec2 tmpvar_16;\n  tmpvar_16.x = tmpvar_12;\n  tmpvar_16.y = ((q28 - tmpvar_8) + (sign(x_15) * (1.570796 - \n    (sqrt((1.0 - abs(x_15))) * (1.570796 + (abs(x_15) * (-0.2146018 + \n      (abs(x_15) * (0.08656672 + (abs(x_15) * -0.03102955)))\n    ))))\n  )));\n  polar_4 = tmpvar_16;\n  vec3 tmpvar_17;\n  tmpvar_17.x = (sin(tmpvar_12) * sin(tmpvar_16.y));\n  tmpvar_17.y = (cos(tmpvar_12) * sin(tmpvar_16.y));\n  tmpvar_17.z = cos(tmpvar_16.y);\n  vec2 tmpvar_18;\n  tmpvar_18.x = ((tmpvar_17.z * q20) - (tmpvar_17.y * q21));\n  tmpvar_18.y = ((tmpvar_17.z * q21) + (tmpvar_17.y * q20));\n  vec2 tmpvar_19;\n  tmpvar_19.x = ((tmpvar_18.x * q22) - (tmpvar_17.x * q23));\n  tmpvar_19.y = ((tmpvar_18.x * q23) + (tmpvar_17.x * q22));\n  p_3.z = tmpvar_19.x;\n  vec2 tmpvar_20;\n  tmpvar_20.x = ((tmpvar_18.y * q24) - (tmpvar_19.y * q25));\n  tmpvar_20.y = ((tmpvar_18.y * q25) + (tmpvar_19.y * q24));\n  p_3.xy = tmpvar_20.yx;\n  float tmpvar_21;\n  float tmpvar_22;\n  tmpvar_22 = (min (abs(\n    (tmpvar_19.x / tmpvar_20.y)\n  ), 1.0) / max (abs(\n    (tmpvar_19.x / tmpvar_20.y)\n  ), 1.0));\n  float tmpvar_23;\n  tmpvar_23 = (tmpvar_22 * tmpvar_22);\n  tmpvar_23 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_23) + 0.05368138) * tmpvar_23) - 0.1173503)\n     * tmpvar_23) + 0.1938925) * tmpvar_23) - 0.3326756)\n   * tmpvar_23) + 0.9999793) * tmpvar_22);\n  tmpvar_23 = (tmpvar_23 + (float(\n    (abs((tmpvar_19.x / tmpvar_20.y)) > 1.0)\n  ) * (\n    (tmpvar_23 * -2.0)\n   + 1.570796)));\n  tmpvar_21 = (tmpvar_23 * sign((tmpvar_19.x / tmpvar_20.y)));\n  if ((abs(tmpvar_20.y) > (1e-08 * abs(tmpvar_19.x)))) {\n    if ((tmpvar_20.y < 0.0)) {\n      if ((tmpvar_19.x >= 0.0)) {\n        tmpvar_21 += 3.141593;\n      } else {\n        tmpvar_21 = (tmpvar_21 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_21 = (sign(tmpvar_19.x) * 1.570796);\n  };\n  float tmpvar_24;\n  tmpvar_24 = sqrt(dot (p_3.xz, p_3.xz));\n  float tmpvar_25;\n  float tmpvar_26;\n  tmpvar_26 = (min (abs(\n    (tmpvar_20.x / tmpvar_24)\n  ), 1.0) / max (abs(\n    (tmpvar_20.x / tmpvar_24)\n  ), 1.0));\n  float tmpvar_27;\n  tmpvar_27 = (tmpvar_26 * tmpvar_26);\n  tmpvar_27 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_27) + 0.05368138) * tmpvar_27) - 0.1173503)\n     * tmpvar_27) + 0.1938925) * tmpvar_27) - 0.3326756)\n   * tmpvar_27) + 0.9999793) * tmpvar_26);\n  tmpvar_27 = (tmpvar_27 + (float(\n    (abs((tmpvar_20.x / tmpvar_24)) > 1.0)\n  ) * (\n    (tmpvar_27 * -2.0)\n   + 1.570796)));\n  tmpvar_25 = (tmpvar_27 * sign((tmpvar_20.x / tmpvar_24)));\n  if ((abs(tmpvar_24) > (1e-08 * abs(tmpvar_20.x)))) {\n    if ((tmpvar_24 < 0.0)) {\n      if ((tmpvar_20.x >= 0.0)) {\n        tmpvar_25 += 3.141593;\n      } else {\n        tmpvar_25 = (tmpvar_25 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_25 = (sign(tmpvar_20.x) * 1.570796);\n  };\n  vec2 tmpvar_28;\n  tmpvar_28.x = tmpvar_21;\n  tmpvar_28.y = tmpvar_25;\n  polar_4 = (((tmpvar_28 * q29) * vec2(1.0, 2.0)) + vec2(0.0, 0.5));\n  vec3 tmpvar_29;\n  tmpvar_29.xy = polar_4;\n  tmpvar_29.z = (time * 0.15);\n  rc_2 = (texture (sampler_noisevol_hq, tmpvar_29).xyz + (texture (sampler_noisevol_hq, (2.0 * tmpvar_29)) * 0.5).xyz);\n  rc_2 = (rc_2 + (texture (sampler_noisevol_hq, (4.0 * tmpvar_29)) * 0.25).xyz);\n  rc_2 = (rc_2 + (texture (sampler_noisevol_hq, (8.0 * tmpvar_29)) * 0.125).xyz);\n  rc_2 = (rc_2 + (texture (sampler_noisevol_hq, (16.0 * tmpvar_29)) * 0.0625).xyz);\n  rc_2 = ((rc_2 * rc_2) * (rc_2 * 2.0));\n  rc_2 = (rc_2 * (q3 * 0.5));\n  vec4 tmpvar_30;\n  tmpvar_30 = texture (sampler_fc_main, (0.5 + (uv - 0.5)));\n  noise2_1 = (texture (sampler_noise_lq, ((\n    (uv_orig * texsize.xy)\n   * texsize_noise_lq.zw) + rand_frame.xy)).xyz + mix ((rc_2 * 2.0), vec3(2.0, 2.0, 2.0), vec3(rad)));\n  vec3 a_31;\n  a_31 = (1.0 - tmpvar_30.xyz);\n  ret_5 = (tmpvar_30.xyz + (vec3(0.3, 0.25, 0.2) * dot (\n    ((a_31.yzx * noise2_1.zxy) - (a_31.zxy * noise2_1.yzx))\n  , vec3(0.32, 0.49, 0.29))));\n  ret_5 = (ret_5 - (0.1 * rad));\n  ret_5 = (ret_5 + ((0.1 * texture (sampler_noisevol_hq, \n    ((p_3 + (time * 0.1)) * 0.7)\n  )) * float(tmpvar_11)).xyz);\n  vec4 tmpvar_32;\n  tmpvar_32 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * polar_4.xyy) * (\n    (q27 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q29)));\n  if (((ret_5.x > (q21 * roam_cos.y)) && (ret_5.x <= (q24 * roam_sin.x)))) {\n    ret_5.y = (ret_5.y - (tmpvar_32.x * 0.5));\n  };\n  if (((ret_5.y > (q22 * roam_sin.x)) && (ret_5.y <= (q25 * roam_cos.x)))) {\n    ret_5.z = (ret_5.z - (tmpvar_32.y * 0.5));\n  };\n  if (((ret_5.z > (q23 * roam_cos.x)) && (ret_5.z <= (q26 * roam_sin.y)))) {\n    ret_5.x = (ret_5.x - (tmpvar_32.z * 0.5));\n  };\n  vec4 tmpvar_33;\n  tmpvar_33.w = 1.0;\n  tmpvar_33.xyz = ret_5;\n  ret = tmpvar_33.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  float ang2_2;\n  ang2_2 = (fract((0.9549295 * ang)) / 6.0);\n  ang2_2 = (abs((ang2_2 - 0.08333334)) * 6.283185);\n  vec2 tmpvar_3;\n  tmpvar_3.x = cos(ang2_2);\n  tmpvar_3.y = sin(ang2_2);\n  uv_1 = (0.5 + ((\n    (0.4 * (rad * sqrt(dot (texsize.xy, texsize.xy))))\n   * tmpvar_3) * texsize.zw));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = (1.4 * pow ((\n    clamp (((texture (sampler_blur1, uv_1).xyz * scale1) + bias1), 0.0, 1.0)\n   * \n    (texture (sampler_pc_main, uv_1).xyz - ((texture (sampler_blur3, uv_1).xyz * scale3) + bias3))\n  ), vec3(0.5, 0.5, 0.5)));\n  ret = tmpvar_4.xyz;\n }","warp_hlsl":"float2 polar, factorA, factorB, product;\n\nshader_body\n{\n\nfloat z = q30;\nfloat d = q31;\nfloat pi = q28;\nfloat pi2inv = q29;\nfloat mask_apex = q32;\nfloat zoom = q27;\n\nfloat2 c = zoom*(uv-0.5)*aspect.xy;\n\nfloat camera_apex = atan2( length(c),z);\n\nbool mask = mask_apex >= camera_apex;\n\nfloat longitude = atan2(c.x,c.y);\nfloat latitude = (pi - camera_apex + asin(d*sin(camera_apex)));\n\nfloat2 polar = float2(longitude,latitude);\n\nfloat3 p = float3( sin(polar.x)*sin(polar.y),cos(polar.x)*sin(polar.y),cos(polar.y));\n\nfactorA = p.zy;\nfactorB = float2(q20,q21);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y,factorA.x*factorB.y + factorA.y*factorB.x);\np.zy = product.xy;\n\nfactorA = p.zx;\nfactorB = float2(q22,q23);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y,factorA.x*factorB.y + factorA.y*factorB.x);\np.zx = product.xy;\n\nfactorA = p.yx;\nfactorB = float2(q24,q25);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);\np.yx = product.xy;\npolar = float2(atan2(p.z,p.x),atan2(p.y,length(p.xz)))*pi2inv*float2(1,2)+float2(0,0.5);\n\npolar = polar;\n\n    float3 pos = float3(polar,time*0.15);\n    float3 rc = tex3D(sampler_noisevol_hq, pos);\n    rc += tex3D(sampler_noisevol_hq, 2*pos)*0.5;\n    rc += tex3D(sampler_noisevol_hq, 4*pos)*0.25;\n    rc += tex3D(sampler_noisevol_hq, 8*pos)*0.125;\n    rc += tex3D(sampler_noisevol_hq, 16*pos)*0.0625;\n    //rc = rc*0.556;    \n    rc = (rc*rc*rc)*2;\n    //rc -= GetBlur1(uv);   \n    rc *= q3*0.5;\n\n    float2 ruv = uv = 0.5 + (uv-0.5)*(1+(rc.x*.0));  \n    ret = tex2D(sampler_fc_main, float2(ruv.x, ruv.y)).xyz;\n    \n    float3 noise2 = tex2D(sampler_noise_lq, uv_orig*texsize.xy*texsize_noise_lq.zw+rand_frame.xy);\n    noise2 += lerp(rc*2, 2, rad);\n    \n    ret = ret+0.5*lum(cross((1-ret),(noise2)))*float3(0.6,0.5,0.4);\n    ret -= lerp(0.0,0.1,rad);    \n\n    ret +=0.1*tex3d(sampler_noisevol_hq, (p+time*0.1)*0.7)*mask;\n\n\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((polar.xyy*q27\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q29\n                     );\nif(ret.x> q21*roam_cos.y && ret.x<= q24*roam_sin.x)ret.y -= (noise9).x*.5; \nif(ret.y> q22*roam_sin.x && ret.y<= q25*roam_cos.x)ret.z -= (noise9).y*.5; \nif(ret.z> q23*roam_cos.x && ret.z<= q26*roam_sin.y)ret.x -= (noise9).z*.5; \n}","comp_hlsl":"shader_body\n{\n    float rad_lq = rad * length(texsize.xy)*0.5;\n    float ang_lq = ang;\n    float2 uv_temp1 = (uv - 0.5) * texsize.xy;\n    float rad_hq = length(uv_temp1);\n    float ang_hq = atan2(-uv_temp1.y, uv_temp1.x);\n\n    float2 uv2 = (uv - 0.5);\n    float rad2 = rad_lq*0.8;\n    float ang2 = ang_lq * M_INV_PI_2 + rad_lq*0.000 + time*0.00;\n\n\n        // FIN TYPE\n        float fins = 6;\n        ang2 = frac(ang2*fins)/fins;\n              // ENABLE THIS TO MAKE THE FINS ALTERNATE: (seamless!)\n              ang2 = abs(ang2 - 0.5/fins);\n\n\n    ang2 *= M_PI_2;\n    uv = 0.5 + rad2*float2(cos(ang2),sin(ang2))*texsize.zw;\n\n    ret = 1.4*pow(saturate(GetBlur1(uv))*((tex2D(sampler_pc_main,uv)-GetBlur3(uv))),0.5); //invert\n}"}