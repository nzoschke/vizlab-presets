{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"echo_zoom":1.007,"echo_alpha":0.5,"echo_orient":1,"wave_mode":7,"wave_thick":1,"wrap":0,"wave_a":1,"wave_scale":1.186,"wave_smoothing":0,"warpscale":1.331,"zoomexp":1.48886,"zoom":1.0196,"warp":0.24146,"wave_g":0.7,"wave_b":0.5,"ob_size":0.005,"ob_a":1,"ib_size":0.26,"mv_x":1.28,"mv_y":1.248,"mv_l":5,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.tic=0;a.vt=0;a.meanbass_att=0;a.tim=0;a.bt=0;a.q1=0;a.q5=0;a.mid_avg=0;a.dis=0;a.tt=0;a.my=0;a.tin=0;a.lastbeat=0;a.beatrate=0;a.bass_avg=0;a.peakbass_att=0;a.vav=0;a.an=0;a.mox=0;a.mt=0;a.ra=0;a.mx=0;a.treb_avg=0;a.volume=0;a.beat=0;a.q2=0;a.moy=0;a.q3=0;a.q7=0;a.q8=0;","frame_eqs_str":"a.volume=.3*(a.bass+a.mid);a.beatrate=equal(a.beatrate,0)+(1-equal(a.beatrate,0))*(below(a.volume,.01)+(1-below(a.volume,.01))*a.beatrate);a.lastbeat+=equal(a.lastbeat,0)*a.time;a.meanbass_att=.05*(19*a.meanbass_att+a.bass_att);a.peakbass_att=Math.max(a.bass_att,a.peakbass_att);a.beat=above(a.volume,.8)*below(a.peakbass_att-a.bass_att,.05*a.peakbass_att)*above(a.time-a.lastbeat,.1+.5*(a.beatrate-.1));a.beatrate=Math.max(.00001<Math.abs(a.beat)?.00001<Math.abs(below(a.time-a.lastbeat,\n2*a.beatrate))?.1*(9*a.beatrate+a.time-a.lastbeat):a.beatrate:a.beatrate,.1);a.peakbass_att=a.beat*a.bass_att+(1-a.beat)*a.peakbass_att*(.96*above(a.time-a.lastbeat,2*a.beatrate)+.996*(1-above(a.time-a.lastbeat,2*a.beatrate)));a.lastbeat=a.beat*a.time+(1-a.beat)*a.lastbeat;a.peakbass_att=Math.max(a.peakbass_att,1.1*a.meanbass_att);a.tim=.00001<Math.abs(a.beat)?a.time:a.tim;a.q5=below(a.time-a.tim,.1);a.warp=0;a.tic=Math.min(a.time-a.tin,.1);a.tin=a.time;a.ra=.25*div(1,a.tic);a.treb_avg=a.tic*(a.treb_avg*\n(div(1,a.tic)-a.ra)+a.ra*a.treb);a.mid_avg=a.tic*(a.mid_avg*(div(1,a.tic)-a.ra)+a.ra*a.mid);a.bass_avg=a.tic*(a.bass_avg*(div(1,a.tic)-a.ra)+a.ra*a.bass);a.vav=a.tic*(a.vav*(div(1,a.tic)-a.ra)+a.ra*(a.bass+a.treb+a.mid)*.33333);a.tt+=a.tic*a.treb;a.mt+=a.tic*a.mid;a.bt+=a.tic*a.bass;a.vt+=a.tic*a.vav;a.q1=a.treb_avg;a.q2=a.mid_avg;a.q3=a.bass_avg;a.monitor=a.q5;a.mx=.00001<Math.abs(a.beat)?.0005*rand(1001)+.0005*rand(1001):a.mx;a.my=.00001<Math.abs(a.beat)?.0005*rand(1001)+.0005*rand(1001):a.my;a.cx=\na.mx;a.cy=a.my;a.mox=a.mx-.5;a.moy=a.my-.5;a.an=Math.atan(div(a.moy,a.mox))+(.00001<Math.abs(above(a.mox,0))?6.2832*above(a.moy,0):3.1416);a.dis=pow(a.mox*a.mox+a.moy*a.moy,.5);a.dis=Math.max(.17,a.dis);a.q7=.5+a.dis*Math.cos(a.an);a.q8=.5+a.dis*Math.sin(a.an);","pixel_eqs_str":"a.mx=a.x-a.q7;a.my=a.y-a.q8;a.an=a.ang;a.ra=pow(a.mx*a.mx+a.my*a.my,.5);a.rot=.02*Math.sin(12.5664*a.ra-4*a.time)*(a.mid+a.treb)*(a.mid+a.treb)*.5;","init_eqs_eel":"","frame_eqs_eel":"//begin beat code\nvolume = 0.3*(bass+mid);\nbeatrate = equal(beatrate,0) + (1-equal(beatrate,0))*(below(volume,0.01) + (1-below(volume,0.01))*beatrate);\nlastbeat = lastbeat + equal(lastbeat,0)*time;\nmeanbass_att = 0.05*(meanbass_att*19 + bass_att);\npeakbass_att = max(bass_att,peakbass_att);\nbeat = above(volume,0.8)*below(peakbass_att - bass_att, 0.05*peakbass_att)*above(time - lastbeat, 0.1 + 0.5*(beatrate - 0.1));\nbeatrate = max(if(beat,if(below(time-lastbeat,2*beatrate),0.1*(beatrate*9 + time - lastbeat),beatrate),beatrate),0.1);\n//Adjust responsiveness: To increase responsiveness, set the \"0.96 and \"0.996\" on the next line to slightly lower values. Higher values decrease responsiveness.\npeakbass_att = beat*bass_att + (1-beat)*peakbass_att*(above(time - lastbeat, 2*beatrate)*0.96 + (1-above(time - lastbeat, 2*beatrate))*0.996);\nlastbeat = beat*time + (1-beat)*lastbeat;\npeakbass_att = max(peakbass_att,1.1*meanbass_att);\n//end beat code\n\ntim = if(beat,time,tim);\nq5 = below(time - tim,.1);\n\nwarp = 0;\n\ntic = min(time-tin,.1);\ntin = time;\nra = 1/tic*.25;\n\ntreb_avg = tic*(treb_avg*(1/tic - ra) + ra*treb);\nmid_avg = tic*(mid_avg*(1/tic - ra) + ra*mid);\nbass_avg = tic*(bass_avg*(1/tic - ra) + ra*bass);\nvav = tic*(vav*(1/tic - ra) + ra*(bass+treb+mid)*.33333);\n\ntt = tt + tic*treb;\nmt = mt + tic*mid;\nbt = bt + tic*bass;\nvt = vt + tic*vav;\n\nq1 = treb_avg;\nq2 = mid_avg;\nq3 = bass_avg;\n\nmonitor = q5;\n\nmx = if(beat,rand(1001)*.001*.5 + rand(1001)*.001*.5,mx);\nmy = if(beat,rand(1001)*.001*.5 + rand(1001)*.001*.5,my);\ncx = mx;\ncy = my;\n\nmox = mx - .5;\nmoy = my - .5;\nan = atan(moy/mox) + if(above(mox,0),above(moy,0)*6.2832,3.1416);\ndis = pow(mox*mox + moy*moy,.5);\ndis = max(.17,dis);\n\nq7 = .5 + dis*cos(an);\nq8 = .5 + dis*sin(an);","pixel_eqs_eel":"mx = x - q7;\nmy = y - q8;\n\nan = ang;\n//zoom = 1 + pow(sin(an*5 - time),1)*.02*bass*bass;\n\nra = pow(mx*mx + my*my,.5);\nrot = .02*sin(ra*6.2832*2 - time*4)*(mid + treb)*(mid + treb)*.5;","warp":" shader_body { \n  vec3 ret_1;\n  ret_1 = texture (sampler_main, uv).xyz;\n  vec2 tmpvar_2;\n  tmpvar_2 = (normalize((uv - uv_orig)) * texsize.zw);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 0.0;\n  tmpvar_3.xyz = ret_1;\n  vec4 tmpvar_4;\n  tmpvar_4.w = 0.0;\n  tmpvar_4.xyz = max (tmpvar_3, (texture (sampler_main, (uv - tmpvar_2)) * 0.9)).xyz;\n  vec4 tmpvar_5;\n  tmpvar_5.w = 0.0;\n  tmpvar_5.xyz = max (tmpvar_4, (texture (sampler_main, (uv + tmpvar_2)) * 0.97)).xyz;\n  vec4 tmpvar_6;\n  tmpvar_6.w = 0.0;\n  tmpvar_6.xyz = max (tmpvar_5, (texture (sampler_main, (uv + \n    (tmpvar_2 * 2.0)\n  )) * 0.97)).xyz;\n  ret_1 = (max (tmpvar_6, (texture (sampler_main, \n    (uv + (tmpvar_2 * 3.0))\n  ) * 0.9)).xyz * 0.92);\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ret_1;\n  ret = tmpvar_7.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  float ang2_2;\n  ang2_2 = (fract((0.9549295 * ang)) / 6.0);\n  ang2_2 = (abs((ang2_2 - 0.08333334)) * 6.283185);\n  vec2 tmpvar_3;\n  tmpvar_3.x = cos(ang2_2);\n  tmpvar_3.y = sin(ang2_2);\n  uv_1 = (0.5 + ((\n    (0.4 * (rad * sqrt(dot (texsize.xy, texsize.xy))))\n   * tmpvar_3) * texsize.zw));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = (1.4 * pow ((\n    clamp (((texture (sampler_blur1, uv_1).xyz * scale1) + bias1), 0.0, 1.0)\n   * \n    (texture (sampler_pc_main, uv_1).xyz - ((texture (sampler_blur3, uv_1).xyz * scale3) + bias3))\n  ), vec3(0.5, 0.5, 0.5)));\n  ret = tmpvar_4.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_main, uv ).xyz;\n\n    // motion blur:\n    // 'v' points exactly one pixel, in the direction of motion\n    float2 v = normalize(uv-uv_orig)*texsize.zw;\n    float3 s;\n    ret = max(ret, tex2D(sampler_main, uv+v*-1)*0.90);\n    ret = max(ret, tex2D(sampler_main, uv+v* 1)*0.97);\n    ret = max(ret, tex2D(sampler_main, uv+v* 2)*0.97);\n    ret = max(ret, tex2D(sampler_main, uv+v* 3)*0.90);\n\n    // darken over time\n    ret *= 0.92;\n\n    // add noise\n    //float2 uv_noise = uv*texsize_noise_lq.zw*texsize.xy + rand_frame.xy;\n    //ret += (tex2D(sampler_noise_lq, uv_noise)*2-1)*0.02;\n}","comp_hlsl":"shader_body\n{\n    float rad_lq = rad * length(texsize.xy)*0.5;\n    float ang_lq = ang;\n    float2 uv_temp1 = (uv - 0.5) * texsize.xy;\n    float rad_hq = length(uv_temp1);\n    float ang_hq = atan2(-uv_temp1.y, uv_temp1.x);\n\n    float2 uv2 = (uv - 0.5);\n    float rad2 = rad_lq*0.8;\n    float ang2 = ang_lq * M_INV_PI_2 + rad_lq*0.000 + time*0.00;\n\n\n        // FIN TYPE\n        float fins = 6;\n        ang2 = frac(ang2*fins)/fins;\n              // ENABLE THIS TO MAKE THE FINS ALTERNATE: (seamless!)\n              ang2 = abs(ang2 - 0.5/fins);\n\n\n    ang2 *= M_PI_2;\n    uv = 0.5 + rad2*float2(cos(ang2),sin(ang2))*texsize.zw;\n\n    ret = 1.4*pow(saturate(GetBlur1(uv))*((tex2D(sampler_pc_main,uv)-GetBlur3(uv))),0.5); //invert\n}"}