{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"echo_zoom":1.007,"echo_alpha":0.5,"echo_orient":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_a":0.009,"wave_scale":2.136,"wave_smoothing":0.9,"modwavealphastart":1.6,"modwavealphaend":1.6,"warpscale":1.331,"zoom":0.99951,"warp":0.00909,"wave_r":0,"wave_g":0.04,"wave_b":0,"ob_size":0.5,"ob_r":0.01,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":0.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"rad":0.99596,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":5,"textured":1,"rad":0.986,"tex_ang":3.14159,"tex_zoom":0.99979,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang =sin(time/65) ;// ang + (bass*.2) + (time*.4);","init_eqs_eel":"","frame_eqs_eel":"ang =sin(time/65) ;// ang + (bass*.2) + (time*.4);"},{"baseVals":{"sides":100,"textured":1,"x":0.9,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = sin(time) * .4 + .5;\n\n\npow( (bass*.15),2);","init_eqs_eel":"","frame_eqs_eel":"x = sin(time) * .4 + .5;\n\n\npow( (bass*.15),2);"},{"baseVals":{"sides":36,"additive":1,"rad":0.81623,"r":0,"g":0.04,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = 1-q1;\ny = q2;\nx = 0.5 + (x - 0.5)*0.25;\ny = 0.5 + (y - 0.5)*0.25;","init_eqs_eel":"","frame_eqs_eel":"x = 1-q1;\ny = q2;\nx = 0.5 + (x - 0.5)*0.25;\ny = 0.5 + (y - 0.5)*0.25;"}],"waves":[{"baseVals":{"thick":1,"scaling":2.0231,"smoothing":0,"r":0,"b":0,"enabled":0},"init_eqs_str":"t2 = 0;\nt3 = 0;\nt4 = 0;\ncl = 0;","frame_eqs_str":"","point_eqs_str":"tt3 = tt3*0.6 + (value1)*1;\ntt2 = tt2*0.7 + tt3*0.2;\ntt1 = tt1*0.8 + tt2*0.1;\nd = d*0.9 + tt1*0.2;\n\ny = 0.5 + d*sample*(1-sample);\nx =  -0.05 + sample*1.1;","init_eqs_eel":"t2 = 0;\nt3 = 0;\nt4 = 0;\ncl = 0;","frame_eqs_eel":"","point_eqs_eel":"tt3 = tt3*0.6 + (value1)*1;\ntt2 = tt2*0.7 + tt3*0.2;\ntt1 = tt1*0.8 + tt2*0.1;\nd = d*0.9 + tt1*0.2;\n\ny = 0.5 + d*sample*(1-sample);\nx =  -0.05 + sample*1.1;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.d=0;a.res=0;a.q1=0;a.q5=0;a.x=0;a.v=0;a.diff=0;a.q4=0;a.r=0;a.y=0;a.beat=0;a.vol=0;a.q2=0;a.m=0;","frame_eqs_str":"a.vol=8*a.bass+5*a.mid+3*a.treb;a.m=.97*a.m+.08*a.vol;a.monitor=a.vol;a.beat=above(a.vol,a.res)*above(a.vol,a.m)*above(a.vol,16);a.diff=(1-a.beat)*a.diff+a.beat*(a.vol-a.res);a.res=a.beat*(a.vol+.1*a.m)+(1-a.beat)*(a.res-div(60*(.1+.02*a.diff),a.fps));a.res=Math.max(0,a.res);a.x=.00001<Math.abs(a.beat)?.01*rand(60)+.2:a.x;a.y=.00001<Math.abs(a.beat)?.01*rand(60)+.2:a.y;a.q1=a.x;a.q2=a.y;a.q4=a.aspectx;a.q5=a.aspecty;a.wave_x=a.q1;a.wave_y=1-a.q2;","pixel_eqs_str":"a.cx=a.q1;a.cy=a.q2;a.d=pow(sqrt(sqr(a.x-a.cx)+sqr(a.y-a.cy)),.8);a.r=.2;a.v=.2;a.dx=(a.x-a.cx)*a.v*(a.d-a.r);a.dy=(a.y-a.cy)*a.v*(a.d-a.r);","init_eqs_eel":"","frame_eqs_eel":"vol = bass*8 + mid*5 + treb*3;\nm = m*0.97 + vol*0.08;\nmonitor = vol;\nbeat = above(vol,res)*above(vol,m)*above(vol,16);\ndiff = (1-beat)*diff + beat*(vol-res);\nres = beat*(vol + m*0.1) + (1-beat)*(res -  (0.1+diff*0.02)*60/fps);\nres = max(0,res);\n\n\nx = if(beat,rand(60)*0.01 + 0.2,x);\ny = if(beat,rand(60)*0.01 + 0.2,y);\nq1 = x;\nq2 = y;\n\nq4 = aspectx;\nq5 = aspecty;\nwave_x = q1;\nwave_y = 1-q2;","pixel_eqs_eel":"cx = q1;\ncy = q2;\n\nd = pow(sqrt(sqr(x-cx)+sqr(y-cy)),0.8);\nr = 0.2;\nv = 0.2;\n\ndx = (x - cx)*v*(d-r);\ndy = (y - cy)*v*(d-r);","warp":"vec3 xlat_mutablemus;\n shader_body { \n  vec2 uv_1;\n  uv_1 = uv;\n  vec2 rs_2;\n  vec2 uv6_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = ((uv - 0.5) * aspect.xy);\n  uv6_3 = tmpvar_4;\n  float tmpvar_5;\n  tmpvar_5 = (((q27 * 0.05) * sqrt(\n    dot (tmpvar_4, tmpvar_4)\n  )) + q30);\n  vec2 tmpvar_6;\n  tmpvar_6 = clamp (((\n    sin(tmpvar_5)\n   / \n    cos(tmpvar_5)\n  ) * normalize(tmpvar_4)), vec2(-8.0, -8.0), vec2(8.0, 8.0));\n  rs_2 = tmpvar_6;\n  if ((q28 == 1.0)) {\n    rs_2 = (tmpvar_6 * sin((uv * 5.0)));\n  };\n  uv_1 = (uv + ((rs_2 * \n    dot (rs_2, rs_2)\n  ) / 60.0));\n  uv6_3 = ((uv_1 - 0.5) * (1.0 + (q1 * q27)));\n  mat2 tmpvar_7;\n  tmpvar_7[uint(0)] = _qa.xy;\n  tmpvar_7[1u] = _qa.zw;\n  uv6_3 = (uv6_3 * tmpvar_7);\n  xlat_mutablemus = (abs(vec3((0.1 / \n    sqrt((uv6_3.y - 0.2))\n  ))) * vec3(0.8, 0.6, 1.0));\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = (((\n    (texture (sampler_main, uv_1).xyz - (((texture (sampler_blur1, \n      fract(uv_1)\n    ).xyz * scale1) + bias1) * 0.05))\n   + \n    (0.06 * xlat_mutablemus)\n  ) * 0.99) - 0.01);\n  ret = tmpvar_8.xyz;\n }","comp":" shader_body { \n  float ang2_1;\n  vec2 uv2_2;\n  ang2_1 = ((ang * 0.1591549) + (time * 0.025));\n  float tmpvar_3;\n  tmpvar_3 = (3.0 + floor((rand_preset.z * 5.95)));\n  ang2_1 = (fract((ang2_1 * tmpvar_3)) / tmpvar_3);\n  ang2_1 = (abs((ang2_1 - \n    (0.5 / tmpvar_3)\n  )) * 6.283185);\n  vec2 tmpvar_4;\n  tmpvar_4.x = cos(ang2_1);\n  tmpvar_4.y = sin(ang2_1);\n  uv2_2 = (0.5 + ((\n    (0.4 * (rad * sqrt(dot (texsize.xy, texsize.xy))))\n   * tmpvar_4) * texsize.zw));\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = (((texture (sampler_main, uv2_2).y * vec3(0.6, 0.2, 1.5)) + (texture (sampler_fw_main, uv2_2).x * vec3(1.0, 0.66, 0.0))) - (texture (sampler_main, uv2_2).z * vec3(-0.6, 1.0, 2.0)));\n  ret = tmpvar_5.xyz;\n }","warp_hlsl":"sampler sampler_worms;\nfloat3 color, mus;\nfloat dx,dy;\nshader_body {\n\n\nfloat2 uv1 = (uv-.5) * aspect.xy;\n\nfloat2 uv6 = uv1;\nfloat z = q27*.05*length(uv1)+q30;\nfloat2 d = normalize(uv1);\nfloat2 rs = clamp(tan(z)*d,-8,8);\n\nif (q28 ==1) {rs *= sin(uv*5) ;}\n\nuv += rs*dot(rs,rs)/60;\n\n\nuv6 = (uv-.5)*(1 + 1*q1*q27);\nuv6 = mul(uv6,float2x2(_qa));\n\nmus = .1/(sqrt(uv6.y-.2));\nmus = abs(mus);\nmus *= float3 (.8,.6,1);\n\n\nfloat3 blur = GetBlur1(frac(uv));\n\nfloat3 crisp= tex2D(sampler_main,uv);\n\nfloat3 ret1 = crisp - blur*.05 + .06*mus;\nret = ret1 * .99 -  .01;\n\n\n}","comp_hlsl":"shader_body\n{\n    float rad_lq = rad * length(texsize.xy)*0.5;\n    float ang_lq = ang;\n    float2 uv_temp1 = (uv - 0.5) * texsize.xy;\n    float rad_hq = length(uv_temp1);\n    float ang_hq = atan2(-uv_temp1.y, uv_temp1.x);\n\n    float2 uv2 = (uv - 0.5);\n    float rad2 = rad_lq*0.8;\n    float ang2 = ang_lq * M_INV_PI_2;\n\n        // ROTATION OVER TIME\n        #if 1\n          ang2 += time*0.025;   //rotate over time\n        #endif\n\n        // FIN TYPE\n        float fins = 3 + floor(rand_preset.z*5.95);\n        #if 1     // SHARP FINS\n          ang2 = frac(ang2*fins)/fins;\n              // ENABLE THIS TO MAKE THE FINS ALTERNATE: (seamless!)\n              ang2 = abs(ang2 - 0.5/fins);\n        #else     // COSINE FINS - a bit slow\n          ang2 = cos(ang2*M_PI_2*fins) * 0.023;\n        #endif\n\n        // RADIAL KALEIDOSCOPING?\n        #if 0\n          rad2 *= g_fTexSize.z;\n            // choose one:\n            //rad2 = lerp(rad2, frac(rad2*3)/3.0, 0.5);\n            rad2 = cos(rad2*5);\n            //rad2 = sqrt(rad2)*0.5;\n            //rad2 += abs(frac(rad2*7)-0.5)/7.0 * 1.15;  // stepifier\n            //rad2 += cos(rad2*61)*0.02;\n          rad2 *= g_fTexSize.x;\n        #endif\n\n    ang2 *= M_PI_2;\n    uv2 = 0.5 + rad2*float2(cos(ang2),sin(ang2))*texsize.zw;\n\n    ret = tex2D(sampler_main,uv2).y*float3(0.6,0.2,1.5) + tex2D(sampler_fw_main,uv2).x*float3(1,0.66,0) - tex2D(sampler_main,uv2).z*float3(-0.6,1,2);\n}"}