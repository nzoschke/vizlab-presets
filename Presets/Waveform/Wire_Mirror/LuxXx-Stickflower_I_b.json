{"version":2,"baseVals":{"rating":5,"decay":0.7,"wave_mode":7,"wave_thick":1,"modwavealphabyvolume":1,"wave_a":0.303,"wave_scale":2.911,"wave_smoothing":0.9,"modwavealphastart":1.11,"modwavealphaend":1.23,"warpanimspeed":0.691,"warpscale":2.28,"warp":67.16532,"sx":1.10462,"wave_r":0.5,"wave_g":0.5,"wave_b":0.8,"ob_size":0.005,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_x":64,"mv_y":4.8,"mv_dx":0.4,"mv_l":1,"mv_r":0,"mv_g":0.5,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.xpos=0;a.meanbass_att=0;a.q1=0;a[\"var\"]=0;a.q5=0;a.flip=0;a.lastbeat=0;a.musictime=0;a.beatrate=0;a.mode=0;a.peakbass_att=0;a.beatcounter=0;a.q4=0;a.ypos=0;a.zm=0;a.rd=0;a.att=0;a.tm=0;a.volume=0;a.beat=0;a.vol=0;a.mtime=0;a.q8=0;a.mv_x=64;a.mv_y=48;a.nut=0;a.stp=0;a.stq=0;a.rtp=0;a.rtq=0;a.wvr=0;a.decay=0;a.dcsp=0;a.warp=0;","frame_eqs_str":"a.volume=.3*(a.bass+a.mid+a.att);a.beatrate=equal(a.beatrate,0)+(1-equal(a.beatrate,0))*(below(a.volume,.01)+(1-below(a.volume,.01))*a.beatrate);a.lastbeat+=equal(a.lastbeat,0)*a.time;a.meanbass_att=.1*(9*a.meanbass_att+a.bass_att);a.peakbass_att=Math.max(a.bass_att,a.peakbass_att);a.beatrate=Math.max(.00001<Math.abs(a.beat)?.00001<Math.abs(below(a.time-a.lastbeat,2*a.beatrate))?.1*(9*a.beatrate+a.time-a.lastbeat):a.beatrate:a.beatrate,.1);a.peakbass_att=a.beat*a.bass_att+(1-\na.beat)*a.peakbass_att*(.95*above(a.time-a.lastbeat,2*a.beatrate)+.995*(1-above(a.time-a.lastbeat,2*a.beatrate)));a.lastbeat=a.beat*a.time+(1-a.beat)*a.lastbeat;a.peakbass_att=Math.max(a.peakbass_att,1.1*a.meanbass_att);a.beat=above(a.volume,.8)*below(a.peakbass_att-a.bass_att,.05*a.peakbass_att)*above(a.time-a.lastbeat,.1+.5*(a.beatrate-.1));a.beatcounter+=a.beat;a.mode=.00001<Math.abs(a.beat*equal(mod(a.beatcounter,2),0))?1-a.mode:a.mode;a.flip=2*a.mode-1;a.monitor=a.flip;a.q8=a.flip;a.decay=1;\na.vol=.25*(a.bass_att+a.mid_att+a.treb_att);a.vol*=a.vol;a.mtime+=.05*a.vol*a.flip;a.q1=.4*a.mtime;a.musictime+=a.mid*a.mid*a.mid*a.mid*.01*a.flip;a.xpos=.3*Math.sin(.6*a.musictime);a.ypos=.3*Math.sin(.4*a.musictime);a.q4=a.xpos;a.q5=a.ypos;a.warp=0;","pixel_eqs_str":"a.cx=.5+a.q4;a.cy=.5-a.q5;a.rd=sqrt(sqr(2*(a.x-.5-a.q4))+sqr(1.5*(a.y-.5+a.q5)));a.zm=1-div(a.rd,5);a.sx=a.zm;a.sy=a.zm;a.tm=a.time+Math.sin(a.time)*a.rad;a[\"var\"]=Math.tan(a.tm+a.time)*a.treb;a.zoom=.91+div(a.rd,100)+.1;","init_eqs_eel":"mv_x=64;mv_y=48;\nnut=0;\nstp=0;stq=0;\nrtp=0;rtq=0;\nwvr=0;\ndecay=0;\ndcsp=0;\nwarp=0","frame_eqs_eel":"//krash's beat detection code\nvolume = 0.3*(bass+mid+att);\nbeatrate = equal(beatrate,0) + (1-equal(beatrate,0))*(below(volume,0.01) + (1-below(volume,0.01))*beatrate);\nlastbeat = lastbeat + equal(lastbeat,0)*time;\nmeanbass_att = 0.1*(meanbass_att*9 + bass_att);\npeakbass_att = max(bass_att,peakbass_att);\nbeatrate = max(if(beat,if(below(time-lastbeat,2*beatrate),0.1*(beatrate*9 + time - lastbeat),beatrate),beatrate),0.1);\npeakbass_att = beat*bass_att + (1-beat)*peakbass_att*(above(time - lastbeat, 2*beatrate)*0.95 + (1-above(time - lastbeat, 2*beatrate))*0.995);\nlastbeat = beat*time + (1-beat)*lastbeat;\npeakbass_att = max(peakbass_att,1.1*meanbass_att);\nbeat = above(volume,0.8)*below(peakbass_att - bass_att, 0.05*peakbass_att)*above(time - lastbeat, 0.1 + 0.5*(beatrate - 0.1));\nbeatcounter = beatcounter + beat;\nmode = if(beat*equal(beatcounter%2,0),1-mode,mode);\nflip = 2*mode-1;\nmonitor=flip;\nq8=flip;\n\n\ndecay=1;\n//zoom=1.002;\n\nvol=(bass_att+mid_att+treb_att)*0.25;\nvol=vol*vol;\nmtime=mtime+vol*0.05*flip;\n\nq1=mtime*0.4;\n\n\nmusictime=musictime+(mid*mid*mid*mid)*0.01*flip;\n\nxpos=sin(musictime*0.6)*0.3;\nypos=sin(musictime*0.4)*0.3;\nq4=xpos;\nq5=ypos;\n\nwarp=0.0","pixel_eqs_eel":"cx=0.5+q4;\ncy=0.5-q5;\nrd=sqrt( sqr( (x-0.5-q4)*2) + sqr( (y-0.5+q5)*1.5 ) );\nzm=(1-(rd/5));\nsx=zm;\nsy=zm;\n//rot=above(rd,0.7)*(rd-0.7)*sin(time*0.3);\n\n\n\ntm=time+(sin(time)*rad);\nvar=tan(tm+time)*treb;\n\nzoom=.91+(rd/100)+0.1;\n//rot=((rad/100)+(var/400))*sin(time);","warp":" shader_body { \n  vec3 z_1;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = mix (uv_orig, uv, vec2(0.2, 0.2));\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_main, tmpvar_3);\n  float tmpvar_5;\n  tmpvar_5 = ((tmpvar_4.x * tmpvar_4.y) * tmpvar_4.y);\n  z_1.x = (tmpvar_4.x + ((\n    (-(tmpvar_5) + (0.035 * (1.0 - tmpvar_4.x)))\n   + 0.0007) * 9.0));\n  z_1.y = (tmpvar_4.y + ((tmpvar_5 - \n    (0.095 * tmpvar_4.y)\n  ) * 9.0));\n  z_1.z = (tmpvar_4.z - 0.02);\n  vec2 tmpvar_6;\n  tmpvar_6 = (0.3 * texsize.zw);\n  z_1.x = (z_1.x + (1.8 * (\n    (0.25 * (((texture (sampler_main, \n      (tmpvar_3 + tmpvar_6)\n    ).xyz + texture (sampler_main, \n      (tmpvar_3 + (tmpvar_6 * vec2(-1.0, 1.0)))\n    ).xyz) + texture (sampler_main, (tmpvar_3 + \n      (tmpvar_6 * vec2(1.0, -1.0))\n    )).xyz) + texture (sampler_main, (tmpvar_3 - tmpvar_6)).xyz))\n   - texture (sampler_main, tmpvar_3).xyz)).x);\n  ret_2.yz = z_1.yz;\n  ret_2.x = (z_1.x + (0.09 * (\n    (texture (sampler_noise_lq, (((uv * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)).xyz * 2.0)\n   - 1.0)).x);\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ret_2;\n  ret = tmpvar_7.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  float ang2_2;\n  ang2_2 = (fract((0.9549295 * ang)) / 6.0);\n  ang2_2 = (abs((ang2_2 - 0.08333334)) * 6.283185);\n  vec2 tmpvar_3;\n  tmpvar_3.x = cos(ang2_2);\n  tmpvar_3.y = sin(ang2_2);\n  uv_1 = (0.5 + ((\n    (0.4 * (rad * sqrt(dot (texsize.xy, texsize.xy))))\n   * tmpvar_3) * texsize.zw));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = (1.4 * pow ((\n    clamp (((texture (sampler_blur1, uv_1).xyz * scale1) + bias1), 0.0, 1.0)\n   * \n    (texture (sampler_pc_main, uv_1).xyz - ((texture (sampler_blur3, uv_1).xyz * scale3) + bias3))\n  ), vec3(0.5, 0.5, 0.5)));\n  ret = tmpvar_4.xyz;\n }","warp_hlsl":"shader_body\n{\n  float2 uv2 = lerp(uv_orig, uv, 0.2);\n\n  // diffused version:\n  float ss = 0.3;\n  float3 blur = 0.25*(\n    tex2D(sampler_main, uv2+ss*texsize.zw*float2( 1, 1)).xyz +\n    tex2D(sampler_main, uv2+ss*texsize.zw*float2(-1, 1)).xyz +\n    tex2D(sampler_main, uv2+ss*texsize.zw*float2( 1,-1)).xyz +\n    tex2D(sampler_main, uv2+ss*texsize.zw*float2(-1,-1)).xyz\n  );\n\n  // diffusion:  \n  ret = tex2D(sampler_main,uv2);//blur;\n\n  float F2 = 0.035;\n  float k2 = 0.060;\n  float s = 0.025;\n  float scale = 9;\n\n  // reaction:\n  float3 z = ret;\n  float uvv = ret.x*ret.y*ret.y;\n  z.x += (-uvv + F2*(1-ret.x) + 0.0007)*scale;\n  z.y += (uvv - (F2+k2)*ret.y)*scale;\n  //z.x += s*(16-ret.x*ret.y);\n  //z.y += s*(ret.x*ret.y - ret.y - ret.z);\n  z.z -= 0.02;\n\n  // apply laplacian:\n  z.x += (blur - GetPixel(uv2))*0.2*scale;\n\n  ret = z;  \n  //ret *= 0.98 + 0.02*saturate( (0.75 - rad )*10 );\n  //ret *= 0.99;\n\n  // add noise:\n  ret.x += 0.09*(tex2d(sampler_noise_lq, uv*texsize.xy*texsize_noise_lq.zw + rand_frame.xy).xyz*2-1);\n\n  // darken (decay) over time\n  //ret = (ret - 0.002)*0.99;\n}","comp_hlsl":"shader_body\n{\n    float rad_lq = rad * length(texsize.xy)*0.5;\n    float ang_lq = ang;\n    float2 uv_temp1 = (uv - 0.5) * texsize.xy;\n    float rad_hq = length(uv_temp1);\n    float ang_hq = atan2(-uv_temp1.y, uv_temp1.x);\n\n    float2 uv2 = (uv - 0.5);\n    float rad2 = rad_lq*0.8;\n    float ang2 = ang_lq * M_INV_PI_2 + rad_lq*0.000 + time*0.00;\n\n\n        // FIN TYPE\n        float fins = 6;\n        ang2 = frac(ang2*fins)/fins;\n              // ENABLE THIS TO MAKE THE FINS ALTERNATE: (seamless!)\n              ang2 = abs(ang2 - 0.5/fins);\n\n\n    ang2 *= M_PI_2;\n    uv = 0.5 + rad2*float2(cos(ang2),sin(ang2))*texsize.zw;\n\n    ret = 1.4*pow(saturate(GetBlur1(uv))*((tex2D(sampler_pc_main,uv)-GetBlur3(uv))),0.5); //invert\n}"}