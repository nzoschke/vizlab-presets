{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.527,"wave_smoothing":0.45,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.8,"wave_g":0.49,"ob_size":0.015,"ob_a":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b2x":0.3,"b1ed":0},"shapes":[{"baseVals":{"additive":1,"textured":1,"rad":2.37185,"tex_ang":1.5708,"tex_zoom":0.93101,"r":0,"g":1,"b":1,"a":0.4,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":12,"additive":1,"textured":1,"x":0.3,"y":0.8,"rad":1.06345,"tex_ang":1.63363,"tex_zoom":0.46617,"g":1,"g2":0,"a2":1,"border_g":0,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":13,"additive":1,"num_inst":5,"x":0.65,"y":0.38,"rad":0.57049,"tex_zoom":0.73678,"a":0.7,"g2":0,"border_r":0.5,"border_g":0.5,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":14,"additive":1,"thickoutline":1,"textured":1,"x":0.6,"y":0.55,"rad":0.97237,"ang":1.25664,"tex_zoom":0.34933,"g":0.6,"g2":0,"b2":1,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"samples":506,"sep":116,"spectrum":1,"thick":1,"scaling":1.07408,"smoothing":0,"a":0.7},"init_eqs_str":"a.n=0;a.m=0;","frame_eqs_str":"","point_eqs_str":"a.n=Math.floor((a.reg00+.5)*a.sample);a.m=30001+div(a.n,div(a.reg00,a.reg01));a.gmegabuf[Math.floor(a.m)]=a.value1+a.value2;a.x=a.gmegabuf[Math.floor(1E4+a.n)];a.y=a.gmegabuf[Math.floor(15E3+a.n)];a.a=a.gmegabuf[Math.floor(2E4+a.n)];a.b=Math.min(Math.max(a.gmegabuf[Math.floor(25E3+a.n)],0),1);a.r=1-a.b;a.g=.5;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"\nn = int((reg00+.5)*sample);\n\nm = 30001+n/(reg00/reg01);\ngmegabuf(m) = (value1+value2);\n\nx = gmegabuf(10000+n);\ny = gmegabuf(15000+n);\na = gmegabuf(20000+n);\n\nb = min(max(gmegabuf(25000+n),0),1);\nr = 1-b;  \ng = 0.5;"},{"baseVals":{"enabled":1,"samples":506,"thick":1,"scaling":0.89152,"smoothing":0.82},"init_eqs_str":"a.n=0;","frame_eqs_str":"","point_eqs_str":"a.n=Math.floor((a.reg00+.5)*a.sample)+a.reg00;a.x=a.gmegabuf[Math.floor(1E4+a.n)];a.y=a.gmegabuf[Math.floor(15E3+a.n)];a.a=a.gmegabuf[Math.floor(2E4+a.n)];a.b=Math.min(Math.max(a.gmegabuf[Math.floor(25E3+a.n)],0),1);a.r=1-a.b;a.g=.5;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n = int((reg00+.5)*sample) +reg00;\n\nx = gmegabuf(10000+n);\ny = gmegabuf(15000+n);\na = gmegabuf(20000+n);\n\nb = min(max(gmegabuf(25000+n),0),1);\nr = 1-b;  \ng = 0.5;\n"},{"baseVals":{"enabled":1,"samples":506,"thick":1,"scaling":0.89152,"smoothing":0.82},"init_eqs_str":"a.n=0;","frame_eqs_str":"","point_eqs_str":"a.n=Math.floor((a.reg00+.5)*a.sample)+2*a.reg00;a.x=a.gmegabuf[Math.floor(1E4+a.n)];a.y=a.gmegabuf[Math.floor(15E3+a.n)];a.a=a.gmegabuf[Math.floor(2E4+a.n)];a.b=Math.min(Math.max(a.gmegabuf[Math.floor(25E3+a.n)],0),1);a.r=1-a.b;a.g=.5;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n = int((reg00+.5)*sample)+2*reg00;\n\n\nx = gmegabuf(10000+n);\ny = gmegabuf(15000+n);\na = gmegabuf(20000+n);\n\nb = min(max(gmegabuf(25000+n),0),1);\nr = 1-b;  \ng = 0.5;\n"},{"baseVals":{"enabled":1,"samples":506,"spectrum":1,"thick":1},"init_eqs_str":"a.n=0;","frame_eqs_str":"","point_eqs_str":"a.n=Math.floor((a.reg00-.5)*a.sample)+3*a.reg00;a.x=a.gmegabuf[Math.floor(1E4+a.n)];a.y=a.gmegabuf[Math.floor(15E3+a.n)];a.a=a.gmegabuf[Math.floor(2E4+a.n)];a.b=Math.min(Math.max(a.gmegabuf[Math.floor(25E3+a.n)],0),1);a.r=1-a.b;a.g=.5;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n = int((reg00-.5)*sample)+3*reg00;\n\n\nx = gmegabuf(10000+n);\ny = gmegabuf(15000+n);\na = gmegabuf(20000+n);\n\nb = min(max(gmegabuf(25000+n),0),1);\nr = 1-b;  \ng = 0.5;"}],"init_eqs_str":"a.xang=0;a.fov=0;a.hell=0;a.cbeat=0;a.index2=0;a.bindex=0;a.ran4=0;a.index=0;a.yang=0;a.q29=0;a.q6=0;a.amp_=0;a.xlen=0;a.smooth=0;a.q1=0;a.dec_med=0;a.sum=0;a.q5=0;a.dec_f=0;a.trely=0;a.flen=0;a.reg01=0;a.my=0;a.oz=0;a.imag=0;a.is_beat=0;a.yind=0;a.oy0a=0;a.dec_slow=0;a.ran2=0;a.ind=0;a.z0=0;a.ylen=0;a.real=0;a.ran3=0;a.q4=0;a.mz=0;a.oy0=0;a.amp=0;a.tc0=0;a.oy=0;a.avg=0;a.mx=0;a.vol=0;a.peak=0;a.decc=0;a.q2=0;a.bd_bt=0;a.zang=0;a.q3=0;a.reg00=0;a.trelz=0;a.q32=0;a.q28=0;a.trelx=\n0;a.q30=0;a.ox=0;a.xind=0;for(var b=a.index=0;7E4>b;b++)a.megabuf[Math.floor(a.index)]=0,a.gmegabuf[Math.floor(a.index)]=0,a.index+=1;a.zang=1;a.yang=0;a.zang=2;","frame_eqs_str":"a.xlen=45;a.ylen=45;a.flen=20;a.reg00=div(a.xlen*a.ylen,4);a.reg01=div(a.reg00,4);a.dec_med=1-div(.06*30,a.fps);a.dec_slow=1-div(.6,a.fps);a.dec_f=pow(.8,div(30,a.fps));a.q30=a.dec_slow;a.smooth=Math.max(1,pow(6,div(a.fps,30))-2);a.cbeat=a.bass+a.mid+a.treb;a.decc=.00001<Math.abs(a.vol>a.cbeat?1:0)?.8:a.dec_med;a.vol=a.vol*a.decc+(1-a.decc)*a.cbeat;a.avg=a.avg*a.dec_slow+a.cbeat*(1-a.dec_slow);a.is_beat=above(a.cbeat,1.5*a.avg)*above(a.time,a.tc0+.2);a.tc0=.00001<Math.abs(bor(a.is_beat,\na.bd_bt))?a.time:a.tc0;a.peak=.00001<Math.abs(a.is_beat)?a.cbeat:a.peak*a.dec_med;a.ind=0;a.sum=0;a.amp=.01;for(var b=0;b<a.reg01;b++)a.sum+=div(a.gmegabuf[Math.floor(a.ind+3E4)],a.reg01),a.amp+=pow(a.gmegabuf[Math.floor(a.ind+3E4)],2),a.ind+=1;a.ind=0;a.amp_=a.amp_*a.dec_med+600*div((1-a.dec_med)*sqrt(a.amp),a.reg01);for(b=0;b<a.reg01;b++)a.megabuf[Math.floor(a.ind+3E4)]=div(a.gmegabuf[Math.floor(a.ind+3E4)]-a.sum,a.amp_),a.ind+=1;for(b=a.index2=0;b<a.flen;b++){a.index=0;a.real=0;for(var c=a.imag=\n0;c<a.flen;c++)a.real+=Math.cos(6.28*div(a.index,a.flen)*a.index2)*a.megabuf[Math.floor(div(a.index*a.reg01,8)+30002)],a.imag+=Math.sin(6.28*div(a.index,a.flen)*a.index2)*a.megabuf[Math.floor(div(a.index*a.reg01,8)+30002)],a.index+=1;a.megabuf[Math.floor(1E4+a.index2)]=a.megabuf[Math.floor(1E4+a.index2)]*a.dec_f+a.real;a.megabuf[Math.floor(15E3+a.index2)]=a.megabuf[Math.floor(15E3+a.index2)]*a.dec_f+a.imag;a.index2+=1}a.ind=1;for(b=0;b<div(a.flen,2);b++){a.cx=a.megabuf[Math.floor(1E4+a.ind)];a.cy=\na.megabuf[Math.floor(15E3+a.ind)];a.yind=-1;for(c=0;3>c;c++){a.xind=-1;for(var d=0;3>d;d++)a.ox=mod((a.cx+.5)*a.xlen+a.xind,a.xlen),a.oy=mod((a.cy+.5)*a.ylen+a.yind,a.ylen),a.amp=3*(a.cx*a.cx+a.cy*a.cy),a.megabuf[Math.floor(a.oy*a.ylen+a.ox)]-=div(div(60,a.fps)*sqrt(a.amp)*above(a.amp,.02),1+a.xind*a.xind+a.yind*a.yind),a.xind+=1;a.yind+=1}a.ind+=1}for(b=a.yind=0;b<a.ylen;b++){for(c=a.xind=0;c<a.xlen;c++)a.megabuf[Math.floor(a.yind*a.ylen+a.xind+5E3)]=a.dec_med*(div(a.gmegabuf[Math.floor(a.yind*a.ylen+\nmod(a.xind+1,a.xlen))]+a.gmegabuf[Math.floor(a.yind*a.ylen+mod(a.xlen+a.xind-1,a.xlen))]+a.gmegabuf[Math.floor(mod(a.yind+1,a.ylen)*a.ylen+a.xind)]+a.gmegabuf[Math.floor(mod(a.yind+a.ylen-1,a.ylen)*a.ylen+a.xind)]+a.gmegabuf[Math.floor(a.yind*a.ylen+a.xind)]*a.smooth*4,2+2*a.smooth)-a.megabuf[Math.floor(a.yind*a.ylen+a.xind)]),a.xind+=1;a.yind+=1}a.bindex+=a.is_beat;.00001<Math.abs(a.is_beat&&.00001>Math.abs(mod(a.bindex,4)-0)?1:0)?a.ran2=div(rand(100)-50,50):0;.00001<Math.abs(a.is_beat&&.00001>Math.abs(mod(a.bindex,\n4)-2)?1:0)?a.ran3=div(rand(100)-50,50):0;.00001<Math.abs(a.is_beat&&.00001>Math.abs(mod(a.bindex,6)-5)?1:0)?a.ran4=div(rand(100)-50,50):0;a.trelx+=div(div(a.ran2,a.fps),18);a.trely+=div(div(a.ran3,a.fps),2);a.trelz+=div(div(a.ran4,a.fps),6);a.zang=6*Math.sin(a.trelz);a.xang=6*Math.sin(div(a.zang,5)+a.trelx);a.yang=6*Math.sin(0*div(a.zang,3)+a.trely);a.q1=Math.cos(a.xang);a.q2=Math.sin(a.xang);a.q3=Math.cos(a.yang);a.q4=Math.sin(a.yang);a.q5=Math.cos(a.zang);a.q6=Math.sin(a.zang);a.fov=1;for(b=a.yind=\n0;b<a.ylen;b++){for(c=a.xind=0;c<a.xlen;c++)a.ind=a.yind*a.ylen+a.xind,a.megabuf[Math.floor(a.ind)]=a.gmegabuf[Math.floor(a.ind)],a.gmegabuf[Math.floor(a.ind)]=a.megabuf[Math.floor(a.ind+5E3)],a.oz=a.yind-div(a.ylen,2),a.ox=.00001<Math.abs(bnot(mod(a.yind,2)))?a.xind:a.xlen-a.xind-1,a.oy0a=div(a.oy0+a.oy0a,2.5),a.oy=a.gmegabuf[Math.floor(a.yind*a.ylen+a.ox)],a.oy0=a.oy,a.ox-=div(a.xlen,2),a.mx=a.ox*a.q5-a.oy*a.q6,a.my=a.ox*a.q6+a.oy*a.q5,a.ox=a.mx,a.oy=a.my,a.mx=a.ox*a.q3+a.oz*a.q4,a.mz=-a.ox*a.q4+\na.oz*a.q3,a.ox=a.mx,a.oz=a.mz,a.my=a.oy*a.q1-a.oz*a.q2,a.mz=a.oy*a.q2+a.oz*a.q1,a.z0=10*Math.sin(14*a.trelz),a.oy=a.my,a.oz=a.mz+a.z0,a.gmegabuf[Math.floor(1E4+a.ind)]=div(a.fov*a.ox,a.oz+60*a.fov)+.5,a.gmegabuf[Math.floor(15E3+a.ind)]=div(a.fov*a.oy,a.oz+60*a.fov)+.5,a.hell=Math.max(Math.min(.5+div(a.oy0,4),1),.2),a.gmegabuf[Math.floor(2E4+a.ind)]=Math.max(Math.min(a.hell*(.5+.1*(a.oy0a-a.oy0)),1),.1),a.gmegabuf[Math.floor(25E3+a.ind)]=div(a.oy0,16)+.5,a.xind+=1;a.yind+=1}a.q29=div(10,a.z0+15);a.q32=\na.aspecty;a.q28=Math.min(div(a.vol,3)-.25,1);a.monitor=a.q28;","pixel_eqs_str":"a.rot=0;a.zoom=1.1;a.warp=0;a.dy=.02;","init_eqs_eel":"index = 0;\nloop (70000,\n  megabuf(index) = 0;\n  gmegabuf(index) = 0;\n  index = index + 1;\n);\n\nzang = 1;\n\nyang = 0;\nzang = 2;","frame_eqs_eel":"xlen = 45; ylen = 45; flen = 20; reg00 = xlen*ylen/4; reg01=reg00/4;\ndec_med = 1-0.06*30/fps; dec_slow = 1-0.02*30/fps; dec_f = pow (0.8, 30/fps);\nq30 = dec_slow;\nsmooth = max(1,pow(6,fps/30)-2); // >= 0; Ausbreitungsgeschwindigkeit\n\n//\"Classic\" beat reaction\ncbeat = bass+mid+treb;\ndecc = if (vol>cbeat,0.8,dec_med);\nvol  = vol * decc + (1-decc)*cbeat;\navg = avg*dec_slow + cbeat*(1-dec_slow);\nis_beat = above(cbeat, 1.5*avg) * above (time, tc0+.2);\ntc0 = if (bor(is_beat, bd_bt),time,tc0);\npeak = if (is_beat,cbeat,peak*dec_med);\n\n\n//Gleichanteil entfernen und normalisieren\nind = 0; sum = 0; amp = 0.01;\nloop (reg01,\n  sum = sum + gmegabuf(ind+30000)/(reg01);\n  amp = amp + pow(gmegabuf(ind+30000),2);\n  ind = ind+1;\n); \nind = 0; amp_= amp_*dec_med + (1-dec_med)*sqrt(amp)/reg01*600;\nloop (reg01,\n  megabuf(ind+30000)= (gmegabuf(ind+30000)-sum)/amp_;\n  ind = ind+1;\n);\n \n// Spectrum of spectrum  !\nindex2 = 0;\nloop(flen, //Frequency step\n  index=0; real= 0; imag = 0;\n  loop (flen,\n    real = real + cos(index/flen*6.28*index2)*megabuf(index*reg01/8+30002);\n    imag = imag + sin(index/flen*6.28*index2)*megabuf(index*reg01/8+30002);\n    index=index+1;\n  );\n  megabuf(10000+index2)= megabuf(10000+index2) * dec_f + real;\n  megabuf(15000+index2)= megabuf(15000+index2) * dec_f + imag;\n  index2 = index2+1;\n );\n\n//Anregung\nind = 1;\nloop (flen/2,\n  cx = megabuf(10000+ind);\n  cy = megabuf(15000+ind);\n  yind = -1;\n  loop (3,\n    xind = -1;\n    loop (3,\n      ox = ((cx+.5)*xlen+xind)%xlen;\n      oy = ((cy+.5)*ylen+yind)%ylen;\n      amp = (cx*cx+cy*cy)*3;\n      megabuf (oy*ylen+ox) = megabuf (oy*ylen+ox) \n                           - 2*30/fps*sqrt(amp)*above(amp,.02)/(1+xind*xind+yind*yind);\n      xind = xind+1;\n    );\n    yind = yind+1;\n  );\n  ind = ind+1;\n);\n\n//Simulation\nyind = 0;\nloop (ylen,\n  xind = 0;\n  loop (xlen,\n    megabuf(yind*ylen+xind+5000) = //megabuf ab 5000 ist nur Zwischenspeicher\n    dec_med*((gmegabuf(yind*ylen+(xind+1)%xlen) +\n    gmegabuf(yind*ylen+(xlen+xind-1)%xlen) + \n    gmegabuf(((yind+1)%ylen)*ylen+xind) + \n    gmegabuf(((yind+ylen-1)%ylen)*ylen+xind)\n    +gmegabuf(yind*ylen+xind)*smooth*4)/(2+2*smooth) - megabuf(yind*ylen+xind)); \n    xind = xind+1;\n  );\n  yind = yind+1;\n);\n\n//Projektionsparameter\n\nbindex += is_beat;\n\nif (is_beat && (bindex%4==0), ran2 = (rand(100)-50)/50,0 );\nif (is_beat && (bindex%4==2), ran3 = (rand(100)-50)/50,0 );\nif (is_beat && (bindex%6==5), ran4 = (rand(100)-50)/50,0 );\n\ntrelx += ran2/fps/18;\ntrely += ran3/fps/2;\ntrelz += ran4/fps/6;\nzang = 6*sin(trelz);\nxang = 6*sin(zang/5+trelx);\nyang = 6*sin(zang/3*0+trely);\n\nq1 = cos(xang);q2 = sin(xang);q3 = cos(yang);\nq4 = sin(yang);q5 = cos(zang);q6 = sin(zang);\nfov = 1;\n\n//Umkopieren und Projektion\nyind = 0;\nloop (ylen,\n  xind = 0;\n  loop (xlen,\n    ind = yind*ylen+xind;\n    megabuf(ind) = gmegabuf(ind); \n    gmegabuf(ind) = megabuf(ind+5000); \n    oz = yind - ylen/2; //#\n    ox = if(bnot(yind%2),xind,xlen-xind-1);\n    oy0a = (oy0+oy0a)/2.5;\n    oy = gmegabuf(yind*ylen+ox); oy0 = oy;\n    ox = ox - xlen/2;  \n    mx = ox*q5 - oy*q6;  my = ox*q6 + oy*q5;\n    ox = mx; oy = my;  \n    mx = ox*q3 + oz*q4;  mz = - ox*q4 + oz*q3;\n    ox = mx; oz = mz;  \n    my = oy*q1 - oz*q2;  mz = oy*q2 + oz*q1;\n    z0 = (10*sin(trelz*14));\n    oy = my; oz = mz+z0;\n    gmegabuf(10000+ind) = fov*ox/(oz+60*fov)+.5;\n    gmegabuf(15000+ind) = fov*oy/(oz+60*fov)+.5;\n    hell= max(min(.5+oy0/4,1),0.2); //Helligkeit\n    gmegabuf(20000+ind) = max(min(hell* (.5+ (oy0a-oy0)*0.1),1),0.1);\n    gmegabuf(25000+ind) = oy0/16+.5;;\n    xind = xind+1;\n  );\n  yind = yind+1;\n);\n\nq29 = 10/(z0+15);\nq32 = aspecty;\nq28 = min (vol/3-0.25,1);\nmonitor = q28;","pixel_eqs_eel":"rot = 0; zoom = 1.1; warp = 0; dy = 0.02;","warp":"float xlat_mutablearg;\nvec2 xlat_mutableuv1;\nvec2 xlat_mutableuv2;\n shader_body { \n  vec2 uv_1;\n  vec3 ret_2;\n  uv_1 = (((\n    (uv - 0.5)\n   * aspect.xy) + 0.5) + ((q21 - 0.5) / 2.0));\n  mat2 tmpvar_3;\n  tmpvar_3[uint(0)].x = q16;\n  tmpvar_3[uint(0)].y = -(q15);\n  tmpvar_3[1u].x = q15;\n  tmpvar_3[1u].y = q16;\n  xlat_mutableuv1 = (((uv_1 - 0.5) * tmpvar_3) + 0.5);\n  vec2 tmpvar_4;\n  tmpvar_4.x = q25;\n  tmpvar_4.y = q26;\n  xlat_mutableuv1 = (mix (xlat_mutableuv1, uv_1, vec2(q20)) + tmpvar_4);\n  xlat_mutableuv2 = (xlat_mutableuv1 - 0.5);\n  float tmpvar_5;\n  tmpvar_5 = sqrt(dot (xlat_mutableuv2, xlat_mutableuv2));\n  float tmpvar_6;\n  tmpvar_6 = abs((xlat_mutableuv2.y + (q21 / 4.0)));\n  float tmpvar_7;\n  tmpvar_7 = abs((xlat_mutableuv2.x + (q22 / 4.0)));\n  float angle_8;\n  float tmpvar_9;\n  tmpvar_9 = abs(tmpvar_6);\n  if ((tmpvar_7 >= 0.0)) {\n    angle_8 = (1.0 - ((tmpvar_7 - tmpvar_9) / (tmpvar_7 + tmpvar_9)));\n  } else {\n    angle_8 = (3.0 - ((tmpvar_7 + tmpvar_9) / (tmpvar_9 - tmpvar_7)));\n  };\n  angle_8 = (angle_8 * 0.25);\n  float tmpvar_10;\n  if ((tmpvar_6 < 0.0)) {\n    tmpvar_10 = -(angle_8);\n  } else {\n    tmpvar_10 = angle_8;\n  };\n  vec2 tmpvar_11;\n  tmpvar_11.x = (4.0 * tmpvar_5);\n  tmpvar_11.y = ((2.0 * q20) * tmpvar_10);\n  vec2 tmpvar_12;\n  tmpvar_12 = mix (tmpvar_11.yx, xlat_mutableuv1, vec2(q23));\n  xlat_mutableuv1 = tmpvar_12;\n  xlat_mutablearg = (4.0 * (clamp (\n    (8.0 * abs((tmpvar_12.y - 0.5)))\n  , 0.0, 1.0) * clamp (\n    (8.0 * abs(((tmpvar_12.x - 0.5) - (q15 * 0.7))))\n  , 0.0, 1.0)));\n  ret_2 = (vec3(exp((\n    -(xlat_mutablearg)\n   * 2.0))) * (2.0 * normalize(texture (sampler_noise_hq, \n    ((tmpvar_12 + (q14 / 32.0)) / 16.0)\n  ))).xyz);\n  vec3 tmpvar_13;\n  tmpvar_13 = mix (texture (sampler_main, uv_orig).xyz, ((texture (sampler_blur1, uv_orig).xyz * scale1) + bias1), vec3(0.4, 0.4, 0.4));\n  if (((q20 * q21) > 0.4)) {\n    ret_2 = mix (tmpvar_13, ret_2, vec3(q9));\n  };\n  vec4 tmpvar_14;\n  tmpvar_14.w = 1.0;\n  tmpvar_14.xyz = ret_2;\n  ret = tmpvar_14.xyz;\n }","comp":" shader_body { \n  float ang2_1;\n  ang2_1 = ((ang * 0.1591549) + (time * 0.025));\n  float tmpvar_2;\n  tmpvar_2 = (3.0 + floor((rand_preset.z * 5.95)));\n  ang2_1 = (fract((ang2_1 * tmpvar_2)) / tmpvar_2);\n  ang2_1 = (abs((ang2_1 - \n    (0.5 / tmpvar_2)\n  )) * 6.283185);\n  vec2 tmpvar_3;\n  tmpvar_3.x = cos(ang2_1);\n  tmpvar_3.y = sin(ang2_1);\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = (texture (sampler_main, (0.5 + (\n    ((0.4 * (rad * sqrt(\n      dot (texsize.xy, texsize.xy)\n    ))) * tmpvar_3)\n   * texsize.zw))).xyz * 1.333);\n  ret = tmpvar_4.xyz;\n }","warp_hlsl":"#define sat saturate\nsampler sampler_pw_noise_lq;\nfloat3 color, mus;\nfloat2 uv1, uv2, uv3;\nfloat arg, arg2;\n\nfloat aTan2(float y, float x) {float angle;\t float abs_y = abs(y);\nif (x >= 0) {float r = (x - abs_y) / (x + abs_y); angle = 1-r;} \nelse {float r = (x + abs_y) / (abs_y - x); angle = 3-r; }\t\nangle = angle * .25;\nreturn y < 0 ? -angle : angle;}\n\n\nshader_body {\nuv = (uv-0.5)*aspect.xy + 0.5 + (q21-0.5)/2;\nfloat anz = 32;\n\nuv1  = mul ((uv-0.5),float2x2(q16,q15,-q15,q16)) + 0.5;\n//uv1 = (uv1-0.5)*aspect.yx + 0.5;\nuv1 = lerp (uv1,uv,q20);\n\n\n//uv1 += float2 (sin(q14), cos (q14))*q21;\nuv1 += float2 (q25,q26);\n\nuv3 = uv1;\nuv2 = uv1-0.5;\nuv1 = float2 (4*length(uv2),2*q20*aTan2 (abs(uv2.y+q21/4),abs(uv2.x+q22/4))).yx;\nuv1 = lerp (uv1,uv3,q23);\n\narg = 4*(sat(8*abs(uv1.y-0.5)) * sat(8*abs(uv1.x-0.5-(q15*.7)))) ;\n//arg = 64*(abs(uv1.y-0.5));\n\narg2 = pow (4/bass_att*length (cos((uv + float2((q7%16)/16,0))*3*3.1416)),2);\n\n//arg = arg2;\nret = 1 - pow(arg,1);\nret = exp (-arg*2);\n\n\n\n\nret *= 2*normalize(tex2D (sampler_noise_hq,(uv1+q14/32)/16));\n//ret -= 0.8*GetPixel(uv);\n\nfloat3 ret0 = lerp(GetPixel(uv_orig),GetBlur1(uv_orig),0.4);\nif (q20*q21 > 0.4) {ret = lerp (ret0,ret,q9);}\n}","comp_hlsl":"shader_body\n{\n    float rad_lq = rad * length(texsize.xy)*0.5;\n    float ang_lq = ang;\n    float2 uv_temp1 = (uv - 0.5) * texsize.xy;\n    float rad_hq = length(uv_temp1);\n    float ang_hq = atan2(-uv_temp1.y, uv_temp1.x);\n\n    float2 uv2 = (uv - 0.5);\n    float rad2 = rad_lq*0.8;\n    float ang2 = ang_lq * M_INV_PI_2;\n\n        // ROTATION OVER TIME\n        #if 1\n          ang2 += time*0.025;   //rotate over time\n        #endif\n\n        // FIN TYPE\n        float fins = 3 + floor(rand_preset.z*5.95);\n        #if 1     // SHARP FINS\n          ang2 = frac(ang2*fins)/fins;\n              // ENABLE THIS TO MAKE THE FINS ALTERNATE: (seamless!)\n              ang2 = abs(ang2 - 0.5/fins);\n        #else     // COSINE FINS - a bit slow\n          ang2 = cos(ang2*M_PI_2*fins) * 0.023;\n        #endif\n\n        // RADIAL KALEIDOSCOPING?\n        #if 0\n          rad2 *= g_fTexSize.z;\n            // choose one:\n            //rad2 = lerp(rad2, frac(rad2*3)/3.0, 0.5);\n            rad2 = cos(rad2*5);\n            //rad2 = sqrt(rad2)*0.5;\n            //rad2 += abs(frac(rad2*7)-0.5)/7.0 * 1.15;  // stepifier\n            //rad2 += cos(rad2*61)*0.02;\n          rad2 *= g_fTexSize.x;\n        #endif\n\n    ang2 *= M_PI_2;\n    uv2 = 0.5 + rad2*float2(cos(ang2),sin(ang2))*texsize.zw;\n\n    ret = tex2D(sampler_main, uv2).xyz;\n    ret *= 1.333; // a little bit of overbright\n}"}