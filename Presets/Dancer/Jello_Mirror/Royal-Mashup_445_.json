{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.964,"echo_zoom":1,"echo_orient":3,"wave_mode":6,"modwavealphabyvolume":1,"wave_brighten":0,"darken_center":1,"wave_a":0,"wave_scale":1.346,"wave_smoothing":0.09,"wave_mystery":0.4,"modwavealphastart":1.42,"modwavealphaend":2,"warpanimspeed":1.459,"warpscale":2.007,"zoom":1.0099,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_x":1,"ob_size":0.2,"ob_a":0.2,"ib_r":0.6,"ib_g":0.4,"ib_b":0.4,"mv_g":0,"mv_b":0,"mv_a":0},"shapes":[{"baseVals":{"sides":25,"thickoutline":1,"textured":1,"rad":0.0474,"g":1,"b":1,"a":0,"r2":1,"b2":1,"a2":0.5,"border_a":0,"enabled":0},"init_eqs_str":"bob = 1.5;\nro = 0;\nred = rand(20);","frame_eqs_str":"","init_eqs_eel":"bob = 1.5;\nro = 0;\nred = rand(20);","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":14,"additive":1,"thickoutline":1,"textured":1,"num_inst":3,"tex_zoom":5.99573,"g":1,"b":1,"g2":0,"a2":0.5,"border_r":0,"border_g":0,"border_b":0,"border_a":1},"init_eqs_str":"a.arg=0;a.q10=0;a.fac=0;","frame_eqs_str":"a.arg=a.q10+div(div(a.instance,a.num_inst),8);a.x=1-(a.arg-Math.floor(a.arg));a.y=.51;a.rad=Math.min(.5,.1*a.mid_att);a.r=.5+.4*Math.sin(div(a.frame,14));a.b=.5+.4*Math.sin(div(a.frame,17));a.g=.5+.4*Math.sin(div(a.frame,21));a.fac=1;a.r2=a.r*a.fac;a.b2=a.b*a.fac;a.g2=a.g*a.fac;a.a=.7;a.a2=div(a.a,2);","init_eqs_eel":"","frame_eqs_eel":"\narg = (q10+instance/num_inst/8);\nx = 1-(arg-int(arg));\ny = 0.51;\nrad = min(0.5,mid_att*0.1);\n\n//if (instance==1, x = 1-x; ,0);\n\n//rad *= 0.5+pow(sin(cos(q1)),4)*3;\n\nr = 0.5 + 0.4*sin(frame/14);\nb = 0.5 + 0.4*sin(frame/17 );\ng = 0.5 + 0.4*sin(frame/21 );\nfac = 1;\nr2 = r*fac; b2=b*fac; g2=g*fac;\na = 0.7 ; a2 = a/2;\n"},{"baseVals":{"textured":1,"num_inst":4,"rad":0.40272,"tex_ang":2.51327,"tex_zoom":0.55045,"g":0.95,"b":1,"r2":1,"b2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"additive":1,"textured":1,"rad":0.44482,"ang":3.26726,"tex_zoom":0.90529,"g":1,"b":1,"a":0,"r2":0.3,"g2":0.3,"b2":0.3,"border_a":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"additive":1,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.n=0;a.maxbpm=0;a.tvol=0;a.maxind1=0;a.bindex=0;a.num_res=0;a.maxv=0;a.index=0;a.quali=0;a.scale=0;a.q6=0;a.dt=0;a.y0=0;a.maxquad=0;a.dt1=0;a.dec_f=0;a.x0=0;a.dec_s=0;a.minbpm=0;a.tt=0;a.omega=0;a.ec_steps=0;a.is_beat=0;a.bpm=0;a.q24=0;a.q10=0;a.bestsig=0;a.blocksize=0;a.dec_m=0;a.sig=0;a.ex=0;a.avg=0;a.tmpv=0;a.beatsin=0;a.beat=0;a.vol=0;a.peak=0;a.beatcos=0;a.q27=0;a.tr1=0;a.trel1=0;a.num_sig=0;a.tmp=0;a.t0=0;a.vol_=0;a.m=0;a.quad=0;a.q7=0;a.excite=0;a.q8=0;a.bmp=0;a.n=-5E3;\nfor(var b=0;2E4>b;b++)a.megabuf[Math.floor(a.n)]=0,a.gmegabuf[Math.floor(a.n)]=0,a.n+=1;a.minbpm=100;a.maxbpm=200;a.num_res=80;a.num_sig=3;a.blocksize=12*a.num_res+12;a.reg04=a.blocksize;for(b=a.sig=0;b<a.num_sig;b++){for(var c=a.index=0;c<a.num_res;c++)a.n=a.blocksize*a.sig+12*a.index,a.bpm=a.minbpm*pow(div(a.maxbpm,a.minbpm),div(a.index,a.num_res)),a.gmegabuf[Math.floor(a.n)]=a.bpm,a.index+=1;a.sig+=1}a.pi=3.1416;a.octave=div(a.num_res*Math.log(2),Math.log(div(a.maxbpm,a.minbpm)));a.prog=0;a.bindex=\nrand(8);a.count5=rand(8);","frame_eqs_str":"a.dt=Math.min(div(1,a.fps),.1);a.dec_f=.8;a.dec_m=1-4*a.dt;a.dec_s=1-a.dt;a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_s+a.beat*(1-a.dec_s);a.is_beat=above(a.beat,.5+a.avg+a.peak)*above(a.time,a.t0+.25);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_m;a.bindex=mod(a.bindex+a.is_beat,8);a.q24=a.is_beat;a.q27=a.bindex;for(var b=a.sig=0;b<a.num_sig;b++){a.excite=.00001<Math.abs(.00001>Math.abs(a.sig-0)?1:0)?a.bass-\na.bass_att:.00001<Math.abs(.00001>Math.abs(a.sig-1)?1:0)?a.mid-a.mid_att:a.treb-a.treb_att;a.index=0;a.maxquad=0;a.m=a.sig*a.blocksize+12*a.num_res;a.gmegabuf[Math.floor(a.m+2)]=.001;for(var c=a.gmegabuf[Math.floor(a.m+3)]=0;c<a.num_res;c++){a.n=a.sig*a.blocksize+12*a.index;a.omega=div(6.283*a.gmegabuf[Math.floor(a.n)],60);a.gmegabuf[Math.floor(a.n+1)]*=1-.22*a.dt;a.ec_steps=Math.floor(10*a.dt*a.omega)+1;a.dt1=div(a.dt,a.ec_steps);a.ex=div(a.excite,sqrt(a.omega));for(var d=0;d<a.ec_steps;d++)a.gmegabuf[Math.floor(a.n+\n1)]+=(a.ex-sqr(a.omega)*a.gmegabuf[Math.floor(a.n+2)])*a.dt1,a.gmegabuf[Math.floor(a.n+2)]+=a.gmegabuf[Math.floor(a.n+1)]*a.dt1;a.beatcos=a.gmegabuf[Math.floor(a.n+1)];a.beatsin=a.gmegabuf[Math.floor(a.n+2)]*a.omega;a.quad=sqrt(pow(a.beatsin,2)+pow(a.beatcos,2));a.gmegabuf[Math.floor(a.m+4)]+=Math.abs(a.gmegabuf[Math.floor(a.n+3)]-a.quad);a.gmegabuf[Math.floor(a.n+3)]=a.gmegabuf[Math.floor(a.n+3)]*a.dec_m+a.quad*(1-a.dec_m);.00001<Math.abs(a.gmegabuf[Math.floor(a.n+3)]>a.gmegabuf[Math.floor(a.m+3)]?\n1:0)?a.gmegabuf[Math.floor(a.m+3)]=a.gmegabuf[Math.floor(a.n+3)]:0;a.gmegabuf[Math.floor(a.m+2)]+=div(a.gmegabuf[Math.floor(a.n+3)],a.num_res);a.gmegabuf[Math.floor(a.n+4)]=a.beatcos;a.gmegabuf[Math.floor(a.n+5)]=a.beatsin;a.index+=1}a.sig+=1}a.sig=0;a.quali=0;a.bestsig=-1;for(b=0;b<a.num_sig;b++)a.m=a.sig*a.blocksize+12*a.num_res,a.tmp=div(a.gmegabuf[Math.floor(a.m+3)],a.gmegabuf[Math.floor(a.m+2)]),.00001<Math.abs(a.tmp>a.quali?1:0)?(a.quali=a.tmp,a.bestsig=a.sig):0,a.sig+=1;a.index=0;a.maxind1=\n0;a.maxv*=a.dec_s;for(b=0;b<a.num_res;b++)a.n=a.bestsig*a.blocksize+12*a.index,a.tmpv=a.gmegabuf[Math.floor(a.n+3)],.00001<Math.abs(a.tmpv>a.maxv?1:0)?(a.maxv=a.tmpv,a.maxind1=a.index):0,a.index+=1;a.bpm=a.minbpm*pow(div(a.maxbpm,a.minbpm),div(a.maxind1,a.num_res));.00001<Math.abs(150>a.bmp?1:0)?a.trel1+=div(a.bpm,60)*a.dt:a.trel1+=div(a.bpm,120)*a.dt;a.q10=a.trel1;a.vol=a.bass+a.mid+a.treb;a.vol_=.9*a.vol_+.1*a.vol;a.tvol=.7*a.tvol+.3*(a.vol-a.vol_);a.n=50100;for(b=0;100>b;b++)a.gmegabuf[Math.floor(a.n)]=\na.gmegabuf[Math.floor(a.n-1)],--a.n;a.gmegabuf[5E4]=Math.atan(a.tvol);a.monitor=a.bpm;a.q6=a.gmegabuf[5E4];a.q7=sqrt(Math.max(0,a.vol_-.3));a.tr1+=a.vol*a.dt;a.q8=a.tr1;","pixel_eqs_str":"a.warp=0;a.rot=0;a.scale=.2;a.x0=.5+a.scale*pow(a.gmegabuf[5E4],1);a.y0=.5+a.scale*pow(a.gmegabuf[50020],1);a.tt=sqrt(pow(a.x-a.x0,2)+pow(a.y-a.y0,2));a.zoom=1+.2*a.tt;a.zoom=.99+.1*(.4+pow(a.gmegabuf[Math.floor(5E4+20*a.rad)],1));a.zoom-=.03*((0>Math.sin(3*a.ang)?1:0)-.5);","init_eqs_eel":"n = -5000; loop (20000, megabuf(n)=0; gmegabuf(n)=0; n +=1; );\n\nMINBPM = 100; MAXBPM = 200; num_res = 80; num_sig=3;\nblocksize = num_res*12+12; \nreg04 = blocksize;\n\nsig = 0;\nloop (num_sig,\n  index = 0;\n  loop (num_res,\n    n = blocksize*sig + 12*index;\n    BPM      = minbpm * pow(maxbpm/minbpm,index/num_res);\n    gmegabuf(n) = BPM;\n    index += 1;\n  );\nsig+=1);\n\npi = 3.1416;\nOCTAVE = (num_res) * log(2) / log (MAXBPM / MINBPM);\n\nprog = 0;\nbindex = rand(8);\ncount5 = rand(8);","frame_eqs_eel":"dt = min (1/fps,0.1) ; //Stability !\ndec_f = 0.8; dec_m = 1 - 4*dt; dec_s = 1 - dt;\n\nbeat = max (max (bass, mid), treb); \navg = avg*dec_s + beat*(1-dec_s);\nis_beat = above(beat, .5+avg+peak) * above (time, t0+.25);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_m;\nbindex = (bindex + is_beat) %8;\nq24 = is_beat;\nq27 = bindex;\n\nsig=0; \nloop (num_sig,\n  excite = if (sig==0, bass-bass_att, if (sig==1, mid-mid_att, treb-treb_att));\n  index = 0; maxquad = 0;\n  m = sig*blocksize+num_res*12; // Start Infoblock;\n  gmegabuf(m+2) = 0.001; //lok. MW\n  gmegabuf(m+3) = 0; //lok. MAX\n  loop (num_res, \n    n = sig*blocksize+index*12;  omega=gmegabuf(n) * 6.283/60;\n    gmegabuf (n+1) *= 1- 0.22*dt; \n    EC_Steps = int (10*dt*omega)+1; dt1 = dt/EC_Steps;\n    ex = excite / sqrt(omega);\n    loop (EC_Steps, // Euler-Cauchy \n      gmegabuf (n+1) += (ex - sqr(omega)*gmegabuf(n+2)) * dt1;\n      gmegabuf (n+2) += gmegabuf(n+1) * dt1);\n    beatcos  = gmegabuf(n+1);  beatsin = gmegabuf(n+2)*omega;\n    quad     = sqrt (pow(beatsin,2) + pow(beatcos,2)) ;\n    gmegabuf (m+4) += abs (gmegabuf(n+3)-Quad); //Lok Aenderung\n    gmegabuf (n+3) = gmegabuf(n+3) *dec_m +  quad* (1-dec_m);\n    if (gmegabuf(n+3) > gmegabuf(m+3),gmegabuf(m+3)=gmegabuf(n+3),0); //LOK MAX\n    gmegabuf (m+2) += gmegabuf(n+3)/num_res; //LOK MW\n    gmegabuf(n+4)= beatcos;\n    gmegabuf(n+5)= beatsin;\n  index += 1;);\nsig+=1;);\n\n\n//Beste raussuchen\nsig = 0; quali = 0; bestsig = -1;\nloop (num_sig,\n  m = sig*blocksize+num_res*12; // Start Infoblock;\n  tmp = gmegabuf(m+3)/gmegabuf(m+2) ;\n  if (tmp > quali, quali = tmp; bestsig = sig;, 0);\nsig += 1);\n\nindex = 0; maxind1 = 0; maxv *= dec_s;\nloop (num_res, \n  n = bestsig*blocksize+index*12; // Start Infoblock;\n  tmpv = gmegabuf(n+3);\n  if (tmpv > maxv, maxv=tmpv; maxind1=index, 0);\nindex += 1;);\n\nBPM   = minbpm * pow(maxbpm/minbpm,maxind1/num_res);\nif (BMP < 150, trel1 += BPM/60*dt, trel1 +=BPM/120*dt);\nq10 = trel1;\n\n//Vol delay chain \nvol = (bass+mid+treb);\nvol_=vol_*0.9 + 0.1*vol;\ntvol = tvol*0.7 + 0.3*(vol-vol_);\nn = 50100; loop (100, gmegabuf (n) = gmegabuf (n-1); n -= 1; ); gmegabuf (50000) = atan(tvol);\nmonitor = BPM;\nq6 = gmegabuf(50000);\nq7 = sqrt(max(0,vol_-0.3));\n\ntr1 += vol*dt;\nq8 = tr1;","pixel_eqs_eel":"warp = .0; rot = .0;\nscale = 0.2;\n\nx0 = .5+scale*pow(gmegabuf(50000),1); y0 = .5+scale*pow(gmegabuf(50020),1);\n\ntt = sqrt (pow(x-x0,2) + pow(y-y0,2));\n\nzoom = 1+tt*0.2;\n\nzoom = 0.99+ 0.1*(0.4+pow(gmegabuf(50000+rad*20),1));\nzoom -= 0.03*((sin(ang*3)<0)-0.5);","warp":"mat2 ofs;\nvec2 xlat_mutableuv2;\nfloat xlat_mutablezv;\n shader_body { \n  mat2 tmpvar_1;\n  tmpvar_1[uint(0)].x = texsize.z;\n  tmpvar_1[uint(0)].y = 0.0;\n  tmpvar_1[1u].x = 0.0;\n  tmpvar_1[1u].y = texsize.w;\n  ofs = (tmpvar_1 * 4.0);\n  vec2 tmpvar_2;\n  tmpvar_2.x = ((uv.x - 0.5) + q19);\n  tmpvar_2.y = (uv.y - 0.5);\n  vec2 v_3;\n  v_3.x = ofs[0].x;\n  v_3.y = ofs[1].x;\n  vec2 v_4;\n  v_4.x = ofs[0].x;\n  v_4.y = ofs[1].x;\n  vec2 v_5;\n  v_5.x = ofs[0].y;\n  v_5.y = ofs[1].y;\n  vec2 v_6;\n  v_6.x = ofs[0].y;\n  v_6.y = ofs[1].y;\n  vec2 tmpvar_7;\n  tmpvar_7.x = (texture (sampler_main, (uv + v_3)) - texture (sampler_main, (uv - v_4))).z;\n  tmpvar_7.y = (texture (sampler_main, (uv + v_5)) - texture (sampler_main, (uv - v_6))).z;\n  xlat_mutablezv = (time * 0.08);\n  vec2 tmpvar_8;\n  tmpvar_8.x = (0.02 * time);\n  tmpvar_8.y = (-0.05 * time);\n  xlat_mutableuv2 = ((3.0 * tmpvar_2) + tmpvar_8);\n  vec3 tmpvar_9;\n  tmpvar_9.xy = xlat_mutableuv2;\n  tmpvar_9.z = xlat_mutablezv;\n  vec3 tmpvar_10;\n  tmpvar_10.xy = (xlat_mutableuv2 * vec2(2.0, 2.0));\n  tmpvar_10.z = (xlat_mutablezv * 2.0);\n  vec3 tmpvar_11;\n  tmpvar_11.xy = (xlat_mutableuv2 * vec2(4.0, 4.0));\n  tmpvar_11.z = (xlat_mutablezv * 3.0);\n  vec3 tmpvar_12;\n  tmpvar_12.xy = (xlat_mutableuv2 * vec2(8.0, 8.0));\n  tmpvar_12.z = (xlat_mutablezv * 7.0);\n  xlat_mutableuv2 = (tmpvar_2 + ((\n    (((texture (sampler_noisevol_hq, tmpvar_9).z + (texture (sampler_noisevol_hq, tmpvar_10).z / 2.0)) + (texture (sampler_noisevol_hq, tmpvar_11).z / 4.0)) + (texture (sampler_noisevol_hq, tmpvar_12).z / 8.0))\n   - 1.0) * 0.1));\n  vec4 tmpvar_13;\n  tmpvar_13.w = 1.0;\n  tmpvar_13.xyz = (((\n    (((0.2 + (\n      (((1.0 + bass_att) * 0.01) / sqrt(dot (xlat_mutableuv2, xlat_mutableuv2)))\n     * \n      (1.0 + normalize(slow_roam_cos))\n    .xyz)) + ((rand_preset.z - 0.5) * xlat_mutableuv2.y)) * 0.1)\n   / 2.0) + (texture (sampler_main, \n    (uv - (0.02 * tmpvar_7))\n  ).xyz * 0.9)) - 0.01);\n  ret = tmpvar_13.xyz;\n }","comp":" shader_body { \n  float ang2_1;\n  ang2_1 = ((ang * 0.1591549) + (time * 0.025));\n  ang2_1 = (cos((50.26548 * ang2_1)) * 0.023);\n  ang2_1 = (ang2_1 * 6.283185);\n  vec2 tmpvar_2;\n  tmpvar_2.x = cos(ang2_1);\n  tmpvar_2.y = sin(ang2_1);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = texture (sampler_main, (0.5 + ((\n    (0.375 * (rad * sqrt(dot (texsize.xy, texsize.xy))))\n   * tmpvar_2) * texsize.zw))).xyz;\n  ret = tmpvar_3.xyz;\n }","warp_hlsl":"sampler sampler_pw_noise_lq;\nfloat3 crisp,dx,dy,ret1;\nfloat2 zz, uv1,uv2;\nfloat  n1,n2,n3,n4,zv,z, noise, k1, wave;\nstatic float2 sunpos = float2 (0*sin(time/3),-.0);\nstatic float2x2 ofs = float2x2 (texsize.z,0,0,texsize.w)*4;\nstatic float3 suncol = 1+normalize(slow_roam_cos);\nfloat3 cloud (float2 uv_in) {\nreturn (.2+(1+bass_att)*.01/length(uv_in-sunpos)*suncol+(rand_preset.z-.5)*uv_in.y);} \n\nshader_body {\n\nfloat2 uv1 = float2(uv.x-0.5+q19,uv.y-0.5);//*aspect.xy;\n\ndx = tex2D(sampler_main,uv+ofs[0]) - tex2D(sampler_main,uv-ofs[0]);\ndy = tex2D(sampler_main,uv+ofs[1]) - tex2D(sampler_main,uv-ofs[1]);\nzz = float2(dx.b,dy.b);\n\n//clouds\nzv = time*.06 ;\nzv = time*.08+ .0*GetPixel(uv); //##\nuv2 = 3*uv1+ float2(0.02*time,-.05*time);\n\nn1 = tex3D(sampler_noisevol_hq,float3 (uv2.x,uv2.y,zv)).b;\nn2 = tex3D(sampler_noisevol_hq,float3 (uv2.x*2,uv2.y*2,zv*2)).b;\nn3 = tex3D(sampler_noisevol_hq,float3 (uv2.x*4,uv2.y*4,zv*3)).b;\nn4 = tex3D(sampler_noisevol_hq,float3 (uv2.x*8,uv2.y*8,zv*7)).b;\nnoise = n1 + n2/2 + n3/4 + n4/8 -1;\nnoise = pow(noise,1);\nuv2 = uv1+noise*.1;\n\n//*******************************\nret1 = cloud(uv2);\nfloat k1 = .1;\nret = ret1*k1/2 + GetPixel(uv-.02*zz)*(1-k1)-.01;\n\n//ret = 0;\n}","comp_hlsl":"shader_body\n{\n    float rad_lq = rad * length(texsize.xy)*0.5;\n    float ang_lq = ang;\n    float2 uv_temp1 = (uv - 0.5) * texsize.xy;\n    float rad_hq = length(uv_temp1);\n    float ang_hq = atan2(-uv_temp1.y, uv_temp1.x);\n\n    float2 uv2 = (uv - 0.5);\n    float rad2 = rad_lq*0.75;\n    float ang2 = ang_lq * M_INV_PI_2;\n\n        // ROTATION OVER TIME\n        ang2 += time*0.025;   //rotate over time\n\n        // FIN TYPE\n        float fins = 8;//3 + floor(rand_preset.z*5.95);\n        ang2 = cos(ang2*M_PI_2*fins) * 0.023;\n\n\n    ang2 *= M_PI_2;\n    uv2 = 0.5 + rad2*float2(cos(ang2),sin(ang2))*texsize.zw;\n\n    ret = tex2D(sampler_main, uv2).xyz;\n    ret *= 1.0; // a little bit of overbright\n}"}