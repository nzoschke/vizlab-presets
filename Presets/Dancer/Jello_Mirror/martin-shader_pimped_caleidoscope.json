{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.964,"echo_zoom":1,"echo_orient":3,"wave_mode":6,"modwavealphabyvolume":1,"wave_brighten":0,"darken_center":1,"wave_a":0,"wave_scale":1.346,"wave_smoothing":0.09,"wave_mystery":0.4,"modwavealphastart":1.42,"modwavealphaend":2,"warpanimspeed":1.459,"warpscale":2.007,"zoom":1.0099,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_x":1,"ob_size":0.2,"ob_a":0.2,"ib_r":0.6,"ib_g":0.4,"ib_b":0.4,"mv_g":0,"mv_b":0,"mv_a":0},"shapes":[{"baseVals":{"sides":25,"thickoutline":1,"textured":1,"rad":0.0474,"g":1,"b":1,"a":0,"r2":1,"b2":1,"a2":0.5,"border_a":0,"enabled":0},"init_eqs_str":"bob = 1.5;\nro = 0;\nred = rand(20);","frame_eqs_str":"","init_eqs_eel":"bob = 1.5;\nro = 0;\nred = rand(20);","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":14,"additive":1,"thickoutline":1,"textured":1,"num_inst":3,"tex_zoom":5.99573,"g":1,"b":1,"g2":0,"a2":0.5,"border_r":0,"border_g":0,"border_b":0,"border_a":1},"init_eqs_str":"a.arg=0;a.q10=0;a.fac=0;","frame_eqs_str":"a.arg=a.q10+div(div(a.instance,a.num_inst),8);a.x=1-(a.arg-Math.floor(a.arg));a.y=.51;a.rad=Math.min(.5,.1*a.mid_att);a.r=.5+.4*Math.sin(div(a.frame,14));a.b=.5+.4*Math.sin(div(a.frame,17));a.g=.5+.4*Math.sin(div(a.frame,21));a.fac=1;a.r2=a.r*a.fac;a.b2=a.b*a.fac;a.g2=a.g*a.fac;a.a=.7;a.a2=div(a.a,2);","init_eqs_eel":"","frame_eqs_eel":"\narg = (q10+instance/num_inst/8);\nx = 1-(arg-int(arg));\ny = 0.51;\nrad = min(0.5,mid_att*0.1);\n\n//if (instance==1, x = 1-x; ,0);\n\n//rad *= 0.5+pow(sin(cos(q1)),4)*3;\n\nr = 0.5 + 0.4*sin(frame/14);\nb = 0.5 + 0.4*sin(frame/17 );\ng = 0.5 + 0.4*sin(frame/21 );\nfac = 1;\nr2 = r*fac; b2=b*fac; g2=g*fac;\na = 0.7 ; a2 = a/2;\n"},{"baseVals":{"textured":1,"num_inst":4,"rad":0.40272,"tex_ang":2.51327,"tex_zoom":0.55045,"g":0.95,"b":1,"r2":1,"b2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"additive":1,"textured":1,"rad":0.44482,"ang":3.26726,"tex_zoom":0.90529,"g":1,"b":1,"a":0,"r2":0.3,"g2":0.3,"b2":0.3,"border_a":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"additive":1,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.n=0;a.maxbpm=0;a.tvol=0;a.maxind1=0;a.bindex=0;a.num_res=0;a.maxv=0;a.index=0;a.quali=0;a.scale=0;a.q6=0;a.dt=0;a.y0=0;a.maxquad=0;a.dt1=0;a.dec_f=0;a.x0=0;a.dec_s=0;a.minbpm=0;a.tt=0;a.omega=0;a.ec_steps=0;a.is_beat=0;a.bpm=0;a.q24=0;a.q10=0;a.bestsig=0;a.blocksize=0;a.dec_m=0;a.sig=0;a.ex=0;a.avg=0;a.tmpv=0;a.beatsin=0;a.beat=0;a.vol=0;a.peak=0;a.beatcos=0;a.q27=0;a.tr1=0;a.trel1=0;a.num_sig=0;a.tmp=0;a.t0=0;a.vol_=0;a.m=0;a.quad=0;a.q7=0;a.excite=0;a.q8=0;a.bmp=0;a.n=-5E3;\nfor(var b=0;2E4>b;b++)a.megabuf[Math.floor(a.n)]=0,a.gmegabuf[Math.floor(a.n)]=0,a.n+=1;a.minbpm=100;a.maxbpm=200;a.num_res=80;a.num_sig=3;a.blocksize=12*a.num_res+12;a.reg04=a.blocksize;for(b=a.sig=0;b<a.num_sig;b++){for(var c=a.index=0;c<a.num_res;c++)a.n=a.blocksize*a.sig+12*a.index,a.bpm=a.minbpm*pow(div(a.maxbpm,a.minbpm),div(a.index,a.num_res)),a.gmegabuf[Math.floor(a.n)]=a.bpm,a.index+=1;a.sig+=1}a.pi=3.1416;a.octave=div(a.num_res*Math.log(2),Math.log(div(a.maxbpm,a.minbpm)));a.prog=0;a.bindex=\nrand(8);a.count5=rand(8);","frame_eqs_str":"a.dt=Math.min(div(1,a.fps),.1);a.dec_f=.8;a.dec_m=1-4*a.dt;a.dec_s=1-a.dt;a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_s+a.beat*(1-a.dec_s);a.is_beat=above(a.beat,.5+a.avg+a.peak)*above(a.time,a.t0+.25);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_m;a.bindex=mod(a.bindex+a.is_beat,8);a.q24=a.is_beat;a.q27=a.bindex;for(var b=a.sig=0;b<a.num_sig;b++){a.excite=.00001<Math.abs(.00001>Math.abs(a.sig-0)?1:0)?a.bass-\na.bass_att:.00001<Math.abs(.00001>Math.abs(a.sig-1)?1:0)?a.mid-a.mid_att:a.treb-a.treb_att;a.index=0;a.maxquad=0;a.m=a.sig*a.blocksize+12*a.num_res;a.gmegabuf[Math.floor(a.m+2)]=.001;for(var c=a.gmegabuf[Math.floor(a.m+3)]=0;c<a.num_res;c++){a.n=a.sig*a.blocksize+12*a.index;a.omega=div(6.283*a.gmegabuf[Math.floor(a.n)],60);a.gmegabuf[Math.floor(a.n+1)]*=1-.22*a.dt;a.ec_steps=Math.floor(10*a.dt*a.omega)+1;a.dt1=div(a.dt,a.ec_steps);a.ex=div(a.excite,sqrt(a.omega));for(var d=0;d<a.ec_steps;d++)a.gmegabuf[Math.floor(a.n+\n1)]+=(a.ex-sqr(a.omega)*a.gmegabuf[Math.floor(a.n+2)])*a.dt1,a.gmegabuf[Math.floor(a.n+2)]+=a.gmegabuf[Math.floor(a.n+1)]*a.dt1;a.beatcos=a.gmegabuf[Math.floor(a.n+1)];a.beatsin=a.gmegabuf[Math.floor(a.n+2)]*a.omega;a.quad=sqrt(pow(a.beatsin,2)+pow(a.beatcos,2));a.gmegabuf[Math.floor(a.m+4)]+=Math.abs(a.gmegabuf[Math.floor(a.n+3)]-a.quad);a.gmegabuf[Math.floor(a.n+3)]=a.gmegabuf[Math.floor(a.n+3)]*a.dec_m+a.quad*(1-a.dec_m);.00001<Math.abs(a.gmegabuf[Math.floor(a.n+3)]>a.gmegabuf[Math.floor(a.m+3)]?\n1:0)?a.gmegabuf[Math.floor(a.m+3)]=a.gmegabuf[Math.floor(a.n+3)]:0;a.gmegabuf[Math.floor(a.m+2)]+=div(a.gmegabuf[Math.floor(a.n+3)],a.num_res);a.gmegabuf[Math.floor(a.n+4)]=a.beatcos;a.gmegabuf[Math.floor(a.n+5)]=a.beatsin;a.index+=1}a.sig+=1}a.sig=0;a.quali=0;a.bestsig=-1;for(b=0;b<a.num_sig;b++)a.m=a.sig*a.blocksize+12*a.num_res,a.tmp=div(a.gmegabuf[Math.floor(a.m+3)],a.gmegabuf[Math.floor(a.m+2)]),.00001<Math.abs(a.tmp>a.quali?1:0)?(a.quali=a.tmp,a.bestsig=a.sig):0,a.sig+=1;a.index=0;a.maxind1=\n0;a.maxv*=a.dec_s;for(b=0;b<a.num_res;b++)a.n=a.bestsig*a.blocksize+12*a.index,a.tmpv=a.gmegabuf[Math.floor(a.n+3)],.00001<Math.abs(a.tmpv>a.maxv?1:0)?(a.maxv=a.tmpv,a.maxind1=a.index):0,a.index+=1;a.bpm=a.minbpm*pow(div(a.maxbpm,a.minbpm),div(a.maxind1,a.num_res));.00001<Math.abs(150>a.bmp?1:0)?a.trel1+=div(a.bpm,60)*a.dt:a.trel1+=div(a.bpm,120)*a.dt;a.q10=a.trel1;a.vol=a.bass+a.mid+a.treb;a.vol_=.9*a.vol_+.1*a.vol;a.tvol=.7*a.tvol+.3*(a.vol-a.vol_);a.n=50100;for(b=0;100>b;b++)a.gmegabuf[Math.floor(a.n)]=\na.gmegabuf[Math.floor(a.n-1)],--a.n;a.gmegabuf[5E4]=Math.atan(a.tvol);a.monitor=a.bpm;a.q6=a.gmegabuf[5E4];a.q7=sqrt(Math.max(0,a.vol_-.3));a.tr1+=a.vol*a.dt;a.q8=a.tr1;","pixel_eqs_str":"a.warp=0;a.rot=0;a.scale=.2;a.x0=.5+a.scale*pow(a.gmegabuf[5E4],1);a.y0=.5+a.scale*pow(a.gmegabuf[50020],1);a.tt=sqrt(pow(a.x-a.x0,2)+pow(a.y-a.y0,2));a.zoom=1+.2*a.tt;a.zoom=.99+.1*(.4+pow(a.gmegabuf[Math.floor(5E4+20*a.rad)],1));a.zoom-=.03*((0>Math.sin(3*a.ang)?1:0)-.5);","init_eqs_eel":"n = -5000; loop (20000, megabuf(n)=0; gmegabuf(n)=0; n +=1; );\n\nMINBPM = 100; MAXBPM = 200; num_res = 80; num_sig=3;\nblocksize = num_res*12+12; \nreg04 = blocksize;\n\nsig = 0;\nloop (num_sig,\n  index = 0;\n  loop (num_res,\n    n = blocksize*sig + 12*index;\n    BPM      = minbpm * pow(maxbpm/minbpm,index/num_res);\n    gmegabuf(n) = BPM;\n    index += 1;\n  );\nsig+=1);\n\npi = 3.1416;\nOCTAVE = (num_res) * log(2) / log (MAXBPM / MINBPM);\n\nprog = 0;\nbindex = rand(8);\ncount5 = rand(8);","frame_eqs_eel":"dt = min (1/fps,0.1) ; //Stability !\ndec_f = 0.8; dec_m = 1 - 4*dt; dec_s = 1 - dt;\n\nbeat = max (max (bass, mid), treb); \navg = avg*dec_s + beat*(1-dec_s);\nis_beat = above(beat, .5+avg+peak) * above (time, t0+.25);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_m;\nbindex = (bindex + is_beat) %8;\nq24 = is_beat;\nq27 = bindex;\n\nsig=0; \nloop (num_sig,\n  excite = if (sig==0, bass-bass_att, if (sig==1, mid-mid_att, treb-treb_att));\n  index = 0; maxquad = 0;\n  m = sig*blocksize+num_res*12; // Start Infoblock;\n  gmegabuf(m+2) = 0.001; //lok. MW\n  gmegabuf(m+3) = 0; //lok. MAX\n  loop (num_res, \n    n = sig*blocksize+index*12;  omega=gmegabuf(n) * 6.283/60;\n    gmegabuf (n+1) *= 1- 0.22*dt; \n    EC_Steps = int (10*dt*omega)+1; dt1 = dt/EC_Steps;\n    ex = excite / sqrt(omega);\n    loop (EC_Steps, // Euler-Cauchy \n      gmegabuf (n+1) += (ex - sqr(omega)*gmegabuf(n+2)) * dt1;\n      gmegabuf (n+2) += gmegabuf(n+1) * dt1);\n    beatcos  = gmegabuf(n+1);  beatsin = gmegabuf(n+2)*omega;\n    quad     = sqrt (pow(beatsin,2) + pow(beatcos,2)) ;\n    gmegabuf (m+4) += abs (gmegabuf(n+3)-Quad); //Lok Aenderung\n    gmegabuf (n+3) = gmegabuf(n+3) *dec_m +  quad* (1-dec_m);\n    if (gmegabuf(n+3) > gmegabuf(m+3),gmegabuf(m+3)=gmegabuf(n+3),0); //LOK MAX\n    gmegabuf (m+2) += gmegabuf(n+3)/num_res; //LOK MW\n    gmegabuf(n+4)= beatcos;\n    gmegabuf(n+5)= beatsin;\n  index += 1;);\nsig+=1;);\n\n\n//Beste raussuchen\nsig = 0; quali = 0; bestsig = -1;\nloop (num_sig,\n  m = sig*blocksize+num_res*12; // Start Infoblock;\n  tmp = gmegabuf(m+3)/gmegabuf(m+2) ;\n  if (tmp > quali, quali = tmp; bestsig = sig;, 0);\nsig += 1);\n\nindex = 0; maxind1 = 0; maxv *= dec_s;\nloop (num_res, \n  n = bestsig*blocksize+index*12; // Start Infoblock;\n  tmpv = gmegabuf(n+3);\n  if (tmpv > maxv, maxv=tmpv; maxind1=index, 0);\nindex += 1;);\n\nBPM   = minbpm * pow(maxbpm/minbpm,maxind1/num_res);\nif (BMP < 150, trel1 += BPM/60*dt, trel1 +=BPM/120*dt);\nq10 = trel1;\n\n//Vol delay chain \nvol = (bass+mid+treb);\nvol_=vol_*0.9 + 0.1*vol;\ntvol = tvol*0.7 + 0.3*(vol-vol_);\nn = 50100; loop (100, gmegabuf (n) = gmegabuf (n-1); n -= 1; ); gmegabuf (50000) = atan(tvol);\nmonitor = BPM;\nq6 = gmegabuf(50000);\nq7 = sqrt(max(0,vol_-0.3));\n\ntr1 += vol*dt;\nq8 = tr1;","pixel_eqs_eel":"warp = .0; rot = .0;\nscale = 0.2;\n\nx0 = .5+scale*pow(gmegabuf(50000),1); y0 = .5+scale*pow(gmegabuf(50020),1);\n\ntt = sqrt (pow(x-x0,2) + pow(y-y0,2));\n\nzoom = 1+tt*0.2;\n\nzoom = 0.99+ 0.1*(0.4+pow(gmegabuf(50000+rad*20),1));\nzoom -= 0.03*((sin(ang*3)<0)-0.5);","warp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  ret_1 = (tmpvar_2.xyz + ((tmpvar_2.xyz - \n    ((texture (sampler_blur1, uv_orig).xyz * scale1) + bias1)\n  ) * 0.35));\n  ret_1 = (ret_1 * 0.9);\n  ret_1 = (ret_1 + ((\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 0.4)) + rand_frame.xy)).xyz - 0.1)\n  .x * 0.02) * clamp (\n    (1.0 - treb_att)\n  , 0.0, 1.0)));\n  ret_1 = (mix (ret_1, vec3(dot (ret_1, vec3(0.32, 0.49, 0.29))), vec3(0.1, 0.1, 0.1)) * (0.95 - (0.05 * \n    dot (((texture (sampler_blur3, uv).xyz * scale3) + bias3), vec3(0.32, 0.49, 0.29))\n  )));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }","comp":"vec3 xlat_mutableneu;\nvec3 xlat_mutableret1;\n shader_body { \n  vec2 uv_1;\n  vec2 uv2_2;\n  vec2 tmpvar_3;\n  float tmpvar_4;\n  tmpvar_4 = (q10 * 3.14);\n  tmpvar_3.x = sin(tmpvar_4);\n  tmpvar_3.y = cos((tmpvar_4 + (q8 * 0.04)));\n  float tmpvar_5;\n  tmpvar_5 = fract(((q10 / 2.0) + (time * 0.2)));\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  vec2 x_6;\n  x_6 = ((uv_1 * tmpvar_5) - ((tmpvar_3 * 0.07) * q7));\n  vec2 x_7;\n  x_7 = ((uv_1 * tmpvar_5) + ((tmpvar_3 * 0.07) * q7));\n  vec4 tmpvar_8;\n  tmpvar_8 = (roam_sin + 0.5);\n  xlat_mutableret1 = (((\n    (tmpvar_8 / (0.01 + sqrt(dot (x_6, x_6))))\n   * 0.015) * q7).xyz + ((\n    (tmpvar_8.zyx / (0.01 + sqrt(dot (x_7, x_7))))\n   * 0.015) * q7));\n  float tmpvar_9;\n  tmpvar_9 = (sqrt(dot (uv_1, uv_1)) - tmpvar_5);\n  xlat_mutableret1 = (xlat_mutableret1 + ((\n    ((roam_cos + 0.5) / (0.02 + (8.0 * (tmpvar_9 * tmpvar_9))))\n   * 0.01) * q7).xyz);\n  xlat_mutableret1 = (xlat_mutableret1 * ((1.0 + \n    dot (xlat_mutableret1, vec3(0.32, 0.49, 0.29))\n  ) / 2.0));\n  uv2_2.x = ((uv_1.x * 0.4999979) - (uv_1.y * 0.8660266));\n  uv2_2.y = ((uv_1.x * 0.8660266) + (uv_1.y * 0.4999979));\n  vec2 tmpvar_10;\n  tmpvar_10 = abs((fract(\n    (uv2_2 * aspect.yx)\n  ) - 0.5));\n  xlat_mutableneu = (max (texture (sampler_main, tmpvar_10).xyz, (\n    (texture (sampler_blur1, tmpvar_10).xyz * scale1)\n   + bias1)) / 2.0);\n  xlat_mutableret1 = max (xlat_mutableret1, (xlat_mutableneu + xlat_mutableret1));\n  uv2_2.x = ((uv_1.x * -0.5000042) - (uv_1.y * 0.866023));\n  uv2_2.y = ((uv_1.x * 0.866023) + (uv_1.y * -0.5000042));\n  vec2 tmpvar_11;\n  tmpvar_11 = abs((fract(\n    (uv2_2 * aspect.yx)\n  ) - 0.5));\n  xlat_mutableneu = (max (texture (sampler_main, tmpvar_11).xyz, (\n    (texture (sampler_blur1, tmpvar_11).xyz * scale1)\n   + bias1)) / 2.0);\n  xlat_mutableret1 = max (xlat_mutableret1, (xlat_mutableneu + xlat_mutableret1));\n  uv2_2.x = (-(uv_1.x) - (uv_1.y * -7.23998e-06));\n  uv2_2.y = ((uv_1.x * -7.23998e-06) - uv_1.y);\n  vec2 tmpvar_12;\n  tmpvar_12 = abs((fract(\n    (uv2_2 * aspect.yx)\n  ) - 0.5));\n  xlat_mutableneu = (max (texture (sampler_main, tmpvar_12).xyz, (\n    (texture (sampler_blur1, tmpvar_12).xyz * scale1)\n   + bias1)) / 2.0);\n  xlat_mutableret1 = max (xlat_mutableret1, (xlat_mutableneu + xlat_mutableret1));\n  vec4 tmpvar_13;\n  tmpvar_13.w = 1.0;\n  tmpvar_13.xyz = (xlat_mutableret1 * (1.0 - rad));\n  ret = tmpvar_13.xyz;\n }","warp_hlsl":"float3 Get1 (float2 uvi)\n{return (GetPixel(uvi)+GetPixel(uvi+texsize.zw)+GetPixel(uvi-texsize.zw)\n+GetPixel(uvi+texsize.zw*float2(1,0)) +GetPixel(uvi+texsize.zw*float2(-1,0)) \n+GetPixel(uvi+texsize.zw*float2(0,1)) +GetPixel(uvi+texsize.zw*float2(0,-1)))/7;}\n\n\nshader_body\n{\nfloat2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.4 + rand_frame.xy;\nfloat2 udith = tex2D(sampler_noise_lq,uv*8+rand_frame)-0.5;\nret= tex2D( sampler_main, uv + udith*0.00).xyz;\n\nret += (ret.xyz - GetBlur1(uv_orig+0.0*bass))*0.35;\nret *= 0.9;\nret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.1).r*0.02 * saturate(1-treb_att);\n\nret = lerp(ret.xyz, lum(ret.xyz), 0.1)*(0.95-0.05*lum(GetBlur3(uv)));\n}","comp_hlsl":"static const int anz = 3;\nfloat3 ret1, neu, blur;\nfloat2 uv3;\nshader_body\n{\nfloat2 pos = float2 (sin(q10*3.14), cos(q10*3.14+q8*.04));\nfloat r1 = frac(q10/2+time*0.2);\nfloat r2 = frac(q10/4);\nfloat2 uv2;\nfloat ang2, c, s;\nuv -= .5;\nuv *= aspect.xy;    \nret1 = (roam_sin+0.5)/(0.01+length((uv)*r1-pos*0.07*q7))*0.015*q7;\nret1 += (roam_sin+0.5).bgr/(0.01+length((uv)*r1+pos*0.07*q7))*0.015*q7;\nret1 += (roam_cos+0.5)/(0.02+8*pow(length(uv)-1*r1,2))*0.01*q7;\nret1*= (1+lum(ret1))/2;\nfloat n = 1;\nwhile (n <= anz) {\n  ang2 = n/anz*3.1416;\n  c = cos(ang2);\n  s = sin(ang2);\n  uv2.x =  uv.x*c - uv.y*s;\n  uv2.y =  uv.x*s + uv.y*c;\n  uv3= abs(frac(uv2*aspect.yx)-.5);\n  neu =  max(GetPixel (uv3),GetBlur1(uv3))/2 ;\n  ret1 = max(ret1,neu+ret1);\nn++;\n}\nret = ret1*(1-rad);\n\n//ret = GetPixel(uv+0.5);\n}"}