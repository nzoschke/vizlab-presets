{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":0.952,"echo_alpha":0.5,"echo_orient":3,"wave_mode":2,"additivewave":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":4.704,"wave_smoothing":0.9,"wave_mystery":1,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0,"ob_g":0.1,"ob_a":0.3,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"sides":14,"additive":1,"textured":1,"num_inst":2,"rad":0.09861,"tex_ang":0.87965,"tex_zoom":6.61077,"g":1,"b":1,"a":0,"r2":1,"b2":1,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"if (instance ==1, textured=0; a=1; r=0;g=0;b=0;r2=r;g2=g;b2=b; rad=0.015;additive=0,0);","init_eqs_eel":"","frame_eqs_eel":"if (instance ==1, textured=0; a=1; r=0;g=0;b=0;r2=r;g2=g;b2=b; rad=0.015;additive=0,0);"},{"baseVals":{"enabled":1,"sides":12,"additive":1,"num_inst":64,"x":0.26,"y":0.2,"rad":0.39317,"tex_zoom":0.9355,"g":1,"b":0.6,"a":0.7,"g2":0,"a2":0.1,"border_a":0},"init_eqs_str":"a.frac=0;a.n=0;a.z=0;a.q13=0;a.y0=0;a.x0=0;a.z0=0;a.copies=0;a.shapes=0;a.q32=0;","frame_eqs_str":"a.shapes=a.reg01;a.copies=Math.floor(div(a.num_inst,a.shapes));a.n=8*Math.floor(div(a.instance,a.copies))+1E3;a.frac=div(mod(a.instance,a.copies),a.copies);a.x0=a.gmegabuf[Math.floor(a.n)]*a.frac+a.megabuf[Math.floor(a.n)]*(1-a.frac);a.y0=a.gmegabuf[Math.floor(a.n+1)]*a.frac+a.megabuf[Math.floor(a.n+1)]*(1-a.frac);a.z0=a.gmegabuf[Math.floor(a.n+2)]*a.frac+a.megabuf[Math.floor(a.n+2)]*(1-a.frac);a.megabuf[Math.floor(a.n)]=a.x0;a.megabuf[Math.floor(a.n+1)]=a.y0;a.megabuf[Math.floor(a.n+\n2)]=a.z0;a.x=a.x0+.5;a.y=a.y0*a.q32+.5;a.z=a.z0;a.rad=div(.009,a.z)*a.q13;a.r=div(a.instance,a.num_inst);a.b=1-a.r;a.g=4*pow(a.r-.5,2);a.r=.8*a.r+.2;a.g=.8*a.g+.2;a.b=.8*a.b+.2;a.r2=div(a.r,2);a.b2=div(a.b,2);a.g2=div(a.g,2);","init_eqs_eel":"","frame_eqs_eel":"shapes = reg01;\ncopies = int(num_inst/shapes);\n\nn = int(instance/copies)*8+1000;\nfrac = (instance%copies)/(copies);\n\nx0 = gmegabuf(n)*frac + megabuf(n)*(1-frac);\ny0 = gmegabuf(n+1)*frac+ megabuf(n+1)*(1-frac);\nz0 = gmegabuf(n+2)*frac+ megabuf(n+2)*(1-frac);\n\nmegabuf(n) = x0;\nmegabuf(n+1) = y0;\nmegabuf(n+2) = z0;\n\nx = x0 + .5;\ny = y0*q32 + .5;\nz = z0;\n\nrad = 0.009/z*q13;\n\nr = instance/num_inst;\nb = 1-r;\ng = 4*pow (r-0.5,2);\nr = r*0.8+.2;\ng = g*0.8+.2;\nb = b*0.8+.2;\nr2 = r/2; b2 = b/2; g2 = g/2;\n"},{"baseVals":{"sides":12,"additive":1,"thickoutline":1,"textured":1,"num_inst":2,"rad":0.32548,"tex_zoom":0.81386,"g":0.7,"b":0.5,"a":0.7,"g2":0,"border_r":0.5,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":12,"additive":1,"thickoutline":1,"num_inst":64,"x":0.6,"y":0.55,"rad":0.97237,"ang":1.25664,"tex_zoom":0.34933,"g":0.6,"a":0.7,"g2":0,"b2":1,"a2":0.1,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0},"init_eqs_str":"a.frac=0;a.n=0;a.z=0;a.q13=0;a.y0=0;a.x0=0;a.z0=0;a.copies=0;a.shapes=0;a.q32=0;","frame_eqs_str":"a.shapes=a.reg01;a.copies=Math.floor(div(a.num_inst,a.shapes));a.n=8*Math.floor(div(a.instance,a.copies))+1E3;a.frac=div(mod(a.instance,a.copies),a.copies);a.x0=a.gmegabuf[Math.floor(a.n)]*a.frac+a.megabuf[Math.floor(a.n)]*(1-a.frac);a.y0=a.gmegabuf[Math.floor(a.n+1)]*a.frac+a.megabuf[Math.floor(a.n+1)]*(1-a.frac);a.z0=a.gmegabuf[Math.floor(a.n+2)]*a.frac+a.megabuf[Math.floor(a.n+2)]*(1-a.frac);a.megabuf[Math.floor(a.n)]=a.x0;a.megabuf[Math.floor(a.n+1)]=a.y0;a.megabuf[Math.floor(a.n+\n2)]=a.z0;a.x=a.x0+.5;a.y=a.y0*a.q32+.5;a.z=a.z0;a.rad=div(.009,a.z)*a.q13;a.r=div(a.instance,a.num_inst);a.b=1-a.r;a.g=4*pow(a.r-.5,2);a.r=.8*a.r+.2;a.g=.8*a.g+.2;a.b=.8*a.b+.2;a.r2=div(a.r,2);a.b2=div(a.b,2);a.g2=div(a.g,2);a.x=1-a.x;","init_eqs_eel":"","frame_eqs_eel":"shapes = reg01;\ncopies = int(num_inst/shapes);\n\nn = int(instance/copies)*8+1000;\nfrac = (instance%copies)/(copies);\n\nx0 = gmegabuf(n)*frac + megabuf(n)*(1-frac);\ny0 = gmegabuf(n+1)*frac+ megabuf(n+1)*(1-frac);\nz0 = gmegabuf(n+2)*frac+ megabuf(n+2)*(1-frac);\n\nmegabuf(n) = x0;\nmegabuf(n+1) = y0;\nmegabuf(n+2) = z0;\n\nx = x0 + .5;\ny = y0*q32 + .5;\nz = z0;\n\nrad = 0.009/z*q13;\n\nr = instance/num_inst;\nb = 1-r;\ng = 4*pow (r-0.5,2);\nr = r*0.8+.2;\ng = g*0.8+.2;\nb = b*0.8+.2;\nr2 = r/2; b2 = b/2; g2 = g/2;\n\nx = 1-x; \n\n//y = 1-y; //EVENTUELL"}],"waves":[{"baseVals":{"enabled":1,"samples":128,"sep":120,"spectrum":1,"additive":1,"scaling":3.5448,"smoothing":0.13,"r":0,"a":0},"init_eqs_str":"a.t1=0;","frame_eqs_str":"a.t1=0;","point_eqs_str":"a.x=a.sample;a.gmegabuf[Math.floor(a.t1)]=.5*a.gmegabuf[Math.floor(a.t1)]+.5*(a.value1+a.value2);a.y=.15*a.gmegabuf[Math.floor(a.t1)]+.3;a.t1+=1;","init_eqs_eel":"","frame_eqs_eel":"t1 = 0;","point_eqs_eel":"x = sample;\n\ngmegabuf(t1) =  gmegabuf(t1)*0.5 + 0.5* (value1+value2) ;\n\ny = gmegabuf (t1)*.15+.3;\nt1 += 1;"},{"baseVals":{"samples":212,"spectrum":1,"scaling":0.20041,"smoothing":0,"r":0.2,"g":0.6,"b":0.7,"a":0.8,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"x = sample;\ny = 0.5 + value1;\na = min(1,pow(mid/1.5,4));","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = sample;\ny = 0.5 + value1;\na = min(1,pow(mid/1.5,4));"},{"baseVals":{"usedots":1,"scaling":0.89152,"smoothing":0.82,"a":0.4,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.n=0;a.maxbpm=0;a.movarg=0;a.bers=0;a.num_res=0;a.tlen=0;a.q25=0;a.slope=0;a.q18=0;a.q22=0;a.q21=0;a.bvol=0;a.vc=0;a.q13=0;a.bvol2=0;a.q6=0;a.tmove=0;a.angi=0;a.dt=0;a.y0=0;a.r1=0;a.delta=0;a.j=0;a.size_=0;a.freq=0;a.dec_f=0;a.trely=0;a.flen=0;a.x0=0;a.dec_s=0;a.slow=0;a.run=0;a.minbpm=0;a.kraft=0;a.ndir=0;a.maxind=0;a.tbers=0;a.ec_steps=0;a.bpm=0;a.q11=0;a.is_rbeat=0;a.style=0;a.q10=0;a.bcount2=0;a.value=0;a.dbl_beat=0;a.dec_m=0;a.q4=0;a.shapes=0;a.r2=0;a.ddy=0;a.dir=0;a.dir_=\n0;a.s3=0;a.feder=0;a.q16=0;a.q26=0;a.bcount=0;a.i=0;a.k=0;a.r3=0;a.beatsin=0;a.sec_s=0;a.qavg=0;a.trig=0;a.sgl_beat=0;a.qdev=0;a.q19=0;a.q17=0;a.vol=0;a.certain=0;a.beatcos=0;a.size=0;a.ddx=0;a.bbase=0;a.q27=0;a.m1=0;a.bvol_=0;a.trel1=0;a.speed=0;a.s1=0;a.vol_=0;a.dec=0;a.s2=0;a.m=0;a.quad=0;a.q32=0;a.q7=0;a.trelx=0;a.excite=0;a.radi=0;a.q20=0;a.step=0;a.q8=0;for(var b=a.n=0;15E3>b;b++)a.megabuf[Math.floor(a.n)]=0,a.gmegabuf[Math.floor(a.n)]=0,a.n+=1;a.flen=128;a.shapes=16;a.reg01=a.shapes;a.minbpm=\n90;a.maxbpm=240;a.num_res=80;a.slow=1;a.r1=1;a.r2=1;a.run=0;a.bvol_=1;a.dir=1;a.tlen=2;a.ndir=1;a.size_=1;a.vol_=1;","frame_eqs_str":"a.dec_f=1-div(10,a.fps);a.dec_m=1-div(3,a.fps);a.dec_s=1-div(1,a.fps);a.dt=div(1,a.fps);a.maxind=0;a.qavg=.1;a.i=0;a.bvol=Math.max(.1,div(a.bass+a.mid+a.treb,3));a.bvol_=a.bvol_*a.dec_m+(1-a.dec_m)*a.bvol;a.excite=a.bvol-a.bvol_;for(var b=0;b<a.num_res;b++){a.n=8*a.i;a.freq=div((div(a.i,a.num_res-1)+div(a.minbpm,a.maxbpm-a.minbpm))*(a.maxbpm-a.minbpm),60);a.feder=sqr(6.2832*a.freq);a.megabuf[Math.floor(a.n+4)]=a.megabuf[Math.floor(a.n+1)];a.megabuf[Math.floor(a.n+1)]*=1-.25*\na.dt;a.ec_steps=Math.floor(10*a.freq*a.dt)+1;for(var c=0;c<a.ec_steps;c++)a.kraft=a.excite-a.feder*a.megabuf[Math.floor(a.n+2)],a.megabuf[Math.floor(a.n+1)]+=div(a.kraft*a.dt,a.ec_steps),a.megabuf[Math.floor(a.n+2)]+=div(a.megabuf[Math.floor(a.n+1)]*a.dt,a.ec_steps);a.beatcos=a.megabuf[Math.floor(a.n+1)];a.beatsin=a.megabuf[Math.floor(a.n+2)]*a.freq*6.2832;a.quad=sqrt(pow(a.beatsin,2)+pow(a.beatcos,2));a.megabuf[Math.floor(a.n+3)]=a.megabuf[Math.floor(a.n+3)]*a.dec_m+a.quad*(1-a.dec_m);.00001<Math.abs(a.megabuf[Math.floor(a.n+\n3)]>a.megabuf[Math.floor(8*a.maxind+3)]?1:0)?a.maxind=a.i:0;a.qavg+=pow(a.megabuf[Math.floor(a.n+3)],2);a.i+=1}a.qavg=sqrt(div(a.qavg,a.num_res));a.qdev=0;for(b=a.i=0;b<a.num_res;b++)a.qdev+=pow(a.megabuf[Math.floor(a.i+3)]-a.qavg,2),a.i+=8;a.qdev=sqrt(div(a.qdev,a.num_res));a.bpm=(div(a.maxind,a.num_res-1)+div(a.minbpm,a.maxbpm-a.minbpm))*(a.maxbpm-a.minbpm);.00001<Math.abs(200<a.bpm?1:0)?a.bpm*=.5:0;a.m1=8*a.maxind;a.certain=a.certain*a.dec_m+div((1-a.dec_m)*a.megabuf[Math.floor(a.m1+3)],a.qavg);\na.dbl_beat=0>a.megabuf[Math.floor(a.m1+1)]*a.megabuf[Math.floor(a.m1+4)]?1:0;a.sgl_beat=a.dbl_beat*(0>a.megabuf[Math.floor(a.m1+4)]?1:0);a.bcount+=a.dbl_beat;a.is_rbeat=a.dbl_beat&&.00001>Math.abs(mod(a.bcount,2)-0)?1:0;a.bcount2+=a.is_rbeat;a.trel1+=div(div(a.bpm,60)*a.dt,2);a.n=0;a.vol=0;a.bbase=1E4;for(b=0;b<a.flen;b++)a.value=div(a.gmegabuf[Math.floor(a.n)],a.vol_),a.trig=a.value>div(45*a.megabuf[Math.floor(a.bbase+a.n)],a.fps)?1:0,a.megabuf[Math.floor(a.bbase+a.n)]=a.value,a.dec=.00001<Math.abs(a.trig)?\na.dec_f:a.dec_m,a.megabuf[Math.floor(a.n+5E3)]=a.megabuf[Math.floor(a.n+5E3)]*a.dec+(1-a.dec)*a.value,a.vol+=pow(a.megabuf[Math.floor(a.n+5E3)],2),a.n+=1;a.vol=sqrt(a.vol);a.vol_=a.dec_s*a.vol_+(1-a.dec_s)*a.vol*5;for(b=a.n=0;b<a.flen;b++)a.value=div(5*a.megabuf[Math.floor(a.n+5E3)]*a.n,1+5*a.n),a.dec=.9,a.dec=a.dec_f,a.megabuf[Math.floor(a.n+4E3)]=a.megabuf[Math.floor(a.n+4E3)]*a.dec+(1-a.dec)*a.value,a.n+=1;a.step=div(div(a.flen,a.shapes),2)+1;a.n=2E3;a.m=4E3+a.step;a.k=0;a.slope=.01;a.speed=div(.4,\na.slope);for(b=a.size=0;b<a.shapes;b++)a.style=2,.00001<Math.abs(.00001>Math.abs(a.style-0)?1:0)?(a.megabuf[Math.floor(a.n)]=a.megabuf[Math.floor(a.m)]-a.megabuf[Math.floor(a.m+1)],a.megabuf[Math.floor(a.n+1)]=a.megabuf[Math.floor(a.m)]-a.megabuf[Math.floor(a.m-1)]):.00001<Math.abs(.00001>Math.abs(a.style-1)?1:0)?(a.delta=a.megabuf[Math.floor(a.m)]-a.megabuf[Math.floor(a.m+1)]-a.megabuf[Math.floor(a.n)],a.delta=Math.min(a.slope,Math.max(-a.slope,a.delta)),a.megabuf[Math.floor(a.n)]+=div(a.delta,a.fps)*\na.speed,a.delta=a.megabuf[Math.floor(a.m)]-a.megabuf[Math.floor(a.m-1)]-a.megabuf[Math.floor(a.n+1)],a.delta=Math.min(a.slope,Math.max(-a.slope,a.delta)),a.megabuf[Math.floor(a.n+1)]+=div(a.delta,a.fps)*a.speed):(a.x0=a.megabuf[Math.floor(a.m)]-a.megabuf[Math.floor(a.m+1)],a.y0=a.megabuf[Math.floor(a.m)]-a.megabuf[Math.floor(a.m-1)],a.radi=sqrt(a.x0*a.x0+a.y0*a.y0),a.angi=Math.atan2(a.x0,a.y0)+12.56,a.j=a.n+4E3,a.megabuf[Math.floor(a.j)]+=div(Math.min(a.slope,Math.max(-a.slope,a.radi-a.megabuf[Math.floor(a.j)]))*\na.speed,a.fps),a.megabuf[Math.floor(a.j+1)]+=div(Math.min(10*a.slope,Math.max(-10*a.slope,a.angi-a.megabuf[Math.floor(a.j+1)]))*a.speed,a.fps),a.megabuf[Math.floor(a.n)]=a.megabuf[Math.floor(a.j)]*Math.cos(a.megabuf[Math.floor(a.j+1)]),a.megabuf[Math.floor(a.n+1)]=a.megabuf[Math.floor(a.j)]*Math.sin(a.megabuf[Math.floor(a.j+1)])),a.size+=pow(a.megabuf[Math.floor(a.n)],2)+pow(a.megabuf[Math.floor(a.n+1)],2),a.dec=a.dec_m,a.bvol2=a.dec*a.bvol2+(1-a.dec)*a.bvol,a.megabuf[Math.floor(a.n+2)]=div(.03,sqrt(pow(a.megabuf[Math.floor(a.n)],\n2)+pow(a.megabuf[Math.floor(a.n+1)],2))),a.m+=a.step,a.n+=8,a.k+=1;a.n=1E3;a.m=2E3;a.size_=a.size*a.sec_s+(1-a.dec_s)*sqrt(a.size)*a.shapes*7;for(b=0;b<a.shapes;b++)a.gmegabuf[Math.floor(a.n)]=div(div(a.megabuf[Math.floor(a.m)],a.megabuf[Math.floor(a.m+2)]),a.size_),a.gmegabuf[Math.floor(a.n+1)]=div(div(a.megabuf[Math.floor(a.m+1)],a.megabuf[Math.floor(a.m+2)]),a.size_),a.gmegabuf[Math.floor(a.n+2)]=a.megabuf[Math.floor(a.m+2)],a.n+=8,a.m+=8;a.q32=a.aspecty;a.q13=1.7+.25*sqrt(a.mid_att+a.bass_att);\na.trig=.00001>Math.abs(mod(a.bcount,32)-0)&&a.dbl_beat?1:0;.00001<Math.abs(a.trig)?(a.r1=4+Math.floor(rand(8)),a.r2=Math.max(2,Math.floor((a.r1-2)*rand(1))),a.r3=-1*pow(2,Math.floor(rand(2))),a.s1=1+Math.floor(rand(4)),a.s2=sqrt(rand(1.5))*a.s1,.00001<Math.abs(.5<rand(1)?1:0)?a.s1=-a.s1:0,a.s3=-1*pow(2,Math.floor(rand(4))),a.ndir=.00001<Math.abs(.2>rand(1)?1:0)?-1:1):0;a.run=.00001<Math.abs(.4>a.bvol_?1:0)?0:.00001<Math.abs(.7<a.bvol_?1:0)?1:a.run;a.slow=.00001<Math.abs(1.7>a.certain?1:0)?1:.00001<\nMath.abs(2.5<a.certain?1:0)?0:a.slow;a.dir_=a.dir_*a.dec_f+a.dir*(1-a.dec_f);a.q4=a.ndir;a.movarg=div((1+2*a.certain)*a.dt,4)*a.dir_;a.tmove+=a.movarg;a.q19=a.tmove;a.q20=div(1,a.r1);a.q22=a.q20*a.r2;a.trelx+=div(div(a.bpm,120),a.q20)*a.run*a.dt*(1-.5*a.slow)*a.r3+a.ndir*a.movarg*a.run;a.q21=a.q20*Math.floor(a.trelx);a.q25=a.s1;a.q26=a.s2;a.trely+=1*div(a.bpm,120)*a.q25*a.s3*a.run*a.dt*(1-.5*a.slow);a.q27=div(Math.floor(a.trely),a.q25);a.q10=a.trel1;a.q11=div(Math.max(0,a.certain-1),2);a.trig=.00001>\nMath.abs(mod(a.bcount,4)-0)&&a.dbl_beat?1:0;a.tbers=Math.max(0,.00001<Math.abs(a.bers)?a.tbers+div(a.dt,2):a.tbers-div(a.dt,2));a.vc=a.certain+.25*a.bvol;.00001<Math.abs(a.vc>5.5+a.tbers?1:0)?a.bers=1:.00001<Math.abs(a.vc<4.5+div(a.tbers,5)?1:0)?a.bers=0:0;.00001<Math.abs(a.bers)?.00001<Math.abs(a.trig)?(.00001<Math.abs(1>rand(15)?1:0)?a.dir*=-1:0,a.ddx=div(Math.floor(rand(4)-2),3),a.ddy=div(-Math.floor(rand(3)),3)):0:.00001<Math.abs(a.trig)?(a.ddx=0,a.ddy=0):0;a.q17=a.ddx;a.q18=a.ddy;a.q16=1;a.q6=\nMath.min(1,div(.7,a.vc));a.q7=a.tlen;a.q8=.3+.2*Math.sin(.07*a.tmove);a.monitor=a.certain;a.rot=0;a.zoom=1+a.movarg;a.warp=0;a.dx=0;a.dy=0;","pixel_eqs_str":"","init_eqs_eel":"n = 0; loop (15000,megabuf(n) =0;gmegabuf(n) = 0; n+=1;);\nflen = 128; shapes = 16; reg01 = shapes;\nminbpm=90; maxbpm=240; num_res=80;\nslow = 1; r1=1; r2=1; run = 0; bvol_=1; dir = 1; tlen=2; ndir = 1; size_=1; vol_=1;","frame_eqs_eel":"dec_f = 1-10/fps; dec_m = 1-3/fps; dec_s = 1-1/fps; dt=1/fps;\n\nmaxind = 0; qavg = 0.1; i=0; \nbvol = max(0.1,(bass+mid+treb)/3); bvol_=bvol_*dec_m + (1-dec_m)*bvol;\nExcite = (bvol-bvol_);\nloop (num_res,\n  n = i*8;\n  Freq  = (i/(num_res-1)+minbpm/(maxbpm-minbpm))*(maxbpm-minbpm)/60;\n  Feder = sqr(Freq*6.2832);\n  megabuf (n+4) = megabuf(n+1); megabuf (n+1) *= 1-0.25*dt; \n  EC_Steps = int (10*Freq*dt)+1;\n  loop (EC_Steps, // Euler-Cauchy steps\n    Kraft = Excite - Feder*megabuf(n + 2) ;\n    megabuf (n+1) += Kraft        * dt/EC_Steps;\n    megabuf (n+2) += megabuf(n+1) * dt/EC_Steps;  );\n  beatcos = megabuf(n+1);  beatsin = megabuf(n+2)*Freq*6.2832;\n  quad = sqrt (pow(beatsin,2) + pow(beatcos,2));\n  megabuf (n+3) = megabuf(n+3) *dec_m +  quad* (1-dec_m);\n  if (megabuf(n+3) > megabuf (maxind*8+3), maxind =i,0);\n  qavg = qavg+pow (megabuf(n+3),2);\n  i += 1;);\n\nqavg = sqrt (qavg/num_res); \nqdev = 0; i =0; loop (num_res, qdev += pow(megabuf(i+3)-qavg,2); i += 8; );\nqdev = sqrt (qdev/num_res);\nBPM =   (maxind/(num_res-1)+minbpm/(maxbpm-minbpm))*(maxbpm-minbpm);\nif (BPM > 200, BPM *= 0.5, 0);\n\nm1 = maxind*8;\ncertain = certain * dec_m + (1-dec_m) * megabuf(m1+3)/qavg;\ndbl_beat = megabuf(m1+1) * megabuf (m1+4) < 0;\nsgl_beat = dbl_beat * (megabuf (m1+4) < 0);\nbcount += dbl_beat;is_rbeat  = dbl_beat && (bcount%2==0);\nbcount2 += is_rbeat;\ntrel1 += BPM/60*dt/2;\n\nn = 0; vol = .0; bbase = 10000;\nloop (flen,\n  value = gmegabuf(n)/vol_;\n  trig = value > megabuf(bbase+n)*1.5*30/fps; \n  megabuf (bbase+n) = value;\n  dec = if(trig,dec_f,dec_m); \n  megabuf(n+5000) = megabuf(n+5000)*dec + (1-dec)*value;\n  vol = vol + pow(megabuf(n+5000),2);\n  n += 1;\n);\n\nvol = sqrt(vol);\nvol_ = dec_s*vol_ + (1-dec_s)*vol*5;\n\n// post smoothing\nn = 0;\nloop (flen,\n  value = megabuf(n+5000) * 5*n/(1+5*n);\n  dec = if (megabuf(4000+n)<=value,.9,.9);\n  dec = dec_f; \n  megabuf(n+4000) = megabuf(n+4000)*dec+ (1-dec)*value;\n  n = n+1;\n);\n\n\n// Berechnung Ortskoordinaten aus Spektrum\nstep = flen/shapes/2+1; \nn = 2000; m = 4000+step; k=0; slope = 0.01; speed = 0.4/slope; size = 0;\nloop (shapes,\nstyle = 2;\n\nif (style ==0, //Standard ohne slope limitation\n  megabuf(n)   = megabuf(m)-megabuf(m+1);;\n  megabuf(n+1)   = megabuf(m)-megabuf(m-1);;\n,\n  if (style==1, //x,y, slope limitation\n  delta = (megabuf(m)-megabuf(m+1)) - megabuf(n);\n  delta = min (slope, max(-slope, delta));\n  megabuf(n)   += delta/fps*speed;\n  delta = (megabuf(m)-megabuf(m-1)) - megabuf(n+1);\n  delta = min (slope, max(-slope, delta));\n  megabuf(n+1)   += delta/fps*speed;\n  ,\n   //rad, ang slope limitation\n   x0 = megabuf(m)-megabuf(m+1);\n   y0 = megabuf(m)-megabuf(m-1);\n   radi = sqrt (x0*x0+y0*y0);\n   angi = atan2 (x0,y0)+6.28*2;\n   j=n+4000;\n   megabuf(j)   +=min(slope, max (-slope, radi-megabuf(j)))*speed/fps; \n   megabuf(j+1) +=min(10*slope, max (-10*slope, angi-megabuf(j+1)))*speed/fps; \n   megabuf(n)   = megabuf(j)*cos(megabuf(j+1));\n   megabuf(n+1) = megabuf(j)*sin(megabuf(j+1));\n));\n  size += pow (megabuf(n),2)+pow (megabuf(n+1),2);\n  dec = if (bvol2 > bvol,dec_m, dec_m);\n  bvol2 = dec*bvol2 + (1-dec)*bvol;\n  megabuf(n+2) = 0.03/sqrt(pow(megabuf(n),2) + pow (megabuf(n+1),2));\n  m = m + step; n = n+8; k= k+1;\n);\n\n\n//Projektion\nn = 1000; m = 2000;\nsize_ = size*sec_s + (1-dec_s)*sqrt(size)*shapes*7;\nloop (shapes,\n  gmegabuf(n) = megabuf(m)/megabuf(m+2)/size_;\n  gmegabuf(n+1) = megabuf(m+1)/megabuf(m+2)/size_;\n  gmegabuf(n+2) = megabuf(m+2);\n  n = n+8; m = m+8;\n);\n\nq32 = aspecty;\nq13 = 1.7+0.25*sqrt(mid_att+bass_att); //shp rad\n\ntrig = (bcount%32 == 0) && dbl_beat;\nif (trig, \n  r1 = 4+int (rand(8));\n  r2 = max (2,int ((r1-2)*rand(1)));\n  r3 = -1*pow (2, int(rand(2)));\n\n  s1 = (1+int(rand(4)));\n  s2 = sqrt(rand(1.5))*s1;\n  if (rand(1)>0.5,s1=-s1,0);\n  s3 = -1*pow (2, int(rand(4)));\n\n  ndir = if (rand(1)<0.2,-1,1);\n,0);\n\nrun = if (bvol_<0.4,0,if(bvol_>0.7,1,run));\nslow = if (certain<1.7,1,if(certain>2.5,0,slow));\n\ndir_ = dir_*dec_f+dir*(1-dec_f);\nq4 = ndir;\nmovarg = (1+certain*2)*dt/4*dir_;\ntmove += movarg;\nq19=tmove;\n\n//mask shift x\nq20 = 1/r1;  //Anteil\nq22 = q20*r2; //Limit\ntrelx += BPM/120/q20*run*dt* (1-0.5*slow) * r3 + ndir*movarg*run; //ungef. Bew. Korr\nq21 = q20*int(trelx); //phase\n\n//mask shift y\nq25 = s1;  //Divisor, 1,2,3,4,6 bei 12 tubes\nq26 = s2;  //Narrow\ntrely += BPM/120*1*q25*s3*run*dt* (1-0.5*slow);\nq27 = int(trely)/q25;  //phase\n//if (s2<1,q27 = trel1*s3,0); //besser aber nur bei grossem divisor und kleinem narrow\n\nq10 = trel1;\nq11 = max(0,certain-1)/2;\n\ntrig = (bcount%4==0) && dbl_beat;\ntbers = max(0,if (bers, tbers+dt/2, tbers-dt/2));\nvc = certain+bvol*0.25;\nif (vc > 5.5+tbers, bers=1, if (vc < 4.5+tbers/5, bers=0;,0));\n\nif (bers, if (trig, \n  if (rand(15)<1,dir *=-1,0);\n  ddx = int (rand(4)-2)/3; \n  ddy = - int (rand(3))/3, 0);, \n  if (trig, ddx=0; ddy=0;,0));\n\nq17=ddx; q18 = ddy; \nq16 = 1 ;\nq6 = min(1,0.7/vc); //dimmt alle tubes \nq7 = tlen;\nq8 = 0.3 + 0.2*sin(tmove*0.07); //w lev\nmonitor = certain;\n\nrot = 0.0; zoom = 1+movarg; warp = 0; dx = 0; dy = 0;","pixel_eqs_eel":"","warp":"vec2 xlat_mutabledz;\n shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1.y = 0.0;\n  tmpvar_1.x = texsize.z;\n  vec2 tmpvar_2;\n  tmpvar_2.x = 0.0;\n  tmpvar_2.y = texsize.w;\n  vec3 ret_3;\n  xlat_mutabledz.x = dot ((texture (sampler_main, (uv + tmpvar_1)).xyz - texture (sampler_main, (uv - tmpvar_1)).xyz), vec3(0.32, 0.49, 0.29));\n  xlat_mutabledz.y = dot ((texture (sampler_main, (uv + tmpvar_2)).xyz - texture (sampler_main, (uv - tmpvar_2)).xyz), vec3(0.32, 0.49, 0.29));\n  ret_3 = (ret_3 + ((texture (sampler_main, \n    (uv + ((xlat_mutabledz * 0.03) * float((rad > 0.01))))\n  ).xyz * 0.8) * (1.0 - \n    (rad / 2.0)\n  )));\n  ret_3 = (ret_3 * (1.0 - (0.15 * \n    dot (((texture (sampler_blur1, uv).xyz * scale1) + bias1), vec3(0.32, 0.49, 0.29))\n  )));\n  ret_3 = (ret_3 - 0.004);\n  ret_3 = (ret_3 + ((\n    ((0.0005 * rand_preset.x) / rad)\n   * treb_att) * slow_roam_sin).xyz);\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_3;\n  ret = tmpvar_4.xyz;\n }","comp":"uniform sampler2D sampler_heart;\nfloat xlat_mutableftu;\nbool xlat_mutableistube;\nvec3 xlat_mutableneon;\nvec3 xlat_mutableneons;\nfloat xlat_mutablenmask;\nfloat xlat_mutablenoise;\nfloat xlat_mutablenshape;\nvec2 xlat_mutabletuv;\nvec2 xlat_mutableuv0;\nvec2 xlat_mutableuv1;\nvec2 xlat_mutableuv5;\nfloat xlat_mutablez;\n shader_body { \n  vec2 uv_1;\n  int n_2;\n  float radi_3;\n  vec3 shine_4;\n  vec3 ret_5;\n  vec2 tmpvar_6;\n  tmpvar_6.x = q17;\n  tmpvar_6.y = q18;\n  uv_1 = (uv + tmpvar_6);\n  xlat_mutableuv0 = uv_1;\n  xlat_mutableuv1 = ((uv_1 - 0.5) * aspect.xy);\n  xlat_mutablez = (q8 / xlat_mutableuv1.y);\n  vec2 tmpvar_7;\n  tmpvar_7.x = (xlat_mutablez * xlat_mutableuv1.x);\n  tmpvar_7.y = (xlat_mutablez + q19);\n  xlat_mutablez = (xlat_mutablez * (1.0 + (\n    (0.14 * q11)\n   * \n    sin((tmpvar_7.y + (q10 * 3.141593)))\n  )));\n  vec2 tmpvar_8;\n  tmpvar_8.x = (xlat_mutablez * xlat_mutableuv1.x);\n  tmpvar_8.y = (xlat_mutablez + q19);\n  vec2 tmpvar_9;\n  tmpvar_9.x = 0.0;\n  tmpvar_9.y = (q19 / 2.0);\n  uv_1 = (uv_1 + ((\n    ((texture (sampler_noise_hq, tmpvar_8) + (texture (sampler_noise_hq, (\n      (tmpvar_8 * 2.0)\n     + tmpvar_9)) / 2.0)) - 0.7)\n  .xy * 0.04) * (\n    float((xlat_mutablez > 0.0))\n   * \n    clamp (((5.0 - (\n      (15.0 * abs(xlat_mutableuv1.x))\n     * xlat_mutablez)) / xlat_mutablez), 0.0, 1.0)\n  )));\n  xlat_mutableuv1 = ((uv_1 - 0.5) * aspect.xy);\n  float tmpvar_10;\n  tmpvar_10 = sqrt(dot (xlat_mutableuv1, xlat_mutableuv1));\n  float vec_x_11;\n  vec_x_11 = -(xlat_mutableuv1.y);\n  float tmpvar_12;\n  float tmpvar_13;\n  tmpvar_13 = (min (abs(\n    (xlat_mutableuv1.x / vec_x_11)\n  ), 1.0) / max (abs(\n    (xlat_mutableuv1.x / vec_x_11)\n  ), 1.0));\n  float tmpvar_14;\n  tmpvar_14 = (tmpvar_13 * tmpvar_13);\n  tmpvar_14 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_14) + 0.05368138) * tmpvar_14) - 0.1173503)\n     * tmpvar_14) + 0.1938925) * tmpvar_14) - 0.3326756)\n   * tmpvar_14) + 0.9999793) * tmpvar_13);\n  tmpvar_14 = (tmpvar_14 + (float(\n    (abs((xlat_mutableuv1.x / vec_x_11)) > 1.0)\n  ) * (\n    (tmpvar_14 * -2.0)\n   + 1.570796)));\n  tmpvar_12 = (tmpvar_14 * sign((xlat_mutableuv1.x / vec_x_11)));\n  if ((abs(vec_x_11) > (1e-08 * abs(xlat_mutableuv1.x)))) {\n    if ((vec_x_11 < 0.0)) {\n      if ((xlat_mutableuv1.x >= 0.0)) {\n        tmpvar_12 += 3.141593;\n      } else {\n        tmpvar_12 = (tmpvar_12 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_12 = (sign(xlat_mutableuv1.x) * 1.570796);\n  };\n  vec2 tmpvar_15;\n  tmpvar_15.x = (0.5 / tmpvar_10);\n  tmpvar_15.y = (tmpvar_12 / 3.141593);\n  float tmpvar_16;\n  tmpvar_16 = clamp ((2.0 - (tmpvar_15.x / 5.0)), 0.0, 1.0);\n  vec2 tmpvar_17;\n  tmpvar_17.y = 0.0;\n  tmpvar_17.x = q19;\n  xlat_mutabletuv = (tmpvar_15 + tmpvar_17);\n  xlat_mutableftu = (fract((\n    (xlat_mutabletuv.y * 12.0)\n   / 2.0)) - 0.5);\n  float tmpvar_18;\n  tmpvar_18 = clamp ((1.0 - (125.0 * \n    (xlat_mutableftu * xlat_mutableftu)\n  )), 0.0, 1.0);\n  xlat_mutabletuv.x = (xlat_mutabletuv.x - ((\n    (0.2236068 * tmpvar_18)\n   / 12.0) * tmpvar_15.x));\n  float tmpvar_19;\n  tmpvar_19 = abs(sin((6.283186 * \n    (xlat_mutabletuv.x / tlen)\n  )));\n  xlat_mutablenshape = (tmpvar_18 * clamp ((tmpvar_19 * 2.0), 0.0, 1.0));\n  xlat_mutableistube = (xlat_mutablenshape > 0.0);\n  vec2 tmpvar_20;\n  tmpvar_20.y = 0.75;\n  tmpvar_20.x = (0.25 / tlen);\n  xlat_mutableuv5 = (xlat_mutabletuv * tmpvar_20);\n  vec3 tmpvar_21;\n  tmpvar_21 = (texture (sampler_pw_noise_lq, (xlat_mutableuv5 / 32.0)) + 0.2).xyz;\n  xlat_mutableneon = ((pow (xlat_mutablenshape, 0.41) * clamp (\n    (8.0 * tmpvar_19)\n  , 0.0, 1.0)) * tmpvar_21);\n  xlat_mutableneons = (((1.4 * \n    clamp (tmpvar_19, 0.0, 1.0)\n  ) * clamp (\n    exp((-5.0 * abs(xlat_mutableftu)))\n  , 0.0, 1.0)) * tmpvar_21);\n  xlat_mutablenmask = float((fract(\n    (((q4 * xlat_mutableuv5.x) * (8.0 * q20)) - q21)\n  ) < q22));\n  xlat_mutablenmask = (xlat_mutablenmask * clamp ((\n    ((abs((\n      (2.0 * fract(((\n        (((xlat_mutableuv5.y * 16.0) + 1.0) / q25)\n       + \n        (q27 * 2.0)\n      ) / 2.0)))\n     - 1.0)) * q26) - q26)\n   + 1.0), 0.0, 1.0));\n  float tmpvar_22;\n  tmpvar_22 = mix (xlat_mutablenmask, 0.15, q6);\n  xlat_mutablenmask = tmpvar_22;\n  xlat_mutablenoise = (texture (sampler_noise_lq, (xlat_mutabletuv * 2.0)) - (texture (sampler_noise_lq, (\n    (xlat_mutabletuv * 2.0)\n   + \n    (2.0 * texsize.zw)\n  )) * 0.7)).x;\n  vec2 tmpvar_23;\n  tmpvar_23.x = 0.0;\n  tmpvar_23.y = (xlat_mutabletuv.x * 0.2);\n  xlat_mutablenoise = (xlat_mutablenoise + (texture (sampler_heart, (\n    (xlat_mutabletuv * vec2(0.5, 2.0))\n   + tmpvar_23)).y * -0.15));\n  xlat_mutablenoise = (xlat_mutablenoise * (float(\n    !(xlat_mutableistube)\n  ) * tmpvar_16));\n  ret_5 = texture (sampler_main, uv_1).xyz;\n  ret_5 = (ret_5 * ((\n    (float((uv_1.x < 1.0)) * float((uv_1.x > 0.0)))\n   * \n    float((uv_1.y < 1.0))\n  ) * float(\n    (uv_1.y > 0.0)\n  )));\n  ret_5 = (ret_5 * 0.8);\n  ret_5 = (ret_5 + ((\n    (tmpvar_16 / 2.0)\n   * \n    float(xlat_mutableistube)\n  ) * (\n    (texture (sampler_blur1, (uv_1 - (xlat_mutableftu * float(xlat_mutableistube)))).xyz * scale1)\n   + bias1)));\n  ret_5 = (ret_5 + ((\n    ((xlat_mutableneon * (1.5 - (q6 / 2.0))) + ((6.0 * xlat_mutableneons) * xlat_mutablenoise))\n   * tmpvar_16) * tmpvar_22));\n  ret_5 = (ret_5 + ((\n    (texture (sampler_main, fract(((\n      ((xlat_mutableuv1 * 0.15) * sqrt(dot (xlat_mutableuv1, xlat_mutableuv1)))\n     + 0.5) + (\n      (xlat_mutableftu * 0.5)\n     * \n      float(xlat_mutableistube)\n    )))).xyz * 0.6)\n   + 0.1) * (\n    (xlat_mutablenoise * (0.5 + mid_att))\n   + \n    (xlat_mutablenshape * tmpvar_16)\n  )));\n  shine_4 = ret_5;\n  radi_3 = 1.0;\n  n_2 = 1;\n  for (; n_2 <= 20; n_2++, radi_3 = (radi_3 - 0.045)) {\n    shine_4 = (shine_4 + (0.08 * (\n      (texture (sampler_blur1, (((xlat_mutableuv0 - 0.5) * radi_3) + 0.5)).xyz * scale1)\n     + bias1)));\n  };\n  ret_5 = shine_4;\n  vec4 tmpvar_24;\n  tmpvar_24.w = 1.0;\n  tmpvar_24.xyz = shine_4;\n  ret = tmpvar_24.xyz;\n }","warp_hlsl":"float2 dz;\nstatic const float2 hor = float2 (texsize.z,0);\nstatic const float2 ver = float2 (0,texsize.w);\nshader_body {\n\ndz.x = lum(GetPixel(uv+hor)-GetPixel(uv-hor));\ndz.y = lum(GetPixel(uv+ver)-GetPixel(uv-ver));\n\nret += GetPixel (uv+dz*0.03*(rad>0.01))*0.8 * (1-rad/2);\n\nret *= 1-0.15*lum(GetBlur1(uv));\nret -= 0.004;\n\nret += 0.0005* rand_preset.x/rad*treb_att*slow_roam_sin;\n}","comp_hlsl":"#define sat saturate\n#define snl sampler_noise_lq\n#define snh sampler_noise_hq\nsampler sampler_heart;\nsampler sampler_pw_noise_lq;\nfloat3 neon, neons, col;\nfloat2 water, uv0, uv1, uv2, uv5, dz, tuv0, tuv, tshift;\nfloat near, noise, z, k1, ftu, nshape, nmask, iswater;\nbool istube;\nstatic const int anz = 20, tubes = 12;\nstatic float trad = 0.008, tlen = q7; \n\nfloat tria (float x) {return abs(2*frac(x/2)-1);}\n\nshader_body {\nuv += float2(q17,q18);\nuv0 = uv;\nuv1 = (uv-0.5)*aspect.xy ;\nz = q8/uv1.y;\nuv2 = float2 (z*uv1.x,z+q19);\nz  *= 1+0.14*q11*sin(uv2.y+q10*M_PI);\nuv2 = float2 (z*uv1.x,z+q19);\n\nwater = tex2D (snh, uv2) + tex2D (snh,uv2*2+float2(0,q19/2))/2-0.7;\niswater = (z>0)* sat((5-15*abs(uv1.x)*z) /z);\nuv += water * 0.04 *iswater;\n\n//NEON\nuv1 = (uv-0.5)*aspect.xy ; \ntuv0 = float2 (.5/length (uv1), atan2(uv1.x,-uv1.y)/M_PI) ;\nnear = sat (2-tuv0.x/5);\ntuv = tuv0 + float2(q19,0);\nftu = frac (tuv.y*tubes/2)-0.5; \nnshape = saturate(1-1/trad*pow (ftu,2));\ntuv.x -= nshape*2.5*sqrt(trad)/tubes*tuv0.x;\nk1 = abs(sin(tuv.x/tlen*M_PI*2));\nnshape *= sat(k1*2);\nistube = nshape >0;\nuv5  = tuv*float2(0.25/tlen,tubes/16.0); \ncol = (tex2D(sampler_pw_noise_lq,uv5/32)+0.2);\n\nneon = pow(nshape,0.41)*sat(8*k1)*col;\nneons= 1.4*sat(k1)* saturate(exp(-5*abs(ftu))) * col ;\n\nfloat dir = (int(uv5.y*16)%tubes)/2;\nnmask = frac(((q4*uv5.x*8.0 + 0*(int(uv5.y*16)%tubes)/2) *q20-q21)) < q22;\n//nmask = sat(2/q22-2/tria((uv5.x*8.0*q20-q21))) ;\nnmask *=  sat(tria((uv5.y*16.0+1)/q25+q27*2)*q26 -q26+1) ; \nnmask = lerp (nmask,0.15,q6);\n\nnoise =  tex2D(snl,tuv*2)- tex2D(snl,tuv*2+2*texsize.zw)*0.7;\nnoise += tex2D(sampler_heart,tuv*float2(0.5,2)+float2(0,tuv.x*0.2)).g*-0.15 ;\nnoise *= !istube * near;\n\nret = GetPixel(uv) + GetPixel(float2 (uv.x,1-uv.y))*0;\nret  *= (uv.x<1) * (uv.x>0)* (uv.y<1) * (uv.y>0);\nret *= .8;\nret += near/2*istube*GetBlur1(uv -ftu*istube);\nret += (neon*(1.5-q6/2) + 6*neons*noise.x)* near*nmask;\n\n//Hintergrundbel.\nuv2 = frac (uv1*.15*length(uv1)+0.5 +ftu*.5 *istube);\nret += (GetPixel(uv2)*0.6+0.1)*(noise*(.5+mid_att) +nshape * near);\n\nfloat3 shine = ret;\nfloat radi=1;\nfloat scale=1.6/anz;\nfor (int n=1; n <= anz; n++)\n{ \n  shine += scale*GetBlur1((uv0-0.5)*radi+0.5) ;\n  radi -= .9/anz ;\n}\n\n\nret = shine * (1-0*sat(5*iswater)*0.2);\n\n//ret = 1-exp(-ret*1.6);\n}"}