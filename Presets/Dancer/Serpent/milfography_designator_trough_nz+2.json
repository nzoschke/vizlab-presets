{"version":2,"baseVals":{"rating":5,"gammaadj":1.339,"decay":0.912,"echo_zoom":1.001,"echo_alpha":0.5,"echo_orient":1,"additivewave":1,"wave_brighten":0,"wave_a":0.001,"wave_scale":0.01,"wave_smoothing":0.7,"warpscale":1.331,"zoom":1.00051,"warp":0.00002,"wave_r":0,"wave_g":0,"wave_b":0,"wave_x":0,"wave_y":0,"ob_size":0.001,"ob_r":0.34,"ob_g":0.34,"ob_b":0.34,"ob_a":0.56,"ib_size":0.001,"ib_r":0.34,"ib_g":0.34,"ib_b":0.34,"ib_a":0.96,"mv_x":0,"mv_y":0,"mv_l":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":3,"num_inst":200,"rad":0.02705,"tex_zoom":1.24699,"g":0.4,"b":0.3,"g2":0,"a2":1,"border_a":0.51},"init_eqs_str":"a.d=0;a.y3=0;a.z2=0;a.y1=0;a.w=0;a.w2=0;a.t1=0;a.x1=0;a.zoom=0;a.p=0;a.z3=0;a.w3=0;a.my=0;a.my_x=0;a.x3=0;a.my_y=0;a.mz=0;a.w1=0;a.x2=0;a.mx=0;a.l=0;a.y2=0;a.z1=0;a.sample=0;","frame_eqs_str":"a.sample=div(a.instance,a.num_inst);a.rad=.22*a.sample;a.r=a.sample;a.ang=(1-a.sample)*a.time*15;a.sides=14*(1-a.sample);a.t1=a.sample+.2*a.time;a.mx=.4*(.6*Math.sin(7*a.t1)+.4*Math.sin(4.3*a.t1));a.my=.4*(.6*Math.cos(3.3*a.t1)+.4*Math.cos(6.9*a.t1))*Math.sin(-10+20*a.sample);a.mz=.4*(.6*Math.cos(4.1*a.t1)+.4*Math.cos(6.9*a.t1))*Math.cos(-5+10*a.sample);a.d=1;a.zoom=1;a.w1=.3*a.time;a.w2=.1*a.time;a.w3=.2*a.time;a.x1=Math.cos(a.w1)*a.mx+Math.sin(a.w1)*a.my;a.y1=-Math.sin(a.w1)*\na.mx+Math.cos(a.w1)*a.my;a.z1=a.mz;a.x2=Math.cos(a.w2)*a.x1+Math.sin(a.w2)*a.z1;a.z2=-Math.sin(a.w2)*a.x1+Math.cos(a.w2)*a.z1;a.y2=a.y1;a.y3=Math.cos(a.w3)*a.y2+Math.sin(a.w3)*a.z2;a.z3=-Math.sin(a.w3)*a.y2+Math.cos(a.w3)*a.z2;a.x3=a.x2;a.l=sqrt(a.x3*a.x3+a.y3*a.y3);a.w=Math.atan2(a.x3,a.y3);a.p=Math.tan(Math.asin(1)+Math.atan2(a.d+a.z3,a.l));a.d=sqrt(a.x3*a.x3+a.y3*a.y3+(a.z3+a.d)*(a.z3+a.d));a.my_x=a.zoom*Math.sin(a.w)*a.p;a.my_y=a.zoom*Math.cos(a.w)*a.p;a.x=.5+a.my_x;a.y=.5+a.my_y;","init_eqs_eel":"","frame_eqs_eel":"sample=instance/num_inst;\nrad=.22*sample;\nr=sample;\nang=(1-sample)*time*15;\nsides=(1-sample)* 14;\n\n\nt1 = sample+time*.2;\nmx = .4* (.6*sin (7*t1)+.4*sin (4.3*t1)) ;\nmy = .4*  (.6*cos (3.3*t1)+.4*cos (6.9*t1))* sin (-10+20*sample) ;\nmz = .4* (.6*cos (4.1*t1)+.4*cos (6.9*t1)) * cos (-5+10*sample) ;\n \n\n/////// rotations... by flexi\n\nd = 1; \nzoom = 1;\n\nw1 = .3*time;\nw2 = .1*time;\nw3 = .2*time;\n\nx1 = cos(w1)*mx + sin(w1)*my;\ny1 = -sin(w1)*mx + cos(w1)*my;\nz1 = mz;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"samples":200,"usedots":1,"scaling":0.01,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"t1 = sample+time*.2;\n\nx = .35* sin (6*t1) ;\nmy = .35* cos (3*t1)* sin (-10+20*sample) ;\nmz = .35* cos (7*t1) * cos (-5+10*sample) ;\n \n\n/////// rotations... by flexi\n\nd = 1; \nzoom = 1;\n\nw1 = .3*time;\nw2 = .1*time;\nw3 = .2*time;\n\nx1 = cos(w1)*mx + sin(w1)*my;\ny1 = -sin(w1)*mx + cos(w1)*my;\nz1 = mz;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"t1 = sample+time*.2;\n\nx = .35* sin (6*t1) ;\nmy = .35* cos (3*t1)* sin (-10+20*sample) ;\nmz = .35* cos (7*t1) * cos (-5+10*sample) ;\n \n\n/////// rotations... by flexi\n\nd = 1; \nzoom = 1;\n\nw1 = .3*time;\nw2 = .1*time;\nw3 = .2*time;\n\nx1 = cos(w1)*mx + sin(w1)*my;\ny1 = -sin(w1)*mx + cos(w1)*my;\nz1 = mz;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.mq29=0;a.cthr=0;a.mq1=0;a.q25=0;a.trebdiff=0;a.q22=0;a.q21=0;a.meanbass_att=0;a.q29=0;a.q1=0;a.meanbass=0;a.mq21=0;a.mq24=0;a.chng=0;a.mq28=0;a.lastbeat=0;a.mq23=0;a.beatrate=0;a.q23=0;a.q24=0;a.peakbass_att=0;a.mq30=0;a.q26=0;a.runmeanbass=0;a.mq27=0;a.mq25=0;a.meantreb=0;a.volume=0;a.mq22=0;a.beat=0;a.mq26=0;a.q27=0;a.meanmid=0;a.middiff=0;a.q28=0;a.q30=0;a.bassdiff=0;a.oldy=.4;","frame_eqs_str":"a.chng=Math.sin(.5*a.time);a.cthr=.99;a.mq21=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq21;a.mq22=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq22;a.mq23=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq23;a.mq24=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq24;a.mq25=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq25;a.mq26=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq26;a.mq27=.00001<Math.abs(above(a.chng,a.cthr))?rand(1):a.mq27;a.mq28=.00001<Math.abs(above(a.chng,\na.cthr))?rand(1):a.mq28;a.mq29=.00001<Math.abs(above(a.chng,a.cthr))?rand(1):a.mq29;a.mq30=.00001<Math.abs(above(a.chng,a.cthr))?rand(1):a.mq30;a.monitor=a.chng;a.q21=a.mq21;a.q22=a.mq22;a.q23=a.mq23;a.q24=a.mq24;a.q25=a.mq25;a.q26=a.mq26;a.q27=a.mq27;a.q28=a.mq28;a.q29=a.mq29;a.q30=a.mq30;a.monitor=a.mq1;a.ib_g=.2*Math.abs(Math.sin(.1*a.time));a.ib_b=.2*Math.abs(Math.sin(.3*a.time));a.ib_r=.2*Math.abs(Math.sin(.7*a.time));a.ob_b=Math.abs(Math.sin(100*a.time+a.time));a.ob_r=Math.abs(Math.sin(512*\na.time+a.time));a.ob_g=Math.abs(Math.sin(10*a.time+a.time));a.ib_b=Math.abs(Math.sin(10*a.time+a.time));a.ib_r=Math.abs(Math.sin(512*a.time+a.time));a.ib_g=Math.abs(Math.sin(100*a.time+a.time));a.meanbass=.01*(99*a.meanbass+a.bass);a.meantreb=.01*(99*a.meantreb+a.treb);a.meanmid=.01*(99*a.meanmid+a.mid);a.bassdiff=15*(a.bass-a.meanbass);a.trebdiff=15*(a.treb-a.meantreb);a.middiff=15*(a.mid-a.meanmid);a.bassdiff*=above(a.bassdiff,0);a.trebdiff*=above(a.trebdiff,0);a.middiff*=above(a.middiff,0);a.ob_g=\nMath.min(1,Math.max(0,.2*a.trebdiff));a.ob_r=Math.min(1,Math.max(0,.2*a.middiff));a.ob_b=Math.min(1,Math.max(0,.2*a.bassdiff));a.volume=.3*a.bass+a.mid;a.beatrate=equal(a.beatrate,0)+(1-equal(a.beatrate,0))*(below(a.volume,.01)+(1-below(a.volume,.01))*a.beatrate);a.lastbeat+=equal(a.lastbeat,0)*a.time;a.meanbass_att=.1*(9*a.meanbass_att+a.bass_att);a.runmeanbass=div(2*a.runmeanbass+a.bass_att,3);a.peakbass_att=Math.max(a.bass_att,a.peakbass_att);a.beat=above(a.volume,.8)*above(a.bass_att,1.1*a.runmeanbass)*\nbelow(a.peakbass_att-a.bass_att,.05*a.peakbass_att)*above(a.time-a.lastbeat,.1+.5*(a.beatrate-.1));a.beatrate=Math.max(.00001<Math.abs(a.beat)?.00001<Math.abs(below(a.time-a.lastbeat,2*a.beatrate))?.1*(9*a.beatrate+a.time-a.lastbeat):a.beatrate:a.beatrate,.1);a.peakbass_att=a.beat*a.bass_att+(1-a.beat)*a.peakbass_att*(.95*above(a.time-a.lastbeat,2*a.beatrate)+.995*(1-above(a.time-a.lastbeat,2*a.beatrate)));a.lastbeat=a.beat*a.time+(1-a.beat)*a.lastbeat;a.peakbass_att=Math.max(a.peakbass_att,1.1*a.meanbass_att);\na.q1=a.beat;","pixel_eqs_str":"a.cx=Math.sin(10*a.x+a.time+a.bass);a.cy=Math.sin(10*a.y+a.time+a.treb);a.rot+=.012*Math.sin(a.x*a.y*10+.2*a.time);","init_eqs_eel":"oldy=.4;","frame_eqs_eel":"chng=sin(time*.5);\ncthr=.99;\nmq21=if(above(chng,cthr),rand(3),mq21);\nmq22=if(above(chng,cthr),rand(3),mq22);\nmq23=if(above(chng,cthr),rand(3),mq23);\nmq24=if(above(chng,cthr),rand(2),mq24);\nmq25=if(above(chng,cthr),rand(2),mq25);\nmq26=if(above(chng,cthr),rand(2),mq26);\nmq27=if(above(chng,cthr),rand(1),mq27);\nmq28=if(above(chng,cthr),rand(1),mq28);\nmq29=if(above(chng,cthr),rand(1),mq29);\nmq30=if(above(chng,cthr),rand(1),mq30);\nmonitor=chng;\nq21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;\nq27=mq27;q28=mq28;q29=mq29;q30=mq30;\n\nmonitor=mq1;\nib_g = abs(sin(0.1*time))*0.2;\nib_b = abs(sin(0.3*time))*0.2;\nib_r = abs(sin(0.7*time))*0.2;\n\n\nob_b=abs(sin(time*100+time));\nob_r=abs(sin(time*512+time));\nob_g=abs(sin(time*10+time));\nib_b=abs(sin(time*10+time));\nib_r=abs(sin(time*512+time));\nib_g=abs(sin(time*100+time));\n\n\n\n\nmeanbass = 0.01*(meanbass*99+bass);\nmeantreb = 0.01*(meantreb*99+treb);\nmeanmid = 0.01*(meanmid*99+mid);\nbassdiff = (bass - meanbass)*15;\ntrebdiff = (treb - meantreb)*15;\nmiddiff = (mid - meanmid)*15;\nbassdiff = above(bassdiff,0)*bassdiff;\ntrebdiff = above(trebdiff,0)*trebdiff;\nmiddiff = above(middiff,0)*middiff;\n\nob_g = min(1,max(0,0.2*trebdiff));\nob_r = min(1,max(0,0.2*middiff));\nob_b = min(1,max(0,0.2*bassdiff));\n\n\n\n\n//Thanks to krash for beat detection (modified)\nvolume = 0.3*bass+mid;\nbeatrate = equal(beatrate,0) + (1-equal(beatrate,0))*(below(volume,0.01) + (1-below(volume,0.01))*beatrate);\nlastbeat = lastbeat + equal(lastbeat,0)*time;\nmeanbass_att = 0.1*(meanbass_att*9 + bass_att);\nrunmeanbass =(runmeanbass*2 + bass_att)/3;\npeakbass_att = max(bass_att,peakbass_att);\nbeat = above(volume,0.8)*above(bass_att,runmeanbass*1.1)*below(peakbass_att - bass_att, 0.05*peakbass_att)*above(time - lastbeat, 0.1 + 0.5*(beatrate - 0.1));\nbeatrate = max(if(beat,if(below(time-lastbeat,2*beatrate),0.1*(beatrate*9 + time - lastbeat),beatrate),beatrate),0.1);\npeakbass_att = beat*bass_att + (1-beat)*peakbass_att*(above(time - lastbeat, 2*beatrate)*0.95 + (1-above(time - lastbeat, 2*beatrate))*0.995);\nlastbeat = beat*time + (1-beat)*lastbeat;\npeakbass_att = max(peakbass_att,1.1*meanbass_att);\nq1 = beat;","pixel_eqs_eel":"cx =sin(x*10+time+bass);\ncy =sin(y*10+time+treb);\nrot=rot+.012*sin(x*y*10+time*.2);//*sin(bass*2)*4;","warp":" shader_body { \n  vec2 my_uv_1;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (vec2(1280.0, 1024.0) * texsize.zw);\n  float tmpvar_4;\n  vec2 tmpvar_5;\n  tmpvar_5 = (uv + vec2(0.005, 0.0));\n  vec2 tmpvar_6;\n  tmpvar_6 = (uv - vec2(0.005, 0.0));\n  tmpvar_4 = (((\n    (texture (sampler_blur2, tmpvar_5).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, tmpvar_6).xyz * scale2)\n   + bias2)).x * tmpvar_3.x);\n  float tmpvar_7;\n  vec2 tmpvar_8;\n  tmpvar_8 = (uv + vec2(0.0, 0.005));\n  vec2 tmpvar_9;\n  tmpvar_9 = (uv - vec2(0.0, 0.005));\n  tmpvar_7 = (((\n    (texture (sampler_blur2, tmpvar_8).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, tmpvar_9).xyz * scale2)\n   + bias2)).x * tmpvar_3.y);\n  vec2 tmpvar_10;\n  tmpvar_10.x = tmpvar_4;\n  tmpvar_10.y = tmpvar_7;\n  vec2 tmpvar_11;\n  tmpvar_11.x = (((\n    (texture (sampler_blur2, tmpvar_5).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, tmpvar_6).xyz * scale2)\n   + bias2)).x * tmpvar_3.x);\n  tmpvar_11.y = (((\n    (texture (sampler_blur2, tmpvar_8).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, tmpvar_9).xyz * scale2)\n   + bias2)).x * tmpvar_3.y);\n  ret_2.x = texture (sampler_fw_main, ((uv - (tmpvar_10 * 0.01)) + (tmpvar_11 * 0.003))).x;\n  vec4 tmpvar_12;\n  tmpvar_12 = texture (sampler_blur3, uv);\n  ret_2.x = (ret_2.x + ((ret_2.x - \n    ((tmpvar_12.xyz * scale3) + bias3)\n  .x) * 0.1));\n  ret_2.x = (ret_2.x + 0.004);\n  vec2 tmpvar_13;\n  tmpvar_13.x = tmpvar_7;\n  tmpvar_13.y = -(tmpvar_4);\n  my_uv_1 = (uv + ((tmpvar_13 * 0.05) * (1.2 - \n    ((tmpvar_12.xyz * scale3) + bias3)\n  .y)));\n  ret_2.z = texture (sampler_fw_main, my_uv_1).z;\n  vec2 x_14;\n  x_14 = (my_uv_1 - uv);\n  ret_2.z = (ret_2.z + ((\n    ((ret_2.z - ((texture (sampler_blur1, uv).xyz * scale1) + bias1).z) * sqrt(dot (x_14, x_14)))\n   * 180.0) / sqrt(\n    dot (tmpvar_3, tmpvar_3)\n  )));\n  ret_2.z = (ret_2.z * 0.8);\n  ret_2.z = (ret_2.z + 0.004);\n  vec2 tmpvar_15;\n  tmpvar_15.x = -(tmpvar_7);\n  tmpvar_15.y = tmpvar_4;\n  my_uv_1 = (tmpvar_15 * 0.045);\n  vec2 tmpvar_16;\n  tmpvar_16.x = (((\n    (texture (sampler_blur2, (uv + vec2(0.01, 0.0))).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, (uv - vec2(0.01, 0.0))).xyz * scale2)\n   + bias2)).y * tmpvar_3.x);\n  tmpvar_16.y = (((\n    (texture (sampler_blur2, (uv + vec2(0.0, 0.01))).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, (uv - vec2(0.0, 0.01))).xyz * scale2)\n   + bias2)).y * tmpvar_3.y);\n  my_uv_1 = (my_uv_1 + (uv - (tmpvar_16 * 0.03)));\n  ret_2.y = texture (sampler_fw_main, my_uv_1).y;\n  ret_2.y = (ret_2.y + ((\n    (ret_2.y - ((texture (sampler_blur3, my_uv_1).xyz * scale3) + bias3).y)\n   * 0.1) + 0.01));\n  vec4 tmpvar_17;\n  tmpvar_17 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv.xyy) * (\n    (q27 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q29)));\n  if (((ret_2.x > (q21 * roam_cos.y)) && (ret_2.x <= (q24 * roam_sin.x)))) {\n    ret_2.y = (ret_2.y - (tmpvar_17.x * 0.5));\n  };\n  if (((ret_2.y > (q22 * roam_sin.x)) && (ret_2.y <= (q25 * roam_cos.x)))) {\n    ret_2.z = (ret_2.z - (tmpvar_17.y * 0.5));\n  };\n  if (((ret_2.z > (q23 * roam_cos.x)) && (ret_2.z <= (q26 * roam_sin.y)))) {\n    ret_2.x = (ret_2.x - (tmpvar_17.z * 0.5));\n  };\n  vec4 tmpvar_18;\n  tmpvar_18.w = 1.0;\n  tmpvar_18.xyz = ret_2;\n  ret = tmpvar_18.xyz;\n }","comp":" shader_body { \n  vec2 uv_rr_1;\n  vec2 uv_r_2;\n  vec3 ret_3;\n  vec2 tmpvar_4;\n  tmpvar_4.x = q13;\n  tmpvar_4.y = q14;\n  vec2 tmpvar_5;\n  tmpvar_5 = ((uv - tmpvar_4) * aspect.xy);\n  vec2 tmpvar_6;\n  tmpvar_6.x = ((q12 * tmpvar_5.x) - (q11 * tmpvar_5.y));\n  tmpvar_6.y = ((q11 * tmpvar_5.x) + (q12 * tmpvar_5.y));\n  uv_r_2 = (q15 * tmpvar_6);\n  uv_r_2 = (tmpvar_4 + (uv_r_2 * aspect.zw));\n  uv_r_2 = (1.0 - abs((\n    (fract((uv_r_2 * 0.5)) * 2.0)\n   - 1.0)));\n  vec2 tmpvar_7;\n  tmpvar_7 = (uv_r_2 - tmpvar_4);\n  vec2 tmpvar_8;\n  tmpvar_8.x = ((q18 * tmpvar_7.x) - (q17 * tmpvar_7.y));\n  tmpvar_8.y = ((q17 * tmpvar_7.x) + (q18 * tmpvar_7.y));\n  uv_rr_1 = (q16 * tmpvar_8);\n  uv_rr_1 = (tmpvar_4 + uv_rr_1);\n  vec2 tmpvar_9;\n  tmpvar_9 = (uv_rr_1 - 0.5);\n  float tmpvar_10;\n  float tmpvar_11;\n  tmpvar_11 = (min (abs(\n    (tmpvar_9.x / tmpvar_9.y)\n  ), 1.0) / max (abs(\n    (tmpvar_9.x / tmpvar_9.y)\n  ), 1.0));\n  float tmpvar_12;\n  tmpvar_12 = (tmpvar_11 * tmpvar_11);\n  tmpvar_12 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_12) + 0.05368138) * tmpvar_12) - 0.1173503)\n     * tmpvar_12) + 0.1938925) * tmpvar_12) - 0.3326756)\n   * tmpvar_12) + 0.9999793) * tmpvar_11);\n  tmpvar_12 = (tmpvar_12 + (float(\n    (abs((tmpvar_9.x / tmpvar_9.y)) > 1.0)\n  ) * (\n    (tmpvar_12 * -2.0)\n   + 1.570796)));\n  tmpvar_10 = (tmpvar_12 * sign((tmpvar_9.x / tmpvar_9.y)));\n  if ((abs(tmpvar_9.y) > (1e-08 * abs(tmpvar_9.x)))) {\n    if ((tmpvar_9.y < 0.0)) {\n      if ((tmpvar_9.x >= 0.0)) {\n        tmpvar_10 += 3.141593;\n      } else {\n        tmpvar_10 = (tmpvar_10 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_10 = (sign(tmpvar_9.x) * 1.570796);\n  };\n  vec2 tmpvar_13;\n  tmpvar_13.x = ((tmpvar_10 * q21) * 1.5);\n  tmpvar_13.y = (((0.666 * \n    log(sqrt(dot (tmpvar_9, tmpvar_9)))\n  ) - (tmpvar_10 * q21)) + q22);\n  vec4 tmpvar_14;\n  tmpvar_14 = texture (sampler_main, clamp ((0.5 + (\n    (0.5 - abs(((\n      fract((tmpvar_13 * 0.5))\n     * 2.0) - 1.0)))\n   * vec2(0.96, 1.02))), 0.0, 1.0));\n  ret_3 = tmpvar_14.xyz;\n  vec4 tmpvar_15;\n  tmpvar_15 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv.xyy) * (\n    (q28 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q30)));\n  if (((tmpvar_14.x > (q26 * roam_cos.y)) && (tmpvar_14.x <= (q23 * roam_sin.x)))) {\n    ret_3.z = (tmpvar_14.z - (tmpvar_15.x * 0.5));\n  };\n  if (((tmpvar_14.y > (q25 * roam_sin.x)) && (tmpvar_14.y <= (q22 * roam_cos.x)))) {\n    ret_3.x = (tmpvar_14.x - (tmpvar_15.y * 0.5));\n  };\n  if (((ret_3.z > (q24 * roam_cos.x)) && (ret_3.z <= (q21 * roam_sin.y)))) {\n    ret_3.y = (tmpvar_14.y - (tmpvar_15.z * 0.5));\n  };\n  vec3 tmpvar_16;\n  tmpvar_16 = pow (((\n    (texture (sampler_blur2, uv).xyz * scale2)\n   + bias2) / bass_att), vec3((1.0 - dot (\n    clamp (pow (((\n      (texture (sampler_blur1, uv).xyz * scale1)\n     + bias1) / treb_att), vec3((1.0 - dot (\n      clamp (ret_3, 0.0, 1.0)\n    , vec3(0.32, 0.49, 0.29))))), 0.0, 1.0)\n  , vec3(0.32, 0.49, 0.29)))));\n  ret_3 = tmpvar_16;\n  vec4 tmpvar_17;\n  tmpvar_17.w = 1.0;\n  tmpvar_17.xyz = tmpvar_16;\n  ret = tmpvar_17.xyz;\n }","warp_hlsl":"shader_body\n{\n    float2 scale = float2(1280,1024)*texsize.zw; // 1280x1024 : the resolution i modelled this shader with\n    float1 d = 0.005;\n    float1 dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).x*scale.x;\n    float1 dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).x*scale.y;\n    float1 dxb = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).x*scale.x;\n    float1 dyb = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).x*scale.y;\n    float2 my_uv = uv - float2(dx,dy)*0.01 + float2(dxb,dyb)*0.003;\n\n\n\n    float2 v = 0.01;\n    ret.x = tex2D( sampler_fw_main, my_uv -floor(my_uv)*0).x;\n\n    \n    ret.x += (ret.x - GetBlur3(uv).x)*.1;\n    ret.x += 0.004;\n\n\n//--------------------------------\n\n    my_uv = uv + float2(dy,-dx)*0.05*(1.2-GetBlur3(uv).y);\n\n\n\n    v = 0.01;\n    ret.z = tex2D( sampler_fw_main, my_uv).z;\n    \n    ret.z += (ret.z - GetBlur1(uv).z)*length(my_uv-uv)*180/length(scale);\n    ret.z *= 0.8;\n    ret.z += 0.004;\n\n\n\n//--------------------------------\n\n    d = 0.01;\n    my_uv = float2(-dy,dx)*0.045;\n\n    dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).y*scale.x;\n    dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).y*scale.y;\n    my_uv += uv - float2(dx,dy)*0.03;\n\n\n\n    v = 0.01;\n    ret.y =tex2D( sampler_fw_main, my_uv).y;\n\n    \n    ret.y += (ret.y - GetBlur3(my_uv).y)*0.1 + 0.01;\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy*q27\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q29\n                     );\nif(ret.x> q21*roam_cos.y && ret.x<= q24*roam_sin.x)ret.y -= (noise9).x*.5; \nif(ret.y> q22*roam_sin.x && ret.y<= q25*roam_cos.x)ret.z -= (noise9).y*.5; \nif(ret.z> q23*roam_cos.x && ret.z<= q26*roam_sin.y)ret.x -= (noise9).z*.5; \n}","comp_hlsl":"shader_body\n{\n//ret=tex2D(sampler_main,uv);\n// ***** Flexis rotating caleidoscope code *****\nfloat2 cntr = float2(q13,q14); float sin = q11; float cos = q12; float scale = q15;\nfloat2 uv_r = (uv-cntr)*aspect.xy;\n       uv_r = scale*float2( cos*uv_r.x - sin*uv_r.y, sin*uv_r.x + cos*uv_r.y); // rotation\n       uv_r = cntr + uv_r*aspect.zw;\n       uv_r = 1.0 - abs( frac( uv_r * 0.5 ) * 2.0 - 1.0 ); // mirror\nsin = q17; cos = q18; scale = q16;\nfloat2 uv_rr = (uv_r-cntr);\n       uv_rr = scale*float2( cos*uv_rr.x - sin*uv_rr.y, sin*uv_rr.x + cos*uv_rr.y); // counter-rotation\n       uv_rr = cntr + (uv_rr);\nfloat t = q22;\nfloat2 c = ((uv_rr-0.5));\nfloat1 ang_hq = atan2(c.x,c.y);\nfloat2 spiral = float2(ang_hq*q21*1.5,0.666*log(length(c))-ang_hq*q21+t);\nspiral = 0.5 + (0.5 - abs( frac( spiral * 0.5 ) * 2.0 - 1.0 ))*float2(0.96,1.02); // mirror\nret = GetPixel(saturate(spiral));\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy*q28\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q30 \n                     );\nif(ret.x> q26*roam_cos.y && ret.x<= q23*roam_sin.x)ret.z -= (noise9).x*.5; \nif(ret.y> q25*roam_sin.x && ret.y<= q22*roam_cos.x)ret.x -= (noise9).y*.5; \nif(ret.z> q24*roam_cos.x && ret.z<= q21*roam_sin.y)ret.y -= (noise9).z*.5; \nret=pow(GetBlur1(uv).xyz/treb_att,1-lum(saturate(ret.xyz)));\nret=pow(GetBlur2(uv).xyz/bass_att,1-lum(saturate(ret.xyz)));\n}"}