{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.94,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":0.267,"zoom":1.16,"rot":-0.04,"warp":0.00052,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_r":1,"ob_g":1,"ob_b":1,"mv_x":64,"mv_y":20.16,"mv_l":0.4,"mv_g":0.4,"mv_a":0},"shapes":[{"baseVals":{"textured":1,"rad":1.20321,"tex_zoom":1.22019,"a":0,"a2":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"a.oldmd=0;a.md=0;a.mx=0;a.my=0;a.ma=.5;a.my=.5;a.md=0;","frame_eqs_str":"","point_eqs_str":"a.oldmd=a.md;a.md=mod(a.md+rand(4),4);a.md=.00001<Math.abs(equal(a.md,a.oldmd))?mod(a.md+1,4):a.md;a.mx+=.002*equal(a.md,0)*a.bass;a.mx-=.002*equal(a.md,1)*a.bass;a.my+=.002*equal(a.md,2)*a.treb;a.my-=.002*equal(a.md,3)*a.treb;a.mx=.00001<Math.abs(above(a.mx,.9))?.5:a.mx;a.mx=.00001<Math.abs(below(a.mx,.1))?.5:a.mx;a.my=.00001<Math.abs(above(a.my,.9))?.5:a.my;a.my=.00001<Math.abs(below(a.my,.1))?.5:a.my;a.x=a.mx;a.y=a.my;a.a=.1*a.bass;a.r=.5*a.bass;","init_eqs_eel":"ma=.5;\nmy=.5;\nmd=0; //direction 0 1 2 3","frame_eqs_eel":"","point_eqs_eel":"oldmd=md;\nmd=(md+rand(4))%4;\nmd=if(equal(md,oldmd),(md+1)%4,md);\n\nmx=mx+(equal(md,0)*.002*bass);\nmx=mx-(equal(md,1)*.002*bass);\nmy=my+(equal(md,2)*.002*treb);\nmy=my-(equal(md,3)*.002*treb);\n\nmx=if(above(mx,.9),.5,mx);\nmx=if(below(mx,.1),.5,mx);\nmy=if(above(my,.9),.5,my);\nmy=if(below(my,.1),.5,my);\n\nx=mx;\ny=my;\na=bass*.1;\n\nr=bass*.5;"},{"baseVals":{"enabled":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"a.oldmd=0;a.md=0;a.mx=0;a.my=0;a.mx=.5;a.my=.5;a.md=1;","frame_eqs_str":"","point_eqs_str":"a.oldmd=a.md;a.md=mod(a.md+rand(4),4);a.md=.00001<Math.abs(equal(a.md,a.oldmd))?mod(a.md+1,4):a.md;a.mx+=.002*equal(a.md,0)*a.bass;a.mx-=.002*equal(a.md,1)*a.bass;a.my+=.002*equal(a.md,2)*a.treb;a.my-=.002*equal(a.md,3)*a.treb;a.mx=.00001<Math.abs(above(a.mx,.9))?.5:a.mx;a.mx=.00001<Math.abs(below(a.mx,.1))?.5:a.mx;a.my=.00001<Math.abs(above(a.my,.9))?.5:a.my;a.my=.00001<Math.abs(below(a.my,.1))?.5:a.my;a.x=a.mx;a.y=a.my;a.a=.1*a.bass;a.g=.5*a.treb;","init_eqs_eel":"mx=.5;\nmy=.5;\nmd=1;","frame_eqs_eel":"","point_eqs_eel":"oldmd=md;\nmd=(md+rand(4))%4;\nmd=if(equal(md,oldmd),(md+1)%4,md);\n\nmx=mx+(equal(md,0)*.002*bass);\nmx=mx-(equal(md,1)*.002*bass);\nmy=my+(equal(md,2)*.002*treb);\nmy=my-(equal(md,3)*.002*treb);\n\nmx=if(above(mx,.9),.5,mx);\nmx=if(below(mx,.1),.5,mx);\nmy=if(above(my,.9),.5,my);\nmy=if(below(my,.1),.5,my);\n\nx=mx;\ny=my;\na=bass*.1;\n\ng=treb*.5;"},{"baseVals":{"enabled":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"a.oldmd=0;a.md=0;a.mx=0;a.my=0;a.mx=.5;a.my=.5;a.md=2;","frame_eqs_str":"","point_eqs_str":"a.oldmd=a.md;a.md=mod(a.md+rand(4),4);a.md=.00001<Math.abs(equal(a.md,a.oldmd))?mod(a.md+1,4):a.md;a.mx+=.002*equal(a.md,0)*a.bass;a.mx-=.002*equal(a.md,1)*a.bass;a.my+=.002*equal(a.md,2)*a.treb;a.my-=.002*equal(a.md,3)*a.treb;a.mx=.00001<Math.abs(above(a.mx,.9))?.5:a.mx;a.mx=.00001<Math.abs(below(a.mx,.1))?.5:a.mx;a.my=.00001<Math.abs(above(a.my,.9))?.5:a.my;a.my=.00001<Math.abs(below(a.my,.1))?.5:a.my;a.x=a.mx;a.y=a.my;a.a=.1*a.bass;","init_eqs_eel":"mx=.5;\nmy=.5;\nmd=2;","frame_eqs_eel":"","point_eqs_eel":"oldmd=md;\nmd=(md+rand(4))%4;\nmd=if(equal(md,oldmd),(md+1)%4,md);\n\nmx=mx+(equal(md,0)*.002*bass);\nmx=mx-(equal(md,1)*.002*bass);\nmy=my+(equal(md,2)*.002*treb);\nmy=my-(equal(md,3)*.002*treb);\n\nmx=if(above(mx,.9),.5,mx);\nmx=if(below(mx,.1),.5,mx);\nmy=if(above(my,.9),.5,my);\nmy=if(below(my,.1),.5,my);\n\nx=mx;\ny=my;\na=bass*.1;"},{"baseVals":{"enabled":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"a.oldmd=0;a.md=0;a.mx=0;a.my=0;a.mx=.5;a.my=.4;a.md=3;","frame_eqs_str":"","point_eqs_str":"a.oldmd=a.md;a.md=mod(a.md+rand(4),4);a.md=.00001<Math.abs(equal(a.md,a.oldmd))?mod(a.md+1,4):a.md;a.mx+=.002*equal(a.md,0)*a.bass;a.mx-=.002*equal(a.md,1)*a.bass;a.my+=.002*equal(a.md,2)*a.treb;a.my-=.002*equal(a.md,3)*a.treb;a.mx=.00001<Math.abs(above(a.mx,.9))?.5:a.mx;a.mx=.00001<Math.abs(below(a.mx,.1))?.5:a.mx;a.my=.00001<Math.abs(above(a.my,.9))?.5:a.my;a.my=.00001<Math.abs(below(a.my,.1))?.5:a.my;a.x=a.mx;a.y=a.my;a.a=.1*a.bass;","init_eqs_eel":"mx=.5;\nmy=.4;\nmd=3;","frame_eqs_eel":"","point_eqs_eel":"oldmd=md;\nmd=(md+rand(4))%4;\nmd=if(equal(md,oldmd),(md+1)%4,md);\n\nmx=mx+(equal(md,0)*.002*bass);\nmx=mx-(equal(md,1)*.002*bass);\nmy=my+(equal(md,2)*.002*treb);\nmy=my-(equal(md,3)*.002*treb);\n\nmx=if(above(mx,.9),.5,mx);\nmx=if(below(mx,.1),.5,mx);\nmy=if(above(my,.9),.5,my);\nmy=if(below(my,.1),.5,my);\n\nx=mx;\ny=my;\na=bass*.1;"}],"init_eqs_str":"a.basstime=0;a.stickybit=0;a.volavg2=0;a.q1=0;a.sample1=0;a.difftime=0;a.diff=0;a.edge=0;a.volavg=0;a.bit2=0;a.state=0;a.vol=0;a.q2=0;a.spintime=0;a.q3=0;a.basssum=0;a.sample2=0;a.q8=0;a.spintime=0;","frame_eqs_str":"a.basstime+=.03*a.bass_att;a.q1=a.basstime;a.vol=pow(a.bass+a.mid+a.treb,2);a.basssum=a.vol;a.basstime=.00001<Math.abs(below(a.basstime,465))?465:a.basstime;a.stickybit=mod(a.time,2);a.volavg+=a.vol*equal(a.stickybit,1);a.sample1+=equal(a.stickybit,1);a.volavg2+=a.vol*equal(a.stickybit,0);a.sample2+=equal(a.stickybit,0);a.edge=bnot(equal(a.bit2,a.stickybit));a.volavg-=a.volavg*a.edge*a.stickybit;a.volavg2-=a.volavg2*a.edge*equal(a.stickybit,0);a.sample1-=a.sample1*a.edge*a.stickybit;\na.sample2-=a.sample2*a.edge*equal(a.stickybit,0);a.diff=.00001<Math.abs(equal(a.stickybit,1))?div(a.basssum,div(a.volavg2,a.sample2)):0;a.diff=.00001<Math.abs(equal(a.stickybit,0))?div(a.basssum,div(a.volavg,a.sample1)):a.diff;a.q3=a.diff;a.bit2=mod(a.time,2);a.difftime+=.03*a.diff;a.q2=a.difftime;a.difftime=.00001<Math.abs(above(a.difftime,2E3))?0:a.difftime;a.spintime+=.03*a.bass*(.00001<Math.abs(equal(mod(a.state,2),1))?1:-1);a.q8=a.spintime;a.state+=above(a.diff,10);a.monitor=a.spintime;","pixel_eqs_str":"a.zoom=Math.sin(5)-Math.sin(Math.cos(a.rot))*Math.cos(a.rot);a.rot=.01;","init_eqs_eel":"spintime = 0;","frame_eqs_eel":"basstime = basstime + bass_att*0.03;\nq1 = basstime;\nvol = pow(bass+mid+treb,2);\nbasssum = vol;\n\nbasstime = if(below(basstime,465),465,basstime);\n\nstickybit = time%2;\n\n//avg vol\n//buffer 1\nvolAvg = volAvg + vol*equal(stickybit,1);\n//number of samples 1 or framerate\nsample1 = sample1 + equal(stickybit,1);\n//buffer 2\nvolAvg2 = volAvg2 + vol*equal(stickybit,0);\n//number of samples 2\nsample2 = sample2 + equal(stickybit,0);\n\n//transision\nedge = bnot(equal(bit2,stickybit));\n\nvolAvg = volAvg - volAvg*edge*stickybit;\nvolAvg2 = volAvg2 - volAvg2*edge*equal(stickybit,0);\n\nsample1 = sample1  - sample1*edge*stickybit;\nsample2 = sample2  - sample2*edge*equal(stickybit,0);\n\n//test vol against avg buffer lvl\ndiff = if(equal(stickybit,1), (basssum/(volAvg2/sample2)) , 0);\ndiff = if(equal(stickybit,0), (basssum/(volAvg/sample1)), diff);\n\nq3 = diff;\n\nbit2 = time%2;\n\ndifftime = difftime + diff*0.03;\nq2 = difftime;\n\n//fix a strange error\ndifftime = if(above(difftime,2000),0, difftime);\n\nspintime = spintime + bass*0.03*if(equal(state%2,1),1,-1); \nq8 = spintime;\n\nstate = state + above(diff,10);\n\nmonitor = spintime;","pixel_eqs_eel":"zoom = sin(5) - sin(cos(rot))*cos(rot);\nrot =.01;// 4.72;","warp":" shader_body { \n  vec3 ret_1;\n  ret_1 = texture (sampler_main, uv).xyz;\n  ret_1 = (ret_1 + ((ret_1 - \n    ((texture (sampler_blur2, uv).xyz * scale2) + bias2)\n  ) * 0.3));\n  ret_1 = (ret_1 * 0.9);\n  ret_1 = (ret_1 + ((\n    ((texture (sampler_noise_lq, ((\n      (uv_orig * texsize.xy)\n     * \n      (texsize_noise_lq.zw * 0.04)\n    ) + rand_frame.xy)).xyz - 0.5) / 256.0)\n   * 128.0) * clamp (\n    (treb_att - 1.0)\n  , 0.0, 1.0)));\n  vec4 tmpvar_2;\n  tmpvar_2.w = 0.0;\n  tmpvar_2.xyz = (0.1 * cos(ret_1));\n  ret_1 = mix (ret_1.xyzz, vec4(dot (ret_1, vec3(0.32, 0.49, 0.29))), tmpvar_2).xyz;\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  vec2 uv2_1;\n  vec3 ret_2;\n  uv2_1 = (uv + (vec2(1.0, 0.0) * texsize.zw));\n  float tmpvar_3;\n  tmpvar_3 = (((texture (sampler_main, uv2_1).xyz + \n    (((texture (sampler_blur1, uv2_1).xyz * scale1) + bias1) * 0.04)\n  ) + (\n    ((texture (sampler_blur2, uv2_1).xyz * scale2) + bias2)\n   * 0.15)) + ((\n    (texture (sampler_blur3, uv2_1).xyz * scale3)\n   + bias3) * 0.01)).x;\n  uv2_1 = (uv + (vec2(0.1, 0.0) * texsize.zw));\n  float tmpvar_4;\n  tmpvar_4 = (((texture (sampler_main, uv2_1).xyz + \n    (((texture (sampler_blur1, uv2_1).xyz * scale1) + bias1) * 0.04)\n  ) + (\n    ((texture (sampler_blur2, uv2_1).xyz * scale2) + bias2)\n   * 0.15)) + ((\n    (texture (sampler_blur3, uv2_1).xyz * scale3)\n   + bias3) * 0.01)).x;\n  uv2_1 = (uv + (vec2(0.0, 1.0) * texsize.zw));\n  float tmpvar_5;\n  tmpvar_5 = (((texture (sampler_main, uv2_1).xyz + \n    (((texture (sampler_blur1, uv2_1).xyz * scale1) + bias1) * 0.04)\n  ) + (\n    ((texture (sampler_blur2, uv2_1).xyz * scale2) + bias2)\n   * 0.15)) + ((\n    (texture (sampler_blur3, uv2_1).xyz * scale3)\n   + bias3) * 0.01)).x;\n  uv2_1 = (uv + (vec2(0.0, -1.0) * texsize.zw));\n  vec3 tmpvar_6;\n  tmpvar_6.z = 0.14;\n  tmpvar_6.x = (tmpvar_3 - tmpvar_4);\n  tmpvar_6.y = (tmpvar_5 - ((\n    (texture (sampler_main, uv2_1).xyz + (((texture (sampler_blur1, uv2_1).xyz * scale1) + bias1) * 0.04))\n   + \n    (((texture (sampler_blur2, uv2_1).xyz * scale2) + bias2) * 0.15)\n  ) + (\n    ((texture (sampler_blur3, uv2_1).xyz * scale3) + bias3)\n   * 0.01)).x);\n  ret_2 = (0.5 + (0.5 * normalize(tmpvar_6)));\n  vec2 x_7;\n  x_7 = (ret_2.xy - 0.5);\n  ret_2 = (ret_2 * clamp ((\n    sqrt(dot (x_7, x_7))\n   * 5.0), 0.0, 1.0));\n  ret_2 = ret_2.xxy;\n  ret_2 = (ret_2 + 1.15);\n  ret_2 = (ret_2 * mix (ret_2, (ret_2 * \n    (((texture (sampler_blur3, uv).xyz * scale3) + bias3) - (((texture (sampler_blur1, uv).xyz * scale1) + bias1) * treb_att))\n  ), pow (hue_shader.xzy, vec3(bass_att))));\n  ret_2 = (ret_2 * ret_2);\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = ret_2;\n  ret = tmpvar_8.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret.xyz = tex2D( sampler_main, uv ).xyz;\n\n      // take the difference between the crisp and blurred images,\n      // then add it back into the image.  Creates spots and stripes over time.\n      ret.xyz += (ret.xyz - GetBlur2(uv))*0.3;\n      ret.xyz *= 0.9;\n\n      // add noise:\n      float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.04 + rand_frame.xy;\n      ret.xyz += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0 * 128 * saturate(treb_att-1);\n\n      // desaturate over time, to keep the globs white\n      ret.xyz = lerp(ret.xyzz, lum(ret.xyz), 0.1*cos(ret));\n}","comp_hlsl":"// tribute to suksma!\n\nshader_body\n{\n    float2 uv2;\n\n    float4 c = float4(1,0.04,0.15,0.01);\n\n    uv2 = uv + float2(1,0)*texsize.zw;\n    float gx1 = GetPixel(uv2)*c.x + GetBlur1(uv2)*c.y + GetBlur2(uv2)*c.z + GetBlur3(uv2)*c.w;\n    uv2 = uv + float2(.1,0)*texsize.zw;\n    float gx2 = GetPixel(uv2)*c.x + GetBlur1(uv2)*c.y + GetBlur2(uv2)*c.z + GetBlur3(uv2)*c.w;\n\n    uv2 = uv + float2(0,1)*texsize.zw;\n    float gy1 = GetPixel(uv2)*c.x + GetBlur1(uv2)*c.y + GetBlur2(uv2)*c.z + GetBlur3(uv2)*c.w;\n    uv2 = uv + float2(0,-1)*texsize.zw;\n    float gy2 = GetPixel(uv2)*c.x + GetBlur1(uv2)*c.y + GetBlur2(uv2)*c.z + GetBlur3(uv2)*c.w;\n\n    float3 g = normalize(float3(gx1-gx2, gy1-gy2, 0.14));\n\n    ret = 0.5 + 0.5*g;\n    ret *= saturate(length(ret.xy-0.5)*5);\n    ret = ret.xxy;\n    ret += 1.15;\n    ret *= lerp(ret,ret*(GetBlur3(uv)-GetBlur1(uv)*treb_att),pow(hue_shader.xzy,bass_att));\n    ret *= ret;\n\n    //ret *= .5*cos(ret)*sin(ret); //old gamma effect    \n}"}