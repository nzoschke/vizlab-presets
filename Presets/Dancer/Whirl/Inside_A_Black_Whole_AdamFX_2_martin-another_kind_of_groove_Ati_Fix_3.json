{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":0.952,"echo_alpha":0.5,"echo_orient":3,"wave_mode":1,"wrap":0,"darken":1,"wave_a":0.001,"warpscale":2.449,"dx":0.00001,"dy":0.00001,"warp":0.01,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0.005,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":64,"mv_y":48,"mv_l":4.95,"mv_r":0,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"textured":1,"rad":2.66718,"tex_zoom":0.45112,"g":1,"a":0.15,"g2":0,"a2":0.05,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"x":0.35,"y":0,"rad":0.09959,"tex_zoom":0.42497,"r":0,"b":1,"g2":0,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"y":0,"rad":0.10201,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"x":0.65,"y":0,"g":1,"b":1,"r2":1,"g2":0,"b2":1,"a2":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"spectrum":1,"thick":1,"additive":1,"r":0,"g":0,"b":0,"a":0.1},"init_eqs_str":"a.q1=0;a.speed=0;a.v=0;a.xs=0;a.ys=0;","frame_eqs_str":"","point_eqs_str":"a.q1=0;a.speed=.3*a.bass_att;a.v=1E4*a.sample+a.value2*a.bass*.1;a.xs+=Math.sin(.1*a.v+.1*Math.sin(a.v))*a.speed*Math.atan(1.51*a.v);a.ys+=Math.sin(.1*a.v+.1*Math.cos(a.v))*a.speed*Math.atan(a.v);a.x=.5+.5*Math.sin(.1*a.xs)*Math.cos(1*a.time+a.ys);a.y=.5+.5*Math.sin(.1*a.ys)*Math.cos(1.1*a.time+a.xs);a.r=.5+.5*Math.sin(.22*a.q1);a.g=.5+.5*Math.sin(.307*a.q1)+a.x;a.xs=.00001<Math.abs(above(a.xs,1E3))?0:a.xs;a.ys=.00001<Math.abs(above(a.ys,1E3))?0:a.ys;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//q1 = state;\n//q2 = basstime;\n\nq1 = 0;\nspeed = bass_att*0.3;\nv = sample*10000 + value2*bass*0.1;\n\n//state 0 elipse\nxs = xs + sin(v*0.1 + sin(v)*0.1)*speed*atan(v*1.51);\nys = ys + sin(v*0.1 + cos(v)*0.1)*speed*atan(v);\n\nx = 0.5 + 0.5*sin(xs*0.1)*cos(time*1 + ys);\ny = 0.5 + 0.5*sin(ys*0.1)*cos(time*1.1 + xs);\n\n\nr = 0.5 + 0.5*sin(q1*0.22);\ng = 0.5 + 0.5*sin(q1*0.307) + x;\n//b = 0.4 + 0.4*sin(time*0.959);\n\n\nxs = if(above(xs,1000),0 ,xs);\nys = if(above(ys,1000),0 ,ys);"},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"//apply zoom burst on beat\nflag = above(q3,2);\n//state zero is ready state\nstate = state + flag*equal(state,0);\n\n//upwards flight\nyval = if(equal(state,0),0, yval);\nyval = yval + 0.00004*equal(state,1);\nymax = if(equal(state,0),int(rand(100))*0.004,ymax);\n\n//hit apogee\nstate = if(above(yval,0.5+ymax),2,state);\n\n//reset variable\nyval = if(equal(state,0),0, yval);\nburst = if(equal(state,0),0.001,burst);\nalphax = if(equal(state,0),1,alphax);\nxdriftinc = if(equal(state,0),0,xdriftinc);\n\nburstspeed = if(equal(state,0),int(rand(10)),burstspeed);\nxdrift = if(equal(state,0),int(rand(20)),xdrift);\n//to get the numbers small enough have to use constants\nxdriftinc = xdriftinc\n+ equal(xdrift,0)*equal(state,1)*0.00002\n+ equal(xdrift,1)*equal(state,1)*0.000018\n+ equal(xdrift,2)*equal(state,1)*0.000016\n+ equal(xdrift,3)*equal(state,1)*0.000014\n+ equal(xdrift,4)*equal(state,1)*0.000012\n+ equal(xdrift,5)*equal(state,1)*0.00001\n+ equal(xdrift,6)*equal(state,1)*0.000008\n+ equal(xdrift,7)*equal(state,1)*0.000006\n+ equal(xdrift,8)*equal(state,1)*0.000004\n+ equal(xdrift,9)*equal(state,1)*0.000002\n+ equal(xdrift,11)*equal(state,1)*-0.000002\n+ equal(xdrift,12)*equal(state,1)*-0.000004\n+ equal(xdrift,13)*equal(state,1)*-0.000006\n+ equal(xdrift,14)*equal(state,1)*-0.000008\n+ equal(xdrift,15)*equal(state,1)*-0.00001\n+ equal(xdrift,16)*equal(state,1)*-0.000012\n+ equal(xdrift,17)*equal(state,1)*-0.000014\n+ equal(xdrift,18)*equal(state,1)*-0.000016\n+ equal(xdrift,19)*equal(state,1)*-0.000018;\n\nburst = burst\n+ equal(burstspeed,0)*equal(state,2)*0.000024\n+ equal(burstspeed,1)*equal(state,2)*0.000022\n+ equal(burstspeed,2)*equal(state,2)*0.00002\n+ equal(burstspeed,3)*equal(state,2)*0.000018\n+ equal(burstspeed,4)*equal(state,2)*0.000016\n+ equal(burstspeed,5)*equal(state,2)*0.000014\n+ equal(burstspeed,6)*equal(state,2)*0.000012\n+ equal(burstspeed,7)*equal(state,2)*0.00001\n+ equal(burstspeed,8)*equal(state,2)*0.000008\n+ equal(burstspeed,9)*equal(state,2)*0.000008;\n\nalphax = alphax - 0.00004*equal(state,2);\nstate = if(below(alphax,0),0,state);\n\n\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw torus\nxs = (burst + 0.0001*cos(s))*cos(ss);\nys = (burst + 0.0001*cos(s))*sin(ss);\nzs = 0.1*burst*sin(s);\n\n\n//rotate x axis\nangle = sin(-q1*0.035)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(-q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(-q1*0.022)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2;\n\n\nx = x + xdriftinc;\ny = y + sin(yval*1.5) - 0.18;\n\n\nr = 0.5 + 0.5*sin(q1*1.3 + x + x);\ng = 0.5 + 0.5*sin(q1*1.1 + x + y);\nb = 0.5 + 0.5*sin(q1*1.66 + y + y);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//apply zoom burst on beat\nflag = above(q3,2);\n//state zero is ready state\nstate = state + flag*equal(state,0);\n\n//upwards flight\nyval = if(equal(state,0),0, yval);\nyval = yval + 0.00004*equal(state,1);\nymax = if(equal(state,0),int(rand(100))*0.004,ymax);\n\n//hit apogee\nstate = if(above(yval,0.5+ymax),2,state);\n\n//reset variable\nyval = if(equal(state,0),0, yval);\nburst = if(equal(state,0),0.001,burst);\nalphax = if(equal(state,0),1,alphax);\nxdriftinc = if(equal(state,0),0,xdriftinc);\n\nburstspeed = if(equal(state,0),int(rand(10)),burstspeed);\nxdrift = if(equal(state,0),int(rand(20)),xdrift);\n//to get the numbers small enough have to use constants\nxdriftinc = xdriftinc\n+ equal(xdrift,0)*equal(state,1)*0.00002\n+ equal(xdrift,1)*equal(state,1)*0.000018\n+ equal(xdrift,2)*equal(state,1)*0.000016\n+ equal(xdrift,3)*equal(state,1)*0.000014\n+ equal(xdrift,4)*equal(state,1)*0.000012\n+ equal(xdrift,5)*equal(state,1)*0.00001\n+ equal(xdrift,6)*equal(state,1)*0.000008\n+ equal(xdrift,7)*equal(state,1)*0.000006\n+ equal(xdrift,8)*equal(state,1)*0.000004\n+ equal(xdrift,9)*equal(state,1)*0.000002\n+ equal(xdrift,11)*equal(state,1)*-0.000002\n+ equal(xdrift,12)*equal(state,1)*-0.000004\n+ equal(xdrift,13)*equal(state,1)*-0.000006\n+ equal(xdrift,14)*equal(state,1)*-0.000008\n+ equal(xdrift,15)*equal(state,1)*-0.00001\n+ equal(xdrift,16)*equal(state,1)*-0.000012\n+ equal(xdrift,17)*equal(state,1)*-0.000014\n+ equal(xdrift,18)*equal(state,1)*-0.000016\n+ equal(xdrift,19)*equal(state,1)*-0.000018;\n\nburst = burst\n+ equal(burstspeed,0)*equal(state,2)*0.000024\n+ equal(burstspeed,1)*equal(state,2)*0.000022\n+ equal(burstspeed,2)*equal(state,2)*0.00002\n+ equal(burstspeed,3)*equal(state,2)*0.000018\n+ equal(burstspeed,4)*equal(state,2)*0.000016\n+ equal(burstspeed,5)*equal(state,2)*0.000014\n+ equal(burstspeed,6)*equal(state,2)*0.000012\n+ equal(burstspeed,7)*equal(state,2)*0.00001\n+ equal(burstspeed,8)*equal(state,2)*0.000008\n+ equal(burstspeed,9)*equal(state,2)*0.000008;\n\nalphax = alphax - 0.00004*equal(state,2);\nstate = if(below(alphax,0),0,state);\n\n\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw torus\nxs = (burst + 0.0001*cos(s))*cos(ss);\nys = (burst + 0.0001*cos(s))*sin(ss);\nzs = 0.1*burst*sin(s);\n\n\n//rotate x axis\nangle = sin(-q1*0.035)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(-q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(-q1*0.022)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2;\n\n\nx = x + xdriftinc;\ny = y + sin(yval*1.5) - 0.18;\n\n\nr = 0.5 + 0.5*sin(q1*1.3 + x + x);\ng = 0.5 + 0.5*sin(q1*1.1 + x + y);\nb = 0.5 + 0.5*sin(q1*1.66 + y + y);"}],"init_eqs_str":"a.jzm=0;a.kdx=0;a.w=0;a.nh=0;a.crs=0;a.crx=0;a.cb=0;a.ci=0;a.jcy=0;a.myx=0;a.kzm=0;a.jdx=0;a.xd=0;a.jwp=0;a.kwp=0;a.myy=0;a.cr2=0;a.jrt=0;a.cr=0;a.jdy=0;a.jsx=0;a.ksy=0;a.kcy=0;a.da=0;a.ksx=0;a.jsy=0;a.xb=0;a.nh2=0;a.kcx=0;a.jcx=0;a.crr=0;a.cqr=0;a.kx1=0;a.cr1=0;a.jx1=0;a.kdy=0;a.cc=0;a.krt=0;","frame_eqs_str":"a.wave_r=a.wave_r+.35*Math.sin(.4*a.time)+.15*Math.sin(.5*a.time);a.wave_g=a.wave_g+.35*Math.sin(.7*a.time)+.15*Math.sin(.11*a.time);a.wave_b=a.wave_b+.35*Math.sin(.84*a.time)+.15*Math.sin(.3*a.time);a.warp=0;a.warp+=.15*(2.4*a.bass_att+.9*a.treb_att);","pixel_eqs_str":"a.kdx=a.dx;a.kdy=a.dy;a.ksx=a.sx;a.ksy=a.sy;a.krt=a.rot;a.kzm=a.zoom;a.kcx=a.cx;a.kcy=a.cy;a.kwp=a.warp;a.dx=0;a.dy=0;a.sx=1;a.sy=1;a.rot=0;a.zoom=1;a.cx=.5;a.cy=.5;a.warp=0;a.xb=div((1-a.x+(1-a.y))*(-(1-a.x)-(1-a.y)+2),1.1);a.xd=a.x+a.y-2+(a.x+a.y);a.xd=sqrt(a.rad)-1;a.zoom=a.xd*a.xd+.796;a.rot=div(a.rad,7533);a.w=Math.sin(3*a.rad);a.cc=div(a.w*a.w*a.w*a.w*a.w*a.w*a.w*a.w*a.w*a.w*a.w*a.w*Math.sin(12*a.ang),5)+1;a.zoom=a.cc*a.zoom+.01;a.cr1=0;a.cr2=1;a.crx=a.cr2-a.cr1;a.ci=\na.rad;a.cb=.25;a.crs=2;a.cr=pow(div(Math.sin(6.3*a.ci-6.3*a.cb),2)+.5,a.crs)*a.crx+a.cr1;a.cqr=.00001<Math.abs(above(a.ci,.25+a.cb))?a.cr:a.crx+a.cr1;a.crr=.00001<Math.abs(below(a.ci,1.5))?a.cqr:a.crx+a.cr1;a.jx1=a.crr;a.kx1=1-a.crr;a.jdx=a.dx;a.jdy=a.dy;a.jsx=a.sx;a.jsy=a.sy;a.jrt=a.rot;a.jzm=a.zoom;a.jcx=a.cx;a.jcy=a.cy;a.jwp=a.warp;a.dx=a.jx1*a.jdx+a.kx1*a.kdx;a.dy=a.jx1*a.jdy+a.kx1*a.kdy;a.sx=a.jx1*a.jsx+a.kx1*a.ksx;a.sy=a.jx1*a.jsy+a.kx1*a.ksy;a.rot=a.jx1*a.jrt+a.kx1*a.krt;a.zoom=a.jx1*a.jzm+\na.kx1*a.kzm;a.cx=a.jx1*a.jcx+a.kx1*a.kcx;a.cy=a.jx1*a.jcy+a.kx1*a.kcy;a.warp=a.jx1*a.jwp+a.kx1*a.kwp;a.da=5+div(Math.sin(div(a.time,17)),10);a.nh=2;a.nh2=1;a.myx=-Math.floor(a.x*a.nh)+a.x*a.nh-.4;a.myy=-Math.floor(a.y*a.nh2)+a.y*a.nh2-.95+div(Math.sin(div(a.time,11)),22);a.myx=Math.sin(6.28*a.x);a.myy=a.y-.5;a.myx=1*a.x-.5;a.dx=2*-a.da*a.myx*a.myy;a.dy=a.da*(a.myy*a.myy-a.myx*a.myx);","init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.35*sin(0.4*time) + 0.15*sin(0.5*time);\nwave_g = wave_g + 0.35*sin(0.7*time) + 0.15*sin(0.11*time);\nwave_b = wave_b + 0.35*sin(0.84*time) + 0.15*sin(0.3*time);\nwarp = 0;\nwarp = warp + 0.15*(2.4*bass_att + 0.9*treb_att);","pixel_eqs_eel":"kdx=dx;\nkdy=dy;\nksx=sx;\nksy=sy;\nkrt=rot;\nkzm=zoom;\nkcx=cx;\nkcy=cy;\nkwp=warp;\n\ndx=0;\ndy=0;\nsx=1;\nsy=1;\nrot=0;\nzoom=1;\ncx=.5;\ncy=.5;\nwarp=0;\n\nxb=((1-x)+(1-y))*(-(1-x)-(1-y)+2)/1.1;\nxd=(x+y)-2+(x+y);\nxd=sqrt(rad)-1;\n//xd=abs(1-xd);\nzoom=xd*xd+.796;\nrot=rad/7533;\nw=sin(rad*3 );\ncc=w*w*w*w*w*w*w*w*w*w*w*w*sin(ang*12)/5 +1;\nzoom=cc*zoom+0.01;\ncr1=0;\ncr2=1;\ncrx=cr2-cr1;\nci=rad;\ncb=.25  ;\ncrs=2;\ncr=pow(sin(ci*6.3-(cb*6.3))/2+.5,crs)*crx+cr1;\ncqr=if( above (ci,.25+cb),cr,crx+cr1);crr=if( below(ci,1.5),cqr,crx+cr1);\njx1=crr;\nkx1=1-crr;\n\njdx=dx;\njdy=dy;\njsx=sx;\njsy=sy;\njrt=rot;\njzm=zoom;\njcx=cx;\njcy=cy;\njwp=warp;\n\ndx=(jx1*jdx+kx1*kdx);\ndy=(jx1*jdy+kx1*kdy);\nsx=(jx1*jsx+kx1*ksx);\nsy=(jx1*jsy+kx1*ksy);\nrot=(jx1*jrt+kx1*krt);\nzoom=(jx1*jzm+kx1*kzm);\ncx=(jx1*jcx+kx1*kcx);\ncy=(jx1*jcy+kx1*kcy);\nwarp=(jx1*jwp+kx1*kwp);\nda=5+sin(time/17) /10;\nnh=2;\nnh2=1;\nmyx=(-int(x*nh)+x*nh-.4);\nmyy=(-int(y*nh2)+y*nh2-.95+sin(time/11) /22);\nmyx=sin(x*6.28);\nmyy = y-.5;\nmyx = x*1-.5;\ndx = -da*(2*myx*myy);\ndy = da*((myy*myy) - (myx*myx));\n//dx=dx*sin(time/3) ;\n//dy=dy*sin(time/4) ;","warp":" shader_body { \n  vec2 zz_1;\n  mat2 tmpvar_2;\n  tmpvar_2[uint(0)] = _qa.xy;\n  tmpvar_2[1u] = _qa.zw;\n  zz_1 = (((\n    (uv - vec2(0.5, 0.5))\n   * texsize.xy) * 0.01) * tmpvar_2);\n  zz_1 = -(zz_1.yx);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ((texture (sampler_main, (uv + \n    (((clamp (\n      (sin(zz_1.yx) / cos(zz_1.yx))\n    , vec2(-8.0, -8.0), vec2(8.0, 8.0)) * cos(\n      (4.0 * zz_1)\n    )) * texsize.zw) * 16.0)\n  )).xyz * 0.99) - 0.01);\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  vec2 uv3_1;\n  vec2 uv2_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = ((uv - 0.5) * aspect.xy);\n  float tmpvar_4;\n  tmpvar_4 = (0.1 / (sqrt(\n    dot (tmpvar_3, tmpvar_3)\n  ) + 0.1));\n  vec2 tmpvar_5;\n  float tmpvar_6;\n  tmpvar_6 = (ang / 3.14);\n  tmpvar_5.x = tmpvar_6;\n  tmpvar_5.y = (q27 * tmpvar_4);\n  float tmpvar_7;\n  tmpvar_7 = (0.1 * q30);\n  uv2_2.y = (tmpvar_5.y + tmpvar_7);\n  uv2_2.x = (tmpvar_6 + (0.2 * time));\n  vec2 tmpvar_8;\n  tmpvar_8.x = tmpvar_6;\n  tmpvar_8.y = (4.0 * tmpvar_4);\n  uv3_1.x = tmpvar_8.x;\n  uv3_1.y = (tmpvar_8.y - tmpvar_7);\n  float tmpvar_9;\n  tmpvar_9 = clamp ((1.0 - (4.0 * rad)), 0.0, 1.0);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = (((\n    (3.0 * max (((2.0 * texture (sampler_main, \n      fract(uv2_2)\n    ).xyz) + texture (sampler_main, fract(uv3_1)).xyz), ((2.0 * \n      ((texture (sampler_blur2, fract(uv2_2)).xyz * scale2) + bias2)\n    ) + (\n      (texture (sampler_blur2, fract(uv3_1)).xyz * scale2)\n     + bias2))))\n   * rad) + (\n    ((vec3(0.0, 0.0, 1.0) * uv.y) * pow ((1.0 - rad), 8.0))\n   * tmpvar_9)) + ((tmpvar_9 * 2.0) * (\n    (texture (sampler_blur1, fract(uv)).xyz * scale1)\n   + bias1)));\n  ret = tmpvar_10.xyz;\n }","warp_hlsl":"shader_body {\nfloat corr = texsize.xy*texsize_noise_lq.zw;\nfloat2 uv1 = float2(uv.x-0.5,uv.y-0.5);//*aspect.xy;\n\n\nfloat2 zz = uv1 *texsize.xy *.01;\nzz =mul(zz,float2x2(_qa));\nzz = -zz.yx;\nfloat2 h1 = clamp(tan(zz.yx),-8,8) * cos(4*zz);\n\nuv += h1*texsize.zw * 16;\nfloat3 crisp = tex2D(sampler_main,uv);\n\nret = crisp*.99-.01;\n}","comp_hlsl":"shader_body\n{\nfloat2 uv1 = (uv-0.5)*aspect.xy;\n\nfloat rad2 = length(uv1) + .1;\nfloat rad1 = .1/rad2 ;\n\nfloat2 uv2 = float2 (ang/3.14, q27*rad1);\nuv2.y = uv2.y  +.1*q30;\nuv2.x = uv2.x  +.2*time;\n\nfloat2 uv3 = float2 (ang/3.14, 4*rad1);\nuv3.y = uv3.y  -.1*q30;\n\n\nfloat3 crisp = 2*GetPixel(frac(uv2)) + GetPixel(frac(uv3));\ncrisp = max(crisp,2*GetBlur2(frac(uv2)) + GetBlur2(frac(uv3)));\n\nfloat3 lay1 = float3 (0,0,1)*uv.y*pow(1-rad,8);\n\ncrisp = 3*crisp * pow(rad,1);\nfloat mask = saturate(1-4*rad);\n\nret = crisp + lay1*mask + mask * 2*GetBlur1(frac(uv));\n\n}"}