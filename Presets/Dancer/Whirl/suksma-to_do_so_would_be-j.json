{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.925,"echo_zoom":1.007,"echo_alpha":0.5,"echo_orient":3,"brighten":1,"solarize":1,"invert":1,"wave_a":0.001,"warpscale":1.772,"zoomexp":5.00873,"fshader":0.06,"zoom":1.011,"rot":0.003,"warp":0,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0.005,"ob_a":1,"ib_size":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"spectrum":1,"thick":1,"smoothing":0},"init_eqs_str":"a.q1=0;a.speed=0;a.q2=0;a.v=0;a.xs=0;a.ys=0;","frame_eqs_str":"","point_eqs_str":"a.q1=0;a.speed=Math.cos(a.q2)+.1*a.bass;a.v=1E3*a.sample+a.bass*a.value1;a.xs+=Math.sin(.1*a.v+a.time)*a.speed;a.ys+=Math.cos(1.2*a.v+a.q2)*a.speed;a.x=.5+.5*Math.cos(.04*a.xs+.2*a.time)*Math.sin(2*a.time+a.xs);a.y=.5+.5*Math.cos(.04*a.ys+.4*a.time)*Math.cos(a.q2+a.xs);a.r+=.5*Math.sin(4.22*a.time);a.g+=.5*Math.sin(4.307*a.time+(-.5-a.x)*(.5-a.y));a.b=a.g+.5*Math.sin(4.959*a.time);a.x=.75*a.x+.125;a.y=.75*a.y+.125;a.xs=.00001<Math.abs(above(a.xs,1E3))?0:a.xs;a.ys=.00001<Math.abs(above(a.ys,\n800))?0:a.ys;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//q1 = state;\n//q2 = basstime;\n\nq1 =0;\nspeed = 1*cos(q2) + bass*0.1;\nv = sample*1000 + bass*value1;\n\n//state 0 elipse\nxs = xs + sin(v*0.1 + time)*speed;\nys = ys + cos(v*1.2 + q2)*speed;\n\nx = 0.5 + 0.5*cos(xs*0.04 +0.2*time)*sin(time*2 + xs);\ny = 0.5 + 0.5*cos(ys*0.04 + 0.4*time)*cos(q2 + xs);\n\n\nr = r + 0.5*sin(time*4.22);\ng = g + 0.5*sin(time*4.307  + (-0.5-x)*(0.5-y));\nb = g + 0.5*sin(time*4.959);\n\nx = x*0.75 + 0.125;\ny = y*0.75 + 0.125;\n\nxs = if(above(xs,1000),0 ,xs);\nys = if(above(ys,800),0 ,ys);"},{"baseVals":{"spectrum":1,"thick":1,"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"//q1 = state;\n//q2 = basstime;\n\nq1 =0;\nspeed = 0.01*bass_att;\nv = sample*100 + (value1*bass);\n\n//state 0 elipse\nxs = xs + (equal(0,q1))*sin(v*0.1 + time)*speed;\nys = ys + (equal(0,q1))*cos(v*1.2 + time)*speed;\n\nx = 0.5 + 0.5*cos(xs*0.02 +0.1*time)*sin(time*2 + xs);\ny = 0.5 + 0.5*cos(ys*0.02 + 0.2*time)*cos(time + xs);\n\n\nr = r + 0.5*sin(time*5.52);\ng = g + 0.5*sin(time*5.107);\nb = g + 0.5*sin(time*5.359 + (-0.5-x)*(0.5-y));\n\nx = x*0.7 + 0.15;\ny = y*0.7 + 0.15;\n\nxs = if(above(xs,1000),0 ,xs);\nys = if(above(ys,800),0 ,ys);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//q1 = state;\n//q2 = basstime;\n\nq1 =0;\nspeed = 0.01*bass_att;\nv = sample*100 + (value1*bass);\n\n//state 0 elipse\nxs = xs + (equal(0,q1))*sin(v*0.1 + time)*speed;\nys = ys + (equal(0,q1))*cos(v*1.2 + time)*speed;\n\nx = 0.5 + 0.5*cos(xs*0.02 +0.1*time)*sin(time*2 + xs);\ny = 0.5 + 0.5*cos(ys*0.02 + 0.2*time)*cos(time + xs);\n\n\nr = r + 0.5*sin(time*5.52);\ng = g + 0.5*sin(time*5.107);\nb = g + 0.5*sin(time*5.359 + (-0.5-x)*(0.5-y));\n\nx = x*0.7 + 0.15;\ny = y*0.7 + 0.15;\n\nxs = if(above(xs,1000),0 ,xs);\nys = if(above(ys,800),0 ,ys);"},{"baseVals":{"spectrum":1,"thick":1,"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"//q1 = state;\n//q2 = basstime;\n\nq1 =0;\nspeed = 0.01*bass_att;\nv = sample*100 + (value1*bass);\n\n//state 0 elipse\nxs = xs + (equal(0,q1))*sin(v*0.1 + time)*speed;\nys = ys + (equal(0,q1))*cos(v*1.2 + time)*speed;\n\nx = 0.5 + 0.5*cos(xs*0.02 +0.1*time)*sin(time*2 + xs);\ny = 0.5 + 0.5*cos(ys*0.02 + 0.2*time)*cos(time + xs);\n\n\nr = r + 0.5*sin(time*5.62 + (-0.5-x)*(0.5-y));\ng = g + 0.5*sin(time*5.907);\nb = g + 0.5*sin(time*5.359);\n\nx = x*0.4 + 0.3;\ny = y*0.4 + 0.3;\n\nxs = if(above(xs,1000),0 ,xs);\nys = if(above(ys,800),0 ,ys);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//q1 = state;\n//q2 = basstime;\n\nq1 =0;\nspeed = 0.01*bass_att;\nv = sample*100 + (value1*bass);\n\n//state 0 elipse\nxs = xs + (equal(0,q1))*sin(v*0.1 + time)*speed;\nys = ys + (equal(0,q1))*cos(v*1.2 + time)*speed;\n\nx = 0.5 + 0.5*cos(xs*0.02 +0.1*time)*sin(time*2 + xs);\ny = 0.5 + 0.5*cos(ys*0.02 + 0.2*time)*cos(time + xs);\n\n\nr = r + 0.5*sin(time*5.62 + (-0.5-x)*(0.5-y));\ng = g + 0.5*sin(time*5.907);\nb = g + 0.5*sin(time*5.359);\n\nx = x*0.4 + 0.3;\ny = y*0.4 + 0.3;\n\nxs = if(above(xs,1000),0 ,xs);\nys = if(above(ys,800),0 ,ys);"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.q25=0;a.q12=0;a.q18=0;a.q22=0;a.q21=0;a.vt=0;a.q13=0;a.q15=0;a.q29=0;a.q6=0;a.q1=0;a.q5=0;a.vb=0;a.q9=0;a.v=0;a.mm=0;a.tt=0;a.q31=0;a.q23=0;a.q24=0;a.q11=0;a.q10=0;a.q4=0;a.q16=0;a.q26=0;a.t=0;a.q19=0;a.q17=0;a.bb=0;a.q2=0;a.q27=0;a.q14=0;a.q3=0;a.vvm=0;a.q32=0;a.vvb=0;a.q7=0;a.q28=0;a.vm=0;a.q30=0;a.q20=0;a.vvt=0;a.q8=0;","frame_eqs_str":"a.vb=.95*a.vb+(1-a.vb)*pow(a.bass*a.treb*a.mid,2)*.02;a.vvb=.95*a.vvb+(1-a.vvb)*a.vb*.01;a.vm=.95*a.vm+(1-a.vm)*pow(a.mid,2)*.02;a.vvm=.95*a.vvm+(1-a.vvm)*a.vm*.01;a.vt=.95*a.vt+(1-a.vt)*pow(a.treb,2)*.02;a.vvt=.95*a.vvt+(1-a.vvt)*a.vt*.01;a.vvb=Math.min(1,Math.max(0,a.vvb));a.vvm=Math.min(1,Math.max(0,a.vvm));a.vvt=Math.min(1,Math.max(0,a.vvt));a.q1=2*a.vvb;a.q2=2*a.vvm;a.q3=2*a.vvt;a.v=2;a.bb-=a.vvb*a.v;a.mm-=a.vvm*a.v;a.tt-=a.vvt*a.v;a.q4=-a.bb;a.q5=-a.mm;a.q6=-a.tt;a.q4=\n5*(a.q1+a.q2+a.q3);a.q5=5*(a.q1+a.q2+a.q3);a.q6=5*(a.q1+a.q2+a.q3);a.q7=5*(a.q1+a.q2+a.q3);a.q8=5*(a.q1+a.q2+a.q3);a.q9=5*(a.q1+a.q2+a.q3);a.q10=5*(a.q1+a.q2+a.q3);a.q11=5*(a.q1+a.q2+a.q3);a.q12=5*(a.q1+a.q2+a.q3);a.q13=5*(a.q1+a.q2+a.q3);a.q14=5*(a.q1+a.q2+a.q3);a.q15=5*(a.q1+a.q2+a.q3);a.q16=5*(a.q1+a.q2+a.q3);a.q17=5*(a.q1+a.q2+a.q3);a.q18=5*(a.q1+a.q2+a.q3);a.q19=5*(a.q1+a.q2+a.q3);a.q20=5*(a.q1+a.q2+a.q3);a.q21=5*(a.q1+a.q2+a.q3);a.q22=5*(a.q1+a.q2+a.q3);a.q23=5*(a.q1+a.q2+a.q3);a.q24=5*(a.q1+\na.q2+a.q3);a.q25=5*(a.q1+a.q2+a.q3);a.q26=5*(a.q1+a.q2+a.q3);a.q27=5*(a.q1+a.q2+a.q3);a.q28=5*(a.q1+a.q2+a.q3);a.q29=5*(a.q1+a.q2+a.q3);a.q30=5*(a.q1+a.q2+a.q3);a.q31=5*(a.q1+a.q2+a.q3);a.q32=5*(a.q1+a.q2+a.q3);a.t=12.3*a.time;a.rot+=.03*(.6*Math.sin(.38*a.time)+.4*Math.sin(.54*a.time));a.dx+=.002*(.6*Math.sin(.434*a.time)+.4*Math.sin(.277*a.time));a.dy+=.002*(.6*Math.sin(.384*a.time)+.4*Math.sin(.477*a.time));","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"vb = vb*0.95 + (1-vb)*pow(bass*treb*mid,2)*0.02;\nvvb = vvb*0.95 + (1-vvb)*vb*0.01;\nvm = vm*0.95 + (1-vm)*pow(mid,2)*0.02;\nvvm = vvm*0.95 + (1-vvm)*vm*0.01;\nvt = vt*0.95 + (1-vt)*pow(treb,2)*0.02;\nvvt = vvt*0.95 + (1-vvt)*vt*0.01;\nvvb = min(1,max(0,vvb));\nvvm = min(1,max(0,vvm));\nvvt = min(1,max(0,vvt));\nq1 = vvb*2;//0.5 + vb - vvb;\nq2 = vvm*2;//0.5 + vm - vvm;\nq3 = vvt*2;//0.5 + vt - vvt;\nv=2;\nbb = bb - vvb*v;\nmm = mm - vvm*v;\ntt = tt - vvt*v;\nq4 = -bb;\nq5 = -mm;\nq6 = -tt;\nq4=(q1+q2+q3)*5;\nq5=(q1+q2+q3)*5;\nq6=(q1+q2+q3)*5;\nq7=(q1+q2+q3)*5;\nq8=(q1+q2+q3)*5;\nq9=(q1+q2+q3)*5;\nq10=(q1+q2+q3)*5;\nq11=(q1+q2+q3)*5;\nq12=(q1+q2+q3)*5;\nq13=(q1+q2+q3)*5;\nq14=(q1+q2+q3)*5;\nq15=(q1+q2+q3)*5;\nq16=(q1+q2+q3)*5;\nq17=(q1+q2+q3)*5;\nq18=(q1+q2+q3)*5;\nq19=(q1+q2+q3)*5;\nq20=(q1+q2+q3)*5;\nq21=(q1+q2+q3)*5;\nq22=(q1+q2+q3)*5;\nq23=(q1+q2+q3)*5;\nq24=(q1+q2+q3)*5;\nq25=(q1+q2+q3)*5;\nq26=(q1+q2+q3)*5;\nq27=(q1+q2+q3)*5;\nq28=(q1+q2+q3)*5;\nq29=(q1+q2+q3)*5;\nq30=(q1+q2+q3)*5;\nq31=(q1+q2+q3)*5;\nq32=(q1+q2+q3)*5;\nt = time*12.3;\nrot = rot + 0.030*( 0.60*sin(0.38*time) + 0.40*sin(0.54*time) );\ndx = dx + 0.002*( 0.60*sin(0.434*time) + 0.40*sin(0.277*time) );\ndy = dy + 0.002*( 0.60*sin(0.384*time) + 0.40*sin(0.477*time) );","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  ret_1 = (tmpvar_2.xyz + ((tmpvar_2.xyz - \n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  ) * 0.3));\n  ret_1 = (ret_1 * 0.9);\n  ret_1 = (ret_1 + ((\n    (texture (sampler_noise_lq, ((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 0.1))).xyz - 0.5)\n   / 256.0) * 28.0));\n  vec3 tmpvar_3;\n  tmpvar_3 = mix (ret_1, vec3(dot (ret_1, vec3(0.32, 0.49, 0.29))), vec3(0.04, 0.04, 0.04));\n  ret_1 = tmpvar_3;\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = tmpvar_3;\n  ret = tmpvar_4.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  vec3 ret_2;\n  uv_1 = (0.5 + ((uv - 0.5) * 0.98));\n  vec2 tmpvar_3;\n  tmpvar_3 = (texsize.zw * 4.0);\n  vec3 tmpvar_4;\n  tmpvar_4 = (((texture (sampler_blur1, \n    (uv_1 + (vec2(1.0, 0.0) * tmpvar_3))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv_1 - (vec2(1.0, 0.0) * tmpvar_3))\n  ).xyz * scale1) + bias1));\n  vec3 tmpvar_5;\n  tmpvar_5 = (((texture (sampler_blur1, \n    (uv_1 + (vec2(0.0, 1.0) * tmpvar_3))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv_1 - (vec2(0.0, 1.0) * tmpvar_3))\n  ).xyz * scale1) + bias1));\n  vec3 tmpvar_6;\n  tmpvar_6.z = 0.0;\n  tmpvar_6.x = dot (tmpvar_4, vec3(0.32, 0.49, 0.29));\n  tmpvar_6.y = dot (tmpvar_5, vec3(0.32, 0.49, 0.29));\n  vec4 tmpvar_7;\n  tmpvar_7 = texture (sampler_noisevol_hq, ((vec3(0.05, 0.05, 0.0) * (\n    ((uv_1.xyy + (tmpvar_6 * 0.5)) * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + (vec3(0.0, 0.0, 0.2) * time)));\n  vec2 tmpvar_8;\n  tmpvar_8.x = dot (tmpvar_4, vec3(0.32, 0.49, 0.29));\n  tmpvar_8.y = dot (tmpvar_5, vec3(0.32, 0.49, 0.29));\n  uv_1 = (uv_1 - (tmpvar_8 * 0.04));\n  ret_2 = (abs((\n    ((texture (sampler_main, uv_1).xyz + ((texture (sampler_blur1, uv_1).xyz * scale1) + bias1)) - ((texture (sampler_blur2, uv_1).xyz * scale2) + bias2))\n   - \n    ((texture (sampler_blur3, uv_1).xyz * scale3) + bias3)\n  )) * (dot (tmpvar_7, vec4(0.32, 0.49, 0.29, 0.0)) * 3.0));\n  vec3 tmpvar_9;\n  tmpvar_9 = pow (ret_2, vec3(0.5, 0.5, 0.5));\n  ret_2 = tmpvar_9;\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = tmpvar_9;\n  ret = tmpvar_10.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_main, uv ).xyz;\n\n    // take the difference between the crisp and blurred images,\n    // then add it back into the image.  Creates spots and stripes over time.\n    ret += (ret - GetBlur1(uv))*0.3;\n    ret *= 0.9;\n\n   // add noise:\n   float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.1;// + rand_frame.xy;\n   ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0 * 28;\n\n   // desaturate over time, to keep the globs white\n   ret = lerp(ret, lum(ret), 0.04);\n}","comp_hlsl":"shader_body\n{\n\nuv = 0.5 + (uv-0.5)*0.98;\n    float2 d = texsize.zw*4;\n    float3 dx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );\n    float3 dy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );\n\nfloat4 noise = tex3D(sampler_noisevol_hq, ((uv.xyy+float3(lum(dx),lum(dy),0)*0.5)*texsize.xyy*texsize_noisevol_hq.zww).xyz*float3(1,1,0)*0.05\n                                        + time*float3(0,0,1)*0.2 );\nuv -= float2(lum(dx),lum(dy))*0.04;\nret = abs(GetPixel(uv)+GetBlur1(uv)-GetBlur2(uv)-GetBlur3(uv));\nret *= lum(noise)*3; \nret = pow(ret,0.5);\n}"}