{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":1,"darken":1,"wave_a":0.001,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0.015,"ob_a":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":4.95,"mv_r":0,"mv_a":0,"b2x":0.3,"b1ed":0},"shapes":[{"baseVals":{"textured":1,"rad":2.66718,"tex_zoom":0.45112,"g":1,"a":0.15,"g2":0,"a2":0.05,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"x":0.35,"y":0,"rad":0.09959,"tex_zoom":0.42497,"r":0,"b":1,"g2":0,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"y":0,"rad":0.10201,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"x":0.65,"y":0,"g":1,"b":1,"r2":1,"g2":0,"b2":1,"a2":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"spectrum":1,"thick":1,"additive":1,"r":0,"g":0,"b":0,"a":0.1},"init_eqs_str":"a.q1=0;a.speed=0;a.v=0;a.xs=0;a.ys=0;","frame_eqs_str":"","point_eqs_str":"a.q1=0;a.speed=.3*a.bass_att;a.v=1E4*a.sample+a.value2*a.bass*.1;a.xs+=Math.sin(.1*a.v+.1*Math.sin(a.v))*a.speed*Math.atan(1.51*a.v);a.ys+=Math.sin(.1*a.v+.1*Math.cos(a.v))*a.speed*Math.atan(a.v);a.x=.5+.5*Math.sin(.1*a.xs)*Math.cos(1*a.time+a.ys);a.y=.5+.5*Math.sin(.1*a.ys)*Math.cos(1.1*a.time+a.xs);a.r=.5+.5*Math.sin(.22*a.q1);a.g=.5+.5*Math.sin(.307*a.q1)+a.x;a.xs=.00001<Math.abs(above(a.xs,1E3))?0:a.xs;a.ys=.00001<Math.abs(above(a.ys,1E3))?0:a.ys;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//q1 = state;\n//q2 = basstime;\n\nq1 = 0;\nspeed = bass_att*0.3;\nv = sample*10000 + value2*bass*0.1;\n\n//state 0 elipse\nxs = xs + sin(v*0.1 + sin(v)*0.1)*speed*atan(v*1.51);\nys = ys + sin(v*0.1 + cos(v)*0.1)*speed*atan(v);\n\nx = 0.5 + 0.5*sin(xs*0.1)*cos(time*1 + ys);\ny = 0.5 + 0.5*sin(ys*0.1)*cos(time*1.1 + xs);\n\n\nr = 0.5 + 0.5*sin(q1*0.22);\ng = 0.5 + 0.5*sin(q1*0.307) + x;\n//b = 0.4 + 0.4*sin(time*0.959);\n\n\nxs = if(above(xs,1000),0 ,xs);\nys = if(above(ys,1000),0 ,ys);"},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"//apply zoom burst on beat\nflag = above(q3,2);\n//state zero is ready state\nstate = state + flag*equal(state,0);\n\n//upwards flight\nyval = if(equal(state,0),0, yval);\nyval = yval + 0.00004*equal(state,1);\nymax = if(equal(state,0),rand(100)*0.004,ymax);\n\n//hit apogee\nstate = if(above(yval,0.5+ymax),2,state);\n\n//reset variable\nyval = if(equal(state,0),0, yval);\nburst = if(equal(state,0),0.001,burst);\nalphax = if(equal(state,0),1,alphax);\nxdriftinc = if(equal(state,0),0,xdriftinc);\n\nburstspeed = if(equal(state,0),rand(10),burstspeed);\nxdrift = if(equal(state,0),rand(20),xdrift);\n//to get the numbers small enough have to use constants\nxdriftinc = xdriftinc\n+ equal(xdrift,0)*equal(state,1)*0.00002\n+ equal(xdrift,1)*equal(state,1)*0.000018\n+ equal(xdrift,2)*equal(state,1)*0.000016\n+ equal(xdrift,3)*equal(state,1)*0.000014\n+ equal(xdrift,4)*equal(state,1)*0.000012\n+ equal(xdrift,5)*equal(state,1)*0.00001\n+ equal(xdrift,6)*equal(state,1)*0.000008\n+ equal(xdrift,7)*equal(state,1)*0.000006\n+ equal(xdrift,8)*equal(state,1)*0.000004\n+ equal(xdrift,9)*equal(state,1)*0.000002\n+ equal(xdrift,11)*equal(state,1)*-0.000002\n+ equal(xdrift,12)*equal(state,1)*-0.000004\n+ equal(xdrift,13)*equal(state,1)*-0.000006\n+ equal(xdrift,14)*equal(state,1)*-0.000008\n+ equal(xdrift,15)*equal(state,1)*-0.00001\n+ equal(xdrift,16)*equal(state,1)*-0.000012\n+ equal(xdrift,17)*equal(state,1)*-0.000014\n+ equal(xdrift,18)*equal(state,1)*-0.000016\n+ equal(xdrift,19)*equal(state,1)*-0.000018;\n\nburst = burst\n+ equal(burstspeed,0)*equal(state,2)*0.000024\n+ equal(burstspeed,1)*equal(state,2)*0.000022\n+ equal(burstspeed,2)*equal(state,2)*0.00002\n+ equal(burstspeed,3)*equal(state,2)*0.000018\n+ equal(burstspeed,4)*equal(state,2)*0.000016\n+ equal(burstspeed,5)*equal(state,2)*0.000014\n+ equal(burstspeed,6)*equal(state,2)*0.000012\n+ equal(burstspeed,7)*equal(state,2)*0.00001\n+ equal(burstspeed,8)*equal(state,2)*0.000008\n+ equal(burstspeed,9)*equal(state,2)*0.000008;\n\nalphax = alphax - 0.00004*equal(state,2);\nstate = if(below(alphax,0),0,state);\n\n\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw torus\nxs = (burst + 0.0001*cos(s))*cos(ss);\nys = (burst + 0.0001*cos(s))*sin(ss);\nzs = 0.1*burst*sin(s);\n\n\n//rotate x axis\nangle = sin(-q1*0.035)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(-q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(-q1*0.022)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2;\n\n\nx = x + xdriftinc;\ny = y + sin(yval*1.5) - 0.18;\n\n\nr = 0.5 + 0.5*sin(q1*1.3 + x + x);\ng = 0.5 + 0.5*sin(q1*1.1 + x + y);\nb = 0.5 + 0.5*sin(q1*1.66 + y + y);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//apply zoom burst on beat\nflag = above(q3,2);\n//state zero is ready state\nstate = state + flag*equal(state,0);\n\n//upwards flight\nyval = if(equal(state,0),0, yval);\nyval = yval + 0.00004*equal(state,1);\nymax = if(equal(state,0),rand(100)*0.004,ymax);\n\n//hit apogee\nstate = if(above(yval,0.5+ymax),2,state);\n\n//reset variable\nyval = if(equal(state,0),0, yval);\nburst = if(equal(state,0),0.001,burst);\nalphax = if(equal(state,0),1,alphax);\nxdriftinc = if(equal(state,0),0,xdriftinc);\n\nburstspeed = if(equal(state,0),rand(10),burstspeed);\nxdrift = if(equal(state,0),rand(20),xdrift);\n//to get the numbers small enough have to use constants\nxdriftinc = xdriftinc\n+ equal(xdrift,0)*equal(state,1)*0.00002\n+ equal(xdrift,1)*equal(state,1)*0.000018\n+ equal(xdrift,2)*equal(state,1)*0.000016\n+ equal(xdrift,3)*equal(state,1)*0.000014\n+ equal(xdrift,4)*equal(state,1)*0.000012\n+ equal(xdrift,5)*equal(state,1)*0.00001\n+ equal(xdrift,6)*equal(state,1)*0.000008\n+ equal(xdrift,7)*equal(state,1)*0.000006\n+ equal(xdrift,8)*equal(state,1)*0.000004\n+ equal(xdrift,9)*equal(state,1)*0.000002\n+ equal(xdrift,11)*equal(state,1)*-0.000002\n+ equal(xdrift,12)*equal(state,1)*-0.000004\n+ equal(xdrift,13)*equal(state,1)*-0.000006\n+ equal(xdrift,14)*equal(state,1)*-0.000008\n+ equal(xdrift,15)*equal(state,1)*-0.00001\n+ equal(xdrift,16)*equal(state,1)*-0.000012\n+ equal(xdrift,17)*equal(state,1)*-0.000014\n+ equal(xdrift,18)*equal(state,1)*-0.000016\n+ equal(xdrift,19)*equal(state,1)*-0.000018;\n\nburst = burst\n+ equal(burstspeed,0)*equal(state,2)*0.000024\n+ equal(burstspeed,1)*equal(state,2)*0.000022\n+ equal(burstspeed,2)*equal(state,2)*0.00002\n+ equal(burstspeed,3)*equal(state,2)*0.000018\n+ equal(burstspeed,4)*equal(state,2)*0.000016\n+ equal(burstspeed,5)*equal(state,2)*0.000014\n+ equal(burstspeed,6)*equal(state,2)*0.000012\n+ equal(burstspeed,7)*equal(state,2)*0.00001\n+ equal(burstspeed,8)*equal(state,2)*0.000008\n+ equal(burstspeed,9)*equal(state,2)*0.000008;\n\nalphax = alphax - 0.00004*equal(state,2);\nstate = if(below(alphax,0),0,state);\n\n\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw torus\nxs = (burst + 0.0001*cos(s))*cos(ss);\nys = (burst + 0.0001*cos(s))*sin(ss);\nzs = 0.1*burst*sin(s);\n\n\n//rotate x axis\nangle = sin(-q1*0.035)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(-q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(-q1*0.022)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2;\n\n\nx = x + xdriftinc;\ny = y + sin(yval*1.5) - 0.18;\n\n\nr = 0.5 + 0.5*sin(q1*1.3 + x + x);\ng = 0.5 + 0.5*sin(q1*1.1 + x + y);\nb = 0.5 + 0.5*sin(q1*1.66 + y + y);"}],"init_eqs_str":"a.xang=0;a.fov=0;a.hell=0;a.cbeat=0;a.index2=0;a.bindex=0;a.ran4=0;a.index=0;a.yang=0;a.q29=0;a.q6=0;a.amp_=0;a.xlen=0;a.smooth=0;a.q1=0;a.dec_med=0;a.sum=0;a.q5=0;a.dec_f=0;a.trely=0;a.flen=0;a.reg01=0;a.my=0;a.oz=0;a.imag=0;a.is_beat=0;a.yind=0;a.oy0a=0;a.dec_slow=0;a.ran2=0;a.ind=0;a.z0=0;a.ylen=0;a.real=0;a.ran3=0;a.q4=0;a.mz=0;a.oy0=0;a.amp=0;a.tc0=0;a.oy=0;a.avg=0;a.mx=0;a.vol=0;a.peak=0;a.decc=0;a.q2=0;a.bd_bt=0;a.zang=0;a.q3=0;a.reg00=0;a.trelz=0;a.q32=0;a.q28=0;a.trelx=\n0;a.q30=0;a.ox=0;a.xind=0;for(var b=a.index=0;7E4>b;b++)a.megabuf[Math.floor(a.index)]=0,a.gmegabuf[Math.floor(a.index)]=0,a.index+=1;a.zang=1;a.yang=0;a.zang=2;","frame_eqs_str":"a.xlen=45;a.ylen=45;a.flen=20;a.reg00=div(a.xlen*a.ylen,4);a.reg01=div(a.reg00,4);a.dec_med=1-div(.06*30,a.fps);a.dec_slow=1-div(.6,a.fps);a.dec_f=pow(.8,div(30,a.fps));a.q30=a.dec_slow;a.smooth=Math.max(1,pow(6,div(a.fps,30))-2);a.cbeat=a.bass+a.mid+a.treb;a.decc=.00001<Math.abs(a.vol>a.cbeat?1:0)?.8:a.dec_med;a.vol=a.vol*a.decc+(1-a.decc)*a.cbeat;a.avg=a.avg*a.dec_slow+a.cbeat*(1-a.dec_slow);a.is_beat=above(a.cbeat,1.5*a.avg)*above(a.time,a.tc0+.2);a.tc0=.00001<Math.abs(bor(a.is_beat,\na.bd_bt))?a.time:a.tc0;a.peak=.00001<Math.abs(a.is_beat)?a.cbeat:a.peak*a.dec_med;a.ind=0;a.sum=0;a.amp=.01;for(var b=0;b<a.reg01;b++)a.sum+=div(a.gmegabuf[Math.floor(a.ind+3E4)],a.reg01),a.amp+=pow(a.gmegabuf[Math.floor(a.ind+3E4)],2),a.ind+=1;a.ind=0;a.amp_=a.amp_*a.dec_med+600*div((1-a.dec_med)*sqrt(a.amp),a.reg01);for(b=0;b<a.reg01;b++)a.megabuf[Math.floor(a.ind+3E4)]=div(a.gmegabuf[Math.floor(a.ind+3E4)]-a.sum,a.amp_),a.ind+=1;for(b=a.index2=0;b<a.flen;b++){a.index=0;a.real=0;for(var c=a.imag=\n0;c<a.flen;c++)a.real+=Math.cos(6.28*div(a.index,a.flen)*a.index2)*a.megabuf[Math.floor(div(a.index*a.reg01,8)+30002)],a.imag+=Math.sin(6.28*div(a.index,a.flen)*a.index2)*a.megabuf[Math.floor(div(a.index*a.reg01,8)+30002)],a.index+=1;a.megabuf[Math.floor(1E4+a.index2)]=a.megabuf[Math.floor(1E4+a.index2)]*a.dec_f+a.real;a.megabuf[Math.floor(15E3+a.index2)]=a.megabuf[Math.floor(15E3+a.index2)]*a.dec_f+a.imag;a.index2+=1}a.ind=1;for(b=0;b<div(a.flen,2);b++){a.cx=a.megabuf[Math.floor(1E4+a.ind)];a.cy=\na.megabuf[Math.floor(15E3+a.ind)];a.yind=-1;for(c=0;3>c;c++){a.xind=-1;for(var d=0;3>d;d++)a.ox=mod((a.cx+.5)*a.xlen+a.xind,a.xlen),a.oy=mod((a.cy+.5)*a.ylen+a.yind,a.ylen),a.amp=3*(a.cx*a.cx+a.cy*a.cy),a.megabuf[Math.floor(a.oy*a.ylen+a.ox)]-=div(div(60,a.fps)*sqrt(a.amp)*above(a.amp,.02),1+a.xind*a.xind+a.yind*a.yind),a.xind+=1;a.yind+=1}a.ind+=1}for(b=a.yind=0;b<a.ylen;b++){for(c=a.xind=0;c<a.xlen;c++)a.megabuf[Math.floor(a.yind*a.ylen+a.xind+5E3)]=a.dec_med*(div(a.gmegabuf[Math.floor(a.yind*a.ylen+\nmod(a.xind+1,a.xlen))]+a.gmegabuf[Math.floor(a.yind*a.ylen+mod(a.xlen+a.xind-1,a.xlen))]+a.gmegabuf[Math.floor(mod(a.yind+1,a.ylen)*a.ylen+a.xind)]+a.gmegabuf[Math.floor(mod(a.yind+a.ylen-1,a.ylen)*a.ylen+a.xind)]+a.gmegabuf[Math.floor(a.yind*a.ylen+a.xind)]*a.smooth*4,2+2*a.smooth)-a.megabuf[Math.floor(a.yind*a.ylen+a.xind)]),a.xind+=1;a.yind+=1}a.bindex+=a.is_beat;.00001<Math.abs(a.is_beat&&.00001>Math.abs(mod(a.bindex,4)-0)?1:0)?a.ran2=div(rand(100)-50,50):0;.00001<Math.abs(a.is_beat&&.00001>Math.abs(mod(a.bindex,\n4)-2)?1:0)?a.ran3=div(rand(100)-50,50):0;.00001<Math.abs(a.is_beat&&.00001>Math.abs(mod(a.bindex,6)-5)?1:0)?a.ran4=div(rand(100)-50,50):0;a.trelx+=div(div(a.ran2,a.fps),18);a.trely+=div(div(a.ran3,a.fps),2);a.trelz+=div(div(a.ran4,a.fps),6);a.zang=6*Math.sin(a.trelz);a.xang=6*Math.sin(div(a.zang,5)+a.trelx);a.yang=6*Math.sin(0*div(a.zang,3)+a.trely);a.q1=Math.cos(a.xang);a.q2=Math.sin(a.xang);a.q3=Math.cos(a.yang);a.q4=Math.sin(a.yang);a.q5=Math.cos(a.zang);a.q6=Math.sin(a.zang);a.fov=1;for(b=a.yind=\n0;b<a.ylen;b++){for(c=a.xind=0;c<a.xlen;c++)a.ind=a.yind*a.ylen+a.xind,a.megabuf[Math.floor(a.ind)]=a.gmegabuf[Math.floor(a.ind)],a.gmegabuf[Math.floor(a.ind)]=a.megabuf[Math.floor(a.ind+5E3)],a.oz=a.yind-div(a.ylen,2),a.ox=.00001<Math.abs(bnot(mod(a.yind,2)))?a.xind:a.xlen-a.xind-1,a.oy0a=div(a.oy0+a.oy0a,2.5),a.oy=a.gmegabuf[Math.floor(a.yind*a.ylen+a.ox)],a.oy0=a.oy,a.ox-=div(a.xlen,2),a.mx=a.ox*a.q5-a.oy*a.q6,a.my=a.ox*a.q6+a.oy*a.q5,a.ox=a.mx,a.oy=a.my,a.mx=a.ox*a.q3+a.oz*a.q4,a.mz=-a.ox*a.q4+\na.oz*a.q3,a.ox=a.mx,a.oz=a.mz,a.my=a.oy*a.q1-a.oz*a.q2,a.mz=a.oy*a.q2+a.oz*a.q1,a.z0=10*Math.sin(14*a.trelz),a.oy=a.my,a.oz=a.mz+a.z0,a.gmegabuf[Math.floor(1E4+a.ind)]=div(a.fov*a.ox,a.oz+60*a.fov)+.5,a.gmegabuf[Math.floor(15E3+a.ind)]=div(a.fov*a.oy,a.oz+60*a.fov)+.5,a.hell=Math.max(Math.min(.5+div(a.oy0,4),1),.2),a.gmegabuf[Math.floor(2E4+a.ind)]=Math.max(Math.min(a.hell*(.5+.1*(a.oy0a-a.oy0)),1),.1),a.gmegabuf[Math.floor(25E3+a.ind)]=div(a.oy0,16)+.5,a.xind+=1;a.yind+=1}a.q29=div(10,a.z0+15);a.q32=\na.aspecty;a.q28=Math.min(div(a.vol,3)-.25,1);a.monitor=a.q28;","pixel_eqs_str":"a.rot=0;a.zoom=1.1;a.warp=0;a.dy=.02;","init_eqs_eel":"index = 0;\nloop (70000,\n  megabuf(index) = 0;\n  gmegabuf(index) = 0;\n  index = index + 1;\n);\n\nzang = 1;\n\nyang = 0;\nzang = 2;","frame_eqs_eel":"xlen = 45; ylen = 45; flen = 20; reg00 = xlen*ylen/4; reg01=reg00/4;\ndec_med = 1-0.06*30/fps; dec_slow = 1-0.02*30/fps; dec_f = pow (0.8, 30/fps);\nq30 = dec_slow;\nsmooth = max(1,pow(6,fps/30)-2); // >= 0; Ausbreitungsgeschwindigkeit\n\n//\"Classic\" beat reaction\ncbeat = bass+mid+treb;\ndecc = if (vol>cbeat,0.8,dec_med);\nvol  = vol * decc + (1-decc)*cbeat;\navg = avg*dec_slow + cbeat*(1-dec_slow);\nis_beat = above(cbeat, 1.5*avg) * above (time, tc0+.2);\ntc0 = if (bor(is_beat, bd_bt),time,tc0);\npeak = if (is_beat,cbeat,peak*dec_med);\n\n\n//Gleichanteil entfernen und normalisieren\nind = 0; sum = 0; amp = 0.01;\nloop (reg01,\n  sum = sum + gmegabuf(ind+30000)/(reg01);\n  amp = amp + pow(gmegabuf(ind+30000),2);\n  ind = ind+1;\n); \nind = 0; amp_= amp_*dec_med + (1-dec_med)*sqrt(amp)/reg01*600;\nloop (reg01,\n  megabuf(ind+30000)= (gmegabuf(ind+30000)-sum)/amp_;\n  ind = ind+1;\n);\n \n// Spectrum of spectrum  !\nindex2 = 0;\nloop(flen, //Frequency step\n  index=0; real= 0; imag = 0;\n  loop (flen,\n    real = real + cos(index/flen*6.28*index2)*megabuf(index*reg01/8+30002);\n    imag = imag + sin(index/flen*6.28*index2)*megabuf(index*reg01/8+30002);\n    index=index+1;\n  );\n  megabuf(10000+index2)= megabuf(10000+index2) * dec_f + real;\n  megabuf(15000+index2)= megabuf(15000+index2) * dec_f + imag;\n  index2 = index2+1;\n );\n\n//Anregung\nind = 1;\nloop (flen/2,\n  cx = megabuf(10000+ind);\n  cy = megabuf(15000+ind);\n  yind = -1;\n  loop (3,\n    xind = -1;\n    loop (3,\n      ox = ((cx+.5)*xlen+xind)%xlen;\n      oy = ((cy+.5)*ylen+yind)%ylen;\n      amp = (cx*cx+cy*cy)*3;\n      megabuf (oy*ylen+ox) = megabuf (oy*ylen+ox) \n                           - 2*30/fps*sqrt(amp)*above(amp,.02)/(1+xind*xind+yind*yind);\n      xind = xind+1;\n    );\n    yind = yind+1;\n  );\n  ind = ind+1;\n);\n\n//Simulation\nyind = 0;\nloop (ylen,\n  xind = 0;\n  loop (xlen,\n    megabuf(yind*ylen+xind+5000) = //megabuf ab 5000 ist nur Zwischenspeicher\n    dec_med*((gmegabuf(yind*ylen+(xind+1)%xlen) +\n    gmegabuf(yind*ylen+(xlen+xind-1)%xlen) + \n    gmegabuf(((yind+1)%ylen)*ylen+xind) + \n    gmegabuf(((yind+ylen-1)%ylen)*ylen+xind)\n    +gmegabuf(yind*ylen+xind)*smooth*4)/(2+2*smooth) - megabuf(yind*ylen+xind)); \n    xind = xind+1;\n  );\n  yind = yind+1;\n);\n\n//Projektionsparameter\n\nbindex += is_beat;\n\nif (is_beat && (bindex%4==0), ran2 = (rand(100)-50)/50,0 );\nif (is_beat && (bindex%4==2), ran3 = (rand(100)-50)/50,0 );\nif (is_beat && (bindex%6==5), ran4 = (rand(100)-50)/50,0 );\n\ntrelx += ran2/fps/18;\ntrely += ran3/fps/2;\ntrelz += ran4/fps/6;\nzang = 6*sin(trelz);\nxang = 6*sin(zang/5+trelx);\nyang = 6*sin(zang/3*0+trely);\n\nq1 = cos(xang);q2 = sin(xang);q3 = cos(yang);\nq4 = sin(yang);q5 = cos(zang);q6 = sin(zang);\nfov = 1;\n\n//Umkopieren und Projektion\nyind = 0;\nloop (ylen,\n  xind = 0;\n  loop (xlen,\n    ind = yind*ylen+xind;\n    megabuf(ind) = gmegabuf(ind); \n    gmegabuf(ind) = megabuf(ind+5000); \n    oz = yind - ylen/2; //#\n    ox = if(bnot(yind%2),xind,xlen-xind-1);\n    oy0a = (oy0+oy0a)/2.5;\n    oy = gmegabuf(yind*ylen+ox); oy0 = oy;\n    ox = ox - xlen/2;  \n    mx = ox*q5 - oy*q6;  my = ox*q6 + oy*q5;\n    ox = mx; oy = my;  \n    mx = ox*q3 + oz*q4;  mz = - ox*q4 + oz*q3;\n    ox = mx; oz = mz;  \n    my = oy*q1 - oz*q2;  mz = oy*q2 + oz*q1;\n    z0 = (10*sin(trelz*14));\n    oy = my; oz = mz+z0;\n    gmegabuf(10000+ind) = fov*ox/(oz+60*fov)+.5;\n    gmegabuf(15000+ind) = fov*oy/(oz+60*fov)+.5;\n    hell= max(min(.5+oy0/4,1),0.2); //Helligkeit\n    gmegabuf(20000+ind) = max(min(hell* (.5+ (oy0a-oy0)*0.1),1),0.1);\n    gmegabuf(25000+ind) = oy0/16+.5;;\n    xind = xind+1;\n  );\n  yind = yind+1;\n);\n\nq29 = 10/(z0+15);\nq32 = aspecty;\nq28 = min (vol/3-0.25,1);\nmonitor = q28;","pixel_eqs_eel":"rot = 0; zoom = 1.1; warp = 0; dy = 0.02;","warp":" shader_body { \n  vec2 my_uv_1;\n  vec3 ret_2;\n  float tmpvar_3;\n  tmpvar_3 = (((texture (sampler_blur2, \n    (uv + vec2(0.005, 0.0))\n  ).xyz * scale2) + bias2) - ((texture (sampler_blur2, \n    (uv - vec2(0.005, 0.0))\n  ).xyz * scale2) + bias2)).y;\n  float tmpvar_4;\n  tmpvar_4 = (((texture (sampler_blur2, \n    (uv + vec2(0.0, 0.005))\n  ).xyz * scale2) + bias2) - ((texture (sampler_blur2, \n    (uv - vec2(0.0, 0.005))\n  ).xyz * scale2) + bias2)).y;\n  vec2 tmpvar_5;\n  tmpvar_5.x = tmpvar_3;\n  tmpvar_5.y = tmpvar_4;\n  vec2 tmpvar_6;\n  tmpvar_6 = (uv - (tmpvar_5 * 0.01));\n  ret_2.y = texture (sampler_fc_main, (tmpvar_6 - floor(tmpvar_6))).y;\n  ret_2.y = (ret_2.y + ((ret_2.y - \n    ((texture (sampler_blur3, (tmpvar_6 - floor(tmpvar_6))).xyz * scale3) + bias3)\n  .y) * 0.1));\n  vec2 tmpvar_7;\n  tmpvar_7 = floor(uv);\n  ret_2.y = (ret_2.y + (0.006 - (\n    ((texture (sampler_blur3, (uv - tmpvar_7)).xyz * scale3) + bias3)\n  .x * 5.0)));\n  ret_2.y = ret_2.y;\n  vec2 tmpvar_8;\n  tmpvar_8.x = -(tmpvar_4);\n  tmpvar_8.y = tmpvar_3;\n  my_uv_1 = (tmpvar_8 * 0.05);\n  vec2 tmpvar_9;\n  tmpvar_9.x = (((texture (sampler_blur2, \n    (uv + vec2(0.01, 0.0))\n  ).xyz * scale2) + bias2) - ((texture (sampler_blur2, \n    (uv - vec2(0.01, 0.0))\n  ).xyz * scale2) + bias2)).z;\n  tmpvar_9.y = (((texture (sampler_blur2, \n    (uv + vec2(0.0, 0.01))\n  ).xyz * scale2) + bias2) - ((texture (sampler_blur2, \n    (uv - vec2(0.0, 0.01))\n  ).xyz * scale2) + bias2)).z;\n  my_uv_1 = (my_uv_1 + (uv - (tmpvar_9 * 0.005)));\n  ret_2.z = texture (sampler_fw_main, (my_uv_1 - floor(my_uv_1))).z;\n  ret_2.z = (ret_2.z + ((ret_2.z - \n    ((texture (sampler_blur3, (my_uv_1 - floor(my_uv_1))).xyz * scale3) + bias3)\n  .z) * 0.13));\n  ret_2.z = (ret_2.z * 0.95);\n  ret_2.z = (ret_2.z + ((0.03 - \n    ((texture (sampler_blur3, (uv - tmpvar_7)).xyz * scale3) + bias3)\n  .x) - (texture (sampler_main, \n    (my_uv_1 - floor(my_uv_1))\n  ).y * 0.05)));\n  ret_2.x = (texture (sampler_main, uv_orig).x - 0.3);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = ret_2;\n  ret = tmpvar_10.xyz;\n }","comp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1 = (texsize.zw * 4.0);\n  vec3 tmpvar_2;\n  tmpvar_2 = (((2.0 * \n    ((texture (sampler_blur1, (uv + (vec2(1.0, 0.0) * tmpvar_1))).xyz * scale1) + bias1)\n  ) - (2.0 * \n    ((texture (sampler_blur1, (uv - (vec2(1.0, 0.0) * tmpvar_1))).xyz * scale1) + bias1)\n  )) * 0.5);\n  vec3 tmpvar_3;\n  tmpvar_3 = (((2.0 * \n    ((texture (sampler_blur1, (uv + (vec2(0.0, 1.0) * tmpvar_1))).xyz * scale1) + bias1)\n  ) - (2.0 * \n    ((texture (sampler_blur1, (uv - (vec2(0.0, 1.0) * tmpvar_1))).xyz * scale1) + bias1)\n  )) * 0.5);\n  vec2 tmpvar_4;\n  tmpvar_4.x = tmpvar_2.y;\n  tmpvar_4.y = tmpvar_3.y;\n  vec2 tmpvar_5;\n  tmpvar_5.x = tmpvar_2.y;\n  tmpvar_5.y = tmpvar_3.y;\n  vec2 x_6;\n  x_6 = -((uv + (tmpvar_4 * 0.5)));\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = mix (vec3(1.0, 0.6, 0.0), vec3(0.0, -0.5, 0.0), vec3(((\n    (1.0 - texture (sampler_main, (uv + (tmpvar_5 * 0.03))).y)\n   - 1.0) + sqrt(\n    dot (x_6, x_6)\n  ))));\n  ret = tmpvar_7.xyz;\n }","warp_hlsl":"shader_body\n{\n    float1 d = 0.005;\n    float1 dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).y;\n    float1 dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).y;\n    float2 my_uv = uv - float2(dx,dy)*0.01;\n\n\n\n    float2 v = 0.01;\n    ret.y = tex2D( sampler_fc_main, my_uv-floor(my_uv)).y;\n\n    \n    ret.y += (ret.y - GetBlur3(my_uv-floor(my_uv)).y)*.1;\n    ret.y += 0.006-GetBlur3(uv-floor(uv)).x*5;\n\n    ret.y = lerp( ret.y, lum(ret).x, 0);\n\n//--------------------------------\n\n    d = 0.01;\n    my_uv = float2(-dy,dx)*0.05;\n\n    dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).z;\n    dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).z;\n    my_uv += uv - float2(dx,dy)*0.005;\n\n\n\n    v = 0.01;\n    ret.z =tex2D( sampler_fw_main, my_uv - floor(my_uv)).z;\n\n    \n    ret.z += (ret.z - GetBlur3(my_uv-floor(my_uv)).z)*0.13;\n    ret.z *= 0.95;\n    ret.z += 0.03-GetBlur3(uv-floor(uv)).x - tex2D( sampler_main, my_uv - floor(my_uv)).y*0.05;\n\n    ret.x = tex2D( sampler_main, uv_orig).x - 0.3;\n}","comp_hlsl":"shader_body\n{\n    float2 d = texsize.zw*4;\n    float3 dx = ( 2*GetBlur1(uv+float2(1,0)*d)-2*GetBlur1(uv-float2(1,0)*d) )*0.5;\n    float3 dy = ( 2*GetBlur1(uv+float2(0,1)*d)-2*GetBlur1(uv-float2(0,1)*d) )*0.5;\n    float2 uv_y = uv+float2(dx.y,dy.y)*0.5;\n\nret = GetPixel(uv+float2(dx.y,dy.y)*0.03).y;\nret = lerp(float3(1,0.6,0),float3(0.,-0.5,0),(1-ret.y)*1-1  + length(0-uv_y));\n\n//ret = GetPixel(uv);\n}\n"}