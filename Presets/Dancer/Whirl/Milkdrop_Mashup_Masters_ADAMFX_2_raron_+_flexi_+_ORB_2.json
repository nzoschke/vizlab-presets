{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.995,"echo_zoom":1.007,"echo_orient":1,"wave_mode":1,"wave_a":0.001,"warpscale":1.772,"zoomexp":1.96,"zoom":0.9997,"warp":0.513,"wave_r":0,"wave_g":0,"wave_b":0,"ob_a":0.58,"ib_size":0.015,"ib_r":0.55,"ib_g":1,"ib_b":0.5,"ib_a":0.23,"mv_x":64,"mv_y":48,"mv_l":4.95,"mv_r":0,"mv_a":0},"shapes":[{"baseVals":{"textured":1,"rad":2.66718,"tex_zoom":0.45112,"g":1,"a":0.15,"g2":0,"a2":0.05,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"x":0.35,"y":0,"rad":0.09959,"tex_zoom":0.42497,"r":0,"b":1,"g2":0,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"y":0,"rad":0.10201,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"x":0.65,"y":0,"g":1,"b":1,"r2":1,"g2":0,"b2":1,"a2":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"spectrum":1,"thick":1,"additive":1,"r":0,"g":0,"b":0,"a":0.1},"init_eqs_str":"a.q1=0;a.speed=0;a.v=0;a.xs=0;a.ys=0;","frame_eqs_str":"","point_eqs_str":"a.q1=0;a.speed=.3*a.bass_att;a.v=1E4*a.sample+a.value2*a.bass*.1;a.xs+=Math.sin(.1*a.v+.1*Math.sin(a.v))*a.speed*Math.atan(1.51*a.v);a.ys+=Math.sin(.1*a.v+.1*Math.cos(a.v))*a.speed*Math.atan(a.v);a.x=.5+.5*Math.sin(.1*a.xs)*Math.cos(1*a.time+a.ys);a.y=.5+.5*Math.sin(.1*a.ys)*Math.cos(1.1*a.time+a.xs);a.r=.5+.5*Math.sin(.22*a.q1);a.g=.5+.5*Math.sin(.307*a.q1)+a.x;a.xs=.00001<Math.abs(above(a.xs,1E3))?0:a.xs;a.ys=.00001<Math.abs(above(a.ys,1E3))?0:a.ys;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//q1 = state;\n//q2 = basstime;\n\nq1 = 0;\nspeed = bass_att*0.3;\nv = sample*10000 + value2*bass*0.1;\n\n//state 0 elipse\nxs = xs + sin(v*0.1 + sin(v)*0.1)*speed*atan(v*1.51);\nys = ys + sin(v*0.1 + cos(v)*0.1)*speed*atan(v);\n\nx = 0.5 + 0.5*sin(xs*0.1)*cos(time*1 + ys);\ny = 0.5 + 0.5*sin(ys*0.1)*cos(time*1.1 + xs);\n\n\nr = 0.5 + 0.5*sin(q1*0.22);\ng = 0.5 + 0.5*sin(q1*0.307) + x;\n//b = 0.4 + 0.4*sin(time*0.959);\n\n\nxs = if(above(xs,1000),0 ,xs);\nys = if(above(ys,1000),0 ,ys);"},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"//apply zoom burst on beat\nflag = above(q3,2);\n//state zero is ready state\nstate = state + flag*equal(state,0);\n\n//upwards flight\nyval = if(equal(state,0),0, yval);\nyval = yval + 0.00004*equal(state,1);\nymax = if(equal(state,0),int(rand(100))*0.004,ymax);\n\n//hit apogee\nstate = if(above(yval,0.5+ymax),2,state);\n\n//reset variable\nyval = if(equal(state,0),0, yval);\nburst = if(equal(state,0),0.001,burst);\nalphax = if(equal(state,0),1,alphax);\nxdriftinc = if(equal(state,0),0,xdriftinc);\n\nburstspeed = if(equal(state,0),int(rand(10)),burstspeed);\nxdrift = if(equal(state,0),int(rand(20)),xdrift);\n//to get the numbers small enough have to use constants\nxdriftinc = xdriftinc\n+ equal(xdrift,0)*equal(state,1)*0.00002\n+ equal(xdrift,1)*equal(state,1)*0.000018\n+ equal(xdrift,2)*equal(state,1)*0.000016\n+ equal(xdrift,3)*equal(state,1)*0.000014\n+ equal(xdrift,4)*equal(state,1)*0.000012\n+ equal(xdrift,5)*equal(state,1)*0.00001\n+ equal(xdrift,6)*equal(state,1)*0.000008\n+ equal(xdrift,7)*equal(state,1)*0.000006\n+ equal(xdrift,8)*equal(state,1)*0.000004\n+ equal(xdrift,9)*equal(state,1)*0.000002\n+ equal(xdrift,11)*equal(state,1)*-0.000002\n+ equal(xdrift,12)*equal(state,1)*-0.000004\n+ equal(xdrift,13)*equal(state,1)*-0.000006\n+ equal(xdrift,14)*equal(state,1)*-0.000008\n+ equal(xdrift,15)*equal(state,1)*-0.00001\n+ equal(xdrift,16)*equal(state,1)*-0.000012\n+ equal(xdrift,17)*equal(state,1)*-0.000014\n+ equal(xdrift,18)*equal(state,1)*-0.000016\n+ equal(xdrift,19)*equal(state,1)*-0.000018;\n\nburst = burst\n+ equal(burstspeed,0)*equal(state,2)*0.000024\n+ equal(burstspeed,1)*equal(state,2)*0.000022\n+ equal(burstspeed,2)*equal(state,2)*0.00002\n+ equal(burstspeed,3)*equal(state,2)*0.000018\n+ equal(burstspeed,4)*equal(state,2)*0.000016\n+ equal(burstspeed,5)*equal(state,2)*0.000014\n+ equal(burstspeed,6)*equal(state,2)*0.000012\n+ equal(burstspeed,7)*equal(state,2)*0.00001\n+ equal(burstspeed,8)*equal(state,2)*0.000008\n+ equal(burstspeed,9)*equal(state,2)*0.000008;\n\nalphax = alphax - 0.00004*equal(state,2);\nstate = if(below(alphax,0),0,state);\n\n\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw torus\nxs = (burst + 0.0001*cos(s))*cos(ss);\nys = (burst + 0.0001*cos(s))*sin(ss);\nzs = 0.1*burst*sin(s);\n\n\n//rotate x axis\nangle = sin(-q1*0.035)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(-q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(-q1*0.022)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2;\n\n\nx = x + xdriftinc;\ny = y + sin(yval*1.5) - 0.18;\n\n\nr = 0.5 + 0.5*sin(q1*1.3 + x + x);\ng = 0.5 + 0.5*sin(q1*1.1 + x + y);\nb = 0.5 + 0.5*sin(q1*1.66 + y + y);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//apply zoom burst on beat\nflag = above(q3,2);\n//state zero is ready state\nstate = state + flag*equal(state,0);\n\n//upwards flight\nyval = if(equal(state,0),0, yval);\nyval = yval + 0.00004*equal(state,1);\nymax = if(equal(state,0),int(rand(100))*0.004,ymax);\n\n//hit apogee\nstate = if(above(yval,0.5+ymax),2,state);\n\n//reset variable\nyval = if(equal(state,0),0, yval);\nburst = if(equal(state,0),0.001,burst);\nalphax = if(equal(state,0),1,alphax);\nxdriftinc = if(equal(state,0),0,xdriftinc);\n\nburstspeed = if(equal(state,0),int(rand(10)),burstspeed);\nxdrift = if(equal(state,0),int(rand(20)),xdrift);\n//to get the numbers small enough have to use constants\nxdriftinc = xdriftinc\n+ equal(xdrift,0)*equal(state,1)*0.00002\n+ equal(xdrift,1)*equal(state,1)*0.000018\n+ equal(xdrift,2)*equal(state,1)*0.000016\n+ equal(xdrift,3)*equal(state,1)*0.000014\n+ equal(xdrift,4)*equal(state,1)*0.000012\n+ equal(xdrift,5)*equal(state,1)*0.00001\n+ equal(xdrift,6)*equal(state,1)*0.000008\n+ equal(xdrift,7)*equal(state,1)*0.000006\n+ equal(xdrift,8)*equal(state,1)*0.000004\n+ equal(xdrift,9)*equal(state,1)*0.000002\n+ equal(xdrift,11)*equal(state,1)*-0.000002\n+ equal(xdrift,12)*equal(state,1)*-0.000004\n+ equal(xdrift,13)*equal(state,1)*-0.000006\n+ equal(xdrift,14)*equal(state,1)*-0.000008\n+ equal(xdrift,15)*equal(state,1)*-0.00001\n+ equal(xdrift,16)*equal(state,1)*-0.000012\n+ equal(xdrift,17)*equal(state,1)*-0.000014\n+ equal(xdrift,18)*equal(state,1)*-0.000016\n+ equal(xdrift,19)*equal(state,1)*-0.000018;\n\nburst = burst\n+ equal(burstspeed,0)*equal(state,2)*0.000024\n+ equal(burstspeed,1)*equal(state,2)*0.000022\n+ equal(burstspeed,2)*equal(state,2)*0.00002\n+ equal(burstspeed,3)*equal(state,2)*0.000018\n+ equal(burstspeed,4)*equal(state,2)*0.000016\n+ equal(burstspeed,5)*equal(state,2)*0.000014\n+ equal(burstspeed,6)*equal(state,2)*0.000012\n+ equal(burstspeed,7)*equal(state,2)*0.00001\n+ equal(burstspeed,8)*equal(state,2)*0.000008\n+ equal(burstspeed,9)*equal(state,2)*0.000008;\n\nalphax = alphax - 0.00004*equal(state,2);\nstate = if(below(alphax,0),0,state);\n\n\ns = sample*3.14*100;\nss = sample*6.28*1000;\n\n//draw torus\nxs = (burst + 0.0001*cos(s))*cos(ss);\nys = (burst + 0.0001*cos(s))*sin(ss);\nzs = 0.1*burst*sin(s);\n\n\n//rotate x axis\nangle = sin(-q1*0.035)*6.28;\nyx = ys*cos(angle) - zs*sin(angle);\nzx = ys*sin(angle) + zs*cos(angle);\nxx = xs;\n\n//rotate y axis\nangle2 = sin(-q1*0.03)*6.28;\nxd = xx*cos(angle2) - zx*sin(angle2);\nzd = xx*sin(angle2) + zx*cos(angle2);\nyd = yx;\n\n//rotaye z axis\nangle3 = sin(-q1*0.022)*6.28;\nxn = xd*cos(angle3) - yd*sin(angle3);\nyn = xd*sin(angle3) + yd*cos(angle3);\n\nzd = zd + 2;\n\nx = xn*zd*0.3 + 0.5;\ny = yn*zd*0.3*1.2;\n\n\nx = x + xdriftinc;\ny = y + sin(yval*1.5) - 0.18;\n\n\nr = 0.5 + 0.5*sin(q1*1.3 + x + x);\ng = 0.5 + 0.5*sin(q1*1.1 + x + y);\nb = 0.5 + 0.5*sin(q1*1.66 + y + y);"}],"init_eqs_str":"a.bass_residual=0;a.old_treb_flop=0;a.bass_flop=0;a.q1=0;a.q5=0;a.treb_flop=0;a.bass_thresh=0;a.old_bass_flop=0;a.treb_thresh=0;a.pulse=0;a.bass_changed=0;a.mid_thresh=0;a.q4=0;a.mid_changed=0;a.entropy=0;a.old_mid_flop=0;a.mid_residual=0;a.treb_residual=0;a.chaos=0;a.mid_flop=0;a.q2=0;a.treb_changed=0;a.q3=0;a.radix=0;","frame_eqs_str":"a.warp=0;a.old_bass_flop=a.bass_flop;a.old_treb_flop=a.treb_flop;a.old_mid_flop=a.mid_flop;a.chaos=.9+.1*Math.sin(a.pulse);a.entropy=.00001<Math.abs(bnot(a.entropy))?2:.00001<Math.abs(equal(a.pulse,-20))?1+Math.floor(rand(3)):a.entropy;a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*((a.bass_thresh-1.3)*a.chaos+1.3);a.bass_flop=Math.abs(a.bass_flop-equal(a.bass_thresh,2));a.treb_thresh=2*above(a.treb_att,a.treb_thresh)+(1-above(a.treb_att,\na.treb_thresh))*((a.treb_thresh-1.3)*a.chaos+1.3);a.treb_flop=Math.abs(a.treb_flop-equal(a.treb_thresh,2));a.mid_thresh=2*above(a.mid_att,a.mid_thresh)+(1-above(a.mid_att,a.mid_thresh))*((a.mid_thresh-1.3)*a.chaos+1.3);a.mid_flop=Math.abs(a.mid_flop-equal(a.mid_thresh,2));a.bass_changed=bnot(equal(a.old_bass_flop,a.bass_flop));a.mid_changed=bnot(equal(a.old_mid_flop,a.mid_flop));a.treb_changed=bnot(equal(a.old_treb_flop,a.treb_flop));a.bass_residual=a.bass_changed*Math.sin(a.pulse*a.bass_thresh*.1*\na.entropy)+bnot(a.bass_changed)*a.bass_residual;a.treb_residual=a.treb_changed*Math.sin(a.pulse*a.treb_thresh*.1*a.entropy)+bnot(a.treb_changed)*a.treb_residual;a.mid_residual=a.mid_changed*Math.sin(a.pulse*a.mid_thresh*.1*a.entropy)+bnot(a.mid_changed)*a.mid_residual;a.pulse=.00001<Math.abs(above(Math.abs(a.pulse),20))?-20:a.pulse+.2*bor(bor(a.bass_changed*bnot(a.treb_changed),a.treb_changed*bnot(a.bass_changed))*bnot(a.mid_changed),a.mid_changed)+(a.mid+a.bass+a.treb)*a.entropy*.025;a.q1=a.mid_residual;\na.q2=a.bass_residual;a.q3=a.treb_residual;a.q4=Math.sin(a.pulse);a.q5=Math.sin(div(a.pulse,2));a.wave_r+=.5*a.bass_residual;a.wave_r=a.wave_g+.5*a.mid_residual;a.wave_r=a.wave_b+.5*a.treb_residual;a.wave_mystery=a.mid_residual;a.ob_r=.00001<Math.abs(a.bass_flop)?a.treb_flop:a.wave_r;a.ob_b=.00001<Math.abs(a.treb_flop)?a.mid_flop:a.wave_b;a.ob_g=.00001<Math.abs(a.mid_flop)?a.bass_flop:a.wave_g;a.ob_a=.03+.02*a.wave_r;a.ob_size=.05+.04*a.treb_residual;a.ib_r=.00001<Math.abs(a.bass_flop)?a.ob_b:a.ob_g;\na.ib_b=.00001<Math.abs(a.treb_flop)?a.ob_g:a.ob_r;a.ib_g=.00001<Math.abs(a.mid_flop)?a.ob_r:a.ob_b;a.ib_a=.03+.02*a.wave_g;a.ib_size=.05+.04*a.bass_residual;","pixel_eqs_str":"a.radix=.00001<Math.abs(above(a.q3,0))?Math.min(a.x,a.y):Math.max(a.x,a.y);a.radix=.00001<Math.abs(above(a.q2,0))?Math.min(a.radix,a.rad):Math.max(a.radix,a.rad);a.rot=.00001<Math.abs(above(a.q4,0))?.2*a.rad*a.q5:0;a.zoom=.00001<Math.abs(above(a.q2,0))?a.zoom:.00001<Math.abs(above(a.q3,0))?1+.05*a.q1:1+.07*Math.cos(10*a.radix*a.q1);","init_eqs_eel":"","frame_eqs_eel":"warp=0;\nold_bass_flop=bass_flop;\nold_treb_flop=treb_flop;\nold_mid_flop=mid_flop;\nchaos=.9+.1*sin(pulse);\nentropy=if(bnot(entropy),2,if(equal(pulse,-20),1+int(rand(3)),entropy));\nbass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.3)*chaos+1.3);\nbass_flop=abs(bass_flop-equal(bass_thresh,2));\ntreb_thresh=above(treb_att,treb_thresh)*2 + (1-above(treb_att,treb_thresh))*((treb_thresh-1.3)*chaos+1.3);\ntreb_flop=abs(treb_flop-equal(treb_thresh,2));\nmid_thresh=above(mid_att,mid_thresh)*2 + (1-above(mid_att,mid_thresh))*((mid_thresh-1.3)*chaos+1.3);\nmid_flop=abs(mid_flop-equal(mid_thresh,2));\nbass_changed=bnot(equal(old_bass_flop,bass_flop));\nmid_changed=bnot(equal(old_mid_flop,mid_flop));\ntreb_changed=bnot(equal(old_treb_flop,treb_flop));\nbass_residual = bass_changed*sin(pulse*bass_thresh*.1*entropy) + bnot(bass_changed)*bass_residual;\ntreb_residual = treb_changed*sin(pulse*treb_thresh*.1*entropy) + bnot(treb_changed)*treb_residual;\nmid_residual = mid_changed*sin(pulse*mid_thresh*.1*entropy) + bnot(mid_changed)*mid_residual;\npulse=if(above(abs(pulse),20),-20,pulse+.2*bor(bor(bass_changed*bnot(treb_changed),treb_changed*bnot(bass_changed))*bnot(mid_changed),mid_changed)+(mid+bass+treb)*entropy*.025);\nq1=mid_residual;\nq2=bass_residual;\nq3=treb_residual;\nq4=sin(pulse);\nq5=sin(pulse/2);\nwave_r=wave_r+.5*bass_residual;\nwave_r=wave_g+.5*mid_residual;\nwave_r=wave_b+.5*treb_residual;\nwave_mystery=mid_residual;\nob_r=if(bass_flop,treb_flop,wave_r);\nob_b=if(treb_flop,mid_flop,wave_b);\nob_g=if(mid_flop,bass_flop,wave_g);\nob_a=.03+.02*wave_r;\nob_size=.05+.04*treb_residual;\nib_r=if(bass_flop,ob_b,ob_g);\nib_b=if(treb_flop,ob_g,ob_r);\nib_g=if(mid_flop,ob_r,ob_b);\nib_a=.03+.02*wave_g;\nib_size=.05+.04*bass_residual;","pixel_eqs_eel":"radix=if(above(q3,0),min(x,y),max(x,y));\nradix=if(above(q2,0),min(radix,rad),max(radix,rad));\nrot=if(above(q4,0),rad*.2*q5,0);\nzoom=if(above(q2,0),zoom,if(above(q3,0),1+q1*.05,1+.07*cos(radix*10*q1)));","warp":" shader_body { \n  vec3 ret_1;\n  ret_1.z = (texture (sampler_main, uv_orig).xyz - 0.004).z;\n  vec2 tmpvar_2;\n  tmpvar_2 = (texsize.zw * 2.0);\n  vec3 tmpvar_3;\n  tmpvar_3 = (((texture (sampler_blur1, \n    (uv + (vec2(1.0, 0.0) * tmpvar_2))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv - (vec2(1.0, 0.0) * tmpvar_2))\n  ).xyz * scale1) + bias1));\n  vec3 tmpvar_4;\n  tmpvar_4 = (((texture (sampler_blur1, \n    (uv + (vec2(0.0, 1.0) * tmpvar_2))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv - (vec2(0.0, 1.0) * tmpvar_2))\n  ).xyz * scale1) + bias1));\n  vec2 tmpvar_5;\n  tmpvar_5.x = tmpvar_3.x;\n  tmpvar_5.y = tmpvar_4.x;\n  ret_1.x = (texture (sampler_main, ((\n    mix (uv_orig, uv, vec2(-0.4, -0.4))\n   - \n    (tmpvar_5 * texsize.zw)\n  ) + (\n    ((texture (sampler_noise_lq, ((\n      (uv_orig * texsize.xy)\n     * texsize_noise_lq.zw) + rand_frame.xy)).xyz - 0.5).xy * texsize.zw)\n   * 2.0))).x - 0.001);\n  vec2 tmpvar_6;\n  tmpvar_6.x = tmpvar_3.y;\n  tmpvar_6.y = tmpvar_4.y;\n  ret_1.y = max (((texture (sampler_blur1, uv_orig).xyz * scale1) + bias1).x, (texture (sampler_fc_main, (\n    (uv + (vec2(0.0, 1.0) * texsize.zw))\n   - \n    ((tmpvar_6 * texsize.zw) * 2.0)\n  )).y - 0.004));\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ret_1;\n  ret = tmpvar_7.xyz;\n }","comp":" shader_body { \n  vec2 uv2_1;\n  vec3 ret_2;\n  uv2_1 = (uv + (vec2(1.0, 0.0) * texsize.zw));\n  float tmpvar_3;\n  tmpvar_3 = (((texture (sampler_main, uv2_1).xyz + \n    (((texture (sampler_blur1, uv2_1).xyz * scale1) + bias1) * 0.4)\n  ) + (\n    ((texture (sampler_blur2, uv2_1).xyz * scale2) + bias2)\n   * 0.15)) + ((\n    (texture (sampler_blur3, uv2_1).xyz * scale3)\n   + bias3) * 0.1)).x;\n  uv2_1 = (uv + (vec2(-1.0, 0.0) * texsize.zw));\n  float tmpvar_4;\n  tmpvar_4 = (((texture (sampler_main, uv2_1).xyz + \n    (((texture (sampler_blur1, uv2_1).xyz * scale1) + bias1) * 0.4)\n  ) + (\n    ((texture (sampler_blur2, uv2_1).xyz * scale2) + bias2)\n   * 0.15)) + ((\n    (texture (sampler_blur3, uv2_1).xyz * scale3)\n   + bias3) * 0.1)).x;\n  uv2_1 = (uv + (vec2(0.0, 1.0) * texsize.zw));\n  float tmpvar_5;\n  tmpvar_5 = (((texture (sampler_main, uv2_1).xyz + \n    (((texture (sampler_blur1, uv2_1).xyz * scale1) + bias1) * 0.4)\n  ) + (\n    ((texture (sampler_blur2, uv2_1).xyz * scale2) + bias2)\n   * 0.15)) + ((\n    (texture (sampler_blur3, uv2_1).xyz * scale3)\n   + bias3) * 0.1)).x;\n  uv2_1 = (uv + (vec2(0.0, -1.0) * texsize.zw));\n  vec3 tmpvar_6;\n  tmpvar_6.z = 0.14;\n  tmpvar_6.x = (tmpvar_3 - tmpvar_4);\n  tmpvar_6.y = (tmpvar_5 - ((\n    (texture (sampler_main, uv2_1).xyz + (((texture (sampler_blur1, uv2_1).xyz * scale1) + bias1) * 0.4))\n   + \n    (((texture (sampler_blur2, uv2_1).xyz * scale2) + bias2) * 0.15)\n  ) + (\n    ((texture (sampler_blur3, uv2_1).xyz * scale3) + bias3)\n   * 0.1)).x);\n  ret_2 = (0.5 + (0.5 * normalize(tmpvar_6)));\n  vec2 x_7;\n  x_7 = (ret_2.xy - 0.5);\n  ret_2 = (ret_2 * clamp ((\n    sqrt(dot (x_7, x_7))\n   * 5.0), 0.0, 1.0));\n  ret_2 = ret_2.xxy;\n  ret_2 = (ret_2 + 1.0);\n  ret_2 = (ret_2 * mix (ret_2, (ret_2 * \n    (((texture (sampler_blur3, uv).xyz * scale3) + bias3) - ((texture (sampler_blur1, uv).xyz * scale1) + bias1))\n  ), pow (hue_shader, ret_2)));\n  ret_2 = (ret_2 * hue_shader);\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = ret_2;\n  ret = tmpvar_8.xyz;\n }","warp_hlsl":"shader_body\n{\nret = GetPixel(uv_orig) - 0.004;\n\n\nfloat2 d = texsize.zw*2;\nfloat3 dx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );\nfloat3 dy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );\n\nfloat2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\n\nfloat2 uv_red = lerp(uv_orig,uv,-.4) - float2(dx.x,dy.x)*texsize.zw + (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)*texsize.zw*2;\nret.x = GetPixel(uv_red).x - 0.001;\n\nfloat2 uv_green = lerp(uv_orig,uv,1) + float2(0,1)*texsize.zw - float2(dx.y,dy.y)*texsize.zw*2;\nret.y = max( GetBlur1(uv_orig).x, tex2d(sampler_fc_main, uv_green).y - 0.004);\n\n//ret = 0;\n}","comp_hlsl":"shader_body\n{\n    float2 uv2;\n\n    float4 c = float4(1,0.4,0.15,0.1);\n\n    uv2 = uv + float2(1,0)*texsize.zw;\n    float gx1 = GetPixel(uv2)*c.x + GetBlur1(uv2)*c.y + GetBlur2(uv2)*c.z + GetBlur3(uv2)*c.w;\n    uv2 = uv + float2(-1,0)*texsize.zw;\n    float gx2 = GetPixel(uv2)*c.x + GetBlur1(uv2)*c.y + GetBlur2(uv2)*c.z + GetBlur3(uv2)*c.w;\n\n    uv2 = uv + float2(0,1)*texsize.zw;\n    float gy1 = GetPixel(uv2)*c.x + GetBlur1(uv2)*c.y + GetBlur2(uv2)*c.z + GetBlur3(uv2)*c.w;\n    uv2 = uv + float2(0,-1)*texsize.zw;\n    float gy2 = GetPixel(uv2)*c.x + GetBlur1(uv2)*c.y + GetBlur2(uv2)*c.z + GetBlur3(uv2)*c.w;\n\n    float3 g = normalize(float3(gx1-gx2, gy1-gy2, 0.14));\n\n    ret = 0.5 + 0.5*g;\n    ret *= saturate(length(ret.xy-0.5)*5);\n    ret = ret.xxy;\n    ret += 1;\n    float3 what = lerp(ret,ret*(GetBlur3(uv)-GetBlur1(uv)),pow(hue_shader,ret));\n    ret *=what;\n    ret *= hue_shader;\n\n    //ret *= 1.5; //old gamma effect    \n}"}