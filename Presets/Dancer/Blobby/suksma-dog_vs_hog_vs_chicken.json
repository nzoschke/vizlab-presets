{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"echo_zoom":1.168,"wave_mode":2,"additivewave":1,"wave_dots":1,"wave_brighten":0,"wrap":0,"wave_a":4.1,"wave_scale":2.85,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"zoom":0.96,"rot":-18.86024,"warp":0.00052,"wave_g":0,"wave_b":0,"ob_a":0.2,"ib_r":0,"ib_g":0,"ib_b":1,"mv_x":12.8,"mv_y":38.4,"mv_l":0.8,"mv_r":0.44,"mv_g":0.65,"mv_b":0.81,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":23,"y":0.7,"rad":0.68919,"tex_zoom":0.01,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0},"init_eqs_str":"a.q1=0;a.q2=0;a.q3=0;","frame_eqs_str":"a.y=.5*a.bass_att+.2;a.x=.5*Math.cos(2*a.time)+.5;a.r=1-a.q1;a.r2=1-a.r;a.g=1-a.q2;a.g2=1-a.g;a.b=1-a.q3;a.b2=1-a.b;","init_eqs_eel":"","frame_eqs_eel":"y=bass_att*0.5+0.2;\nx=cos(time*2)*0.5+0.5;\nr=1-q1;\nr2=1-r;\ng=1-q2;\ng2=1-g;\nb=1-q3;\nb2=1-b;"},{"baseVals":{"rad":0.49428,"tex_ang":3.14159,"tex_zoom":0.55033,"r":0,"b":1,"r2":1,"g2":0,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"//ang = ang + (bass*.2) + (time*.4);\n//rad=1.781+(bass*0.025);\n//ang=above(0.5,treb_att)*.063;\nr=1-q1;\nr2=1-r;\ng=1-q2;\ng2=1-g;\nb=1-q3;\nb2=1-b;","init_eqs_eel":"","frame_eqs_eel":"//ang = ang + (bass*.2) + (time*.4);\n//rad=1.781+(bass*0.025);\n//ang=above(0.5,treb_att)*.063;\nr=1-q1;\nr2=1-r;\ng=1-q2;\ng2=1-g;\nb=1-q3;\nb2=1-b;"},{"baseVals":{"enabled":1,"sides":100,"x":0.9,"rad":0.27048,"tex_zoom":0.01,"g":1,"b":1,"r2":1,"b2":1,"a2":1},"init_eqs_str":"a.q1=0;a.q2=0;a.q3=0;","frame_eqs_str":"a['x']=((Math.sin((a['time']*5))*0.4)+0.5); a['y']=(a['treb_att']*0.5); pow((a['bass']*0.15), 2) a['r']=(1-a['q1']); a['r2']=(1-a['r']); a['g']=(1-a['q2']); a['g2']=(1-a['g']); a['b']=(1-a['q3']); a['b2']=(1-a['b']);","init_eqs_eel":"","frame_eqs_eel":"x = sin(time*5) * .4 + .5;\ny=treb_att*0.5;\n\npow( (bass*.15),2);\n\nr=1-q1;\nr2=1-r;\ng=1-q2;\ng2=1-g;\nb=1-q3;\nb2=1-b;"},{"baseVals":{"enabled":1,"sides":100,"rad":0.19789,"tex_zoom":0.01,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0},"init_eqs_str":"a.q1=0;a.q2=0;a.q3=0;","frame_eqs_str":"a.x=.5+.07*a.bass;a.r=1-a.q1;a.r2=1-a.r;a.g=1-a.q2;a.g2=1-a.g;a.b=1-a.q3;a.b2=1-a.b;","init_eqs_eel":"","frame_eqs_eel":"x=.5+(bass*0.07);\nr=1-q1;\nr2=1-r;\ng=1-q2;\ng2=1-g;\nb=1-q3;\nb2=1-b;"}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"basstime=basstime+(bass*bass);\nt1=basstime*0.003;\n","point_eqs_str":"//plot x,y,z to point on circle\nsmp=sample*6.283;\nxp=sin(smp )*0.20;\nyp=cos(smp )*0.20;\nzp=0;\n\n\n//alter shape;\nangy=sin(sample*6.28*4 +t1 )*6.28;\nxq=xp*cos(angy) - zp*sin(angy);\nzq=xp*sin(angy) + zp*cos(angy);\nxp=xq;\nzp=zq;\n\n\n//rotate on y axis;\nangy=t1*0.1;\nxq=xp*cos(angy) - zp*sin(angy);\nzq=xp*sin(angy) + zp*cos(angy);\nxp=xq;\nzp=zq;\n\n//rotate on x axis\naxs1 = sin(t1*0.15) + 1.6;\nyq= yp*cos(axs1) - zp*sin(axs1);\nzq= yp*sin(axs1) + zp*cos(axs1);\nyp=yq;\nzp=zq;\n\n//rotate on y axis again\naxs2 = sin(t1*0.1)*3.3;\nxq=xp*cos(axs2) - zp*sin(axs2);\nzq=xp*sin(axs2) + zp*cos(axs2);\nxp=xq;\nzp=zq;\n\n//stretch y axis to compensate for aspect ratio\nyp=yp*1.2;\n\n//push forward into viewpace\nzp=zp+2.1;\n\n//project x,y,z into screenspace\nxs=xp/zp;\nys=yp/zp;\n\n//center 0,0 in middle of screen\nx=xs+0.5+q4;\ny=ys+0.5+q5;\n\nr=1-q1;\ng=1-q2;\nb=1-q3;","init_eqs_eel":"","frame_eqs_eel":"basstime=basstime+(bass*bass);\nt1=basstime*0.003;\n","point_eqs_eel":"//plot x,y,z to point on circle\nsmp=sample*6.283;\nxp=sin(smp )*0.20;\nyp=cos(smp )*0.20;\nzp=0;\n\n\n//alter shape;\nangy=sin(sample*6.28*4 +t1 )*6.28;\nxq=xp*cos(angy) - zp*sin(angy);\nzq=xp*sin(angy) + zp*cos(angy);\nxp=xq;\nzp=zq;\n\n\n//rotate on y axis;\nangy=t1*0.1;\nxq=xp*cos(angy) - zp*sin(angy);\nzq=xp*sin(angy) + zp*cos(angy);\nxp=xq;\nzp=zq;\n\n//rotate on x axis\naxs1 = sin(t1*0.15) + 1.6;\nyq= yp*cos(axs1) - zp*sin(axs1);\nzq= yp*sin(axs1) + zp*cos(axs1);\nyp=yq;\nzp=zq;\n\n//rotate on y axis again\naxs2 = sin(t1*0.1)*3.3;\nxq=xp*cos(axs2) - zp*sin(axs2);\nzq=xp*sin(axs2) + zp*cos(axs2);\nxp=xq;\nzp=zq;\n\n//stretch y axis to compensate for aspect ratio\nyp=yp*1.2;\n\n//push forward into viewpace\nzp=zp+2.1;\n\n//project x,y,z into screenspace\nxs=xp/zp;\nys=yp/zp;\n\n//center 0,0 in middle of screen\nx=xs+0.5+q4;\ny=ys+0.5+q5;\n\nr=1-q1;\ng=1-q2;\nb=1-q3;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.basstime=0;a.xs=0;a.stickybit=0;a.xpass=0;a.q12=0;a.volavg2=0;a.q13=0;a.q15=0;a.q6=0;a.q1=0;a.q9=0;a.sample1=0;a.difftime=0;a.diff=0;a.edge=0;a.ys=0;a.q11=0;a.ypass=0;a.volavg=0;a.bit2=0;a.bass_time=0;a.state=0;a.vol=0;a.q2=0;a.q14=0;a.q3=0;a.basssum=0;a.q7=0;a.sample2=0;a.q8=0;a.state=0;","frame_eqs_str":"a.basstime+=.06*a.bass;a.q1=a.basstime;a.q9=.005*a.basstime;a.q8=.1*a.basstime;a.q13=.001*Math.sin(a.basstime);a.q12=.001*Math.sin(1.2*a.basstime);a.q14=4*Math.abs(Math.cos(.05*a.basstime))+1;a.q15=Math.cos(.1*a.basstime);a.basstime=.00001<Math.abs(below(a.basstime,1E3))?1E3:a.basstime;a.vol=pow(a.bass+a.mid+a.treb,2);a.basssum=a.vol;a.stickybit=mod(a.time,2);a.volavg+=a.vol*equal(a.stickybit,1);a.sample1+=equal(a.stickybit,1);a.volavg2+=a.vol*equal(a.stickybit,0);a.sample2+=\nequal(a.stickybit,0);a.edge=bnot(equal(a.bit2,a.stickybit));a.volavg-=a.volavg*a.edge*a.stickybit;a.volavg2-=a.volavg2*a.edge*equal(a.stickybit,0);a.sample1-=a.sample1*a.edge*a.stickybit;a.sample2-=a.sample2*a.edge*equal(a.stickybit,0);a.diff=.00001<Math.abs(equal(a.stickybit,1))?div(a.basssum,div(a.volavg2,a.sample2)):0;a.diff=.00001<Math.abs(equal(a.stickybit,0))?div(a.basssum,div(a.volavg,a.sample1)):a.diff;a.q3=a.diff;a.bit2=mod(a.time,2);a.difftime+=.03*a.diff;a.q2=a.difftime;a.difftime=.00001<\nMath.abs(above(a.difftime,2E3))?0:a.difftime;a.monitor=a.q1;a.state+=above(a.diff,3);a.q11=a.difftime+2*a.state;a.q12=a.difftime+2.5*a.state;a.difftime=.00001<Math.abs(above(a.difftime,2E3))?0:a.difftime;a.state+=equal(a.diff,3);a.state=.00001<Math.abs(above(a.state,5))?0:a.state;a.xs=0;a.ys=0;a.xs+=equal(0,a.state)*Math.atan(4*a.bass_time)*.1;a.ys+=equal(0,a.state)*Math.cos(4*a.bass_time)*.1;a.xs+=equal(1,a.state)*Math.cos(4*a.bass_time)*.1;a.ys+=equal(1,a.state)*Math.cos(4*a.bass_time)*.1;a.xs+=\nequal(2,a.state)*Math.cos(4*a.bass_time)*.1;a.ys+=equal(2,a.state)*Math.sin(4*a.bass_time)*.1;a.xs+=equal(3,a.state)*Math.cos(5*a.bass_time)*.1;a.ys+=equal(3,a.state)*Math.cos(9*a.bass_time)*.1;a.xs+=equal(4,a.state)*Math.atan(6*a.bass_time)*.1;a.ys+=equal(4,a.state)*Math.cos(2*a.bass_time)*.1;a.xs+=equal(5,a.state)*Math.cos(2*a.bass_time)*.1;a.ys+=equal(5,a.state)*Math.sin(1*a.bass_time)*.1;a.xpass=a.xs+a.xpass;a.ypass=a.ys+a.ypass;a.q6=.3*Math.sin(.5*a.xpass);a.q7=.3*Math.sin(.5*a.ypass);","pixel_eqs_str":"a.zoom=1;a.rot=0;","init_eqs_eel":"state = 0;","frame_eqs_eel":"basstime = basstime + bass*0.06;\nq1 = basstime;\n\nq9 = basstime * 0.005;\nq8 = basstime*0.1;\n\nq13 = sin(basstime)*0.001;\nq12 = sin(basstime*1.2)*0.001;\n\nq14 =  abs(cos(basstime*0.05))*4 + 1;\nq15 = cos(basstime*0.1);\n\n\nbasstime = if(below(basstime,1000),1000,basstime);\n\nvol = pow(bass+mid+treb,2);\nbasssum = vol;\n\nstickybit = time%2;\n\n//avg vol\n//buffer 1\nvolAvg = volAvg + vol*equal(stickybit,1);\n//number of samples 1 or framerate\nsample1 = sample1 + equal(stickybit,1);\n//buffer 2\nvolAvg2 = volAvg2 + vol*equal(stickybit,0);\n//number of samples 2\nsample2 = sample2 + equal(stickybit,0);\n\n//transision\nedge = bnot(equal(bit2,stickybit));\n\nvolAvg = volAvg - volAvg*edge*stickybit;\nvolAvg2 = volAvg2 - volAvg2*edge*equal(stickybit,0);\n\nsample1 = sample1  - sample1*edge*stickybit;\nsample2 = sample2  - sample2*edge*equal(stickybit,0);\n\n//test vol against avg buffer lvl\ndiff = if(equal(stickybit,1), (basssum/(volAvg2/sample2)) , 0);\ndiff = if(equal(stickybit,0), (basssum/(volAvg/sample1)), diff);\n\nq3 = diff;\n\nbit2 = time%2;\n\ndifftime = difftime + diff*0.03;\nq2 = difftime;\n\n//fix a strange error\ndifftime = if(above(difftime,2000),0, difftime);\nmonitor = q1;\n\n\nstate = state + above(diff,3);\n\nq11 = difftime + state*2;\nq12 = difftime + state*2.5;\n\n//fix a strange error\ndifftime = if(above(difftime,2000),0, difftime);\n\n//another state machine for shape tracking\nstate = state + equal(diff,3);\nstate = if(above(state,5), 0, state);\n\n\n\nxs = 0;\nys = 0;\n\n//state 0 elipse\nxs = xs + (equal(0,state))*atan(bass_time*4)*0.1;\nys = ys + (equal(0,state))*cos(bass_time*4)*0.1;\n\n//state 1 diag\nxs = xs + (equal(1,state))*cos(bass_time*4)*0.1;\nys = ys + (equal(1,state))*cos(bass_time*4)*0.1;\n\n//state 2 -circle\nxs = xs + (equal(2,state))*cos(bass_time*4)*0.1;\nys = ys + (equal(2,state))*sin(bass_time*4)*0.1;\n\n//state 3 parametric arc\nxs = xs + (equal(3,state))*cos(bass_time*5)*0.1;\nys = ys + (equal(3,state))*cos(bass_time*9)*0.1;\n\n//state 4 arc\nxs = xs + (equal(4,state))*atan(bass_time*6)*0.1;\nys = ys + (equal(4,state))*cos(bass_time*2)*0.1;\n\n//state 5 infinity\nxs = xs + (equal(5,state))*cos(bass_time*2)*0.1;\nys = ys + (equal(5,state))*sin(bass_time*1)*0.1;\n\n//count\nxpass = xs + xpass;\nypass = ys + ypass;\n\n//project and publish\nq6 = 0.3*sin(xpass*0.5);\nq7 = 0.3*sin(ypass*0.5);","pixel_eqs_eel":"zoom = 1;\nrot = 0;","warp":" shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = (texsize.zw * 8.0);\n  vec3 tmpvar_3;\n  tmpvar_3 = (((texture (sampler_blur1, \n    (uv + (vec2(1.0, 0.0) * tmpvar_2))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv - (vec2(1.0, 0.0) * tmpvar_2))\n  ).xyz * scale1) + bias1));\n  vec3 tmpvar_4;\n  tmpvar_4 = (((texture (sampler_blur1, \n    (uv + (vec2(0.0, 1.0) * tmpvar_2))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv - (vec2(0.0, 1.0) * tmpvar_2))\n  ).xyz * scale1) + bias1));\n  vec2 tmpvar_5;\n  tmpvar_5.x = tmpvar_3.x;\n  tmpvar_5.y = tmpvar_4.x;\n  vec2 tmpvar_6;\n  tmpvar_6 = (uv + ((tmpvar_5 * texsize.zw) * 4.0));\n  vec2 tmpvar_7;\n  tmpvar_7.x = tmpvar_3.y;\n  tmpvar_7.y = tmpvar_4.y;\n  vec2 tmpvar_8;\n  tmpvar_8 = (uv + ((tmpvar_7 * texsize.zw) * 4.0));\n  vec2 tmpvar_9;\n  tmpvar_9.x = tmpvar_3.z;\n  tmpvar_9.y = tmpvar_4.z;\n  vec2 tmpvar_10;\n  tmpvar_10 = (uv + ((tmpvar_9 * texsize.zw) * 4.0));\n  ret_1.x = (texture (sampler_main, tmpvar_6).x - ((texture (sampler_main, tmpvar_6).xyz - \n    ((texture (sampler_blur3, tmpvar_6).xyz * scale3) + bias3)\n  ).x * 0.02));\n  ret_1.y = (texture (sampler_main, tmpvar_8).y - ((texture (sampler_main, tmpvar_8).xyz - \n    ((texture (sampler_blur3, tmpvar_8).xyz * scale3) + bias3)\n  ).y * 0.02));\n  ret_1.z = (texture (sampler_main, tmpvar_10).z - ((texture (sampler_main, tmpvar_10).xyz - \n    ((texture (sampler_blur3, tmpvar_10).xyz * scale3) + bias3)\n  ).z * 0.02));\n  ret_1 = (ret_1 - ((ret_1.yzx * 0.1) - 0.04));\n  vec4 tmpvar_11;\n  tmpvar_11.w = 1.0;\n  tmpvar_11.xyz = ret_1;\n  ret = tmpvar_11.xyz;\n }","comp":" shader_body { \n  vec3 uv3_1;\n  vec3 noise_2;\n  uv3_1.x = (0.5 - texture (sampler_noise_hq, vec2((uv.x + q4)))).x;\n  uv3_1.y = (0.5 - texture (sampler_noise_hq, vec2((uv.y + q3)))).x;\n  uv3_1.z = 1.0;\n  uv3_1.x = (uv3_1.x * (0.5 * q2));\n  uv3_1.y = (uv3_1.y * (0.5 * q1));\n  noise_2 = (vec3(0.5, 0.5, 0.5) * normalize((texture (sampler_noise_hq, uv3_1.xy) * texture (sampler_main, uv))).xyz);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = (texture (sampler_main, noise_2.xy).xyz * (texture (sampler_noise_hq, noise_2.xy) + texture (sampler_fc_main, uv)).xyz);\n  ret = tmpvar_3.xyz;\n }","warp_hlsl":"shader_body\n{\n    float2 d = texsize.zw * 8;\n    float3 dx = ( GetBlur1(uv + float2(1,0)*d) - GetBlur1(uv-float2(1,0)*d) );\n    float3 dy = ( GetBlur1(uv + float2(0,1)*d) - GetBlur1(uv-float2(0,1)*d) );\n\n    float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.24 + rand_frame.xy;\n\n    float2 my_uv =  lerp(uv_orig,uv,1) ;\n    float2 uv_x= my_uv + float2(dx.x,dy.x)*texsize.zw  *4;\n    float2 uv_y= my_uv + float2(dx.y,dy.y)*texsize.zw  *4;\n    float2 uv_z= my_uv + float2(dx.z,dy.z)*texsize.zw  *4;\n    ret.x = GetPixel(uv_x).x - (GetPixel(uv_x) - GetBlur3(uv_x)).x  * 0.02;\n    ret.y = GetPixel(uv_y).y - (GetPixel(uv_y) - GetBlur3(uv_y)).y  * 0.02;\n    ret.z = GetPixel(uv_z).z - (GetPixel(uv_z) - GetBlur3(uv_z)).z  * 0.02;\n\n    ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5) *0.0;\n    ret -= ret.yzx*0.1 - 0.04;\n\n}","comp_hlsl":"shader_body\n{\nfloat3 ret2 = tex2D(sampler_main, uv);\nfloat3 noise = .5;\nfloat2 uv2 = 0;\nfloat3 uv3 = 0;\nfloat bl = GetBlur2(uv);\nfloat3 foreground = 0;\n\nuv2.x=1-tex2D(sampler_noise_hq, uv.x);\nuv2.y=1-tex2D(sampler_noise_hq, uv.y);\nuv2.x*=q1;\nuv2.y*=q2;\n\nuv3.x=.5-tex2D(sampler_noise_hq, uv.x+q4);\nuv3.y=.5-tex2D(sampler_noise_hq, uv.y+q3);\nuv3.z=1;\n\nuv3.x*=.5*q2;\nuv3.y*=.5*q1;\n\nnoise *= normalize(tex2D(sampler_noise_hq, uv3.xy-foreground)*tex2D(sampler_main, uv));\n\nforeground=(tex2D(sampler_noise_hq, noise)+tex2D(sampler_fc_main, uv));\n\nret = tex2D(sampler_main, noise)*foreground;\n\n}"}