{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":5,"additivewave":1,"wave_dots":1,"wave_thick":1,"wave_brighten":0,"darken_center":1,"darken":1,"wave_a":0.763,"wave_scale":2.115,"wave_smoothing":0.9,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0.005,"ob_a":0.8,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":0.05,"mv_g":0.4,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"additive":1,"textured":1,"rad":0.66231,"a":0.7,"r2":0.2,"g2":0.6,"b2":0.9,"border_a":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"additive":1},"init_eqs_str":"a.nd=0;a.nx=0;a.ny=0;a.nx=.5;a.ny=.5;","frame_eqs_str":"","point_eqs_str":"a.nd=Math.floor(rand(4));a.nx+=.01*equal(a.nd,0)*a.mid;a.nx+=-.01*equal(a.nd,2)*a.mid;a.ny+=.01*equal(a.nd,1)*a.mid;a.ny+=-.01*equal(a.nd,3)*a.mid;a.x=a.nx;a.y=a.ny;a.r=.6*a.bass;a.g=.6*a.treb;a.nx=.00001<Math.abs(equal(a.sample,1))?.1*Math.floor(rand(10)):a.nx;a.ny=.00001<Math.abs(equal(a.sample,1))?.1*Math.floor(rand(10)):a.ny;","init_eqs_eel":"nx=.5;\nny=.5;","frame_eqs_eel":"","point_eqs_eel":"nd=int(rand(4));\n\nnx=nx+(equal(nd,0)*.01*mid);\nnx=nx+(equal(nd,2)*-.01*mid);\nny=ny+(equal(nd,1)*.01*mid);\nny=ny+(equal(nd,3)*-.01*mid);\n\nx=nx;\ny=ny;\n\nr=bass*.6;\ng=treb*.6;\n\nnx=if(equal(sample,1),int(rand(10))*.1,nx);\nny=if(equal(sample,1),int(rand(10))*.1,ny);"},{"baseVals":{"enabled":1,"usedots":1,"a":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.index2=0;a.speed_=0;a.index=0;a.q12=0;a.q22=0;a.q21=0;a.q13=0;a.q6=0;a.q1=0;a.dec_med=0;a.q5=0;a.movz=0;a.trel=0;a.q9=0;a.rott=0;a.spg=0;a.vol__=0;a.is_beat=0;a.q31=0;a.k1=0;a.q24=0;a.vx=0;a.dec_slow=0;a.vy=0;a.vz=0;a.q4=0;a.dir=0;a.p2=0;a.avg=0;a.trig=0;a.beat=0;a.q17=0;a.vol=0;a.p1=0;a.peak=0;a.q2=0;a.q27=0;a.speed=0;a.q3=0;a.t0=0;a.vol_=0;a.q7=0;a.q28=0;a.q30=0;a.q20=0;a.q8=0;a.ang0=0;a.speed_=1;","frame_eqs_str":"a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.96,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.2+a.avg+a.peak)*above(a.time,a.t0+.1);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,12);a.index2=mod(a.index2+a.is_beat*bnot(a.index),8);a.q20=a.avg;a.q21=a.beat;a.q22=a.peak;a.q24=a.is_beat;a.vol=div(a.bass_att+a.mid_att+\na.treb_att,2);a.vol_=a.dec_med*a.vol_+(1-a.dec_med)*a.vol;a.vol__=a.dec_med*a.vol__+(1-a.dec_med)*a.vol_;a.q27=a.index+1;a.q28=a.index2+2;a.k1=a.is_beat*equal(mod(a.index,4),0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_med*a.p2+(1-a.dec_med)*a.p1;a.rott=div(3.1416*a.p2,4);a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.q3=-a.q2;a.q4=a.q1;a.trig=a.q24*bnot(mod(a.index,8));a.vx=a.vx*bnot(a.trig)+a.trig*(div(Math.floor(rand(100)),100)-.5);a.vy=a.vy*bnot(a.trig)+a.trig*(div(Math.floor(rand(100)),100)-\n.5);a.vz=a.vz*bnot(a.trig)+a.trig*(div(Math.floor(rand(100)),100)-.5);a.speed=Math.min(a.vol_-a.vol__+.5,1);a.speed=Math.max(a.speed,-.5);a.speed_=bnot(a.trig)*a.speed_+a.trig*a.speed;a.spg=a.dec_med*a.spg+(1-a.dec_med)*a.speed_;a.movz+=div(1,a.fps)*(a.speed_+div(0*a.vol_,6));a.q9=a.movz;a.q12=2*Math.min(a.q22,6);a.q13=2*Math.sin(div(a.movz,3)-div(a.time,11));a.trig=bnot(mod(a.index,4))*a.q24;a.dir=bnot(a.trig)*a.dir+a.trig*(Math.floor(rand(10))-5);a.trel+=div(.1,a.fps)*a.dir;a.q5=Math.cos(a.trel-\na.movz);a.q6=Math.sin(div(a.trel,2)-a.movz);a.q7=-a.q6;a.q8=a.q5;a.ang0=a.ang0*a.dec_med+a.vz*(1-a.dec_med);a.q17=2*a.ang0;a.q30=.2*Math.sin(div(a.time,8));a.q31=.5+.5*Math.sin(div(a.time,3.3));a.zoom=1;a.rot=0;a.dx=0;a.monitor=a.q28;","pixel_eqs_str":"","init_eqs_eel":"speed_=1;","frame_eqs_eel":"dec_med = pow (0.9, 30/fps);\ndec_slow = pow (0.96, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, 0.2+avg+peak) * above (time, t0+.1);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %12;\nindex2 = (index2 + is_beat*bnot(index))%8;\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq24 = is_beat;\nvol = (bass_att + mid_att + treb_att)/2;\nvol_ = dec_med * vol_ + (1-dec_med)* vol;\nvol__ = dec_med * vol__ + (1-dec_med)* vol_;\nq27 = index + 1;\nq28 = index2 + 2;\n\nk1 =  is_beat*equal(index%4,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\nrott = p2 * 3.1416/4;\n\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\ntrig = q24 * bnot(index%8);\nvx = vx*bnot(trig) + trig* (int(rand(100))/100-.5);\nvy = vy*bnot(trig) + trig* (int(rand(100))/100-.5);\nvz = vz*bnot(trig) + trig* (int(rand(100))/100-.5);\n\nspeed = min(vol_-vol__+.5,1);\nspeed = max(speed,-.5);\nspeed_ = bnot(trig)*speed_ + trig*speed;\nspg = dec_med*spg + (1-dec_med)*speed_;\nmovz = movz + 1/fps*(speed_+0*vol_/6);\nq9 = movz;\nq12 = min(q22,6)*2;\n\n//puls = puls*dec_med + (1-dec_med)*q22;\n\nq13 = 2* sin(movz/3-time/11);\n\ntrig = bnot(index%4) * q24;\ndir = bnot(trig)*dir + trig*(int(rand(10))-5);\ntrel = trel + .1/fps*dir;\nq5 = cos(trel-movz);\nq6 = sin(trel/2-movz);\nq7 = -q6;\nq8 = q5;\n\nang0 = ang0*dec_med + vz*(1-dec_med);\nq17 = ang0*2; \nq30 = .2*sin(time/8);\n\nq31 = .5 + .5*sin(time/3.3);\n\nzoom = 1;\nrot = .0;\ndx = .00;\nmonitor = q28;","pixel_eqs_eel":"","warp":"","comp":"float xlat_mutabledist;\nfloat xlat_mutabledist2;\nfloat xlat_mutableinten;\nfloat xlat_mutablem;\nfloat xlat_mutablemask;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv2;\n shader_body { \n  vec2 uv_1;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  mat2 tmpvar_2;\n  tmpvar_2[uint(0)] = _qa.xy;\n  tmpvar_2[1u] = _qa.zw;\n  uv_1 = (uv_1 * tmpvar_2);\n  int tmpvar_3;\n  tmpvar_3 = int(q10);\n  xlat_mutablem = (1.0 - float(tmpvar_3));\n  float tmpvar_4;\n  tmpvar_4 = -(q10);\n  xlat_mutabledist = (1.0 - fract((0.25 - \n    (fract(tmpvar_4) / 4.0)\n  )));\n  xlat_mutableuv2 = ((uv_1 * (float(mod (xlat_mutablem, 2.0)))) + (uv_1.yx * (float(mod (\n    (xlat_mutablem + 1.0)\n  , 2.0)))));\n  xlat_mutabledist2 = (xlat_mutabledist * xlat_mutabledist);\n  xlat_mutableinten = ((3.0 * sqrt(xlat_mutabledist)) * (1.0 - (xlat_mutabledist * xlat_mutabledist)));\n  xlat_mutableuv2 = (((\n    (4.0 * xlat_mutableuv2)\n   * xlat_mutabledist) + (0.35 * xlat_mutablem)) + (q9 * xlat_mutabledist2));\n  xlat_mutableret1 = (texture (sampler_main, xlat_mutableuv2).xyz * xlat_mutableinten);\n  xlat_mutablem = (2.0 - float(tmpvar_3));\n  xlat_mutabledist = (1.0 - fract((0.5 - \n    (fract(tmpvar_4) / 4.0)\n  )));\n  xlat_mutableuv2 = ((uv_1 * (float(mod (xlat_mutablem, 2.0)))) + (uv_1.yx * (float(mod (\n    (xlat_mutablem + 1.0)\n  , 2.0)))));\n  xlat_mutabledist2 = (xlat_mutabledist * xlat_mutabledist);\n  xlat_mutableinten = ((3.0 * sqrt(xlat_mutabledist)) * (1.0 - (xlat_mutabledist * xlat_mutabledist)));\n  xlat_mutableuv2 = (((\n    (4.0 * xlat_mutableuv2)\n   * xlat_mutabledist) + (0.35 * xlat_mutablem)) + (q9 * xlat_mutabledist2));\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_main, xlat_mutableuv2);\n  xlat_mutablemask = (1.0 - ((0.9 * \n    clamp ((8.0 * xlat_mutabledist), 0.0, 1.0)\n  ) * clamp (\n    (64.0 * tmpvar_5.xyz)\n  , 0.0, 1.0))).x;\n  xlat_mutableret1 = ((xlat_mutableret1 * xlat_mutablemask) + (tmpvar_5.xyz * xlat_mutableinten));\n  xlat_mutablem = (3.0 - float(tmpvar_3));\n  xlat_mutabledist = (1.0 - fract((0.75 - \n    (fract(tmpvar_4) / 4.0)\n  )));\n  xlat_mutableuv2 = ((uv_1 * (float(mod (xlat_mutablem, 2.0)))) + (uv_1.yx * (float(mod (\n    (xlat_mutablem + 1.0)\n  , 2.0)))));\n  xlat_mutabledist2 = (xlat_mutabledist * xlat_mutabledist);\n  xlat_mutableinten = ((3.0 * sqrt(xlat_mutabledist)) * (1.0 - (xlat_mutabledist * xlat_mutabledist)));\n  xlat_mutableuv2 = (((\n    (4.0 * xlat_mutableuv2)\n   * xlat_mutabledist) + (0.35 * xlat_mutablem)) + (q9 * xlat_mutabledist2));\n  vec4 tmpvar_6;\n  tmpvar_6 = texture (sampler_main, xlat_mutableuv2);\n  xlat_mutablemask = (1.0 - ((0.9 * \n    clamp ((8.0 * xlat_mutabledist), 0.0, 1.0)\n  ) * clamp (\n    (64.0 * tmpvar_6.xyz)\n  , 0.0, 1.0))).x;\n  xlat_mutableret1 = ((xlat_mutableret1 * xlat_mutablemask) + (tmpvar_6.xyz * xlat_mutableinten));\n  xlat_mutablem = (4.0 - float(tmpvar_3));\n  xlat_mutabledist = (1.0 - fract((1.0 - \n    (fract(tmpvar_4) / 4.0)\n  )));\n  xlat_mutableuv2 = ((uv_1 * (float(mod (xlat_mutablem, 2.0)))) + (uv_1.yx * (float(mod (\n    (xlat_mutablem + 1.0)\n  , 2.0)))));\n  xlat_mutabledist2 = (xlat_mutabledist * xlat_mutabledist);\n  xlat_mutableinten = ((3.0 * sqrt(xlat_mutabledist)) * (1.0 - (xlat_mutabledist * xlat_mutabledist)));\n  xlat_mutableuv2 = (((\n    (4.0 * xlat_mutableuv2)\n   * xlat_mutabledist) + (0.35 * xlat_mutablem)) + (q9 * xlat_mutabledist2));\n  vec4 tmpvar_7;\n  tmpvar_7 = texture (sampler_main, xlat_mutableuv2);\n  xlat_mutablemask = (1.0 - ((0.9 * \n    clamp ((8.0 * xlat_mutabledist), 0.0, 1.0)\n  ) * clamp (\n    (64.0 * tmpvar_7.xyz)\n  , 0.0, 1.0))).x;\n  xlat_mutableret1 = ((xlat_mutableret1 * xlat_mutablemask) + (tmpvar_7.xyz * xlat_mutableinten));\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = (1.8 * xlat_mutableret1);\n  ret = tmpvar_8.xyz;\n }","warp_hlsl":"","comp_hlsl":"float3 ret1, neu, neu2;\nfloat2 uv1,uv2;\nfloat k,m,n,zoom,dist,dist2,inten,mask;\nfloat2x2 dir;\nint i, anz;\n\nshader_body\n{\nuv -= 0.5;\nuv *= aspect.xy;    \n\nret1 = 0; anz = 4; n = 1; \n\nfloat t_rel = q10;\nfloat wat = .0*sin(rad*122)*rad*rad;\n\nuv = mul(uv,float2x2(_qa));\nwhile (n <= anz) {\n    m =  n-int(t_rel);\n\n    dist = 1-frac(n/anz-frac(-t_rel)/anz); \n   //evtl sqrt !\n\n   zoom = 4 ;\n\nuv2 = uv;\n//if ((m%2)==0) {uv2=uv.yx;} else {uv2=uv;}\n   uv2=uv.xy * (m%2) + uv.yx*((m+1)%2);\n    dist2 = dist*dist;\n    inten =  3*sqrt(dist)*(1-dist*dist);\n    uv2 = zoom*uv2*dist+ .35*m +q9*dist2;\n    neu = GetPixel (uv2+wat);\n    mask = 1-.9*saturate(8*dist)*saturate(64*neu);\n    ret1 = ret1*mask + neu*inten;\nn++;\n}\n\nret = 1.8*ret1;\n\n}"}