{"version":2,"baseVals":{"rating":5,"gammaadj":1.28,"decay":0.8,"echo_zoom":1,"echo_orient":3,"wave_mode":5,"modwavealphabyvolume":1,"wave_brighten":0,"brighten":1,"wave_a":0.001,"wave_scale":0.01,"wave_smoothing":0.9,"modwavealphastart":2,"modwavealphaend":2,"zoomexp":3.04777,"zoom":1.0173,"warp":0.01605,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0,"ob_a":1,"mv_x":64,"mv_y":20.16,"mv_l":0.4,"mv_g":0.4,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":100,"additive":1,"r":0.9,"g":0.7,"b":0.9,"a":0.7,"r2":1,"g2":0,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.x=.5*(Math.sin(a.time)+1);a.y=.5*a.bass_att+.2*Math.sin(.5*a.time);a.ang=a.time;a.rad=.5*a.bass;","init_eqs_eel":"","frame_eqs_eel":"x=(sin(time)+1)*.5;\ny=(bass_att*.5)+(sin(time*.5)*.2);\n\nang=time;\nrad=bass*.5;"},{"baseVals":{"enabled":1,"sides":100,"textured":1,"rad":0.80814,"tex_zoom":1.22018,"a":0.5,"r2":0.9,"b2":0.8,"a2":0.5,"border_a":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":100,"additive":1,"textured":1,"rad":0.7316,"tex_ang":5.02655,"tex_zoom":0.24832,"r":0.8,"g":0.3,"b":0.8,"a2":0.1,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.rad=.9*a.bass;a.ang=a.time;","init_eqs_eel":"","frame_eqs_eel":"rad=bass*.9;\nang=time;"},{"baseVals":{"enabled":1,"sides":100,"additive":1,"g":0.2,"b":0.3,"g2":0,"b2":0.1,"border_r":0,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.x=.5*(Math.cos(.2*(a.time+.233))+1);a.y=.5*(Math.sin(.1*a.time)+1)+.5*Math.sin(.13*a.time);a.rad=.2*a.treb;","init_eqs_eel":"","frame_eqs_eel":"x=(cos((time+.233)*.2)+1)*.5;\ny=(sin(time*.1)+1)*.5+(sin(time*.13)*.5);\n\nrad=treb*.2;"}],"waves":[{"baseVals":{"thick":1,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"x=int(rand(1));\ny=int(rand(1));","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x=int(rand(1));\ny=int(rand(1));"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.z=0;a.d_x=0;a.q25=0;a.index=0;a.q29=0;a.q1=0;a.dec_med=0;a.is_beat=0;a.q31=0;a.q23=0;a.q24=0;a.dec_slow=0;a.q26=0;a.avg=0;a.r=0;a.beat=0;a.d_y=0;a.peak=0;a.q27=0;a.t0=0;a.q32=0;a.q28=0;a.q30=0;","frame_eqs_str":"a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.99,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.5+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,2);a.d_x=.00001<Math.abs(a.is_beat)?.001*(Math.floor(rand(2E3))-1E3):a.d_x;a.d_y=.00001<Math.abs(a.is_beat)?.001*(Math.floor(rand(2E3))-\n1E3):a.d_y;a.r=.00001<Math.abs(a.is_beat)?.001*(Math.floor(rand(2E3))-1E3):a.r;a.z=.00001<Math.abs(a.is_beat)?.001*Math.floor(rand(1E3)):a.z;a.zoom=1.03+.06*a.z;a.rot=.06*a.r;a.dx=.01*a.d_x;a.dy=.01*a.d_y;a.q1=1;a.q23=div(Math.floor(rand(1E3)),1E3);a.q24=div(Math.floor(rand(1E3)),1E3);a.q25=6.28*div(Math.floor(rand(1E3)),1E3);a.q26=a.q25-3.14;a.q27=div(Math.floor(rand(1E3)),12E3)+.04;a.q28=div(Math.floor(rand(1E3)),1E3);a.q29=div(Math.floor(rand(1E3)),1E3);a.q30=6.28*div(Math.floor(rand(1E3)),1E3);\na.q31=a.q30-3.14;a.q32=div(Math.floor(rand(1E3)),14E3)+.04;","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"dec_med = pow (0.9, 30/fps);\ndec_slow = pow (0.99, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .5+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %2;\n\n\nd_x = if(is_beat, (int(rand(2000))-1000)*0.001 , d_x);\nd_y = if(is_beat, (int(rand(2000))-1000)*0.001 , d_y);\nr = if(is_beat, (int(rand(2000))-1000)*0.001 , r);\nz = if(is_beat, int(rand(1000))*0.001 , z);\nzoom = 1.03 + z*0.06;\nrot = r*0.06;\ndx = d_x*0.01;\ndy = d_y*0.01;\nq1 = 1;\n\nq23 = int(rand(1000))/1000;\nq24 = int(rand(1000))/1000;\nq25 = (int(rand(1000))/1000)*6.28;\nq26 = q25 - 3.14;\nq27 = (int(rand(1000))/12000)+0.04;\n\nq28 = int(rand(1000))/1000;\nq29 = int(rand(1000))/1000;\nq30 = (int(rand(1000))/1000)*6.28;\nq31 = q30 - 3.14;\nq32 = (int(rand(1000))/14000)+0.04;","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1 = (0.5 + ((1.0 - \n    abs(((fract(\n      ((vec2(0.5, 0.5) + ((\n        (0.5 + ((uv_orig - 0.5) * aspect.wz))\n       - vec2(0.5, 0.5)) * vec2(4.0, 4.0))) * 0.5)\n    ) * 2.0) - 1.0))\n  ) - 0.5));\n  vec2 help_uv_2;\n  vec2 base_3;\n  base_3 = ((vec2(0.5, 0.5) + (\n    (tmpvar_1 - vec2(0.5, 0.5))\n   * vec2(2.0, 2.0))) - 0.5);\n  vec2 tmpvar_4;\n  tmpvar_4.x = ((base_3.x * base_3.x) - (base_3.y * base_3.y));\n  tmpvar_4.y = ((base_3.x * base_3.y) + (base_3.y * base_3.x));\n  vec2 tmpvar_5;\n  tmpvar_5.x = ((base_3.x * tmpvar_4.x) - (base_3.y * tmpvar_4.y));\n  tmpvar_5.y = ((base_3.x * tmpvar_4.y) + (base_3.y * tmpvar_4.x));\n  vec2 tmpvar_6;\n  tmpvar_6.x = ((base_3.x * tmpvar_5.x) - (base_3.y * tmpvar_5.y));\n  tmpvar_6.y = ((base_3.x * tmpvar_5.y) + (base_3.y * tmpvar_5.x));\n  vec2 tmpvar_7;\n  tmpvar_7.x = ((base_3.x * tmpvar_6.x) - (base_3.y * tmpvar_6.y));\n  tmpvar_7.y = ((base_3.x * tmpvar_6.y) + (base_3.y * tmpvar_6.x));\n  vec2 tmpvar_8;\n  tmpvar_8.x = ((base_3.x * tmpvar_7.x) - (base_3.y * tmpvar_7.y));\n  tmpvar_8.y = ((base_3.x * tmpvar_7.y) + (base_3.y * tmpvar_7.x));\n  help_uv_2 = (0.5 + tmpvar_8);\n  vec2 tmpvar_9;\n  tmpvar_9 = (vec2(0.5, 0.5) + (help_uv_2 - vec2(0.5, 0.5)));\n  help_uv_2 = tmpvar_9;\n  float zoom_10;\n  zoom_10 = (4.0 * time);\n  vec2 tmpvar_11;\n  tmpvar_11 = (tmpvar_9 - vec2(0.499, 0.5));\n  float tmpvar_12;\n  tmpvar_12 = sqrt(dot (tmpvar_11, tmpvar_11));\n  float tmpvar_13;\n  float tmpvar_14;\n  tmpvar_14 = (min (abs(\n    (tmpvar_11.x / tmpvar_11.y)\n  ), 1.0) / max (abs(\n    (tmpvar_11.x / tmpvar_11.y)\n  ), 1.0));\n  float tmpvar_15;\n  tmpvar_15 = (tmpvar_14 * tmpvar_14);\n  tmpvar_15 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_15) + 0.05368138) * tmpvar_15) - 0.1173503)\n     * tmpvar_15) + 0.1938925) * tmpvar_15) - 0.3326756)\n   * tmpvar_15) + 0.9999793) * tmpvar_14);\n  tmpvar_15 = (tmpvar_15 + (float(\n    (abs((tmpvar_11.x / tmpvar_11.y)) > 1.0)\n  ) * (\n    (tmpvar_15 * -2.0)\n   + 1.570796)));\n  tmpvar_13 = (tmpvar_15 * sign((tmpvar_11.x / tmpvar_11.y)));\n  if ((abs(tmpvar_11.y) > (1e-08 * abs(tmpvar_11.x)))) {\n    if ((tmpvar_11.y < 0.0)) {\n      if ((tmpvar_11.x >= 0.0)) {\n        tmpvar_13 += 3.141593;\n      } else {\n        tmpvar_13 = (tmpvar_13 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_13 = (sign(tmpvar_11.x) * 1.570796);\n  };\n  vec2 x_16;\n  x_16 = (tmpvar_1 - vec2(0.5, 0.5));\n  vec4 tmpvar_17;\n  tmpvar_17.w = 1.0;\n  tmpvar_17.xyz = vec3((clamp ((1.0 - \n    (0.5 + (((1.0 - \n      abs(((fract(\n        (vec2((((0.6366196 * tmpvar_13) + log(\n          (1.0/(tmpvar_12))\n        )) + zoom_10)) * 0.5)\n      ) * 2.0) - 1.0))\n    ) - 0.5) * 0.999))\n  ), 0.0, 1.0).x * clamp ((1.0 - \n    (sqrt(dot (x_16, x_16)) / 0.5)\n  ), 0.0, 1.0)));\n  ret = tmpvar_17.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  vec3 ret1_2;\n  vec2 uv2_3;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  ret1_2 = vec3(0.0, 0.0, 0.0);\n  vec4 tmpvar_4;\n  tmpvar_4.w = 0.0;\n  tmpvar_4.xyz = ret1_2;\n  float tmpvar_5;\n  tmpvar_5 = (0.1 * q1);\n  ret1_2 = max (tmpvar_4, texture (sampler_main, ((uv_1 + 0.5) + tmpvar_5))).xyz;\n  uv2_3.x = ((uv_1.x * 0.5004596) - (uv_1.y * 0.8657598));\n  uv2_3.y = ((uv_1.x * 0.8657598) + (uv_1.y * 0.5004596));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 0.0;\n  tmpvar_6.xyz = ret1_2;\n  ret1_2 = max (tmpvar_6, texture (sampler_main, ((uv2_3 + 0.5) + tmpvar_5))).xyz;\n  uv2_3.x = ((uv_1.x * -0.4990803) - (uv_1.y * 0.8665558));\n  uv2_3.y = ((uv_1.x * 0.8665558) + (uv_1.y * -0.4990803));\n  vec4 tmpvar_7;\n  tmpvar_7.w = 0.0;\n  tmpvar_7.xyz = ret1_2;\n  ret1_2 = max (tmpvar_7, texture (sampler_main, ((uv2_3 + 0.5) + tmpvar_5))).xyz;\n  uv2_3.x = ((uv_1.x * -0.9999987) - (uv_1.y * 0.001592548));\n  uv2_3.y = ((uv_1.x * 0.001592548) + (uv_1.y * -0.9999987));\n  vec4 tmpvar_8;\n  tmpvar_8.w = 0.0;\n  tmpvar_8.xyz = ret1_2;\n  ret1_2 = max (tmpvar_8, texture (sampler_main, ((uv2_3 + 0.5) + tmpvar_5))).xyz;\n  uv2_3.x = ((uv_1.x * -0.5018377) - (uv_1.y * -0.8649619));\n  uv2_3.y = ((uv_1.x * -0.8649619) + (uv_1.y * -0.5018377));\n  vec4 tmpvar_9;\n  tmpvar_9.w = 0.0;\n  tmpvar_9.xyz = ret1_2;\n  ret1_2 = max (tmpvar_9, texture (sampler_main, ((uv2_3 + 0.5) + tmpvar_5))).xyz;\n  uv2_3.x = ((uv_1.x * 0.4976997) - (uv_1.y * -0.8673494));\n  uv2_3.y = ((uv_1.x * -0.8673494) + (uv_1.y * 0.4976997));\n  vec4 tmpvar_10;\n  tmpvar_10.w = 0.0;\n  tmpvar_10.xyz = ret1_2;\n  ret1_2 = max (tmpvar_10, texture (sampler_main, ((uv2_3 + 0.5) + tmpvar_5))).xyz;\n  uv2_3.x = ((uv_1.x * 0.9999949) - (uv_1.y * -0.003185092));\n  uv2_3.y = ((uv_1.x * -0.003185092) + (uv_1.y * 0.9999949));\n  vec4 tmpvar_11;\n  tmpvar_11.w = 0.0;\n  tmpvar_11.xyz = ret1_2;\n  ret1_2 = max (tmpvar_11, texture (sampler_main, ((uv2_3 + 0.5) + tmpvar_5))).xyz;\n  ret1_2 = ((ret1_2 - (rad / 2.0)) * (1.0 + (slow_roam_cos.xyz / 2.0)));\n  vec3 tmpvar_12;\n  tmpvar_12 = max (ret1_2, vec3((dot (\n    (texture (sampler_noise_hq, ((uv_1 * 8.0) + (dot (ret1_2, vec3(0.32, 0.49, 0.29)) / 8.0))) + 0.15)\n  .xyz, vec3(0.32, 0.49, 0.29)) / 6.0)));\n  ret1_2 = tmpvar_12;\n  vec4 tmpvar_13;\n  tmpvar_13.w = 1.0;\n  tmpvar_13.xyz = ((tmpvar_12 * 1.6) - 0.1);\n  ret = tmpvar_13.xyz;\n }","warp_hlsl":"float2 complex_mul(float2 factorA, float2 factorB){\n   return float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);\n}\n\nfloat2 complex_pow(float2 base, int exponent){\n   float2 exponentiation = float2(1,0);\n   for(int i = 0; i<exponent; i++){\n      exponentiation = complex_mul(base,exponentiation);\n   }\n   return exponentiation;\n}\n\nfloat2 complex_square(float2 domain){\n   return complex_mul(domain,domain);\n}\n\nfloat2 complex_div(float2 numerator, float2 denominator){\n   return float2( numerator.x*denominator.x + numerator.y*denominator.y,\n                  numerator.y*denominator.x - numerator.x*denominator.y)/\n          (denominator.x*denominator.x + denominator.y*denominator.y);\n}\n\nfloat2 uv_aspect(float2 uvo, float2 uvm, float2 aspectr, float2 motion_scale){\n   return 0.5 + (lerp(uvo,uvm,motion_scale)-0.5)*aspectr;\n}\n\nfloat2 uv_scale(float2 domain, float2 center, float2 scale){\n   return center + (domain-center)*scale;\n}\n\nfloat2 uv_torus_mirror(float2 domain, float cutoff){\n   return 0.5 + (1.0 - abs( frac( domain * 0.5 ) * 2 - 1.0 )-0.5)*cutoff;\n}\n\nbool mask_rectangle(float2 domain, float2 position, float2 dimensions){\n   return (domain.x>position.x-dimensions.x)*(domain.x<position.x+dimensions.x)*\n          (domain.y>position.y-dimensions.y)*(domain.y<position.y+dimensions.y);\n}\n\nbool mask_circle(float2 domain, float2 position, float radius){\n   return length(domain-position)<radius;\n}\n\nbool mask_spiral_logarithmic(float2 domain, float2 center, int fins, float thickness, float spiral_factor, float zoom){\n   float2 c = domain - center;\n   float rad_hq = length(c);\n   float ang_hq = atan2(c.x,c.y);\n\n   return frac(fins*ang_hq*M_INV_PI_2 + spiral_factor*log(1/rad_hq)+zoom)<thickness;\n}\n\nfloat figure_spiral_logarithmic(float2 domain, float2 center, int fins, float thickness, float spiral_factor, float zoom){\n   float2 c = domain - center;\n   float rad_hq = length(c);\n   float ang_hq = atan2(c.x,c.y);\n\n   return saturate(1-uv_torus_mirror(fins*ang_hq*M_INV_PI_2*2 + spiral_factor*log(1/rad_hq)+zoom,0.999)/thickness);\n}\n\nfloat figure_circle(float2 domain, float2 position, float radius){\n   return saturate(1-length(domain-position)/radius);\n}\n\nfloat figure_orb_of_3(float2 domain){\n   float2 help_uv = domain;\n   help_uv = uv_scale(help_uv, 0.5, 4);\n   help_uv = 0.5 + complex_pow(help_uv-0.5,3);\n   help_uv = uv_scale(help_uv, 0.5, 1);\n\n   return figure_circle(help_uv,float2(0,0.5),0.6);\n}\n\nfloat figure_orb_of_spiral_of_3(float2 domain){\n   float2 help_uv = domain;\n   help_uv = uv_scale(help_uv, 0.5, 2);\n   help_uv = 0.5 + complex_pow(help_uv-0.5,6);\n   help_uv = uv_scale(help_uv, 0.5, 1);\n\n   return figure_spiral_logarithmic(help_uv, float2(0.499,0.5), 2, 1, 1, 4*time)*figure_circle(domain,0.5,0.5);\n}\n\nshader_body\n{\nfloat2 base_uv = uv_aspect(uv_orig, uv, aspect.wz, 0);\nret = mask_rectangle(base_uv,0.5,0.1);\nret = mask_spiral_logarithmic(base_uv, 0.5, -1, 0.5, 0.4, time);\nfloat2 scaled_uv = uv_scale(base_uv, 0.5, 4);\nfloat2 mirrored_uv = uv_torus_mirror(scaled_uv,1);\nret = mask_circle(mirrored_uv,0.5,0.1);\nret = mask_spiral_logarithmic(base_uv, 0.5, -1, 0.5, 0.4, time);\n//ret = figure_circle(mirrored_uv,float2(-0.5,0.5),1.2);\nret = figure_orb_of_3(base_uv);\nret = figure_orb_of_spiral_of_3(mirrored_uv);\n\n//ret = figure_spiral_logarithmic(mirrored_uv, 0.5, 4, 0.75, 2, time*2);\n\n}","comp_hlsl":"shader_body\n{\n    float2 uv2, uv3;\n    float ang2, c, s;\n\n    uv -= 0.5;\n    uv *= aspect.xy;    \n\nfloat3 ret1 = 0;\nint anz = 6;\nint n = 0;\nwhile (n <= anz) {\n    ang2 = 6.28*n/anz;\n    c = cos(ang2);\n    s = sin(ang2);\n    uv2.x =  uv.x*c - uv.y*s;\n    uv2.y =  uv.x*s + uv.y*c;\n\n    ret1 = max(ret1,tex2D(sampler_main, uv2 + 0.5+.1*q1));\nn++;\n}\n\nret1 = (ret1 - rad/2) * (1+slow_roam_cos.xyz/2);\n\nfloat3 noise = tex2D (sampler_noise_hq,uv*8+lum(ret1)/8)+.15;\n\nret1 = max(ret1,lum(noise)/6);\n\n//ret = lerp(ret, lum(ret), -5);\n\n ret = ret1*1.6-.1; \n}\n\n"}