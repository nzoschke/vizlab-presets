{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.929,"echo_zoom":1,"echo_alpha":0.5,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"brighten":1,"darken":1,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":0.01,"warpscale":1.766,"zoomexp":1.00016,"dx":0.00001,"dy":0.00001,"warp":0.01,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0.005,"ob_a":1,"ib_size":0.005,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":0.1,"mv_x":64,"mv_y":20.16,"mv_l":0.4,"mv_g":0.4,"mv_a":0},"shapes":[{"baseVals":{"textured":1,"rad":1.20321,"tex_zoom":1.22019,"a":0,"a2":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"a.oldmd=0;a.md=0;a.mx=0;a.my=0;a.ma=.5;a.my=.5;a.md=0;","frame_eqs_str":"","point_eqs_str":"a.oldmd=a.md;a.md=mod(a.md+rand(4),4);a.md=.00001<Math.abs(equal(a.md,a.oldmd))?mod(a.md+1,4):a.md;a.mx+=.002*equal(a.md,0)*a.bass;a.mx-=.002*equal(a.md,1)*a.bass;a.my+=.002*equal(a.md,2)*a.treb;a.my-=.002*equal(a.md,3)*a.treb;a.mx=.00001<Math.abs(above(a.mx,.9))?.5:a.mx;a.mx=.00001<Math.abs(below(a.mx,.1))?.5:a.mx;a.my=.00001<Math.abs(above(a.my,.9))?.5:a.my;a.my=.00001<Math.abs(below(a.my,.1))?.5:a.my;a.x=a.mx;a.y=a.my;a.a=.1*a.bass;a.r=.5*a.bass;","init_eqs_eel":"ma=.5;\nmy=.5;\nmd=0; //direction 0 1 2 3","frame_eqs_eel":"","point_eqs_eel":"oldmd=md;\nmd=(md+rand(4))%4;\nmd=if(equal(md,oldmd),(md+1)%4,md);\n\nmx=mx+(equal(md,0)*.002*bass);\nmx=mx-(equal(md,1)*.002*bass);\nmy=my+(equal(md,2)*.002*treb);\nmy=my-(equal(md,3)*.002*treb);\n\nmx=if(above(mx,.9),.5,mx);\nmx=if(below(mx,.1),.5,mx);\nmy=if(above(my,.9),.5,my);\nmy=if(below(my,.1),.5,my);\n\nx=mx;\ny=my;\na=bass*.1;\n\nr=bass*.5;"},{"baseVals":{"enabled":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"a.oldmd=0;a.md=0;a.mx=0;a.my=0;a.mx=.5;a.my=.5;a.md=1;","frame_eqs_str":"","point_eqs_str":"a.oldmd=a.md;a.md=mod(a.md+rand(4),4);a.md=.00001<Math.abs(equal(a.md,a.oldmd))?mod(a.md+1,4):a.md;a.mx+=.002*equal(a.md,0)*a.bass;a.mx-=.002*equal(a.md,1)*a.bass;a.my+=.002*equal(a.md,2)*a.treb;a.my-=.002*equal(a.md,3)*a.treb;a.mx=.00001<Math.abs(above(a.mx,.9))?.5:a.mx;a.mx=.00001<Math.abs(below(a.mx,.1))?.5:a.mx;a.my=.00001<Math.abs(above(a.my,.9))?.5:a.my;a.my=.00001<Math.abs(below(a.my,.1))?.5:a.my;a.x=a.mx;a.y=a.my;a.a=.1*a.bass;a.g=.5*a.treb;","init_eqs_eel":"mx=.5;\nmy=.5;\nmd=1;","frame_eqs_eel":"","point_eqs_eel":"oldmd=md;\nmd=(md+rand(4))%4;\nmd=if(equal(md,oldmd),(md+1)%4,md);\n\nmx=mx+(equal(md,0)*.002*bass);\nmx=mx-(equal(md,1)*.002*bass);\nmy=my+(equal(md,2)*.002*treb);\nmy=my-(equal(md,3)*.002*treb);\n\nmx=if(above(mx,.9),.5,mx);\nmx=if(below(mx,.1),.5,mx);\nmy=if(above(my,.9),.5,my);\nmy=if(below(my,.1),.5,my);\n\nx=mx;\ny=my;\na=bass*.1;\n\ng=treb*.5;"},{"baseVals":{"enabled":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"a.oldmd=0;a.md=0;a.mx=0;a.my=0;a.mx=.5;a.my=.5;a.md=2;","frame_eqs_str":"","point_eqs_str":"a.oldmd=a.md;a.md=mod(a.md+rand(4),4);a.md=.00001<Math.abs(equal(a.md,a.oldmd))?mod(a.md+1,4):a.md;a.mx+=.002*equal(a.md,0)*a.bass;a.mx-=.002*equal(a.md,1)*a.bass;a.my+=.002*equal(a.md,2)*a.treb;a.my-=.002*equal(a.md,3)*a.treb;a.mx=.00001<Math.abs(above(a.mx,.9))?.5:a.mx;a.mx=.00001<Math.abs(below(a.mx,.1))?.5:a.mx;a.my=.00001<Math.abs(above(a.my,.9))?.5:a.my;a.my=.00001<Math.abs(below(a.my,.1))?.5:a.my;a.x=a.mx;a.y=a.my;a.a=.1*a.bass;","init_eqs_eel":"mx=.5;\nmy=.5;\nmd=2;","frame_eqs_eel":"","point_eqs_eel":"oldmd=md;\nmd=(md+rand(4))%4;\nmd=if(equal(md,oldmd),(md+1)%4,md);\n\nmx=mx+(equal(md,0)*.002*bass);\nmx=mx-(equal(md,1)*.002*bass);\nmy=my+(equal(md,2)*.002*treb);\nmy=my-(equal(md,3)*.002*treb);\n\nmx=if(above(mx,.9),.5,mx);\nmx=if(below(mx,.1),.5,mx);\nmy=if(above(my,.9),.5,my);\nmy=if(below(my,.1),.5,my);\n\nx=mx;\ny=my;\na=bass*.1;"},{"baseVals":{"enabled":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"a.oldmd=0;a.md=0;a.mx=0;a.my=0;a.mx=.5;a.my=.4;a.md=3;","frame_eqs_str":"","point_eqs_str":"a.oldmd=a.md;a.md=mod(a.md+rand(4),4);a.md=.00001<Math.abs(equal(a.md,a.oldmd))?mod(a.md+1,4):a.md;a.mx+=.002*equal(a.md,0)*a.bass;a.mx-=.002*equal(a.md,1)*a.bass;a.my+=.002*equal(a.md,2)*a.treb;a.my-=.002*equal(a.md,3)*a.treb;a.mx=.00001<Math.abs(above(a.mx,.9))?.5:a.mx;a.mx=.00001<Math.abs(below(a.mx,.1))?.5:a.mx;a.my=.00001<Math.abs(above(a.my,.9))?.5:a.my;a.my=.00001<Math.abs(below(a.my,.1))?.5:a.my;a.x=a.mx;a.y=a.my;a.a=.1*a.bass;","init_eqs_eel":"mx=.5;\nmy=.4;\nmd=3;","frame_eqs_eel":"","point_eqs_eel":"oldmd=md;\nmd=(md+rand(4))%4;\nmd=if(equal(md,oldmd),(md+1)%4,md);\n\nmx=mx+(equal(md,0)*.002*bass);\nmx=mx-(equal(md,1)*.002*bass);\nmy=my+(equal(md,2)*.002*treb);\nmy=my-(equal(md,3)*.002*treb);\n\nmx=if(above(mx,.9),.5,mx);\nmx=if(below(mx,.1),.5,mx);\nmy=if(above(my,.9),.5,my);\nmy=if(below(my,.1),.5,my);\n\nx=mx;\ny=my;\na=bass*.1;"}],"init_eqs_str":"a.c_inv_i=0;a.translation_x=0;a.a_i=0;a.c_r=0;a.a_r=0;a.iangle=0;a.scale=0;a.q6=0;a.ac_i=0;a.itranslation_u=0;a.q1=0;a.itranslation_v=0;a.q5=0;a.c_inv_r=0;a.d_i=0;a.angle=0;a.mu_i=0;a.pi=0;a.bcad_r=0;a.iscale=0;a.an=0;a.q4=0;a.b_r=0;a.mu_r=0;a.oy=0;a.bcad_i=0;a.mod=0;a.c_i=0;a.num=0;a.q2=0;a.ac_r=0;a.seg=0;a.translation_y=0;a.q3=0;a.b_i=0;a.q7=0;a.anga=0;a.radi=0;a.d_r=0;a.ox=0;a.q8=0;","frame_eqs_str":"a.wave_r=a.wave_r+.35*Math.sin(1.14*a.time)+.16*Math.sin(1.5*a.time);a.wave_g=a.wave_g+.36*Math.sin(1.27*a.time)+.15*Math.sin(1.11*a.time);a.wave_b=a.wave_b+.37*Math.sin(1.284*a.time)+.15*Math.sin(1.3*a.time);a.warp=0;a.ob_r=a.wave_g;a.ob_b=a.wave_r;a.ob_g=a.wave_b;a.ib_r=a.wave_r;a.ib_b=a.wave_g;a.ib_g=a.wave_r;a.scale=4;a.angle=.2*a.time;a.translation_x=0;a.translation_y=.2;a.iscale=6;a.iangle=.3*Math.sin(.1337*a.time);a.itranslation_u=0;a.itranslation_v=.2;a.a_r=Math.cos(a.angle)*\na.scale;a.a_i=Math.sin(a.angle)*a.scale;a.b_r=a.translation_x;a.b_i=a.translation_y;a.c_r=-Math.cos(a.iangle)*a.iscale;a.c_i=-Math.sin(a.iangle)*a.iscale;a.d_r=a.itranslation_u;a.d_i=a.itranslation_v;a.c_inv_r=div(a.c_r,a.c_r*a.c_r+a.c_i*a.c_i);a.c_inv_i=div(a.c_i,a.c_r*a.c_r+a.c_i*a.c_i);a.ac_r=a.a_r*a.c_inv_r-a.a_i*a.c_inv_i;a.ac_i=a.a_r*a.c_inv_i-a.a_i*a.c_inv_r;a.bcad_r=a.b_r*a.c_r-a.b_i*a.c_i-(a.a_r*a.d_r-a.a_i*a.d_i);a.bcad_i=a.b_r*a.c_i-a.b_i*a.c_r-(a.a_r*a.d_i-a.a_i*a.d_r);a.mu_r=a.bcad_r*\na.c_inv_r-a.bcad_i*a.c_inv_i;a.mu_i=a.bcad_r*a.c_inv_i-a.bcad_i*a.c_inv_r;a.q1=a.ac_r;a.q2=a.ac_i;a.q3=a.mu_r;a.q4=a.mu_i;a.q5=a.c_r;a.q6=a.c_i;a.q7=a.d_r;a.q8=a.d_i;","pixel_eqs_str":"a.dy+=.00001<Math.abs(below(Math.abs(a.q1-a.x),.01))?.00001<Math.abs(below(a.y,a.q2))?Math.max(.02-Math.abs(a.q1-a.x),0):.001:.001;a.cx=8.13988973*sqr(a.warp-a.x);a.cx=.00001<Math.abs(below(a.cx,-1))?-1:a.cx;a.cx=.00001<Math.abs(above(a.cx,2))?2:a.cx;a.dy=.00001<Math.abs(below(a.dy,-1))?-1:a.dy;a.dy=.00001<Math.abs(above(a.dy,1))?1:a.dy;a.num=8;a.pi=3.141592654;a.radi=.75*(a.y-.5);a.radi=a.y-.5;a.radi=pow(a.radi*a.radi+(a.x-.5)*(a.x-.5),.5);a.an=a.ang+a.pi+a.time;a.an-=2*a.pi*\nMath.floor(div(a.an,2*a.pi));a.mod=.1;a.seg=a.ang+a.pi;a.seg=div(a.seg,2*a.pi)*a.num;a.seg=Math.floor(a.seg);a.seg-=equal(a.seg,a.num);a.anga=a.ang+a.pi-div(2*a.pi,a.num)*a.seg;a.anga=.00001<Math.abs(equal(mod(a.seg,2),0))?div(2*a.pi,a.num)-a.anga:a.anga;a.anga+=div(a.pi,4);a.ox=.5-a.radi*Math.sin(a.anga);a.oy=.5+a.radi*Math.cos(a.anga);a.dx=equal(a.seg,3)*(a.x-a.ox);a.dy=equal(a.seg,3)*(a.y-a.oy);a.dx=above(a.seg,0)*(a.x-a.ox);a.dy=above(a.seg,0)*(a.y-a.oy);a.dx=a.dx+.003*Math.sin(64*(2*a.y-1))+\n.001*Math.sin(96*(2*a.y-1));a.dy=a.dy+.004*Math.cos(64*(2*a.x-1))+.002*Math.cos(96*(2*a.x-1));","init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.35*sin(1.14*time) + 0.16*sin(1.5*time);\nwave_g = wave_g + 0.36*sin(1.27*time) + 0.15*sin(1.11*time);\nwave_b = wave_b + 0.37*sin(1.284*time) + 0.15*sin(1.3*time);\nwarp = 0;\n\nob_r = wave_g;\nob_b = wave_r;\nob_g = wave_b;\nib_r = wave_r;\nib_b = wave_g;\nib_g = wave_r;\n\n//before inversion\nscale = 4;\nangle = time*.2;\ntranslation_x = 0;\ntranslation_y = 0.2;\n\n//complex inverted\niscale = 6;\niangle = sin(time*0.1337)*0.3;\nitranslation_u = 0;\nitranslation_v = 0.2;\n\n\n// the mï¿½bius transformation\n// z -> (az+b)/(cz-d); where a,b,c,d are complex numbers and z will be the uv-vector\n// (az+b)/(cz-d) = a/c + mu/(cz+d), with mu = (bc-ad)/c\n// so a/c and mu can be calculated outside of the shader\n\na_r = cos(angle)*scale;\na_i = sin(angle)*scale;\nb_r = translation_x;\nb_i = translation_y;\n\nc_r = -cos(iangle)*iscale;\nc_i = -sin(iangle)*iscale;\nd_r = itranslation_u;\nd_i = itranslation_v;\n\n// c^(-1)\nc_inv_r = c_r/(c_r*c_r+c_i*c_i);\nc_inv_i = c_i/(c_r*c_r+c_i*c_i);\n\n// a*c^(-1)\nac_r = (a_r*c_inv_r - a_i*c_inv_i);\nac_i = (a_r*c_inv_i - a_i*c_inv_r);\n\n// (bc-ad)\nbcad_r = (b_r*c_r - b_i*c_i)-(a_r*d_r-a_i*d_i);\nbcad_i = (b_r*c_i - b_i*c_r)-(a_r*d_i-a_i*d_r);\n\n// mu*c^(-1)\nmu_r = bcad_r*c_inv_r - bcad_i*c_inv_i;\nmu_i = bcad_r*c_inv_i - bcad_i*c_inv_r;\n\nq1 = ac_r;\nq2 = ac_i;\nq3 = mu_r;\nq4 = mu_i;\n\nq5 = c_r;\nq6 = c_i;\nq7 = d_r;\nq8 = d_i;","pixel_eqs_eel":"dy = dy + if(below(abs(q1-x),0.01),if(below(y,q2),max(0.02-abs(q1-x),0),0.001),0.001);\ncx = 8.13988973*sqr(warp - x);\ncx=if(below(cx,-1.0), -1.0, cx);\ncx=if(above(cx,2.0), 2.0, cx);\ndy=if(below(dy,-1), -1, dy);\ndy=if(above(dy,1.0), 1.0, dy);\nnum = 8;\npi = 3.141592654;\nradi = (y-.5)*.75;\nradi = (y-.5);\nradi = pow(radi*radi + (x-.5)*(x-.5),.5);\n\nan = ang + pi + time;\nan = an - pi*2*int(an/(pi*2));\n\nmod = .1;\n\nseg = ang + pi;\nseg = seg/(pi*2)*num;\nseg = int(seg);\nseg = seg - equal(seg,num);\n\nanga = (ang + pi) - (pi*2/num)*seg;\nanga = if(equal(seg%2,0),(pi*2/num) - anga,anga);\n//anga = anga + pi/6; // num = 6\nanga = anga + pi/4; // num = 8\n//anga = anga + .85; // num = 10\n\n\nox = .5 - radi*sin(anga);\noy = .5 + radi*cos(anga);\n\n//rot = if(equal(seg,0),rot,0);\n\ndx = equal(seg,3)*(x-ox);\ndy = equal(seg,3)*(y-oy);\n\ndx = above(seg,0)*(x-ox);\ndy = above(seg,0)*(y-oy);\n\n//dx = equal(seg,1)*(x - .5)*2;\ndx=dx+0.003*sin((y*2-1)*64)+0.001*sin((y*2-1)*96);\ndy=dy+0.004*cos((x*2-1)*64)+0.002*cos((x*2-1)*96);","warp":" shader_body { \n  vec2 my_uv_1;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (vec2(1280.0, 1024.0) * texsize.zw);\n  float tmpvar_4;\n  vec2 tmpvar_5;\n  tmpvar_5 = (uv + vec2(0.005, 0.0));\n  vec2 tmpvar_6;\n  tmpvar_6 = (uv - vec2(0.005, 0.0));\n  tmpvar_4 = (((\n    (texture (sampler_blur2, tmpvar_5).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, tmpvar_6).xyz * scale2)\n   + bias2)).x * tmpvar_3.x);\n  float tmpvar_7;\n  vec2 tmpvar_8;\n  tmpvar_8 = (uv + vec2(0.0, 0.005));\n  vec2 tmpvar_9;\n  tmpvar_9 = (uv - vec2(0.0, 0.005));\n  tmpvar_7 = (((\n    (texture (sampler_blur2, tmpvar_8).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, tmpvar_9).xyz * scale2)\n   + bias2)).x * tmpvar_3.y);\n  vec2 tmpvar_10;\n  tmpvar_10.x = tmpvar_4;\n  tmpvar_10.y = tmpvar_7;\n  vec2 tmpvar_11;\n  tmpvar_11.x = (((\n    (texture (sampler_blur2, tmpvar_5).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, tmpvar_6).xyz * scale2)\n   + bias2)).x * tmpvar_3.x);\n  tmpvar_11.y = (((\n    (texture (sampler_blur2, tmpvar_8).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, tmpvar_9).xyz * scale2)\n   + bias2)).x * tmpvar_3.y);\n  ret_2.x = texture (sampler_fw_main, ((uv - (tmpvar_10 * 0.01)) + (tmpvar_11 * 0.003))).x;\n  vec4 tmpvar_12;\n  tmpvar_12 = texture (sampler_blur3, uv);\n  ret_2.x = (ret_2.x + ((ret_2.x - \n    ((tmpvar_12.xyz * scale3) + bias3)\n  .x) * 0.1));\n  ret_2.x = (ret_2.x + 0.004);\n  vec2 tmpvar_13;\n  tmpvar_13.x = tmpvar_7;\n  tmpvar_13.y = -(tmpvar_4);\n  my_uv_1 = (uv + ((tmpvar_13 * 0.05) * (1.2 - \n    ((tmpvar_12.xyz * scale3) + bias3)\n  .y)));\n  ret_2.z = texture (sampler_fw_main, my_uv_1).z;\n  vec2 x_14;\n  x_14 = (my_uv_1 - uv);\n  ret_2.z = (ret_2.z + ((\n    ((ret_2.z - ((texture (sampler_blur1, uv).xyz * scale1) + bias1).z) * sqrt(dot (x_14, x_14)))\n   * 180.0) / sqrt(\n    dot (tmpvar_3, tmpvar_3)\n  )));\n  ret_2.z = (ret_2.z * 0.8);\n  ret_2.z = (ret_2.z + 0.004);\n  vec2 tmpvar_15;\n  tmpvar_15.x = -(tmpvar_7);\n  tmpvar_15.y = tmpvar_4;\n  my_uv_1 = (tmpvar_15 * 0.045);\n  vec2 tmpvar_16;\n  tmpvar_16.x = (((\n    (texture (sampler_blur2, (uv + vec2(0.01, 0.0))).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, (uv - vec2(0.01, 0.0))).xyz * scale2)\n   + bias2)).y * tmpvar_3.x);\n  tmpvar_16.y = (((\n    (texture (sampler_blur2, (uv + vec2(0.0, 0.01))).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, (uv - vec2(0.0, 0.01))).xyz * scale2)\n   + bias2)).y * tmpvar_3.y);\n  my_uv_1 = (my_uv_1 + (uv - (tmpvar_16 * 0.03)));\n  ret_2.y = texture (sampler_fw_main, my_uv_1).y;\n  ret_2.y = (ret_2.y + ((ret_2.y - \n    ((texture (sampler_blur3, my_uv_1).xyz * scale3) + bias3)\n  .y) * 0.2));\n  vec4 tmpvar_17;\n  tmpvar_17.w = 0.0;\n  tmpvar_17.xyz = ret_2;\n  vec3 tmpvar_18;\n  tmpvar_18 = mix (tmpvar_17, texture (sampler_main, uv_orig), vec4(0.2, 0.2, 0.2, 0.2)).xyz;\n  ret_2 = tmpvar_18;\n  vec4 tmpvar_19;\n  tmpvar_19.w = 1.0;\n  tmpvar_19.xyz = tmpvar_18;\n  ret = tmpvar_19.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (texture (sampler_main, uv).xyz + (clamp (\n    ((((texture (sampler_blur2, uv).xyz * scale2) + bias2) * 2.8) - 0.13)\n  , 0.0, 1.0) * vec3(1.4, 0.3, 1.3)));\n  ret = tmpvar_1.xyz;\n }","warp_hlsl":"shader_body\n{\n    float2 scale = float2(1280,1024)*texsize.zw; // 1280x1024 : the resolution i modelled this shader with\n    float1 d = 0.005;\n    float1 dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).x*scale.x;\n    float1 dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).x*scale.y;\n    float1 dxb = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).x*scale.x;\n    float1 dyb = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).x*scale.y;\n    float2 my_uv = uv - float2(dx,dy)*0.01 + float2(dxb,dyb)*0.003;\n\n\n\n    float2 v = 0.01;\n    ret.x = tex2D( sampler_fw_main, my_uv -floor(my_uv)*0).x;\n\n    \n    ret.x += (ret.x - GetBlur3(uv).x)*.1;\n    ret.x += 0.004;\n\n\n//--------------------------------\n\n    my_uv = uv + float2(dy,-dx)*0.05*(1.2-GetBlur3(uv).y);\n\n\n\n    v = 0.01;\n    ret.z = tex2D( sampler_fw_main, my_uv).z;\n    \n    ret.z += (ret.z - GetBlur1(uv).z)*length(my_uv-uv)*180/length(scale);\n    ret.z *= 0.8;\n    ret.z += 0.004;\n\n\n\n//--------------------------------\n\n    d = 0.01;\n    my_uv = float2(-dy,dx)*0.045;\n\n    dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).y*scale.x;\n    dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).y*scale.y;\n    my_uv += uv - float2(dx,dy)*0.03;\n\n\n\n    v = 0.01;\n    ret.y =tex2D( sampler_fw_main, my_uv).y;\n\n    \n    ret.y += (ret.y - GetBlur3(my_uv).y)*0.2 + 0.0;\n    ret = lerp(ret, tex2D(sampler_main,uv_orig), 0.2); //motionblur\n\n//ret = 0;\n}","comp_hlsl":"shader_body\n{\n    ret = tex2D(sampler_main, uv).xyz;\n    ret += saturate(GetBlur2(uv)*2.8 - 0.13)*float3(1.4,0.3,1.3);\n}\n\n"}