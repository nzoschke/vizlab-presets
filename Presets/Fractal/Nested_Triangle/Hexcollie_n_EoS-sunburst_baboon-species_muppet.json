{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.94,"echo_zoom":0.992,"echo_alpha":0.5,"echo_orient":1,"wave_mode":2,"wave_dots":1,"wave_brighten":0,"brighten":1,"darken":1,"wave_a":0.001,"wave_scale":0.012,"wave_smoothing":0.9,"warpscale":1.331,"zoomexp":1.3478,"zoom":1.2803,"rot":0.62,"warp":0.0124,"wave_r":0.5,"wave_g":0.4,"wave_b":0.3,"mv_x":17.28,"mv_y":12.48,"mv_l":2,"mv_g":0.5,"mv_b":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"thickoutline":1,"textured":1,"rad":0.18167,"tex_zoom":1.17258,"g":1,"b":1,"a":0.03,"g2":0,"a2":1,"border_g":0.2,"border_b":0.03,"border_a":0},"init_eqs_str":"a.scale=0;a.q6=0;a.xp=0;a.yp=0;a.scale=1;","frame_eqs_str":"a.scale*=a.q6;a.scale=.00001<Math.abs(above(a.scale,3.5))?.5:a.scale;a.xp=Math.floor(rand(10))-5;a.yp=Math.floor(rand(8))-4;a.xp=a.xp*a.scale*.96;a.yp*=a.scale;a.rad*=a.scale;a.x=div(a.xp,10)+.5;a.y=div(a.yp,8)+.5;a.b=Math.min(a.mid*a.mid,1);a.b2=a.b;","init_eqs_eel":"scale = 1;","frame_eqs_eel":"scale = scale * q6;\n\nscale = if( above(scale,3.5) , 0.5 , scale );\n\nxp = int(rand(10))-5;\nyp = int(rand(8))-4;\n\nxp = xp*scale*0.96;\nyp = yp*scale;\n\nrad = rad * scale;\n\nx = xp/10 + 0.5;\ny = yp/8 + 0.5;\n\n\nb = min( mid*mid , 1 );\nb2 = b;"},{"baseVals":{"enabled":1,"sides":3,"rad":0.49138,"g":0.9,"b":0.47,"r2":0.6,"g2":0.3,"border_r":0,"border_g":0,"border_b":0,"border_a":1},"init_eqs_str":"","frame_eqs_str":"a.ang=6.28*(.5*Math.sin(div(a.time,10))+.5);a.b=Math.min(a.mid*a.mid,1);a.b2=a.b;","init_eqs_eel":"","frame_eqs_eel":"ang=(sin(time/10)*0.5+0.5)*6.28;\n\n\nb = min( mid*mid , 1 );\nb2 = b;"},{"baseVals":{"enabled":1,"sides":14,"textured":1,"rad":0.29582,"tex_zoom":2.47312,"g":1,"b":1,"r2":1,"b2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"a.q1=0;","frame_eqs_str":"a.tex_zoom=.9*a.q1+.3;","init_eqs_eel":"","frame_eqs_eel":"\n\ntex_zoom=q1*0.9 +0.3;"},{"baseVals":{"enabled":1,"thickoutline":1,"textured":1,"rad":0.18167,"tex_zoom":1.17258,"g":1,"b":1,"a":0.53,"g2":0,"a2":0.3,"border_g":0.2,"border_b":0.1,"border_a":0},"init_eqs_str":"a.scale=0;a.q6=0;a.xp=0;a.yp=0;a.scale=3;","frame_eqs_str":"a.scale*=a.q6;a.scale=.00001<Math.abs(above(a.scale,3.5))?.5:a.scale;a.xp=Math.floor(rand(10))-5;a.yp=Math.floor(rand(8))-4;a.xp=a.xp*a.scale*.96;a.yp*=a.scale;a.rad*=a.scale;a.x=div(a.xp,10)+.5;a.y=div(a.yp,8)+.5;a.b=Math.min(a.mid*a.mid,1);a.b2=a.b;","init_eqs_eel":"scale = 3;","frame_eqs_eel":"scale = scale * q6;\n\nscale = if( above(scale,3.5) , 0.5 , scale );\n\nxp = int(rand(10))-5;\nyp = int(rand(8))-4;\n\nxp = xp*scale*0.96;\nyp = yp*scale;\n\nrad = rad * scale;\n\nx = xp/10 + 0.5;\ny = yp/8 + 0.5;\n\n\nb = min( mid*mid , 1 );\nb2 = b;"}],"waves":[{"baseVals":{"thick":1,"g":0.6,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"t1 = q2*2; //volume time","point_eqs_str":"//traveling line\n\nn = sample*6.283;\nphase = sample;\n\n//draw circle, loop 32x\nxp = 0;\nyp = 0;\nzp = -0.3;\n\n//x axis rotation;\nang = (t1 + phase) * 7;\nsang = sin(ang);cang = cos(ang);\nxq = xp;\nyq = yp*cang - zp*sang;\nzq = yp*sang + zp*cang;\nxp=xq;yp=yq;zp=zq;\n\n//y axis rotation;\nang = (t1 + phase) * 2.2;\nsang = sin(ang);cang = cos(ang);\nxq = xp*cang - zp*sang;\nyq = yp;\nzq = xp*sang + zp*cang;\nxp=xq;yp=yq;zp=zq;\n\n//z axis rotation;\nang = (t1 + phase) * 3.4;\nsang = sin(ang);cang = cos(ang);\nxq = xp*cang - yp*sang;\nyq = xp*sang + yp*cang;\nzq = zp;\nxp=xq;yp=yq;zp=zq;\n\n//push forward into viewspace\nzp = zp + 4;\n\nfov = 1; //larger number equal less extreme perspective (zoom in)\n\n//project into camera space, and compensate for aspect ratio\nx = -xp/zp * fov + 0.5;\ny = yp/zp * 1.3333 * fov + 0.5;\n\na = sample","init_eqs_eel":"","frame_eqs_eel":"t1 = q2*2; //volume time","point_eqs_eel":"//traveling line\n\nn = sample*6.283;\nphase = sample;\n\n//draw circle, loop 32x\nxp = 0;\nyp = 0;\nzp = -0.3;\n\n//x axis rotation;\nang = (t1 + phase) * 7;\nsang = sin(ang);cang = cos(ang);\nxq = xp;\nyq = yp*cang - zp*sang;\nzq = yp*sang + zp*cang;\nxp=xq;yp=yq;zp=zq;\n\n//y axis rotation;\nang = (t1 + phase) * 2.2;\nsang = sin(ang);cang = cos(ang);\nxq = xp*cang - zp*sang;\nyq = yp;\nzq = xp*sang + zp*cang;\nxp=xq;yp=yq;zp=zq;\n\n//z axis rotation;\nang = (t1 + phase) * 3.4;\nsang = sin(ang);cang = cos(ang);\nxq = xp*cang - yp*sang;\nyq = xp*sang + yp*cang;\nzq = zp;\nxp=xq;yp=yq;zp=zq;\n\n//push forward into viewspace\nzp = zp + 4;\n\nfov = 1; //larger number equal less extreme perspective (zoom in)\n\n//project into camera space, and compensate for aspect ratio\nx = -xp/zp * fov + 0.5;\ny = yp/zp * 1.3333 * fov + 0.5;\n\na = sample"},{"baseVals":{"enabled":1,"thick":1,"additive":1,"r":0.7,"g":0.4,"b":0,"a":0.11},"init_eqs_str":"a.t1=0;a.n=0;a.xp=0;a.yp=0;a.zp=0;a.t2=0;a.t1=0;","frame_eqs_str":"a.t1=div(3.1415,8)-.02;a.t2=a.time-Math.floor(a.time);a.t2*=5;","point_eqs_str":"a.t1+=.25;a.n=6.283*a.sample;a.xp=Math.sin(6.283*a.t1)+3;a.yp=Math.cos(6.283*a.t1);a.zp=3+400*a.sample-a.t2;a.x=div(a.xp,a.zp)+.5;a.y=1.333*div(a.yp,a.zp)+.5;","init_eqs_eel":"t1 = 0;","frame_eqs_eel":"t1 = 3.1415 / 8 - 0.020;\n\nt2 = time - int(time);\nt2 = t2*5;","point_eqs_eel":"t1 = t1 + 0.25;\n\nn = sample*6.283;\n\nxp = sin(t1*6.283)+ 3;\nyp = cos(t1*6.283);\nzp = 3 + sample*400 - t2;\n\nx = xp/zp + 0.5;\ny = yp/zp * 1.333 + 0.5;"},{"baseVals":{"enabled":1,"thick":1,"additive":1,"g":0.8,"b":0.2,"a":0.1},"init_eqs_str":"a.t1=0;a.n=0;a.xp=0;a.yp=0;a.zp=0;a.t2=0;a.t1=0;","frame_eqs_str":"a.t1=div(3.1415,8)-.02;a.t2=a.time-Math.floor(a.time);a.t2*=5;","point_eqs_str":"a.t1+=.25;a.n=6.283*a.sample;a.xp=Math.sin(6.283*a.t1)+1;a.yp=Math.cos(6.283*a.t1);a.zp=3+400*a.sample-a.t2;a.x=div(a.xp,a.zp)+.5;a.y=1.333*div(a.yp,a.zp)+.5;","init_eqs_eel":"t1 = 0;","frame_eqs_eel":"t1 = 3.1415 / 8 - 0.020;\n\nt2 = time - int(time);\nt2 = t2*5;","point_eqs_eel":"t1 = t1 + 0.25;\n\nn = sample*6.283;\n\nxp = sin(t1*6.283) + 1;\nyp = cos(t1*6.283);\nzp = 3 + sample*400 - t2;\n\nx = xp/zp + 0.5;\ny = yp/zp * 1.333 + 0.5;"},{"baseVals":{"enabled":1,"thick":1,"additive":1,"g":0.9,"b":0.8,"a":0.13},"init_eqs_str":"a.t1=0;a.n=0;a.xp=0;a.yp=0;a.zp=0;a.t2=0;a.t1=0;","frame_eqs_str":"a.t1=div(3.1415,8)-.02;a.t2=a.time-Math.floor(a.time);a.t2*=5;","point_eqs_str":"a.t1+=.25;a.n=6.283*a.sample;a.xp=Math.sin(6.283*a.t1);a.yp=Math.cos(6.283*a.t1);a.zp=3+400*a.sample-a.t2;a.x=div(a.xp,a.zp)+.5;a.y=1.333*div(a.yp,a.zp)+.5;","init_eqs_eel":"t1 = 0;","frame_eqs_eel":"t1 = 3.1415 / 8 - 0.020;\n\nt2 = time - int(time);\nt2 = t2*5;","point_eqs_eel":"t1 = t1 + 0.25;\n\nn = sample*6.283;\n\nxp = sin(t1*6.283);\nyp = cos(t1*6.283);\nzp = 3 + sample*400 - t2;\n\nx = xp/zp + 0.5;\ny = yp/zp * 1.333 + 0.5;"}],"init_eqs_str":"a.q1=0;a.q2=0;a.q3=0;a.q4=0;a.q5=0;","frame_eqs_str":"a.wave_r=.5+div(Math.sin(div(a.time,2))-Math.cos(.22*a.time),2);a.wave_g=.5-div(Math.sin(.877*a.time),2);a.wave_b=.5-div(Math.cos(a.time),2);a.rot+=.03*(.6*Math.sin(.381*a.time)+.4*Math.sin(.479*a.time));a.zoom=1.4+div(Math.sin(.2*a.time),12);a.wave_mystery=div(a.time,6);a.q1=.25*(.5+.5*Math.sin(a.time));a.q2=.25*Math.sin(.567*a.time);a.q3=.125*(Math.sin(.831*a.time)+Math.sin(1.521*a.time));a.q4=.25*Math.sin(Math.log(a.time));a.q5=.25*Math.sin(pow(a.time,.5));","pixel_eqs_str":"a.zoom=a.zoom-div(Math.sin(1-a.rad),10)-.2;a.rot+=.00001<Math.abs(below(a.rad,.2))?a.q1:.00001<Math.abs(below(a.rad,.4))?a.q2:.00001<Math.abs(below(a.rad,.6))?a.q3:.00001<Math.abs(below(a.rad,.8))?a.q4:a.q5;","init_eqs_eel":"","frame_eqs_eel":"wave_r = 0.5 + (sin(time/2) - cos(time*0.22))/2; \nwave_g = 0.5 - sin(time*0.877)/2; \nwave_b = 0.5 - cos(time)/2; \nrot = rot + 0.030*( 0.60*sin(0.381*time) + 0.40*sin(0.479*time) ); \nzoom=1.4 + sin(time*0.2)/12; \nwave_mystery = time/6; \nq1 = 0.25*(0.5 + 0.5*sin(time)); \nq2 = 0.25*sin(0.567*time); \nq3 = 0.125*(sin(0.831*time) + sin(1.521*time)); \nq4 = 0.25*sin(log(time)); \nq5 = 0.25*sin(pow(time,0.5));","pixel_eqs_eel":"zoom=zoom-sin(1-rad)/10-0.2; \nrot = rot + ( if( below( rad,0.2 ), q1, if( below( rad,0.4 ), q2, if( below( rad, 0.6 ), q3, if( below( rad, 0.8 ), q4, q5)))));","warp":" shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = (texsize.zw * 8.0);\n  vec3 tmpvar_3;\n  tmpvar_3 = (((texture (sampler_blur1, \n    (uv + (vec2(1.0, 0.0) * tmpvar_2))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv - (vec2(1.0, 0.0) * tmpvar_2))\n  ).xyz * scale1) + bias1));\n  vec3 tmpvar_4;\n  tmpvar_4 = (((texture (sampler_blur1, \n    (uv + (vec2(0.0, 1.0) * tmpvar_2))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv - (vec2(0.0, 1.0) * tmpvar_2))\n  ).xyz * scale1) + bias1));\n  vec2 tmpvar_5;\n  tmpvar_5.x = tmpvar_3.x;\n  tmpvar_5.y = tmpvar_4.x;\n  vec2 tmpvar_6;\n  tmpvar_6 = (uv + ((tmpvar_5 * texsize.zw) * 4.0));\n  vec2 tmpvar_7;\n  tmpvar_7.x = tmpvar_3.y;\n  tmpvar_7.y = tmpvar_4.y;\n  vec2 tmpvar_8;\n  tmpvar_8 = (uv + ((tmpvar_7 * texsize.zw) * 4.0));\n  vec2 tmpvar_9;\n  tmpvar_9.x = tmpvar_3.z;\n  tmpvar_9.y = tmpvar_4.z;\n  vec2 tmpvar_10;\n  tmpvar_10 = (uv + ((tmpvar_9 * texsize.zw) * 4.0));\n  ret_1.x = (texture (sampler_main, tmpvar_6).x - ((texture (sampler_main, tmpvar_6).xyz - \n    ((texture (sampler_blur3, tmpvar_6).xyz * scale3) + bias3)\n  ).x * 0.02));\n  ret_1.y = (texture (sampler_main, tmpvar_8).y - ((texture (sampler_main, tmpvar_8).xyz - \n    ((texture (sampler_blur3, tmpvar_8).xyz * scale3) + bias3)\n  ).y * 0.02));\n  ret_1.z = (texture (sampler_main, tmpvar_10).z - ((texture (sampler_main, tmpvar_10).xyz - \n    ((texture (sampler_blur3, tmpvar_10).xyz * scale3) + bias3)\n  ).z * 0.02));\n  ret_1 = (ret_1 - ((ret_1.yzx * 0.1) - 0.04));\n  vec4 tmpvar_11;\n  tmpvar_11.w = 1.0;\n  tmpvar_11.xyz = ret_1;\n  ret = tmpvar_11.xyz;\n }","comp":" shader_body { \n  vec2 uv_rr_1;\n  vec2 uv_r_2;\n  vec3 ret_3;\n  vec2 tmpvar_4;\n  tmpvar_4.x = q13;\n  tmpvar_4.y = q14;\n  vec2 tmpvar_5;\n  tmpvar_5 = ((uv - tmpvar_4) * aspect.xy);\n  vec2 tmpvar_6;\n  tmpvar_6.x = ((q12 * tmpvar_5.x) - (q11 * tmpvar_5.y));\n  tmpvar_6.y = ((q11 * tmpvar_5.x) + (q12 * tmpvar_5.y));\n  uv_r_2 = (q15 * tmpvar_6);\n  uv_r_2 = (tmpvar_4 + (uv_r_2 * aspect.zw));\n  uv_r_2 = (1.0 - abs((\n    (fract((uv_r_2 * 0.5)) * 2.0)\n   - 1.0)));\n  vec2 tmpvar_7;\n  tmpvar_7 = (uv_r_2 - tmpvar_4);\n  vec2 tmpvar_8;\n  tmpvar_8.x = ((q18 * tmpvar_7.x) - (q17 * tmpvar_7.y));\n  tmpvar_8.y = ((q17 * tmpvar_7.x) + (q18 * tmpvar_7.y));\n  uv_rr_1 = (q16 * tmpvar_8);\n  uv_rr_1 = (tmpvar_4 + uv_rr_1);\n  vec2 tmpvar_9;\n  tmpvar_9 = (uv_rr_1 - 0.5);\n  float tmpvar_10;\n  float tmpvar_11;\n  tmpvar_11 = (min (abs(\n    (tmpvar_9.x / tmpvar_9.y)\n  ), 1.0) / max (abs(\n    (tmpvar_9.x / tmpvar_9.y)\n  ), 1.0));\n  float tmpvar_12;\n  tmpvar_12 = (tmpvar_11 * tmpvar_11);\n  tmpvar_12 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_12) + 0.05368138) * tmpvar_12) - 0.1173503)\n     * tmpvar_12) + 0.1938925) * tmpvar_12) - 0.3326756)\n   * tmpvar_12) + 0.9999793) * tmpvar_11);\n  tmpvar_12 = (tmpvar_12 + (float(\n    (abs((tmpvar_9.x / tmpvar_9.y)) > 1.0)\n  ) * (\n    (tmpvar_12 * -2.0)\n   + 1.570796)));\n  tmpvar_10 = (tmpvar_12 * sign((tmpvar_9.x / tmpvar_9.y)));\n  if ((abs(tmpvar_9.y) > (1e-08 * abs(tmpvar_9.x)))) {\n    if ((tmpvar_9.y < 0.0)) {\n      if ((tmpvar_9.x >= 0.0)) {\n        tmpvar_10 += 3.141593;\n      } else {\n        tmpvar_10 = (tmpvar_10 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_10 = (sign(tmpvar_9.x) * 1.570796);\n  };\n  vec2 tmpvar_13;\n  tmpvar_13.x = ((tmpvar_10 * q21) * 1.5);\n  tmpvar_13.y = (((0.666 * \n    log(sqrt(dot (tmpvar_9, tmpvar_9)))\n  ) - (tmpvar_10 * q21)) + q22);\n  ret_3 = texture (sampler_main, clamp ((0.5 + (\n    (0.5 - abs(((\n      fract((tmpvar_13 * 0.5))\n     * 2.0) - 1.0)))\n   * vec2(0.96, 1.02))), 0.0, 1.0)).xyz;\n  ret_3 = (1.0 - pow ((\n    ((texture (sampler_blur2, uv).xyz * scale2) + bias2)\n   / bass_att), vec3((1.0 - \n    dot (clamp (pow ((\n      ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n     / treb_att), vec3((1.0 - \n      dot (clamp (ret_3, 0.0, 1.0), vec3(0.32, 0.49, 0.29))\n    ))), 0.0, 1.0), vec3(0.32, 0.49, 0.29))\n  ))));\n  vec4 tmpvar_14;\n  tmpvar_14.w = 1.0;\n  tmpvar_14.xyz = ret_3;\n  ret = tmpvar_14.xyz;\n }","warp_hlsl":"shader_body\n{\n    float2 d = texsize.zw * 8;\n    float3 dx = ( GetBlur1(uv + float2(1,0)*d) - GetBlur1(uv-float2(1,0)*d) );\n    float3 dy = ( GetBlur1(uv + float2(0,1)*d) - GetBlur1(uv-float2(0,1)*d) );\n\n    float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.24 + rand_frame.xy;\n\n    float2 my_uv =  lerp(uv_orig,uv,1) ;\n    float2 uv_x= my_uv + float2(dx.x,dy.x)*texsize.zw  *4;\n    float2 uv_y= my_uv + float2(dx.y,dy.y)*texsize.zw  *4;\n    float2 uv_z= my_uv + float2(dx.z,dy.z)*texsize.zw  *4;\n    ret.x = GetPixel(uv_x).x - (GetPixel(uv_x) - GetBlur3(uv_x)).x  * 0.02;\n    ret.y = GetPixel(uv_y).y - (GetPixel(uv_y) - GetBlur3(uv_y)).y  * 0.02;\n    ret.z = GetPixel(uv_z).z - (GetPixel(uv_z) - GetBlur3(uv_z)).z  * 0.02;\n\n    ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5) *0.0;\n    ret -= ret.yzx*0.1 - 0.04;\n\n}","comp_hlsl":"shader_body\n{\n//ret=tex2D(sampler_main,uv);\n// ***** Flexis rotating caleidoscope code *****\nfloat2 cntr = float2(q13,q14); float sin = q11; float cos = q12; float scale = q15;\nfloat2 uv_r = (uv-cntr)*aspect.xy;\n       uv_r = scale*float2( cos*uv_r.x - sin*uv_r.y, sin*uv_r.x + cos*uv_r.y); // rotation\n       uv_r = cntr + uv_r*aspect.zw;\n       uv_r = 1.0 - abs( frac( uv_r * 0.5 ) * 2.0 - 1.0 ); // mirror\nsin = q17; cos = q18; scale = q16;\nfloat2 uv_rr = (uv_r-cntr);\n       uv_rr = scale*float2( cos*uv_rr.x - sin*uv_rr.y, sin*uv_rr.x + cos*uv_rr.y); // counter-rotation\n       uv_rr = cntr + (uv_rr);\nfloat t = q22;\nfloat2 c = ((uv_rr-0.5));\nfloat1 ang_hq = atan2(c.x,c.y);\nfloat2 spiral = float2(ang_hq*q21*1.5,0.666*log(length(c))-ang_hq*q21+t);\nspiral = 0.5 + (0.5 - abs( frac( spiral * 0.5 ) * 2.0 - 1.0 ))*float2(0.96,1.02); // mirror\nret = GetPixel(saturate(spiral));\n\n\n//ret=lum(ret)>0+(lum(ret)<=0.75)*ret;\nret=pow(GetBlur1(uv).xyz/treb_att,1-lum(saturate(ret.xyz)));\nret=pow(GetBlur2(uv).xyz/bass_att,1-lum(saturate(ret.xyz)));\nret=1-ret;\n}"}