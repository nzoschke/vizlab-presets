{"version":2,"baseVals":{"rating":5,"gammaadj":1.84,"decay":0.95,"echo_zoom":2.216,"wave_mode":7,"additivewave":1,"wave_brighten":0,"wrap":0,"darken_center":1,"brighten":1,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"mv_x":64,"mv_y":48,"mv_l":0.5,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":3,"textured":1,"rad":0.83263,"tex_zoom":0.9327,"g":1,"b":1,"a":0.8,"r2":1,"b2":1,"border_a":0.3},"init_eqs_str":"","frame_eqs_str":"a.ang=a.time;","init_eqs_eel":"","frame_eqs_eel":"ang=time;"},{"baseVals":{"enabled":1,"sides":3,"textured":1,"y":0.65,"rad":0.95708,"g":1,"b":1,"r2":1,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.x=.05*Math.sin(a.time)+.5;a.ang=.25*a.time;","init_eqs_eel":"","frame_eqs_eel":"x=(sin(time)*.05)+.5;\n\nang=time*.25;"},{"baseVals":{"sides":100,"x":0.34,"y":0.34,"rad":0.89269,"g":1,"a":0.01,"r2":1,"border_a":0.02,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":3,"y":0,"rad":1.82742,"ang":0.1885,"g":1,"a":0,"r2":1,"a2":0.01,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"usedots":1,"thick":1,"additive":1,"r":0.4,"b":0.3},"init_eqs_str":"a.d=0;a.la=0;a.wx=0;a.branch=0;a.sc=0;a.wa=0;a.wy=0;a.ra=0;a.wainc=0;","frame_eqs_str":"","point_eqs_str":"a.la=.25+.09*a.treb_att+.2*Math.sin(a.time);a.ra=-.25-.09*a.treb+.2*Math.cos(a.time);a.branch=Math.floor(rand(2));a.wx=.00001<Math.abs(equal(a.sc,0))?.5:a.wx;a.wy=.00001<Math.abs(equal(a.sc,0))?.1:a.wy;a.wx=.00001<Math.abs(equal(a.sc,1))?.5:a.wx;a.wy=.00001<Math.abs(equal(a.sc,1))?.4:a.wy;a.d=.00001<Math.abs(below(a.sc,2))?.3:.7*a.d+.003*a.bass_att;a.wainc=.00001<Math.abs(equal(a.branch,1))?a.la:a.ra;a.wa=.00001<Math.abs(below(a.sc,2))?1.57079635:a.wa+a.wainc;a.wx=.00001<Math.abs(above(a.sc,\n2))?a.wx+Math.cos(a.wa)*a.d:a.wx;a.wy=.00001<Math.abs(above(a.sc,2))?a.wy+Math.sin(a.wa)*a.d:a.wy;a.sc=.00001<Math.abs(equal(a.sc,10))?0:a.sc+1;a.a=.00001<Math.abs(below(a.sc,2))?0:.1;a.x=a.wx;a.y=a.wy;a.r=.65*a.treb_att;a.g=.65*a.mid_att;a.b=Math.sin(.6*a.time);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//left and right angles\nla=.25+(treb_att*.09)+(.2*sin(time));\nra=-.25-(treb*.09)+(.2*cos(time));\n\n//left or right?\nbranch=int(rand(2));\n\n//base\nwx=if(equal(sc,0),.5,wx);\nwy=if(equal(sc,0),.1,wy);\n\nwx=if(equal(sc,1),.5,wx);\nwy=if(equal(sc,1),.4,wy);\n\n//calculate previous branch length\nd=if(below(sc,2),.3,.7*d+(bass_att*.003));\n\n//angle\nwainc=if(equal(branch,1),la,ra);\n\nwa=if(below(sc,2),3.1415927*.5,wa+wainc);\n\n//branches\nwx=if(above(sc,2),wx+cos(wa)*d,wx);\nwy=if(above(sc,2),wy+sin(wa)*d,wy);\n\n//sample count\nsc=if(equal(sc,10),0,sc+1); //depth setting\n\na=if(below(sc,2),0,.1);\n\nx=wx;\ny=wy;\n\nr=treb_att*.65;\ng=mid_att*.65;\nb=sin(time*.6);"},{"baseVals":{"enabled":1,"a":0.02},"init_eqs_str":"a.d=0;a.la=0;a.wx=0;a.branch=0;a.sc=0;a.wa=0;a.wy=0;a.ra=0;a.wainc=0;","frame_eqs_str":"","point_eqs_str":"a.la=.15+.09*a.treb_att+.2*Math.sin(a.time);a.ra=-.15-.09*a.treb+.2*Math.cos(a.time);a.branch=Math.floor(rand(2));a.wx=.00001<Math.abs(equal(a.sc,0))?.5:a.wx;a.wy=.00001<Math.abs(equal(a.sc,0))?.1:a.wy;a.wx=.00001<Math.abs(equal(a.sc,1))?.5:a.wx;a.wy=.00001<Math.abs(equal(a.sc,1))?.4:a.wy;a.d=.00001<Math.abs(below(a.sc,2))?.3:.7*a.d+.003*a.treb_att;a.wainc=.00001<Math.abs(equal(a.branch,1))?a.la:a.ra;a.wa=.00001<Math.abs(below(a.sc,2))?1.57079635:a.wa+a.wainc;a.wx=.00001<Math.abs(above(a.sc,\n2))?a.wx+Math.cos(a.wa)*a.d:a.wx;a.wy=.00001<Math.abs(above(a.sc,2))?a.wy+Math.sin(a.wa)*a.d:a.wy;a.sc=.00001<Math.abs(equal(a.sc,10))?0:a.sc+1;a.a=.00001<Math.abs(below(a.sc,2))?0:.1;a.x=a.wx;a.y=a.wy;a.r=Math.sin(a.time);a.g=Math.sin(a.time+.23);a.b=Math.sin(.6*a.time);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//left and right angles\nla=.15+(treb_att*.09)+(.2*sin(time));\nra=-.15-(treb*.09)+(.2*cos(time));\n\n//left or right?\nbranch=int(rand(2));\n\n//base\nwx=if(equal(sc,0),.5,wx);\nwy=if(equal(sc,0),.1,wy);\n\nwx=if(equal(sc,1),.5,wx);\nwy=if(equal(sc,1),.4,wy);\n\n//calculate previous branch length\nd=if(below(sc,2),.3,.7*d+(treb_att*.003));\n\n//angle\nwainc=if(equal(branch,1),la,ra);\n\nwa=if(below(sc,2),3.1415927*.5,wa+wainc);\n\n//branches\nwx=if(above(sc,2),wx+cos(wa)*d,wx);\nwy=if(above(sc,2),wy+sin(wa)*d,wy);\n\n//sample count\nsc=if(equal(sc,10),0,sc+1); //depth setting\n\na=if(below(sc,2),0,.1);\n\nx=wx;\ny=wy;\n\nr=sin(time);\ng=sin(time+.23);\nb=sin(time*.6);"},{"baseVals":{"enabled":1,"additive":1,"a":0},"init_eqs_str":"a.d=0;a.la=0;a.wx=0;a.branch=0;a.sc=0;a.wa=0;a.wy=0;a.ra=0;a.wainc=0;","frame_eqs_str":"","point_eqs_str":"a.la=.2+.09*a.treb_att+.2*Math.sin(a.time);a.ra=-.2-.09*a.treb+.2*Math.cos(a.time);a.branch=Math.floor(rand(2));a.wx=.00001<Math.abs(equal(a.sc,0))?.5:a.wx;a.wy=.00001<Math.abs(equal(a.sc,0))?.1:a.wy;a.wx=.00001<Math.abs(equal(a.sc,1))?.5:a.wx;a.wy=.00001<Math.abs(equal(a.sc,1))?.4:a.wy;a.d=.00001<Math.abs(below(a.sc,2))?.3:.7*a.d;a.wainc=.00001<Math.abs(equal(a.branch,1))?a.la:a.ra;a.wa=.00001<Math.abs(below(a.sc,2))?1.57079635:a.wa+a.wainc;a.wx=.00001<Math.abs(above(a.sc,\n2))?a.wx+Math.cos(a.wa)*a.d:a.wx;a.wy=.00001<Math.abs(above(a.sc,2))?a.wy+Math.sin(a.wa)*a.d:a.wy;a.sc=.00001<Math.abs(equal(a.sc,10))?0:a.sc+1;a.a=.00001<Math.abs(below(a.sc,2))?0:.1;a.x=a.wx;a.y=a.wy;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//left and right angles\nla=.2+(treb_att*.09)+(.2*sin(time));\nra=-.2-(treb*.09)+(.2*cos(time));\n\n//left or right?\nbranch=int(rand(2));\n\n//base\nwx=if(equal(sc,0),.5,wx);\nwy=if(equal(sc,0),.1,wy);\n\nwx=if(equal(sc,1),.5,wx);\nwy=if(equal(sc,1),.4,wy);\n\n//calculate previous branch length\nd=if(below(sc,2),.3,.7*d);\n\n//angle\nwainc=if(equal(branch,1),la,ra);\n\nwa=if(below(sc,2),3.1415927*.5,wa+wainc);\n\n//branches\nwx=if(above(sc,2),wx+cos(wa)*d,wx);\nwy=if(above(sc,2),wy+sin(wa)*d,wy);\n\n//sample count\nsc=if(equal(sc,10),0,sc+1); //depth setting\n\na=if(below(sc,2),0,.1);\n\nx=wx;\ny=wy;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.bass_x=0;a.vnum=0;a.q1=0;a.dvy=0;a.wave_vx=0;a.vx=0;a.wave_vy=0;a.vy=0;a.q4=0;a.a=0;a.vang=0;a.vtarget=0;a.b=0;a.vnum_increment=0;a.dvx=0;a.q2=0;a.q3=0;","frame_eqs_str":"a.vnum_increment=div(2,a.fps);a.vtarget+=.00001<Math.abs(above(a.bass*a.bass_att,4.5))?.00001<Math.abs(below(a.vtarget,a.vnum+1))?1:0:0;a.vnum+=.00001<Math.abs(below(a.vnum,a.vtarget-.5*a.vnum_increment))?a.vnum_increment:0;a.monitor=a.vnum;a.vang=.7853981633974483*a.vnum;a.q1=a.vang;a.q2=a.vnum_increment;a.q3=a.vnum;a.q4=a.vtarget;a.bass_x=Math.max(.7*a.bass_x+.3*Math.max(a.bass_att-.9,0),0);a.wave_vx=((mod(a.frame,3)-1)*a.bass_x*above(a.vnum,a.vtarget-.5*a.vnum_increment)+\n1)*a.wave_x;a.wave_vy=a.wave_y;a.wave_x=-(a.wave_vx-.5)*Math.cos(a.vang)+(a.wave_vy-.5)*Math.sin(a.vang)+.5;a.wave_y=-(a.wave_vx-.5)*Math.sin(a.vang)-(a.wave_vy-.5)*Math.cos(a.vang)+.5;a.wave_r=above(a.vnum,a.vtarget-.5*a.vnum_increment);a.decay=3000057.75;a.ob_a=Math.max(sqr(sqr(.25*Math.sin(1*a.time)+.25)),.00001<Math.abs(below(a.vnum,a.vtarget-.1))?.2:0);a.ob_a*=1-a.bass_x;a.dx=a.bass*a.wave_b;a.ib_size=a.wave_g*a.wave_g;a.ob_g=a.wave_r*a.wave_g;a.wave_b=a.wave_r*a.treb;a.wave_b+=a.wave_g;a.ib_g=\na.time+a.bass;a.ob_b=a.bass*a.treb;a.warp=a.treb+a.wave_r;a.dx+=a.wave_r;a.ob_size=a.wave_b*a.bass;a.mv_b=a.bass*a.bass;a.ob_b*=a.bass;a.warp=.00001<Math.abs(below(a.warp,.01))?.01:a.warp;a.warp=.00001<Math.abs(above(a.warp,100))?100:a.warp;a.dx=.00001<Math.abs(below(a.dx,-1))?-1:a.dx;a.dx=.00001<Math.abs(above(a.dx,1))?1:a.dx;a.wave_b=.00001<Math.abs(below(a.wave_b,0))?0:a.wave_b;a.wave_b=.00001<Math.abs(above(a.wave_b,1))?1:a.wave_b;a.ob_size=.00001<Math.abs(below(a.ob_size,0))?0:a.ob_size;a.ob_size=\n.00001<Math.abs(above(a.ob_size,.5))?.5:a.ob_size;a.ob_g=.00001<Math.abs(below(a.ob_g,0))?0:a.ob_g;a.ob_g=.00001<Math.abs(above(a.ob_g,1))?1:a.ob_g;a.ob_b=.00001<Math.abs(below(a.ob_b,0))?0:a.ob_b;a.ob_b=.00001<Math.abs(above(a.ob_b,1))?1:a.ob_b;a.ib_size=.00001<Math.abs(below(a.ib_size,0))?0:a.ib_size;a.ib_size=.00001<Math.abs(above(a.ib_size,.5))?.5:a.ib_size;a.ib_g=.00001<Math.abs(below(a.ib_g,0))?0:a.ib_g;a.ib_g=.00001<Math.abs(above(a.ib_g,1))?1:a.ib_g;a.mv_b=.00001<Math.abs(below(a.mv_b,0))?\n0:a.mv_b;a.mv_b=.00001<Math.abs(above(a.mv_b,1))?1:a.mv_b;a.wave_b=.00001<Math.abs(below(a.wave_b,0))?0:a.wave_b;a.wave_b=.00001<Math.abs(above(a.wave_b,1))?1:a.wave_b;a.ob_g=.00001<Math.abs(below(a.ob_g,0))?0:a.ob_g;a.ob_g=.00001<Math.abs(above(a.ob_g,1))?1:a.ob_g;a.ob_b=.00001<Math.abs(below(a.ob_b,0))?0:a.ob_b;a.ob_b=.00001<Math.abs(above(a.ob_b,1))?1:a.ob_b;","pixel_eqs_str":"a.rot=below(a.q3,a.q4-.5*a.q2)*a.q2*.8*(1-0*a.rad);a.vang=a.q1;a.vx=(a.x-.5)*Math.cos(a.vang)-(a.y-.5)*Math.sin(a.vang)+.5;a.vy=(a.x-.5)*Math.sin(a.vang)+(a.y-.5)*Math.cos(a.vang)+.5;a.vy=1-a.vy;a.dvy=-.01*mod(2*(a.vx+.08*Math.sin(Math.floor(rand(100)))),2)-.005;a.dvy=-.0025*(10*(1-a.vy)+Math.floor(rand(5)));a.dvx=.0001*Math.floor(rand(20))*Math.sin(Math.floor(rand(2))-.5);a.dvx*=sqr(a.vy);a.dvx=-.2*a.dvx*(Math.floor(rand(10))-5);a.dvx-=.04*(a.vx-.5)*(.8-sqr(a.vy));a.dvx+=Math.cos(10*\nsqr(a.vy-.5)-1.1*a.time)*sqr(1-a.vy)*.01;a.dx=a.dvx*Math.cos(a.vang)-a.dvy*Math.sin(a.vang);a.dy=-a.dvx*Math.sin(a.vang)-a.dvy*Math.cos(a.vang);a.cy=a.a+a.bass_att;a.sy=a.rot-a.y;a.rot=a.b*a.x;a.cy-=a.q1;a.zoomexp=a.bass_att-a.b;a.zoomexp+=a.b;a.dy=a.time+a.a;a.sx=a.time*a.y;a.cy*=a.b;a.zoomexp=.00001<Math.abs(below(a.zoomexp,.01))?.01:a.zoomexp;a.zoomexp=.00001<Math.abs(above(a.zoomexp,100))?100:a.zoomexp;a.rot=.00001<Math.abs(below(a.rot,-1))?-1:a.rot;a.rot=.00001<Math.abs(above(a.rot,1))?1:a.rot;\na.cy=.00001<Math.abs(below(a.cy,-1))?-1:a.cy;a.cy=.00001<Math.abs(above(a.cy,2))?2:a.cy;a.dy=.00001<Math.abs(below(a.dy,-1))?-1:a.dy;a.dy=.00001<Math.abs(above(a.dy,1))?1:a.dy;a.sx=.00001<Math.abs(below(a.sx,.01))?.01:a.sx;a.sx=.00001<Math.abs(above(a.sx,100))?100:a.sx;a.sy=.00001<Math.abs(below(a.sy,.01))?.01:a.sy;a.sy=.00001<Math.abs(above(a.sy,100))?100:a.sy;","init_eqs_eel":"","frame_eqs_eel":"//virtual;\nvnum_increment = 2/fps;\nvtarget = vtarget + if(above(bass*bass_att,4.5), if(below(vtarget,vnum+1),1,0),0);\nvnum = vnum + if(below(vnum,vtarget-vnum_increment*.5), vnum_increment,0);\nmonitor = vnum;\n;\nvang = vnum*3.14159265358979323*.25;\nq1=vang;\nq2 = vnum_increment;\nq3 = vnum;\nq4=vtarget;\n//vx = (x-.5)*cos(vang) - (y-.5)*sin(vang)+.5;\n//vy = (x-.5)*sin(vang) +(y-.5)*cos(vang)+.5;\n;\nbass_x = max(bass_x*.7+max(bass_att-.9,0)*.3,0);    //decaying bass max;\nwave_vx = ((frame%3-1)*bass_x* above(vnum,vtarget-vnum_increment*.5) +1)*wave_x;    //spreads flame;\nwave_vy=wave_y;\n;\nwave_x = -(wave_vx-.5)*cos(vang) + (wave_vy-.5)*sin(vang)+.5;\nwave_y = -(wave_vx-.5)*sin(vang) - (wave_vy-.5)*cos(vang)+.5;\n//end virtual;\nwave_r = above(vnum,vtarget-vnum_increment*.5);\n//wave_g = below(bass*bass_att,3.5);\ndecay = 3000000+57.75;                                      // Magic 'flame' decay;\n//wave_mystery = sin(time*.2)*.05+1;\n;\nob_a = max(sqr(sqr(sin(time*1)*.25+.25)),if(below(vnum,vtarget-.1),.2,0));     // 'ad-lib decay' to black - no ugly artefacts;\n// ^4 to get it up there quick -> min time with decay on.;\n;\nob_a = ob_a*(1-bass_x);                         // just so we don't get rid of the wide impressive;\n// flames so quickly;\n;\n//ob_a=0;\n//monitor = ob_a;\n;\n//Other decays to try:;\n//300000 +  42.53, 90.63, 43.00   These are all fairly similar, but all are stable (equiv to decay  0.990 -> 1 in terms of speed of fade);\n//3000000 + 57.75 <<<  =:-);\n;\ndx = bass * wave_b;\nib_size = wave_g * wave_g;\nob_g = wave_r * wave_g;\nwave_b = wave_r * treb;\nwave_b = wave_b + wave_g;\nib_g = time + bass;\nob_b = bass * treb;\nwarp = treb + wave_r;\ndx = dx + wave_r;\nob_size = wave_b * bass;\nmv_b = bass * bass;\nob_b = ob_b * bass;\nwarp=if(below(warp,0.01), 0.01, warp);\nwarp=if(above(warp,100.0), 100.0, warp);\ndx=if(below(dx,-1), -1, dx);\ndx=if(above(dx,1.0), 1.0, dx);\nwave_b=if(below(wave_b,0.0), 0.0, wave_b);\nwave_b=if(above(wave_b,1.0), 1.0, wave_b);\nob_size=if(below(ob_size,0.0), 0.0, ob_size);\nob_size=if(above(ob_size,0.5), 0.5, ob_size);\nob_g=if(below(ob_g,0.0), 0.0, ob_g);\nob_g=if(above(ob_g,1.0), 1.0, ob_g);\nob_b=if(below(ob_b,0.0), 0.0, ob_b);\nob_b=if(above(ob_b,1.0), 1.0, ob_b);\nib_size=if(below(ib_size,0.0), 0.0, ib_size);\nib_size=if(above(ib_size,0.5), 0.5, ib_size);\nib_g=if(below(ib_g,0.0), 0.0, ib_g);\nib_g=if(above(ib_g,1.0), 1.0, ib_g);\nmv_b=if(below(mv_b,0.0), 0.0, mv_b);\nmv_b=if(above(mv_b,1.0), 1.0, mv_b);\nwave_b=if(below(wave_b,0.0), 0.0, wave_b);\nwave_b=if(above(wave_b,1.0), 1.0, wave_b);\nob_g=if(below(ob_g,0.0), 0.0, ob_g);\nob_g=if(above(ob_g,1.0), 1.0, ob_g);\nob_b=if(below(ob_b,0.0), 0.0, ob_b);\nob_b=if(above(ob_b,1.0), 1.0, ob_b);","pixel_eqs_eel":"rot = below(q3, q4-q2*.5)*q2*.8*(1-0*(rad));\n;\n//virtual axes;\nvang=q1;\nvx = (x-.5)*cos(vang) - (y-.5)*sin(vang)+.5;\nvy = (x-.5)*sin(vang) +(y-.5)*cos(vang)+.5;\nvy=1-vy;\n;\ndvy = (vx+.08*sin(int(rand(100))))*2%2*-.01-.005;\ndvy = -.0025*((1-vy)*10+int(rand(5)));    //wobble, and faster at top - accelerating like real flames;\n;\ndvx = int(rand(20))*.0001*sin(int(rand(2))-.5);                       //flicker;\ndvx = dvx*sqr(vy);                                                                //dampens top;\n//dvx = dvx*(1-x/2);                                                        //slows sides;\ndvx = dvx*-.2*(int(rand(10))-5);                                         //random damper;\ndvx = dvx -(vx-.5)*.04*(.8-sqr(vy));                                 //drift towards centre;\ndvx = dvx + cos(sqr(vy-.5)*10-time*1.1)*sqr(1-(vy))*.01; //add flutter at top;\n;\n//de-virtualise;\ndx = dvx*cos(vang) - dvy*sin(vang);\ndy = -dvx*sin(vang) - dvy*cos(vang);\n;\n// Telek - 09/11/2002;\ncy = a + bass_att;\nsy = rot - y;\nrot = b * x;\ncy = cy - q1;\nzoomexp = bass_att - b;\nzoomexp = zoomexp + b;\ndy = time + a;\nsx = time * y;\ncy = cy * b;\nzoomexp=if(below(zoomexp,0.01), 0.01, zoomexp);\nzoomexp=if(above(zoomexp,100.0), 100.0, zoomexp);\nrot=if(below(rot,-1.0), -1.0, rot);\nrot=if(above(rot,1.0), 1.0, rot);\ncy=if(below(cy,-1.0), -1.0, cy);\ncy=if(above(cy,2.0), 2.0, cy);\ndy=if(below(dy,-1), -1, dy);\ndy=if(above(dy,1.0), 1.0, dy);\nsx=if(below(sx,0.01), 0.01, sx);\nsx=if(above(sx,100.0), 100.0, sx);\nsy=if(below(sy,0.01), 0.01, sy);\nsy=if(above(sy,100.0), 100.0, sy);","warp":" shader_body { \n  vec3 rsamp_1;\n  vec3 ret_2;\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy));\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_pw_main, uv_orig);\n  ret_2 = tmpvar_4.xyz;\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_pw_main, (uv_orig + ((\n    (tmpvar_3.xy - 0.5)\n   * 12.0) * texsize.zw)));\n  vec3 tmpvar_6;\n  tmpvar_6 = tmpvar_5.xyz;\n  rsamp_1 = tmpvar_6;\n  float tmpvar_7;\n  vec2 x_8;\n  x_8 = (tmpvar_4.xy - uv_orig);\n  tmpvar_7 = sqrt(dot (x_8, x_8));\n  float tmpvar_9;\n  vec2 x_10;\n  x_10 = (tmpvar_5.xy - uv_orig);\n  tmpvar_9 = sqrt(dot (x_10, x_10));\n  if ((tmpvar_7 > tmpvar_9)) {\n    ret_2.xy = tmpvar_6.xy;\n  };\n  vec4 tmpvar_11;\n  tmpvar_11 = texture (sampler_pw_main, (uv_orig + ((\n    (tmpvar_3.zw - 0.5)\n   * 48.0) * texsize.zw)));\n  rsamp_1 = tmpvar_11.xyz;\n  float tmpvar_12;\n  vec2 x_13;\n  x_13 = (ret_2.xy - uv_orig);\n  tmpvar_12 = sqrt(dot (x_13, x_13));\n  float tmpvar_14;\n  vec2 x_15;\n  x_15 = (tmpvar_11.xy - uv_orig);\n  tmpvar_14 = sqrt(dot (x_15, x_15));\n  if ((tmpvar_12 > tmpvar_14)) {\n    ret_2.xy = rsamp_1.xy;\n  };\n  ret_2.z = texture (sampler_fw_main, ret_2.xy).z;\n  ret_2.z = (ret_2.z - (q1 * 0.005));\n  if ((ret_2.z < 0.09)) {\n    ret_2 = vec3(0.0, 0.0, 0.0);\n  };\n  vec4 tmpvar_16;\n  tmpvar_16.w = 1.0;\n  tmpvar_16.xyz = ret_2;\n  ret = tmpvar_16.xyz;\n }","comp":"uniform sampler2D sampler_ruin;\n shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  vec2 tmpvar_3;\n  float tmpvar_4;\n  tmpvar_4 = (mid * 0.1);\n  tmpvar_3.x = (((uv.x + 0.2) + tmpvar_4) + (0.3 * q1));\n  tmpvar_3.y = (((uv.y + 0.2) + tmpvar_4) + (0.3 * q2));\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_ruin, ((tmpvar_3 * aspect.xy) * (0.7 - (mid * 0.05))));\n  vec2 tmpvar_6;\n  tmpvar_6.x = uv.x;\n  tmpvar_6.y = abs((uv.y - 1.0));\n  vec4 tmpvar_7;\n  tmpvar_7 = texture (sampler_main, tmpvar_6);\n  ret_1 = (tmpvar_2.xyz + ((tmpvar_2.xyz * tmpvar_2.xyz) * 10.0));\n  vec3 tmpvar_8;\n  tmpvar_8 = mix ((tmpvar_7.xyz + (\n    (tmpvar_7.xyz * tmpvar_7.xyz)\n   * 10.0)), ret_1, vec3(0.5, 0.5, 0.5));\n  vec3 tmpvar_9;\n  tmpvar_9 = mix (tmpvar_8, (tmpvar_5.xyz + (\n    (tmpvar_5.xyz * tmpvar_5.xyz)\n   * \n    (15.0 * treb)\n  )), (tmpvar_8 * bass));\n  ret_1 = tmpvar_9;\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = tmpvar_9;\n  ret = tmpvar_10.xyz;\n }","warp_hlsl":"shader_body\n{\nfloat2 pixelsize = texsize.zw;\nfloat2 uvm = uv_orig;\n\nfloat2 noise_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\nfloat4 noiseVal = tex2D(sampler_noise_lq, noise_uv);\n\nret.xyz = saturate(tex2D( sampler_pw_main,uvm).xyz*float3(1,1,1) - float3(.0,.0,.0));\nret.xyz = tex2D( sampler_pw_main,uvm).xyz;\n\n\nfloat3 rsamp = tex2D(sampler_pw_main,uvm + (noiseVal.xy-.5)*12*pixelsize).xyz;\nif (length(ret.xy - uvm) > length(rsamp.xy - uvm)) {\nret.xy = rsamp.xy;\n}\n\nrsamp = tex2D(sampler_pw_main,uvm + (noiseVal.zw-.5)*48*pixelsize).xyz;\nif (length(ret.xy - uvm) > length(rsamp.xy - uvm)) {\nret.xy = rsamp.xy;\n}\n\nret.z = tex2D(sampler_fw_main,ret.xy).z;\n\nret.z -= q1*.005;\n\nif (ret.z < .09) {\nret*=0;\n}\n\n\n}","comp_hlsl":"sampler sampler_ruin;\nshader_body\n{\n  ret = tex2D(sampler_main,uv).xyz;\n  float2 uv3 = float2(uv.x+.2+(mid*.1)+(.3*q1),uv.y+.2+(mid*.1)+(.3*q2));\n  float3 ret3 = tex2D(sampler_ruin, ((uv3)*aspect.xy)*(.7-(mid*.05))).xyz;    \n  float2 uv2 = float2(uv.x,abs(uv.y-1));\n  float3 ret2 = tex2D(sampler_main,uv2).xyz;\n  ret += ret*ret*10;\n  ret2 += ret2*ret2*10;\n  ret3 += ret3*ret3*15*treb;\n  ret = lerp(ret2,ret,.5);\n  ret = lerp(ret,ret3,ret*bass);\n}"}