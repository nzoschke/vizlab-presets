{"version":2,"baseVals":{"rating":5,"wave_a":0.001,"mv_x":0,"mv_l":5,"b1n":0.4},"shapes":[{"baseVals":{"sides":6,"additive":1,"textured":1,"x":0.6,"y":0.8,"rad":1.21528,"ang":0.94248,"tex_ang":4.08407,"tex_zoom":0.86995,"r":0.6,"g":0.8,"b":0.9,"r2":0.7,"g2":0.3,"b2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = q11;\ny = q12;","init_eqs_eel":"","frame_eqs_eel":"x = q11;\ny = q12;"},{"baseVals":{"enabled":1,"sides":12,"textured":1,"x":0.12,"y":0,"rad":2.01859,"tex_ang":3.76991,"tex_zoom":0.54499,"g":0.5,"b":0.8,"g2":0,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.ang=a.time;a.x=.5*Math.cos(a.time)+.5;a.y=.5*Math.sin(a.time)+.5;","init_eqs_eel":"","frame_eqs_eel":"ang = time;\nx=cos(time)*0.5+0.5;\ny=sin(time)*0.5+0.5;"},{"baseVals":{"enabled":1,"sides":48,"additive":1,"rad":0.33667,"ang":3.14159,"tex_ang":3.14159,"tex_zoom":0.95146,"g":0.2,"r2":0.2,"g2":0,"b2":0.3,"border_a":0},"init_eqs_str":"a.q2=0;","frame_eqs_str":"a.rad=a.q2-.7;","init_eqs_eel":"","frame_eqs_eel":"//a=min(cos(time*0.5)*0.5+0.5,0.2);\n//a2=min(cos(time*0.5)*0.5+0.5,0.2);\n//rad=cos(time)*0.5+0.5;\nrad=q2-.7;\n\n//r = q10; \n//g = q11;\n//b = q12;"},{"baseVals":{"additive":1,"textured":1,"rad":1.79142,"tex_zoom":5.83011,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"usedots":1,"additive":1,"b":0,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"t1 = q1 * 2.0;","point_eqs_str":"n=sample*6.283;\nphs=-sample * 0.2;\ntm=q5 + phs;\n\nflip=flip+1;\nflip=flip*below(flip,2);\n\nxp=sin(n*9.0)*0.1;\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\nzp=cos(n*9.0)*0.1;\n\n//wrist movement;\nang=sin(tm*2)*0.5 +0.5;\n\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\nyq=yp;\nzq=zp;\n\nang=tm*8;\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//forearm movement;\nzp=zp-0.3;\nang=3.14 + sin(tm*2 - 0.5)*1.5;\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\n\n//upper arm twist\nang=-1.0 + cos(tm*3 + 0.5);\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//upper arm outward;\nzp=zp-0.35;\nang=cos(tm*2)*0.75 - 1.05;\nxq=xp*sin(ang) + zp*cos(ang);\nyq=yp;\nzq=xp*cos(ang) - zp*sin(ang);\n\n//upper arm up down;\nang=cos(tm)*0.5 - 0.5;\nxp=xq;\nyp=yq*cos(ang) - zq*sin(ang);\nzp=yq*sin(ang) + zq*cos(ang);\n\n//xp=xq;yp=yq;zp=zq;\n\n\n//project into screenspace and draw on screen\nzp=zp+2;\nxs=xp/zp;\nys=yp/zp;\n\nx=xs*1.2+0.6;\ny=ys*1.5+0.55;\n\n\na=(1-sample)*flip;\n\np2 = phs*0.5;\n//r = tan( t1 + p2 );\n//g = tan( t1 + p2 + 2.1 );\n//b = tan( t1 + p2 + 4.2 );\nr = sin( t1 + p2 ) * 0.5 + 0.5;\ng = sin( t1 + p2 + 2.1 ) * 0.5 + 0.5;\nb = sin( t1 + p2 + 4.2 ) * 0.5 + 0.5;\n\n//a = a * q4;","init_eqs_eel":"","frame_eqs_eel":"t1 = q1 * 2.0;","point_eqs_eel":"n=sample*6.283;\nphs=-sample * 0.2;\ntm=q5 + phs;\n\nflip=flip+1;\nflip=flip*below(flip,2);\n\nxp=sin(n*9.0)*0.1;\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\nzp=cos(n*9.0)*0.1;\n\n//wrist movement;\nang=sin(tm*2)*0.5 +0.5;\n\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\nyq=yp;\nzq=zp;\n\nang=tm*8;\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//forearm movement;\nzp=zp-0.3;\nang=3.14 + sin(tm*2 - 0.5)*1.5;\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\n\n//upper arm twist\nang=-1.0 + cos(tm*3 + 0.5);\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//upper arm outward;\nzp=zp-0.35;\nang=cos(tm*2)*0.75 - 1.05;\nxq=xp*sin(ang) + zp*cos(ang);\nyq=yp;\nzq=xp*cos(ang) - zp*sin(ang);\n\n//upper arm up down;\nang=cos(tm)*0.5 - 0.5;\nxp=xq;\nyp=yq*cos(ang) - zq*sin(ang);\nzp=yq*sin(ang) + zq*cos(ang);\n\n//xp=xq;yp=yq;zp=zq;\n\n\n//project into screenspace and draw on screen\nzp=zp+2;\nxs=xp/zp;\nys=yp/zp;\n\nx=xs*1.2+0.6;\ny=ys*1.5+0.55;\n\n\na=(1-sample)*flip;\n\np2 = phs*0.5;\n//r = tan( t1 + p2 );\n//g = tan( t1 + p2 + 2.1 );\n//b = tan( t1 + p2 + 4.2 );\nr = sin( t1 + p2 ) * 0.5 + 0.5;\ng = sin( t1 + p2 + 2.1 ) * 0.5 + 0.5;\nb = sin( t1 + p2 + 4.2 ) * 0.5 + 0.5;\n\n//a = a * q4;"},{"baseVals":{"usedots":1,"additive":1,"b":0,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"t1 = q1 * 2.0;","point_eqs_str":"n=sample*6.283;\nphs=-sample * 0.1;\ntm=q5 + phs;\n\nflip=flip+1;\nflip=flip*below(flip,2);\n\nsc = sin( (n+time*0.02) * 50.0 );\n\nxp=sin(n*15.0+time)*0.05 * sc;\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\nzp=cos(n*15.0+time)*0.05 * sc;\n\n//wrist movement;\nang=sin(tm*2)*0.5 +0.5;\n\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\nyq=yp;\nzq=zp;\n\nang=tm*8;\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//forearm movement;\nzp=zp-0.3;\nang=3.14 + sin(tm*2 - 0.5)*1.5;\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\n\n//upper arm twist\nang=-1.0 + cos(tm*3 + 0.5);\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//upper arm outward;\nzp=zp-0.35;\nang=cos(tm*2)*0.75 - 1.05;\nxq=xp*sin(ang) + zp*cos(ang);\nyq=yp;\nzq=xp*cos(ang) - zp*sin(ang);\n\n//upper arm up down;\nang=cos(tm)*0.5 - 0.5;\nxp=xq;\nyp=yq*cos(ang) - zq*sin(ang);\nzp=yq*sin(ang) + zq*cos(ang);\n\n//xp=xq;yp=yq;zp=zq;\n\n\n//project into screenspace and draw on screen\nzp=zp+2;\nxs=xp/zp;\nys=yp/zp;\n\nx=xs*1.2+0.6;\ny=ys*1.5+0.55;\n\n\na=(1-sample)*flip;\n\np2 = phs*0.5;\n//r = tan( t1 + p2 );\n//g = tan( t1 + p2 + 2.1 );\n//b = tan( t1 + p2 + 4.2 );\nr = sin( t1 + p2 ) * 0.5 + 0.5;\ng = sin( t1 + p2 + 2.1 ) * 0.5 + 0.5;\nb = sin( t1 + p2 + 4.2 ) * 0.5 + 0.5;\n\n//a = a * q4;","init_eqs_eel":"","frame_eqs_eel":"t1 = q1 * 2.0;","point_eqs_eel":"n=sample*6.283;\nphs=-sample * 0.1;\ntm=q5 + phs;\n\nflip=flip+1;\nflip=flip*below(flip,2);\n\nsc = sin( (n+time*0.02) * 50.0 );\n\nxp=sin(n*15.0+time)*0.05 * sc;\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\nzp=cos(n*15.0+time)*0.05 * sc;\n\n//wrist movement;\nang=sin(tm*2)*0.5 +0.5;\n\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\nyq=yp;\nzq=zp;\n\nang=tm*8;\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//forearm movement;\nzp=zp-0.3;\nang=3.14 + sin(tm*2 - 0.5)*1.5;\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\n\n//upper arm twist\nang=-1.0 + cos(tm*3 + 0.5);\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//upper arm outward;\nzp=zp-0.35;\nang=cos(tm*2)*0.75 - 1.05;\nxq=xp*sin(ang) + zp*cos(ang);\nyq=yp;\nzq=xp*cos(ang) - zp*sin(ang);\n\n//upper arm up down;\nang=cos(tm)*0.5 - 0.5;\nxp=xq;\nyp=yq*cos(ang) - zq*sin(ang);\nzp=yq*sin(ang) + zq*cos(ang);\n\n//xp=xq;yp=yq;zp=zq;\n\n\n//project into screenspace and draw on screen\nzp=zp+2;\nxs=xp/zp;\nys=yp/zp;\n\nx=xs*1.2+0.6;\ny=ys*1.5+0.55;\n\n\na=(1-sample)*flip;\n\np2 = phs*0.5;\n//r = tan( t1 + p2 );\n//g = tan( t1 + p2 + 2.1 );\n//b = tan( t1 + p2 + 4.2 );\nr = sin( t1 + p2 ) * 0.5 + 0.5;\ng = sin( t1 + p2 + 2.1 ) * 0.5 + 0.5;\nb = sin( t1 + p2 + 4.2 ) * 0.5 + 0.5;\n\n//a = a * q4;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"g":0.8,"b":0,"a":0.15,"enabled":0},"init_eqs_str":"t1 = 0;","frame_eqs_str":"t1 = 3.1415 / 8 - 0.020;\n\nt2 = time - int(time);\nt2 = t2*(bass*5);","point_eqs_str":"t1 = t1 + 0.25;\n\nn = sample*6.283;\n\nxp = sin(t1*6.283)-(cos(time)*tan(time));\nyp = cos(t1*6.283)+(sin(time)*tan(time));\nzp =6 + sample*400 - t2;\n\nx = xp/zp + 0.68;\ny = yp/zp / 1.333 + 0.29;","init_eqs_eel":"t1 = 0;","frame_eqs_eel":"t1 = 3.1415 / 8 - 0.020;\n\nt2 = time - int(time);\nt2 = t2*(bass*5);","point_eqs_eel":"t1 = t1 + 0.25;\n\nn = sample*6.283;\n\nxp = sin(t1*6.283)-(cos(time)*tan(time));\nyp = cos(t1*6.283)+(sin(time)*tan(time));\nzp =6 + sample*400 - t2;\n\nx = xp/zp + 0.68;\ny = yp/zp / 1.333 + 0.29;"}],"init_eqs_str":"a.q12=0;a.q6=0;a.q1=0;a.scroll=0;a.q5=0;a.q9=0;a.q11=0;a.q10=0;a.q4=0;a.tm=0;a.vol=0;a.q2=0;a.planetang=0;a.q3=0;a.q7=0;a.q8=0;a.voltime=0;a.fr=0;","frame_eqs_str":"a.zoom=1;a.warp=0;a.rot=0;a.sx=1;a.sy=1;a.dx=0;a.dy=0;a.vol=.25*(a.bass+a.mid+a.treb);a.vol*=a.vol;a.voltime+=.1*a.vol;a.q1=3*Math.sin(a.time+2.1)+5;a.q2=div(Math.tan(a.time),5*Math.sin(.333333333*a.time));a.monitor=a.q1;a.q3=.5*Math.cos(a.time)+.5;a.q4=-.5*Math.sin(a.time)+.5;a.scroll+=.1*div(1,a.q2);a.q5=-.05*a.scroll;a.monitor=a.q2;a.q6=.5*Math.sin(.37*a.time);a.q7=Math.sin(a.time);a.planetang=.5*Math.sin(a.voltime);a.q9=Math.sin(a.planetang);a.q8=Math.cos(a.planetang);a.tm=\n7.2;a.q10=.45*Math.sin(a.tm)+.55;a.q11=.45*Math.sin(a.tm+2.1)+.55;a.q12=.45*Math.sin(a.tm+4.2)+.55;","pixel_eqs_str":"a.dx=.0002*Math.sin(12*a.y+a.q3);a.dy=.0002*Math.sin(16*a.x+a.q3);","init_eqs_eel":"fr = 0;","frame_eqs_eel":"zoom = 1;\nwarp = 0;\nrot = 0;\nsx = 1;\nsy = 1;\ndx = 0;\ndy = 0;\n\n\nvol = (bass+mid+treb)*0.25;\nvol = vol * vol;\n\nvoltime = voltime + vol * 0.1;\n\nq1 = sin(time+2.1)*3.0 + 5.0;\n\nq2 = (tan(time)/(sin(time*0.333333333)*5.0));\n//q2 = min( q2, 3.0 );\n//q2 = max( q2, -3.0 );\n\nmonitor = q1;\n\n\n\n\nq3=cos(time)*0.5+0.5;\nq4=sin(time)*-0.5+0.5;\n\n\n//city horiz scrolling\nscroll = scroll + (1.0/q2) * 0.1;\nq5 = scroll * -0.05;\n\nmonitor = q2;\n\nq6 = sin( time * 0.37 ) * 0.5;\n\nq7 = sin(time); //multiplies by planet in composite shader\n\n//rotation vars for planet\nplanetang = sin( voltime ) * 0.5;\nq9 = sin( planetang );\nq8 = cos( planetang );\n\n\n//primary light colour\ntm = 7.2;\nq10 = sin( tm ) * 0.45 + 0.55;\nq11 = sin( tm + 2.1 ) * 0.45 + 0.55;\nq12 = sin( tm + 4.2 ) * 0.45 + 0.55;","pixel_eqs_eel":"dx = sin( y * 12 + q3 ) * 0.0002;\ndy = sin( x * 16 + q3 ) * 0.0002;","warp":" shader_body { \n  vec2 zz_1;\n  mat2 tmpvar_2;\n  tmpvar_2[uint(0)] = _qa.xy;\n  tmpvar_2[1u] = _qa.zw;\n  zz_1 = (((\n    (uv - vec2(0.5, 0.5))\n   * texsize.xy) * 0.01) * tmpvar_2);\n  zz_1 = -(zz_1.yx);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ((texture (sampler_main, (uv + \n    (((clamp (\n      (sin(zz_1.yx) / cos(zz_1.yx))\n    , vec2(-8.0, -8.0), vec2(8.0, 8.0)) * cos(\n      (4.0 * zz_1)\n    )) * texsize.zw) * 16.0)\n  )).xyz * 0.99) - 0.01);\n  ret = tmpvar_3.xyz;\n }","comp":"float xlat_mutablepads;\nvec2 xlat_mutablers;\n shader_body { \n  vec2 uv1_1;\n  uv1_1 = (((uv - 0.5) * aspect.xy) * aspect.yx);\n  float tmpvar_2;\n  tmpvar_2 = (3.0 / abs(uv1_1.y));\n  xlat_mutablers.x = ((uv1_1.x * tmpvar_2) * 2.0);\n  xlat_mutablers.y = tmpvar_2;\n  mat2 tmpvar_3;\n  tmpvar_3[uint(0)] = _qa.xy;\n  tmpvar_3[1u] = _qa.zw;\n  xlat_mutablers = (xlat_mutablers * tmpvar_3);\n  xlat_mutablers.y = (xlat_mutablers.y + q17);\n  vec2 tmpvar_4;\n  tmpvar_4 = sin(xlat_mutablers);\n  float x_5;\n  x_5 = (tmpvar_4.x * tmpvar_4.y);\n  xlat_mutablepads = (0.5 - sqrt(sqrt(\n    (x_5 * x_5)\n  )));\n  xlat_mutablepads = (xlat_mutablepads * (float(\n    (xlat_mutablepads <= -0.1)\n  ) * clamp (\n    ((15.0 / tmpvar_2) - 0.3)\n  , 0.0, 1.0)));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = (((\n    ((1.0 - (2.0 * xlat_mutablepads)) * texture (sampler_main, (uv + (xlat_mutablepads / 4.0))).xyz)\n   * \n    (1.0 + q22)\n  ) - (\n    ((xlat_mutablepads * q2) * texture (sampler_main, (xlat_mutablers / 180.0)).xyz)\n   * 4.0)) - ((\n    (xlat_mutablepads * q1)\n   * texture (sampler_main, \n    (1.0 - uv)\n  ).xyz) * 4.0));\n  ret = tmpvar_6.xyz;\n }","warp_hlsl":"shader_body {\nfloat corr = texsize.xy*texsize_noise_lq.zw;\nfloat2 uv1 = float2(uv.x-0.5,uv.y-0.5);//*aspect.xy;\n\n\nfloat2 zz = uv1 *texsize.xy *.01;\nzz =mul(zz,float2x2(_qa));\nzz = -zz.yx;\nfloat2 h1 = clamp(tan(zz.yx),-8,8) * cos(4*zz);\n\nuv += h1*texsize.zw * 16;\nfloat3 crisp = tex2D(sampler_main,uv);\n\nret = crisp*.99-.01;\n}","comp_hlsl":"sampler sampler_pw_noise_lq;\n\nfloat2 rs;\nfloat pads;\n\nshader_body {\nfloat2 uv1 = (uv-.5-.0*float2(q1,q2) )*aspect.xy;\n//uv = mul(uv-.5,float2x2(_qa))+.5;\n\nuv1*= aspect.yx;\nfloat h1 = 3;\n\nfloat z = h1/abs(uv1.y) ;\n\n\n\nrs.x = (uv1.x) *z*2;\nfloat mask = saturate (15/z-.3);\nrs.y = z;\nrs = mul(rs,float2x2(_qa));\nrs.y += q17;\nfloat2 uv6 = sin(rs);\npads = .5-sqrt(length(uv6.x*uv6.y));\npads *= (pads <= -.1) *mask;\n\nfloat mask2 = (pads <= -.1);\nret = (1-2*pads)* (GetPixel(uv+pads/4))*(1+q22) \n-pads *q2*GetPixel(rs/180)*4\n-pads *q1*GetPixel(1-uv)*4;    \n}"}