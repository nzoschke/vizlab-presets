{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":1.17,"wave_scale":0.566,"wave_smoothing":0.09,"wave_mystery":-0.8,"modwavealphastart":0.4,"modwavealphaend":1.8,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_g":0,"wave_b":0,"ob_size":0,"ob_g":0.1,"ob_b":1,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_x":64,"mv_y":48,"mv_l":1,"mv_b":0.9,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"sides":16,"thickoutline":1,"textured":1,"rad":0.97235,"ang":0.1884,"tex_ang":0.62832,"tex_zoom":0.77829,"g":1,"b":1,"a":0.9,"r2":1,"b2":1,"a2":0.5,"border_r":0.59,"border_g":0.81,"border_b":0.69,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"textured":1,"rad":0.4149,"tex_ang":0.25133,"tex_zoom":0.38021,"r2":1,"g2":0,"a2":1,"border_g":0,"border_b":0,"border_a":1},"init_eqs_str":"a.advx=0;a.advy=0;a.vol=0;","frame_eqs_str":"a.advx+=4*div(a.bass*a.bass,a.fps);a.advy+=4*div(a.treb*a.treb,a.fps);a.r=.05*rand(10)+.5;a.g=a.r;a.b=a.r;a.x=.5+.3*Math.sin(a.advx);a.y=.5+.3*Math.sin(a.advy);a.rad=.002*rand(100)+.021;a.vol=a.bass_att+a.mid_att+a.treb_att;a.rad=Math.min(.2,.03*a.vol);a.a=Math.min(1,div(a.vol,4));a.a2=a.a;a.border_a=a.a;a.ang=8*a.vol;","init_eqs_eel":"","frame_eqs_eel":"\nadvx=advx+(bass*bass)/fps*4;\nadvy=advy+(treb*treb)/fps*4;\n\nr=rand(10)*0.1*0.5+0.5;\ng=r;\nb=r;\n\n\nx= .5 + .3*sin(advx);\ny= .5 + .3*sin(advy);\n\n\nrad=rand(100)*0.01*0.2+0.021;\nvol = bass_att + mid_att + treb_att;\nrad = min(.2,vol*.03);\n\n\na = min(1,vol/4); a2 = a;\nborder_a = a;\n\nang = vol*8;"},{"baseVals":{"sides":24,"textured":1,"x":0.2,"y":0.8,"rad":0.59958,"tex_ang":1.25664,"tex_zoom":0.49831,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"textured":1,"x":0.86,"y":0.2,"rad":0.80814,"tex_zoom":0.45112,"g":1,"b":1,"r2":1,"b2":0.9,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"sep":256,"usedots":1,"additive":1,"scaling":100,"smoothing":0.9,"r":0,"g":0.7,"enabled":0},"init_eqs_str":"","frame_eqs_str":"advance=advance+ 0.012;\nadvance=if( above(advance,2) , 0, advance);\n\nt1=advance\n","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"advance=advance+ 0.012;\nadvance=if( above(advance,2) , 0, advance);\n\nt1=advance\n","point_eqs_eel":""},{"baseVals":{"samples":42,"usedots":1,"additive":1,"scaling":81.95444,"smoothing":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"advance=advance+ 0.012;\nadvance=if( above(advance,2) , 0, advance);\n\nt1=advance","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"advance=advance+ 0.012;\nadvance=if( above(advance,2) , 0, advance);\n\nt1=advance","point_eqs_eel":""},{"baseVals":{"samples":42,"usedots":1,"thick":1,"additive":1,"a":0.36,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"samples":192,"usedots":1,"additive":1,"a":0.32,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.n=0;a.reg26=0;a.uvx0=0;a.index2=0;a.reg34=0;a.reg28=0;a.reg23=0;a.q25=0;a.angchg=0;a.reg20=0;a.reg15=0;a.reg10=0;a.index=0;a.q12=0;a.v3=0;a.q22=0;a.q21=0;a.diry=0;a.q13=0;a.q6=0;a.posx=0;a.fps_=0;a.reg25=0;a.uvx=0;a.travel=0;a.posz=0;a.q5=0;a.q9=0;a.dirz=0;a.dec_s=0;a.reg16=0;a.reg36=0;a.reg22=0;a.uvy=0;a.count=0;a.rotz=0;a.dist_=0;a.is_beat=0;a.q31=0;a.q23=0;a.q24=0;a.reg24=0;a.ran2=0;a.q11=0;a.q10=0;a.reg14=0;a.posy=0;a.reg31=0;a.dirx=0;a.dec_m=0;a.q4=0;a.start=0;a.reg12=\n0;a.reg13=0;a.c2=0;a.reg37=0;a.s3=0;a.yslope=0;a.q16=0;a.xslope=0;a.q26=0;a.reg38=0;a.reg35=0;a.reg11=0;a.tx=0;a.avg=0;a.uvz=0;a.rota=0;a.c3=0;a.uvy0=0;a.reg27=0;a.beat=0;a.vol=0;a.reg32=0;a.reg21=0;a.peak=0;a.uvz0=0;a.len=0;a.reg18=0;a.reg30=0;a.q27=0;a.slen=0;a.q14=0;a.dist=0;a.reg17=0;a.v1=0;a.s1=0;a.vz1=0;a.t0=0;a.vol_=0;a.s2=0;a.ran1=0;a.reg33=0;a.q7=0;a.ds=0;a.q28=0;a.ty=0;a.c1=0;a.v2=0;a.ds_=0;a.q20=0;a.q8=0;a.avg=.01;a.q7=.4;a.q8=rand(2)-1;a.q16=1;a.q18=rand(.8)+.1;a.q31=128;a.start=1;a.travel=\n0;a.rotz=0;a.look=0;a.slow=0;a.t0=a.time+3;a.lampx=.5;a.lampy=.5;a.cran0=rand(1);for(var b=a.n=0;1E4>b;b++)a.gmegabuf[Math.floor(a.n)]=0,a.n+=1;for(b=a.n=0;1E4>b;b++)a.megabuf[Math.floor(a.n)]=0,a.n+=1;a.trelx=0;a.trely=0;a.trelz=0;a.reg20=1;a.reg21=0;a.reg22=0;a.reg23=0;a.reg24=1;a.reg25=0;a.reg26=0;a.reg27=0;a.reg28=1;a.ran1=div(rand(800),100);a.ran2=div(rand(800),100);a.ran3=div(rand(800),100);a.posx=rand(5)-2;a.posy=rand(5)-2;a.posz=rand(5)-2;a.c1=Math.cos(a.ran1);a.c2=Math.cos(a.ran2);a.c3=Math.cos(a.ran3);\na.s1=Math.sin(a.ran1);a.s2=Math.sin(a.ran2);a.s3=Math.sin(a.ran3);a.reg20=a.c2*a.c1;a.reg21=a.c2*a.s1;a.reg22=-a.s2;a.reg23=a.s3*a.s2*a.c1-a.c3*a.s1;a.reg24=a.s3*a.s2*a.s1+a.c3*a.c1;a.reg25=a.s3*a.c2;a.reg26=a.c3*a.s2*a.c1+a.s3*a.s1;a.reg27=a.c3*a.s2*a.s1-a.s3*a.c1;a.reg28=a.c3*a.c2;a.rota=0;a.count=0;","frame_eqs_str":"a.fps_=0*a.fps_+1*(.00001<Math.abs(25>=a.fps?1:0)?a.fps:25+.5*(a.fps-25));a.fps_=a.fps;a.dec_m=pow(.7,div(30,a.fps));a.dec_s=pow(.9,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_s+a.beat*(1-a.dec_s);a.is_beat=above(a.beat,2*a.avg+2*a.peak)*above(a.time,a.t0+-.3);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_m;a.index=mod(a.index+a.is_beat,4);a.index2=mod(a.index2+a.is_beat*bnot(a.index),8);a.wave_a=\n5>a.index2?1:0;a.rota=a.rota*a.dec_m+(1-a.dec_m)*a.index2*3.14;a.q9=0;a.vol=a.bass+a.mid+a.treb;a.vol*=a.vol*a.vol;a.dec_m=.3;a.vol_=a.dec_m*a.vol_+(1-a.dec_m)*a.vol;a.ds=div(above(a.vol,1.35*a.vol_),8)*pow(a.vol,.25);a.dirx=a.reg26;a.diry=a.reg27;a.dirz=a.reg28;a.posx+=a.ds*a.dirx;a.posy+=a.ds*a.diry;a.posz+=a.ds*a.dirz;a.q4=a.posx;a.q5=a.posy;a.q6=a.posz;a.angchg=(.3-a.dist_)*(.3>a.dist_?1:0);a.travel=.00001<Math.abs(0<a.angchg?1:0)?0:a.travel+a.ds;a.v1=a.v1*a.dec_s+div((1-a.dec_s)*a.rotz*a.ds,\n4);a.v2=a.v2*a.dec_s+div(div((1-a.dec_s)*a.angchg*a.xslope,a.fps_),3);a.v3=a.v3*a.dec_s+(1-a.dec_s)*div(div(a.angchg*a.yslope,a.fps_),3);a.v1=0;a.v2=0;a.v3=0;a.v1=0;a.reg30=a.reg20;a.reg31=a.reg21;a.reg32=a.reg22;a.reg33=a.reg23;a.reg34=a.reg24;a.reg35=a.reg25;a.reg36=a.reg26;a.reg37=a.reg27;a.reg38=a.reg28;a.n=4;for(var b=a.avg=0;1>b;b++){a.n+=1;a.ran1=div(rand(100),100);a.ran2=div(rand(100),200)-.25;a.tx=Math.cos(1.57*a.n+a.ran2)*(4>=a.n?1:0)*a.ran1;a.ty=Math.sin(1.57*a.n+a.ran2)*(4>=a.n?1:0)*a.ran1;\na.c1=Math.cos(a.v1);a.c2=Math.cos(a.v2+a.ty);a.c3=Math.cos(a.v3+a.tx);a.s1=Math.sin(a.v1);a.s2=Math.sin(a.v2+a.ty);a.s3=Math.sin(a.v3+a.tx);a.reg10=a.c2*a.c1;a.reg11=a.c2*a.s1;a.reg12=-a.s2;a.reg13=a.s3*a.s2*a.c1-a.c3*a.s1;a.reg14=a.s3*a.s2*a.s1+a.c3*a.c1;a.reg15=a.s3*a.c2;a.reg16=a.c3*a.s2*a.c1+a.s3*a.s1;a.reg17=a.c3*a.s2*a.s1-a.s3*a.c1;a.reg18=a.c3*a.c2;a.reg20=a.reg30;a.reg21=a.reg31;a.reg22=a.reg32;a.reg23=a.reg33;a.reg24=a.reg34;a.reg25=a.reg35;a.reg26=a.reg36;a.reg27=a.reg37;a.reg28=a.reg38;\na.q20=a.reg10*a.reg20+a.reg11*a.reg23+a.reg12*a.reg26;a.q21=a.reg10*a.reg21+a.reg11*a.reg24+a.reg12*a.reg27;a.q22=a.reg10*a.reg22+a.reg11*a.reg25+a.reg12*a.reg28;a.q23=a.reg13*a.reg20+a.reg14*a.reg23+a.reg15*a.reg26;a.q24=a.reg13*a.reg21+a.reg14*a.reg24+a.reg15*a.reg27;a.q25=a.reg13*a.reg22+a.reg14*a.reg25+a.reg15*a.reg28;a.q26=a.reg16*a.reg20+a.reg17*a.reg23+a.reg18*a.reg26;a.q27=a.reg16*a.reg21+a.reg17*a.reg24+a.reg18*a.reg27;a.q28=a.reg16*a.reg22+a.reg17*a.reg25+a.reg18*a.reg28;a.reg20=a.q20;a.reg21=\na.q21;a.reg22=a.q22;a.reg23=a.q23;a.reg24=a.q24;a.reg25=a.q25;a.reg26=a.q26;a.reg27=a.q27;a.reg28=a.q28;a.dist=.002;var c,d=0;do{d+=1;a.uvx=div(a.reg26*a.dist,a.q7);a.uvy=div(a.reg27*a.dist,a.q7);a.uvz=div(a.reg28*a.dist,a.q7);a.uvx+=a.posx;a.uvy+=a.posy;a.uvz+=a.posz;a.uvx=8*(div(a.uvx,8)+30.5-Math.floor(div(a.uvx,8)+30.5)-.5);a.uvy=8*(div(a.uvy,8)+30.5-Math.floor(div(a.uvy,8)+30.5)-.5);a.uvz=8*(div(a.uvz,8)+30.5-Math.floor(div(a.uvz,8)+30.5)-.5);a.uvx0=a.uvx+a.q8;a.uvy0=a.uvy+a.q8;a.uvz0=a.uvz+\na.q8;for(c=0;8>c;c++)a.uvx=.00001<Math.abs(1<a.uvx?1:0)?2-a.uvx:.00001<Math.abs(-1>a.uvx?1:0)?-2-a.uvx:a.uvx,a.uvy=.00001<Math.abs(1<a.uvy?1:0)?2-a.uvy:.00001<Math.abs(-1>a.uvy?1:0)?-2-a.uvy:a.uvy,a.uvz=.00001<Math.abs(1<a.uvz?1:0)?2-a.uvz:.00001<Math.abs(-1>a.uvz?1:0)?-2-a.uvz:a.uvz,a.slen=a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz,a.uvx=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvx:.00001<Math.abs(1>a.slen?1:0)?div(a.uvx,a.slen):a.uvx)+a.uvx0,a.uvy=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvy:.00001<Math.abs(1>\na.slen?1:0)?div(a.uvy,a.slen):a.uvy)+a.uvy0,a.uvz=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvz:.00001<Math.abs(1>a.slen?1:0)?div(a.uvz,a.slen):a.uvz)+a.uvz0;a.len=sqrt(a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz);a.dist*=1.5;c=(.6>a.dist?1:0)*(30<a.len?1:0)}while(.00001<Math.abs(c)&&1048576>d);a.megabuf[Math.floor(a.n)]=a.megabuf[Math.floor(a.n)]*a.dec_s+(1-a.dec_s)*a.dist;a.avg+=Math.abs(div(a.megabuf[Math.floor(a.n)],5))}a.n=0;for(b=a.avg=0;5>b;b++)a.n+=1,a.avg+=Math.abs(div(a.megabuf[Math.floor(a.n)],\n5));a.dist_=a.dist_*a.dec_s+(1-a.dec_s)*a.dist;a.q10=a.ds*a.q7;a.q14=Math.abs(a.ds)+2*(Math.abs(a.v1)+Math.abs(a.v2)+Math.abs(a.v3))+div(1,255)+.05*a.start;a.start*=.9;a.vz1+=a.v1;a.q11=a.vz1;a.q12=a.v2;a.q13=a.v3;a.warp=0;a.zoom=1;a.dx=div(-a.v2,a.q16);a.dy=div(a.v3,a.q16);a.rot=a.v1;a.count+=1.16<a.treb?1:0;a.q31=div(3.1416*a.count,2);a.ds_=a.ds_*a.dec_s+(1-a.dec_s)*a.ds;a.q11=a.ds_;a.monitor=sqrt(a.vol_);","pixel_eqs_str":"","init_eqs_eel":"//******** INITIALIZATION *********\n//---------- some global vars, do not change -------------\navg = 0.01;\nq7 = .4; //MyZoom\nq8 =  rand(2.0)-1.0; //fractal modifier\nq16 = 1; //Tele ; rather fish eye\nq18 = rand(0.8)+.1; //brightness balance back/front\nq31 =128;\nstart = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;\ncran0 = rand(1);\nn = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); \nn = 0; loop (10000,  megabuf(n)=0; n=n+1; ); \ntrelx = 0;  trely = 0; trelz = 0;\nreg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;\n\n//Find random starting point\n  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;\n  PosX = rand(5)-2;   PosY = rand(5)-2;   PosZ = rand(5)-2; \n\n  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); \n  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);\n\n  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;\n  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;\n  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;\n\nrota = 0;\ncount = 0;","frame_eqs_eel":"fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); \nfps_= fps;\n\ndec_m = pow (0.7, 30/fps);\ndec_s = pow (0.9, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_s + beat*(1-dec_s);\nis_beat = above(beat, 2*avg+2*peak) * above (time, t0+-.3);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_m;\nindex = (index + is_beat) %4;\nindex2 = (index2 + is_beat*bnot(index)) %8;\nwave_a = (index2<5);\nrota = rota*dec_m + (1-dec_m)*index2*3.14;\nq9 = 0;\n\nvol = bass+mid+treb;\n//vol = is_beat;\nvol *= vol*vol;\ndec_m = .3;\nvol_ = dec_m * vol_ + (1-dec_m)*vol;\n\nds = (above(vol,vol_*1.35))/8*pow(vol,.25);\n//ds = is_beat/8*beat;\n\n//Position \nDirX= reg26; DirY= reg27; DirZ = reg28;\nPosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; \nq4 = PosX; q5 = PosY; q6 = PosZ;\n\nangchg = (.3-dist_)*(dist_ < .3);\ntravel = if (angchg > 0,0,travel+ds);\nv1 = v1 * dec_s + (1-dec_s)* RotZ * ds/4;\nv2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_/3;\nv3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_/3);\nv1 = 0; v2 = 0; v3 = 0; v1 = 0;\n//push old RotMat\nreg30 =reg20; reg31 =reg21; reg32 =reg22; \nreg33 =reg23; reg34 =reg24; reg35 =reg25; \nreg36 =reg26; reg37 =reg27; reg38 =reg28; \n\nn = 4; avg = 0;\nloop (1,\n  n = n+1;\n  //new Rot. Mat for infinitesimal angles\n  ran1 = rand(100)/100;\n  ran2 = rand(100)/200-.25;\n  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;\n  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); \n  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);\n  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;\n  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;\n  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;\n\n  //pop old RotMat\n  reg20 =reg30; reg21 =reg31; reg22 =reg32; \n  reg23 =reg33; reg24 =reg34; reg25 =reg35; \n  reg26 =reg36; reg27 =reg37; reg28 =reg38; \n\n  //Multiply new RotMat by old one\n  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;\n  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;\n  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;\n  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;\n  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;\n  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;\n  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;\n  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;\n  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;\n\n  reg20 =q20; reg21 =q21; reg22 =q22;\n  reg23 =q23; reg24 =q24; reg25 =q25;\n  reg26 =q26; reg27 =q27; reg28 =q28;\n\n  //***********BOT*************\n  //Coord. Trans. must exactly match def in warp S. !!!!\n  dist = 0.002;\n  while (exec2(\n    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;\n    uvx += PosX; uvy += PosY; uvz += PosZ;\n    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);\n    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);\n    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);\n    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;\n    loop (7+1,\n      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));\n      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));\n      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));\n      slen = uvx*uvx + uvy*uvy + uvz*uvz;\n      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; \n      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; \n      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; \n    );\n    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);\n    dist *= 1.5;\n  ,(dist < 0.6)*(len > 30)));\n  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points\n  avg = avg+abs(megabuf(n)/5);\n); //end loop 5\n\nn = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));\n\ndist_ = dist_*dec_s + (1-dec_s)*dist;\n\nq10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv\nq14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + 1.0/255 + start*.05; \nstart = start * .9;\nvz1 = vz1 + v1;\nq11 = vz1; q12 = v2; q13 = v3;\n//forward comp. of Rotation\n warp = 0.0; zoom = 1; dx = -v2/q16; dy = v3/q16; rot =v1;\n\n\ncount = count + (treb > 1.16);\nq31 = count*3.1416/2;\nds_ = ds_*dec_s + (1-dec_s)*ds;\nq11 = ds_;\nmonitor = sqrt(vol_);","pixel_eqs_eel":"","warp":"float sustain;\nfloat xlat_mutabledist;\nfloat xlat_mutablelen;\nfloat xlat_mutablestruc;\nvec2 xlat_mutableuv1;\nvec3 xlat_mutableuv2;\n shader_body { \n  mat3 tmpvar_1;\n  tmpvar_1[uint(0)].x = q20;\n  tmpvar_1[uint(0)].y = q23;\n  tmpvar_1[uint(0)].z = q26;\n  tmpvar_1[1u].x = q21;\n  tmpvar_1[1u].y = q24;\n  tmpvar_1[1u].z = q27;\n  tmpvar_1[2u].x = q22;\n  tmpvar_1[2u].y = q25;\n  tmpvar_1[2u].z = q28;\n  vec3 tmpvar_2;\n  tmpvar_2.x = q4;\n  tmpvar_2.y = q5;\n  tmpvar_2.z = q6;\n  sustain = (0.96 - q10);\n  vec2 uv_3;\n  vec3 ret_4;\n  vec2 tmpvar_5;\n  tmpvar_5 = (uv - 0.5);\n  xlat_mutableuv1 = ((tmpvar_5 * aspect.xy) * q16);\n  vec4 tmpvar_6;\n  tmpvar_6 = texture (sampler_pc_main, uv);\n  uv_3 = ((tmpvar_5 * (1.0 - \n    (q10 / (1.0 - (tmpvar_6.z + (0.003921569 * tmpvar_6.y))))\n  )) + 0.5);\n  vec4 tmpvar_7;\n  tmpvar_7 = fract((8.0 * texture (sampler_noise_lq, (uv_3 + rand_frame.yz))));\n  xlat_mutabledist = tmpvar_7.x;\n  if ((tmpvar_7.y > 0.2)) {\n    vec3 tmpvar_8;\n    tmpvar_8 = (tmpvar_7.xyz - vec3(0.5, 0.5, 0.5));\n    vec2 pix_9;\n    vec4 nb2_10;\n    vec4 nb_11;\n    vec2 x_12;\n    x_12 = (uv_3 - 0.5);\n    pix_9 = (texsize.zw * (1.0 + (\n      sqrt(dot (x_12, x_12))\n     * 2.0)));\n    vec4 tmpvar_13;\n    tmpvar_13 = texture (sampler_pc_main, (uv_3 - pix_9));\n    nb_11.x = (1.0 - (tmpvar_13.z + (0.003921569 * tmpvar_13.y)));\n    vec4 tmpvar_14;\n    tmpvar_14 = texture (sampler_pc_main, (uv_3 + (pix_9 * vec2(1.0, -1.0))));\n    nb_11.y = (1.0 - (tmpvar_14.z + (0.003921569 * tmpvar_14.y)));\n    vec4 tmpvar_15;\n    tmpvar_15 = texture (sampler_pc_main, (uv_3 + pix_9));\n    nb_11.z = (1.0 - (tmpvar_15.z + (0.003921569 * tmpvar_15.y)));\n    vec4 tmpvar_16;\n    tmpvar_16 = texture (sampler_pc_main, (uv_3 + (pix_9 * vec2(-1.0, 1.0))));\n    nb_11.w = (1.0 - (tmpvar_16.z + (0.003921569 * tmpvar_16.y)));\n    vec4 tmpvar_17;\n    tmpvar_17 = texture (sampler_pc_main, (uv_3 + (pix_9 * vec2(0.0, -1.0))));\n    nb2_10.x = (1.0 - (tmpvar_17.z + (0.003921569 * tmpvar_17.y)));\n    vec4 tmpvar_18;\n    tmpvar_18 = texture (sampler_pc_main, (uv_3 + (pix_9 * vec2(1.0, 0.0))));\n    nb2_10.y = (1.0 - (tmpvar_18.z + (0.003921569 * tmpvar_18.y)));\n    vec4 tmpvar_19;\n    tmpvar_19 = texture (sampler_pc_main, (uv_3 + (pix_9 * vec2(0.0, 1.0))));\n    nb2_10.z = (1.0 - (tmpvar_19.z + (0.003921569 * tmpvar_19.y)));\n    vec4 tmpvar_20;\n    tmpvar_20 = texture (sampler_pc_main, (uv_3 + (pix_9 * vec2(-1.0, 0.0))));\n    nb2_10.w = (1.0 - (tmpvar_20.z + (0.003921569 * tmpvar_20.y)));\n    vec4 tmpvar_21;\n    tmpvar_21 = min (nb_11, nb2_10);\n    nb_11.zw = tmpvar_21.zw;\n    nb_11.xy = min (tmpvar_21.xy, tmpvar_21.zw);\n    xlat_mutabledist = (min (nb_11.x, nb_11.y) + ((0.01 * tmpvar_8.x) * abs(tmpvar_8.y)));\n  };\n  vec4 tmpvar_22;\n  tmpvar_22 = texture (sampler_pc_main, uv_3);\n  xlat_mutabledist = (min (xlat_mutabledist, (1.0 - \n    (tmpvar_22.z + (0.003921569 * tmpvar_22.y))\n  )) - q10);\n  vec3 tmpvar_23;\n  tmpvar_23.xy = (xlat_mutableuv1 * xlat_mutabledist);\n  tmpvar_23.z = xlat_mutabledist;\n  xlat_mutableuv2 = (((tmpvar_23 / q7) * tmpvar_1) + tmpvar_2);\n  xlat_mutableuv2 = ((fract(\n    ((xlat_mutableuv2 / 8.0) + 0.5)\n  ) - 0.5) * 8.0);\n  vec3 zz0_24;\n  vec3 zz_25;\n  zz0_24 = (xlat_mutableuv2 + q8);\n  zz_25 = ((2.0 * clamp (xlat_mutableuv2, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - xlat_mutableuv2);\n  zz_25 = (zz_25 * (clamp (\n    max ((0.25 / dot (zz_25, zz_25)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_25 = ((2.8 * zz_25) + zz0_24);\n  zz_25 = ((2.0 * clamp (zz_25, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_25);\n  zz_25 = (zz_25 * (clamp (\n    max ((0.25 / dot (zz_25, zz_25)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_25 = ((2.8 * zz_25) + zz0_24);\n  zz_25 = ((2.0 * clamp (zz_25, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_25);\n  zz_25 = (zz_25 * (clamp (\n    max ((0.25 / dot (zz_25, zz_25)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_25 = ((2.8 * zz_25) + zz0_24);\n  zz_25 = ((2.0 * clamp (zz_25, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_25);\n  zz_25 = (zz_25 * (clamp (\n    max ((0.25 / dot (zz_25, zz_25)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_25 = ((2.8 * zz_25) + zz0_24);\n  zz_25 = ((2.0 * clamp (zz_25, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_25);\n  zz_25 = (zz_25 * (clamp (\n    max ((0.25 / dot (zz_25, zz_25)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_25 = ((2.8 * zz_25) + zz0_24);\n  zz_25 = ((2.0 * clamp (zz_25, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_25);\n  zz_25 = (zz_25 * (clamp (\n    max ((0.25 / dot (zz_25, zz_25)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_25 = ((2.8 * zz_25) + zz0_24);\n  zz_25 = ((2.0 * clamp (zz_25, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_25);\n  zz_25 = (zz_25 * (clamp (\n    max ((0.25 / dot (zz_25, zz_25)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_25 = ((2.8 * zz_25) + zz0_24);\n  zz_25 = ((2.0 * clamp (zz_25, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_25);\n  zz_25 = (zz_25 * (clamp (\n    max ((0.25 / dot (zz_25, zz_25)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_25 = ((2.8 * zz_25) + zz0_24);\n  xlat_mutablelen = (sqrt(dot (zz_25, zz_25)) * 2.0);\n  xlat_mutablestruc = ((sqrt(\n    dot (zz_25.xy, zz_25.xy)\n  ) / 34.0) * 2.0);\n  float tmpvar_26;\n  vec4 tmpvar_27;\n  tmpvar_27 = texture (sampler_pc_main, uv_3);\n  tmpvar_26 = (1.0 - (tmpvar_27.z + (0.003921569 * tmpvar_27.y)));\n  if ((((xlat_mutabledist <= tmpvar_26) && (xlat_mutablelen < 34.0)) && (xlat_mutabledist > (0.04 / rad)))) {\n    ret_4.x = (((1.0 - sustain) * xlat_mutablestruc) + (sustain * texture (sampler_main, uv_3).x));\n    float x_28;\n    x_28 = ((1.0 - xlat_mutabledist) * 255.0);\n    float ip_29;\n    ip_29 = float(int(x_28));\n    vec2 tmpvar_30;\n    tmpvar_30.x = (x_28 - ip_29);\n    tmpvar_30.y = (ip_29 / 255.0);\n    ret_4.yz = tmpvar_30;\n  } else {\n    ret_4 = ((texture (sampler_main, uv_3).xyz * sustain) - 0.002);\n  };\n  vec4 tmpvar_31;\n  tmpvar_31.w = 1.0;\n  tmpvar_31.xyz = ret_4;\n  ret = tmpvar_31.xyz;\n }","comp":"float xlat_mutablearg;\nvec2 xlat_mutableuv2;\nvec2 xlat_mutableuv3;\n shader_body { \n  vec2 uv_1;\n  float bdist_2;\n  vec2 noise_3;\n  float ang2_4;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  float tmpvar_5;\n  tmpvar_5 = abs((0.5 / uv_1.y));\n  vec2 tmpvar_6;\n  tmpvar_6.x = (tmpvar_5 * uv_1.x);\n  tmpvar_6.y = (tmpvar_5 + (time / 2.0));\n  noise_3 = (((texture (sampler_noise_hq, tmpvar_6) - 0.5) / tmpvar_5) * 2.0).xy;\n  ang2_4 = (3.14 + q9);\n  float tmpvar_7;\n  tmpvar_7 = cos(ang2_4);\n  float tmpvar_8;\n  tmpvar_8 = sin(ang2_4);\n  xlat_mutableuv2.x = ((uv_1.x * tmpvar_7) - (uv_1.y * tmpvar_8));\n  xlat_mutableuv2.y = ((uv_1.x * tmpvar_8) + (uv_1.y * tmpvar_7));\n  xlat_mutableuv2 = (xlat_mutableuv2 * aspect.yx);\n  xlat_mutableuv3 = (abs((\n    fract((fract((xlat_mutableuv2 + 0.5)) + 0.5))\n   - 0.5)) + ((\n    ((rad * rad) * noise_3)\n   * 0.02) * bass_att));\n  bdist_2 = (1.0 - ((texture (sampler_blur2, xlat_mutableuv3).xyz * scale2) + bias2).z);\n  mat2 tmpvar_9;\n  float tmpvar_10;\n  tmpvar_10 = cos(q31);\n  tmpvar_9[uint(0)].x = tmpvar_10;\n  float tmpvar_11;\n  tmpvar_11 = sin(q31);\n  tmpvar_9[uint(0)].y = -(tmpvar_11);\n  tmpvar_9[1u].x = tmpvar_11;\n  tmpvar_9[1u].y = tmpvar_10;\n  vec2 tmpvar_12;\n  tmpvar_12 = sin(((\n    (((xlat_mutableuv3 * tmpvar_9).x * bass_att) + 1.5)\n   + bdist_2) + (\n    (noise_3 * 0.04)\n   * bass_att)));\n  xlat_mutablearg = (bdist_2 + q6);\n  vec3 tmpvar_13;\n  tmpvar_13.x = (xlat_mutablearg * 2.0);\n  tmpvar_13.y = (xlat_mutablearg * 3.0);\n  tmpvar_13.z = (5.0 * xlat_mutablearg);\n  vec4 tmpvar_14;\n  tmpvar_14.w = 1.0;\n  tmpvar_14.xyz = (1.0 - exp((\n    (((-(\n      max (vec3(0.0, 0.0, 0.0), ((max (vec3(\n        mix (texture (sampler_main, xlat_mutableuv3).x, ((texture (sampler_blur1, xlat_mutableuv3).xyz * scale1) + bias1).x, (clamp ((q11 * 8.0), 0.0, 1.0) * 1.1))\n      ), vec3(\n        ((0.04 / sqrt(dot (tmpvar_12, tmpvar_12))) * bdist_2)\n      )) * (bdist_2 + 0.2)) * (2.0 + sin(tmpvar_13))))\n    ) / (\n      (0.2 / bass)\n     + rad)) / bass) * 0.5)\n   + 0.1)));\n  ret = tmpvar_14.xyz;\n }","warp_hlsl":"float dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;\nstatic const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);\n\nstatic const float3 CamPos = float3(q4,q5,q6);\nstatic const float  ds = q10, sustain = .96-ds, change = q14;\nstatic const float myzoom = q7, limit = 34, tele=q16;\n\nfloat GetDist(float2 uvi) {float2 tmp; tmp = tex2D (sampler_pc_main, uvi).gb; \n  return 1-(tmp.y + 1.0/255*tmp.x);}\n\nfloat2 PutDist(float x) {float fg, fb; fg = modf((1-x)*255.0,fb);\n  return (float2(fg,fb/255.0));}\n\nfloat MinDist (float2 uvi) \n{\n   float tmp; float4 nb; float4 nb2; float2 pix;\n   pix = texsize.zw*(1.0+length(uvi-0.5)*2);\n   tmp = GetDist(uvi);\n   nb.x = GetDist(uvi+pix*float2(-1,-1));  \n   nb.y = GetDist(uvi+pix*float2(1,-1));\n   nb.z = GetDist(uvi+pix*float2(1,1));   \n   nb.w = GetDist(uvi+pix*float2(-1,1));\n   nb2.x = GetDist(uvi+pix*float2(0,-1));  \n   nb2.y = GetDist(uvi+pix*float2(1,0));\n   nb2.z = GetDist(uvi+pix*float2(0,1));   \n   nb2.w = GetDist(uvi+pix*float2(-1,0));\n   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU\n   nb = min( nb, nb2 );\n   nb.xy = min( nb.xy, nb.zw );\n   tmp = min( nb.x, nb.y );\n   return tmp;\n}\n\nfloat3 Get1 (float2 uvi) {float3 tmp; float2 pix;\n   return GetPixel(uvi);} //#\n\nfloat4 mbox (float3 uvi) {float3 zz, zz0; float tmp, li;\n  zz = uvi; zz0 = zz+q8; li=0;\n  for (int n = 0; n <= 7; n++) {\n    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);\n    zz *= clamp(max(.25/tmp, .25), 0.0, 1.0)*4;\n    zz = 2.8*zz + zz0;}\n  return float4(zz,li);}\n\nshader_body {\nuv1 = (uv-.5)*aspect.xy*tele;\nuv = (uv-.5)*(1-ds/(GetDist(uv))) + .5;\n\nfloat3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); \n\ndist = noise.r;\n   if (noise.g > .2) \n   {\n       float3 noiseBiased = noise - float3( 0.5, 0.5, 0.5 );\n//Eo.S. combine the subtraction on noise to a single float3 to ensure compiler does the subtraction in a single ALU\n       dist = MinDist( uv) +  .01 * (noiseBiased.x) * abs(noiseBiased.y);\n   }\ndist = min(dist,GetDist(uv))- ds*1;\n\nuv2 = mul(float3(uv1*dist,dist-.0)/myzoom,RotMat)+CamPos;\nuv2 = (frac(uv2/8.0+.5)-.5)*8.0;\nbox = mbox (uv2);\nlen = (length(box.xyz))*2;\nstruc = length(box.xy)/limit*2;\n\nif ((dist <= GetDist(uv)) && (len < limit) && (dist > 0.04/(.0+rad))){\n ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); } \n else {ret = Get1(uv)*sustain -.002;} \n\n}","comp_hlsl":"float arg;\nfloat2 uv1, uv2, uv3, uv4;\nfloat3 ret1, neu, blur, sun;\n\nshader_body\n{\nfloat ang2, c, s;\nuv -= .5;\nuv *= aspect.xy;    \n\n\nuv2 = float2(1/rad+time/2, ang*2/3.14);\nfloat z = abs(.5/uv.y);\nuv2 = float2(z*uv.x, z+time/2);\nfloat2 noise = (tex2D (sampler_noise_hq,uv2)-.5)/z*2;\n//uv += rad*rad * noise*.02;\n\nfloat dist = 1;\nfloat bdist = 1;\nfloat inten = 1;\nret1 = 0;\nint anz = 1; \nfloat n = 1;\nwhile (n <= anz) {\n    ang2 = n/anz*3.14+q9;\n    c = cos(ang2);\n    s = sin(ang2);\n    uv2.x =  uv.x*c - uv.y*s;\n    uv2.y =  uv.x*s + uv.y*c;\n    uv2 *= aspect.yx;\n    uv3 = frac(1*uv2*dist + .5 );;\n\n    uv3=abs(frac(uv3+.5)-.5) +rad*rad * noise*.02*bass_att;;\n    bdist = (1-GetBlur2(uv3).b);\n    uv4 = mul(uv3,float2x2(cos(q31),sin(q31), -sin(q31), cos(q31))),\n    sun = .04/length(sin(uv4.x*bass_att+1.5+bdist+ noise*.04*bass_att))*bdist;      \n    arg = bdist + q6;\n    neu =  lerp(GetPixel (uv3).r,GetBlur1(uv3).r,saturate(q11*8)*1.1) ;\n    neu = max(neu,sun)*(bdist+.2)*(2+sin(float3(arg*2, arg*3,5*arg)));\n//    neu = lerp(neu,sun/q11,saturate(q11*18))*(bdist+.2)*(2+sin(float3(arg*2, arg*3,5*arg)));\n    ret1 = max(ret1*1,neu) ;\nn++;\n}\n//ret = 1-exp(-ret1/2/(bass*.1+1*rad)+.1);\nret = 1-exp(-ret1/(.2/bass+rad)/bass*.5+.1);\n//ret = GetPixel(uv+.5).r;\n//ret = sun;\n}"}