{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":7,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.001,"wave_scale":0.958,"wave_smoothing":0.45,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_x":25.6,"mv_y":9.6,"mv_l":0,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"textured":1,"x":0.09,"y":0.9,"rad":0.22437,"tex_zoom":1.76002,"r2":1,"g2":0,"a2":0.6,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"x":0.26,"y":0.2,"rad":0.39317,"tex_zoom":6.19589,"r":0,"g":0.55,"b":0.5,"g2":0.4,"b2":0.4,"a2":0.07,"border_r":0.3,"border_g":0.7,"border_b":0.8,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":44,"additive":1,"x":0.503,"rad":0.03886,"tex_zoom":0.60986,"g":0.1,"a":0.9,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"rad":0.01,"tex_zoom":0.49981,"r":0,"g2":0,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"samples":282,"sep":20,"usedots":1,"thick":1,"additive":1,"scaling":3.91581,"smoothing":0.1,"r":0.2,"g":0.3,"a":0.6,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"usedots":1,"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.2,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.mq29=0;a.look=0;a.cthr=0;a.n=0;a.mq1=0;a.reg26=0;a.uvx0=0;a.reg34=0;a.reg28=0;a.reg23=0;a.q25=0;a.angchg=0;a.reg20=0;a.reg15=0;a.reg10=0;a.q12=0;a.v3=0;a.q18=0;a.q22=0;a.q21=0;a.diry=0;a.q13=0;a.q29=0;a.q6=0;a.posx=0;a.fps_=0;a.reg25=0;a.uvx=0;a.q1=0;a.travel=0;a.mq31=0;a.posz=0;a.q5=0;a.mq21=0;a.mq24=0;a.dirz=0;a.dec_s=0;a.reg16=0;a.slow=0;a.chng=0;a.mq28=0;a.reg36=0;a.reg22=0;a.uvy=0;a.rotz=0;a.ly=0;a.mq23=0;a.dist_=0;a.q23=0;a.q24=0;a.reg24=0;a.cran0=0;a.ran2=0;a.q11=0;\na.reg14=0;a.posy=0;a.atime=0;a.reg31=0;a.dirx=0;a.q4=0;a.start=0;a.reg12=0;a.reg13=0;a.c2=0;a.reg37=0;a.s3=0;a.yslope=0;a.lampy=0;a.xslope=0;a.q26=0;a.reg38=0;a.reg35=0;a.reg11=0;a.tx=0;a.avg=0;a.uvz=0;a.mq27=0;a.c3=0;a.uvy0=0;a.mq25=0;a.reg27=0;a.q19=0;a.mq22=0;a.beat=0;a.vol=0;a.reg32=0;a.lx=0;a.reg21=0;a.uvz0=0;a.len=0;a.mq26=0;a.reg18=0;a.reg30=0;a.q2=0;a.q27=0;a.slen=0;a.q14=0;a.dist=0;a.cran1=0;a.reg17=0;a.v1=0;a.speed=0;a.s1=0;a.t0=0;a.s2=0;a.ran1=0;a.reg33=0;a.q7=0;a.ds=0;a.q28=0;a.lampx=\n0;a.ty=0;a.c1=0;a.v2=0;a.q20=0;for(var b=a.n=0;1E4>b;b++)a.gmegabuf[Math.floor(a.n)]=0,a.n+=1;for(b=a.n=0;1E4>b;b++)a.megabuf[Math.floor(a.n)]=0,a.n+=1;a.trelx=0;a.trely=0;a.trelz=0;a.reg20=1;a.reg21=0;a.reg22=0;a.reg23=0;a.reg24=1;a.reg25=0;a.reg26=0;a.reg27=0;a.reg28=1;b=0;do{b+=1;var c;a.ran1=div(rand(800),100);a.ran2=div(rand(800),100);a.ran3=div(rand(800),100);a.posx=rand(10)-5;a.posy=rand(10)-5;a.posz=rand(10)-5;a.c1=Math.cos(a.ran1);a.c2=Math.cos(a.ran2);a.c3=Math.cos(a.ran3);a.s1=Math.sin(a.ran1);\na.s2=Math.sin(a.ran2);a.s3=Math.sin(a.ran3);a.reg20=a.c2*a.c1;a.reg21=a.c2*a.s1;a.reg22=-a.s2;a.reg23=a.s3*a.s2*a.c1-a.c3*a.s1;a.reg24=a.s3*a.s2*a.s1+a.c3*a.c1;a.reg25=a.s3*a.c2;a.reg26=a.c3*a.s2*a.c1+a.s3*a.s1;a.reg27=a.c3*a.s2*a.s1-a.s3*a.c1;a.reg28=a.c3*a.c2;a.dist=.001;var d=0;do{d+=1;a.uvx=div(a.reg26*a.dist,a.q7);a.uvy=div(a.reg27*a.dist,a.q7);a.uvz=div(a.reg28*a.dist,a.q7);a.uvx+=a.posx;a.uvy+=a.posy;a.uvz+=a.posz;a.uvx=8*(div(a.uvx,8)+30.5-Math.floor(div(a.uvx,8)+30.5)-.5);a.uvy=8*(div(a.uvy,\n8)+30.5-Math.floor(div(a.uvy,8)+30.5)-.5);a.uvz=8*(div(a.uvz,8)+30.5-Math.floor(div(a.uvz,8)+30.5)-.5);a.uvx0=a.uvx;a.uvy0=a.uvy;a.uvz0=a.uvz;for(c=0;8>c;c++)a.uvx=.00001<Math.abs(1<a.uvx?1:0)?2-a.uvx:.00001<Math.abs(-1>a.uvx?1:0)?-2-a.uvx:a.uvx,a.uvy=.00001<Math.abs(1<a.uvy?1:0)?2-a.uvy:.00001<Math.abs(-1>a.uvy?1:0)?-2-a.uvy:a.uvy,a.uvz=.00001<Math.abs(1<a.uvz?1:0)?2-a.uvz:.00001<Math.abs(-1>a.uvz?1:0)?-2-a.uvz:a.uvz,a.slen=a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz,a.uvx=2.6*(.00001<Math.abs(.25>a.slen?\n1:0)?4*a.uvx:.00001<Math.abs(1>a.slen?1:0)?div(a.uvx,a.slen):a.uvx)+a.uvx0,a.uvy=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvy:.00001<Math.abs(1>a.slen?1:0)?div(a.uvy,a.slen):a.uvy)+a.uvy0,a.uvz=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvz:.00001<Math.abs(1>a.slen?1:0)?div(a.uvz,a.slen):a.uvz)+a.uvz0;a.len=sqrt(a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz);a.dist*=1.05;c=(.6>a.dist?1:0)*(30<a.len?1:0)}while(.00001<Math.abs(c)&&1048576>d);d=.2>a.dist?1:0}while(.00001<Math.abs(d)&&1048576>b);a.q7=.1;a.q30=1;\na.q31=128;a.start=1;a.travel=0;a.rotz=0;a.look=0;a.slow=0;a.cran0=rand(1);a.cran1=rand(1);","frame_eqs_str":"a.chng=Math.sin(.5*a.time);a.cthr=.9999;a.mq21=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq21;a.mq22=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq22;a.mq23=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq23;a.mq24=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq24;a.mq25=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq25;a.mq26=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq26;a.mq27=.00001<Math.abs(above(a.chng,a.cthr))?rand(1):a.mq27;a.mq28=.00001<Math.abs(above(a.chng,\na.cthr))?rand(1):a.mq28;a.mq29=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq29;a.mq31=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq31;a.monitor=a.chng;a.q21=a.mq21;a.q22=a.mq22;a.q23=a.mq23;a.q24=a.mq24;a.q25=a.mq25;a.q26=a.mq26;a.q27=a.mq27;a.q28=a.mq28;a.q29=a.mq29;a.monitor=a.mq1;a.vol=a.bass+a.treb+a.mid;a.atime+=a.vol;a.q11=.4+.4*Math.sin(.006*a.atime);a.q12=.4+.4*Math.cos(.00613828348*a.atime);a.q13=.4+.4*Math.sin(.00598593455*a.atime);a.monitor=a.q13;a.fps_=.9*a.fps_+.1*(.00001<\nMath.abs(25>=a.fps?1:0)?a.fps:25+.5*(a.fps-25));a.dec_s=1-div(.03*30,a.fps_);a.beat=a.time>a.t0+2?1:0;a.t0=.00001<Math.abs(a.beat)?a.time:a.t0;a.speed=Math.min(.2,a.dist_-0)*(1+a.avg)*(1-.7*a.slow);a.ds=a.ds*a.dec_s+div((1-a.dec_s)*a.speed*.2,a.fps_);a.rotz=.00001<Math.abs(.00001>Math.abs(a.rotz-0)?1:0)?a.beat*(10>rand(100)?1:0)*(div(rand(10),10)-.5):bnot(a.beat*(30>rand(100)?1:0))*a.rotz;a.slow=.00001<Math.abs(bnot(a.slow))?a.beat*(6>rand(1E3*a.avg)?1:0):bnot(a.beat*(50>rand(100)?1:0));a.look=.00001<\nMath.abs(bnot(a.look))?a.beat*(5>rand(1E3*a.speed)?1:0):bnot(a.beat);a.lx=.00001<Math.abs(a.beat)?div(rand(150),200)+.15:a.lx;a.ly=.00001<Math.abs(a.beat)?div(rand(150),200)+.15:a.ly;a.lampx=a.lampx*a.dec_s+(1-a.dec_s)*(.00001<Math.abs(a.look)?a.lx:.5);a.lampy=a.lampy*a.dec_s+(1-a.dec_s)*(.00001<Math.abs(a.look)?a.ly:.5);a.q1=a.lampx;a.q2=a.lampy;a.dirx=a.reg26;a.diry=a.reg27;a.dirz=a.reg28;a.posx+=a.ds*a.dirx;a.posy+=a.ds*a.diry;a.posz+=a.ds*a.dirz;a.q4=a.posx;a.q5=a.posy;a.q6=a.posz;a.angchg=div((.15-\na.dist_)*(.15>a.dist_?1:0),2);a.travel=.00001<Math.abs(0<a.angchg?1:0)?0:a.travel+a.ds;a.v1=a.v1*a.dec_s+div((1-a.dec_s)*a.rotz*.05,a.fps_);a.v2=a.v2*a.dec_s+div((1-a.dec_s)*a.angchg*a.xslope,a.fps_);a.v3=a.v3*a.dec_s+(1-a.dec_s)*(div(a.angchg*a.yslope,a.fps_)+div(a.v1,2)*(1<a.travel?1:0));a.reg30=a.reg20;a.reg31=a.reg21;a.reg32=a.reg22;a.reg33=a.reg23;a.reg34=a.reg24;a.reg35=a.reg25;a.reg36=a.reg26;a.reg37=a.reg27;a.reg38=a.reg28;a.n=0;for(var b=a.avg=0;5>b;b++){a.n+=1;a.ran1=div(rand(100),100);\na.ran2=div(rand(100),200)-.25;a.tx=Math.cos(1.57*a.n+a.ran2)*(4>=a.n?1:0)*a.ran1;a.ty=Math.sin(1.57*a.n+a.ran2)*(4>=a.n?1:0)*a.ran1;a.c1=Math.cos(a.v1);a.c2=Math.cos(a.v2+a.ty);a.c3=Math.cos(a.v3+a.tx);a.s1=Math.sin(a.v1);a.s2=Math.sin(a.v2+a.ty);a.s3=Math.sin(a.v3+a.tx);a.reg10=a.c2*a.c1;a.reg11=a.c2*a.s1;a.reg12=-a.s2;a.reg13=a.s3*a.s2*a.c1-a.c3*a.s1;a.reg14=a.s3*a.s2*a.s1+a.c3*a.c1;a.reg15=a.s3*a.c2;a.reg16=a.c3*a.s2*a.c1+a.s3*a.s1;a.reg17=a.c3*a.s2*a.s1-a.s3*a.c1;a.reg18=a.c3*a.c2;a.reg20=a.reg30;\na.reg21=a.reg31;a.reg22=a.reg32;a.reg23=a.reg33;a.reg24=a.reg34;a.reg25=a.reg35;a.reg26=a.reg36;a.reg27=a.reg37;a.reg28=a.reg38;a.q20=a.reg10*a.reg20+a.reg11*a.reg23+a.reg12*a.reg26;a.q21=a.reg10*a.reg21+a.reg11*a.reg24+a.reg12*a.reg27;a.q22=a.reg10*a.reg22+a.reg11*a.reg25+a.reg12*a.reg28;a.q23=a.reg13*a.reg20+a.reg14*a.reg23+a.reg15*a.reg26;a.q24=a.reg13*a.reg21+a.reg14*a.reg24+a.reg15*a.reg27;a.q25=a.reg13*a.reg22+a.reg14*a.reg25+a.reg15*a.reg28;a.q26=a.reg16*a.reg20+a.reg17*a.reg23+a.reg18*a.reg26;\na.q27=a.reg16*a.reg21+a.reg17*a.reg24+a.reg18*a.reg27;a.q28=a.reg16*a.reg22+a.reg17*a.reg25+a.reg18*a.reg28;a.reg20=a.q20;a.reg21=a.q21;a.reg22=a.q22;a.reg23=a.q23;a.reg24=a.q24;a.reg25=a.q25;a.reg26=a.q26;a.reg27=a.q27;a.reg28=a.q28;a.dist=.002;var c,d=0;do{d+=1;a.uvx=div(a.reg26*a.dist,a.q7);a.uvy=div(a.reg27*a.dist,a.q7);a.uvz=div(a.reg28*a.dist,a.q7);a.uvx+=a.posx;a.uvy+=a.posy;a.uvz+=a.posz;a.uvx=8*(div(a.uvx,8)+30.5-Math.floor(div(a.uvx,8)+30.5)-.5);a.uvy=8*(div(a.uvy,8)+30.5-Math.floor(div(a.uvy,\n8)+30.5)-.5);a.uvz=8*(div(a.uvz,8)+30.5-Math.floor(div(a.uvz,8)+30.5)-.5);a.uvx0=a.uvx;a.uvy0=a.uvy;a.uvz0=a.uvz;for(c=0;8>c;c++)a.uvx=.00001<Math.abs(1<a.uvx?1:0)?2-a.uvx:.00001<Math.abs(-1>a.uvx?1:0)?-2-a.uvx:a.uvx,a.uvy=.00001<Math.abs(1<a.uvy?1:0)?2-a.uvy:.00001<Math.abs(-1>a.uvy?1:0)?-2-a.uvy:a.uvy,a.uvz=.00001<Math.abs(1<a.uvz?1:0)?2-a.uvz:.00001<Math.abs(-1>a.uvz?1:0)?-2-a.uvz:a.uvz,a.slen=a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz,a.uvx=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvx:.00001<Math.abs(1>\na.slen?1:0)?div(a.uvx,a.slen):a.uvx)+a.uvx0,a.uvy=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvy:.00001<Math.abs(1>a.slen?1:0)?div(a.uvy,a.slen):a.uvy)+a.uvy0,a.uvz=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvz:.00001<Math.abs(1>a.slen?1:0)?div(a.uvz,a.slen):a.uvz)+a.uvz0;a.len=sqrt(a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz);a.dist*=1.1;c=(.6>a.dist?1:0)*(30<a.len?1:0)}while(.00001<Math.abs(c)&&1048576>d);a.megabuf[Math.floor(a.n)]=a.megabuf[Math.floor(a.n)]*a.dec_s+(1-a.dec_s)*a.dist;a.avg+=Math.abs(div(a.megabuf[Math.floor(a.n)],\n5))}a.n=0;for(b=a.avg=0;5>b;b++)a.n+=1,a.avg+=Math.abs(div(a.megabuf[Math.floor(a.n)],5));a.xslope=div(1,a.avg)*(a.megabuf[1]-a.megabuf[3]);a.yslope=div(1,a.avg)*(a.megabuf[4]-a.megabuf[2]);a.monitor=a.avg;a.dist_=a.dist_*a.dec_s+(1-a.dec_s)*a.dist;a.q13=1-a.ds;a.q14=4*Math.abs(a.ds)+6*(Math.abs(a.v1)+2*Math.abs(a.v2)+2*Math.abs(a.v3))+div(1,255)+.1*a.start;a.q18=a.cran1;a.q19=.5+.5*Math.sin(.02*a.time+6*a.cran0);a.start*=.9;","pixel_eqs_str":"a.warp=0;a.dx=0;a.zoom=1;a.dy=0;","init_eqs_eel":"//******** INITIALIZATION *********\nn = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); \nn = 0; loop (10000,  megabuf(n)=0; n=n+1; ); \ntrelx = 0;  trely = 0; trelz = 0;\nreg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;\n\n//Find random starting point\nwhile (exec2(\n  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;\n  PosX = rand(10)-5;   PosY = rand(10)-5;   PosZ = rand(10)-5; \n  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); \n  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);\n\n  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;\n  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;\n  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;\n\n  //***********BOT*************\n  //Coord. Trans. must exactly match def in warp S. !!!!\n  dist = 0.001;\n  while (exec2(\n    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;\n    uvx += PosX; uvy += PosY; uvz += PosZ;\n    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);\n    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);\n    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);\n    uvx0 = uvx; uvy0 = uvy; uvz0 = uvz;\n    loop (7+1,\n      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));\n      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));\n      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));\n      slen = uvx*uvx + uvy*uvy + uvz*uvz;\n      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; \n      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; \n      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; \n    );\n    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);\n    dist *= 1.05;\n  ,(dist < 0.6)*(len > 30)));\n,(dist < .2))); //end while\n\n\n//---------- some global vars, do not change -------------\nq7 = .1; //MyZoom\nq30 = 1; //logarithmic Z-Dist storage; unused\nq31 = 128;\nstart = 1; travel = 0; RotZ = 0; look = 0; slow = 0;\ncran0 = rand(1);\ncran1 = rand(1);","frame_eqs_eel":"chng=sin(time*.5);\ncthr=.9999;\nmq21=if(above(chng,cthr),rand(3),mq21);\nmq22=if(above(chng,cthr),rand(3),mq22);\nmq23=if(above(chng,cthr),rand(3),mq23);\nmq24=if(above(chng,cthr),rand(2),mq24);\nmq25=if(above(chng,cthr),rand(2),mq25);\nmq26=if(above(chng,cthr),rand(2),mq26);\nmq27=if(above(chng,cthr),rand(1),mq27);\nmq28=if(above(chng,cthr),rand(1),mq28);\nmq29=if(above(chng,cthr),rand(1)*.3,mq29);\nmq31=if(above(chng,cthr),rand(1)*.3,mq31);\nmonitor=chng;\nq21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;\nq27=mq27;q28=mq28;q29=mq29;\n//q31=mq31;\n\nmonitor=mq1;\nvol=bass+treb+mid;\natime=atime+vol;\nq11=.4+sin(atime*.006        )*.4;\nq12=.4+cos(atime*.00613828348)*.4;\nq13=.4+sin(atime*.00598593455)*.4;\nmonitor=q13;\nfps_ = .9 * fps_ + .1*if(fps<=25,fps,25+.5*(fps-25)); \ndec_s = 1-.03*30/fps_;\n\nbeat = (time >  t0+2);\nt0 = if(beat, time, t0);\n\nspeed = min(0.2,dist_-.0) * (1+avg) *(1-slow*.7);\nds = ds * dec_s + (1-dec_s)*speed*.2/fps_ ; \n\nRotZ = if (RotZ==0,beat*(rand(100)<10)*(rand(10)/10-.5),\n                   bnot(beat*(rand(100)<30))*RotZ);\n\nslow = if (bnot(slow), beat*(rand(1000*avg)<6), bnot(beat*(rand(100)<50)));\nlook = if (bnot(look), beat*(rand(1000*speed)<5), bnot(beat));\n\n//Lamp View\nlx = if (beat,rand(150)/200+.15,lx);\nly = if (beat,rand(150)/200+.15,ly);\nlampx = lampx * dec_s + (1-dec_s)*if (look,lx,0.5);\nlampy = lampy * dec_s + (1-dec_s)*if (look,ly,0.5);\nq1 = lampx; q2 = lampy;\n\n//Position \nDirX= reg26; DirY= reg27; DirZ = reg28;\nPosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; \nq4 = PosX; q5 = PosY; q6 = PosZ;\n\nangchg = (.15-dist_)*(dist_ < .15)/2;\ntravel = if (angchg > 0,0,travel+ds);\nv1 = v1 * dec_s + (1-dec_s)* RotZ * .05/fps_;\nv2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;\nv3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + v1/2 * (travel>1));\n\n//push old RotMat\nreg30 =reg20; reg31 =reg21; reg32 =reg22; \nreg33 =reg23; reg34 =reg24; reg35 =reg25; \nreg36 =reg26; reg37 =reg27; reg38 =reg28; \n\nn = 0; avg = 0;\nloop (5,\n  n = n+1;\n  //new Rot. Mat for infinitesimal angles\n  ran1 = rand(100)/100;\n  ran2 = rand(100)/200-.25;\n  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;\n  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); \n  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);\n  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;\n  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;\n  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;\n\n  //pop old RotMat\n  reg20 =reg30; reg21 =reg31; reg22 =reg32; \n  reg23 =reg33; reg24 =reg34; reg25 =reg35; \n  reg26 =reg36; reg27 =reg37; reg28 =reg38; \n\n  //Multiply new RotMat by old one\n  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;\n  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;\n  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;\n  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;\n  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;\n  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;\n  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;\n  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;\n  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;\n\n  reg20 =q20; reg21 =q21; reg22 =q22;\n  reg23 =q23; reg24 =q24; reg25 =q25;\n  reg26 =q26; reg27 =q27; reg28 =q28;\n\n  //***********BOT*************\n  //Coord. Trans. must exactly match def in warp S. !!!!\n  dist = 0.002;\n  while (exec2(\n    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;\n    uvx += PosX; uvy += PosY; uvz += PosZ;\n    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);\n    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);\n    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);\n    uvx0 = uvx; uvy0 = uvy; uvz0 = uvz;\n    loop (7+1,\n      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));\n      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));\n      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));\n      slen = uvx*uvx + uvy*uvy + uvz*uvz;\n      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; \n      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; \n      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; \n    );\n    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);\n    dist *= 1.1;\n  ,(dist < 0.6)*(len > 30)));\n  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points\n  avg = avg+abs(megabuf(n)/5);\n); //end loop 5\n\nn = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));\n\nxslope = 1/avg*(megabuf(1)-megabuf(3));\nyslope =  1/avg*(megabuf(4)-megabuf(2));\nmonitor = avg;\ndist_ = dist_*dec_s + (1-dec_s)*dist;\n\n//sustain\nq13 = 1-ds; //warp zoom uv \nq14 = 4*abs(ds) + 6*(abs(v1) + 2*abs(v2) + 2*abs(v3)) + 1.0/255 + start*.1; \nq18 = cran1; //brightness balance back/front\nq19 = .5 + .5*sin(time*.02+cran0*6); //brightness backgd\nstart = start * .9;","pixel_eqs_eel":"warp = 0; dx = .00; zoom = 1; dy = 0;","warp":"float sustain;\nfloat xlat_mutabledist;\nfloat xlat_mutablestruc;\nvec2 xlat_mutableuv1;\n shader_body { \n  mat3 tmpvar_1;\n  tmpvar_1[uint(0)].x = q20;\n  tmpvar_1[uint(0)].y = q23;\n  tmpvar_1[uint(0)].z = q26;\n  tmpvar_1[1u].x = q21;\n  tmpvar_1[1u].y = q24;\n  tmpvar_1[1u].z = q27;\n  tmpvar_1[2u].x = q22;\n  tmpvar_1[2u].y = q25;\n  tmpvar_1[2u].z = q28;\n  vec3 tmpvar_2;\n  tmpvar_2.x = q4;\n  tmpvar_2.y = q5;\n  tmpvar_2.z = q6;\n  sustain = (0.98 - (q14 * 2.0));\n  vec2 uv_3;\n  vec3 uv2_4;\n  vec3 ret_5;\n  uv_3 = (((uv - 0.5) * q13) + 0.5);\n  xlat_mutableuv1 = ((uv_3 - 0.5) * aspect.xy);\n  vec4 tmpvar_6;\n  tmpvar_6 = fract((8.0 * texture (sampler_noise_lq, (uv_3 + rand_frame.yz))));\n  xlat_mutabledist = tmpvar_6.x;\n  if ((tmpvar_6.y > 0.2)) {\n    vec2 uvi_7;\n    uvi_7 = (uv_3 + (0.003 * (tmpvar_6.zy - 0.5)));\n    vec2 pix_8;\n    vec4 nb_9;\n    vec2 x_10;\n    x_10 = (uvi_7 - 0.5);\n    pix_8 = (texsize.zw * (1.0 + (\n      sqrt(dot (x_10, x_10))\n     * 3.0)));\n    vec2 tmpvar_11;\n    float tmpvar_12;\n    tmpvar_12 = (1.0/(q31));\n    tmpvar_11 = (tmpvar_12 * floor((\n      (q31 * texture (sampler_pw_main, uvi_7).yz)\n     + vec2(0.5, 0.5))));\n    vec2 tmpvar_13;\n    tmpvar_13 = (tmpvar_12 * floor((\n      (q31 * texture (sampler_pw_main, (uvi_7 - pix_8)).yz)\n     + vec2(0.5, 0.5))));\n    float tmpvar_14;\n    tmpvar_14 = (1.0/(q30));\n    nb_9.x = pow ((1.0 - (tmpvar_13.y + \n      (0.015625 * (tmpvar_13.x - 0.505))\n    )), tmpvar_14);\n    vec2 tmpvar_15;\n    tmpvar_15 = (tmpvar_12 * floor((\n      (q31 * texture (sampler_pw_main, (uvi_7 + (pix_8 * vec2(1.0, -1.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb_9.y = pow ((1.0 - (tmpvar_15.y + \n      (0.015625 * (tmpvar_15.x - 0.505))\n    )), tmpvar_14);\n    vec2 tmpvar_16;\n    tmpvar_16 = (tmpvar_12 * floor((\n      (q31 * texture (sampler_pw_main, (uvi_7 + pix_8)).yz)\n     + vec2(0.5, 0.5))));\n    nb_9.z = pow ((1.0 - (tmpvar_16.y + \n      (0.015625 * (tmpvar_16.x - 0.505))\n    )), tmpvar_14);\n    vec2 tmpvar_17;\n    tmpvar_17 = (tmpvar_12 * floor((\n      (q31 * texture (sampler_pw_main, (uvi_7 + (pix_8 * vec2(-1.0, 1.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb_9.w = pow ((1.0 - (tmpvar_17.y + \n      (0.015625 * (tmpvar_17.x - 0.505))\n    )), tmpvar_14);\n    float tmpvar_18;\n    tmpvar_18 = min (pow ((1.0 - \n      (tmpvar_11.y + (0.015625 * (tmpvar_11.x - 0.505)))\n    ), tmpvar_14), min (min (nb_9.x, nb_9.y), min (nb_9.z, nb_9.w)));\n    vec2 tmpvar_19;\n    tmpvar_19 = (tmpvar_12 * floor((\n      (q31 * texture (sampler_pw_main, (uvi_7 + (pix_8 * vec2(0.0, -1.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb_9.x = pow ((1.0 - (tmpvar_19.y + \n      (0.015625 * (tmpvar_19.x - 0.505))\n    )), tmpvar_14);\n    vec2 tmpvar_20;\n    tmpvar_20 = (tmpvar_12 * floor((\n      (q31 * texture (sampler_pw_main, (uvi_7 + (pix_8 * vec2(1.0, 0.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb_9.y = pow ((1.0 - (tmpvar_20.y + \n      (0.015625 * (tmpvar_20.x - 0.505))\n    )), tmpvar_14);\n    vec2 tmpvar_21;\n    tmpvar_21 = (tmpvar_12 * floor((\n      (q31 * texture (sampler_pw_main, (uvi_7 + (pix_8 * vec2(0.0, 1.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb_9.z = pow ((1.0 - (tmpvar_21.y + \n      (0.015625 * (tmpvar_21.x - 0.505))\n    )), tmpvar_14);\n    vec2 tmpvar_22;\n    tmpvar_22 = (tmpvar_12 * floor((\n      (q31 * texture (sampler_pw_main, (uvi_7 + (pix_8 * vec2(-1.0, 0.0)))).yz)\n     + vec2(0.5, 0.5))));\n    nb_9.w = pow ((1.0 - (tmpvar_22.y + \n      (0.015625 * (tmpvar_22.x - 0.505))\n    )), tmpvar_14);\n    xlat_mutabledist = (min (min (tmpvar_18, nb_9.x), min (\n      min (nb_9.y, nb_9.z)\n    , nb_9.w)) + ((0.005 * \n      (tmpvar_6.x - 0.4)\n    ) * abs(\n      (tmpvar_6.z - 0.5)\n    )));\n  };\n  vec2 tmpvar_23;\n  tmpvar_23 = ((1.0/(q31)) * floor((\n    (q31 * texture (sampler_pw_main, uv_3).yz)\n   + vec2(0.5, 0.5))));\n  float tmpvar_24;\n  tmpvar_24 = min (xlat_mutabledist, pow ((1.0 - \n    (tmpvar_23.y + (0.015625 * (tmpvar_23.x - 0.505)))\n  ), (1.0/(q30))));\n  xlat_mutabledist = tmpvar_24;\n  vec3 tmpvar_25;\n  tmpvar_25.xy = (xlat_mutableuv1 * tmpvar_24);\n  tmpvar_25.z = (tmpvar_24 - 0.02);\n  uv2_4 = ((fract(\n    ((((\n      (tmpvar_25 / q7)\n     * tmpvar_1) + tmpvar_2) / 8.0) + 0.5)\n  ) - 0.5) * 8.0);\n  vec3 zz_26;\n  zz_26 = ((2.0 * clamp (uv2_4, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - uv2_4);\n  float tmpvar_27;\n  tmpvar_27 = dot (zz_26, zz_26);\n  if ((tmpvar_27 <= 0.25)) {\n    zz_26 = (zz_26 * 4.0);\n  } else {\n    if ((tmpvar_27 <= 1.0)) {\n      zz_26 = (zz_26 / tmpvar_27);\n    };\n  };\n  zz_26 = ((2.6 * zz_26) + uv2_4);\n  zz_26 = ((2.0 * clamp (zz_26, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_26);\n  float tmpvar_28;\n  tmpvar_28 = dot (zz_26, zz_26);\n  if ((tmpvar_28 <= 0.25)) {\n    zz_26 = (zz_26 * 4.0);\n  } else {\n    if ((tmpvar_28 <= 1.0)) {\n      zz_26 = (zz_26 / tmpvar_28);\n    };\n  };\n  zz_26 = ((2.6 * zz_26) + uv2_4);\n  zz_26 = ((2.0 * clamp (zz_26, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_26);\n  float tmpvar_29;\n  tmpvar_29 = dot (zz_26, zz_26);\n  if ((tmpvar_29 <= 0.25)) {\n    zz_26 = (zz_26 * 4.0);\n  } else {\n    if ((tmpvar_29 <= 1.0)) {\n      zz_26 = (zz_26 / tmpvar_29);\n    };\n  };\n  zz_26 = ((2.6 * zz_26) + uv2_4);\n  zz_26 = ((2.0 * clamp (zz_26, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_26);\n  float tmpvar_30;\n  tmpvar_30 = dot (zz_26, zz_26);\n  if ((tmpvar_30 <= 0.25)) {\n    zz_26 = (zz_26 * 4.0);\n  } else {\n    if ((tmpvar_30 <= 1.0)) {\n      zz_26 = (zz_26 / tmpvar_30);\n    };\n  };\n  zz_26 = ((2.6 * zz_26) + uv2_4);\n  zz_26 = ((2.0 * clamp (zz_26, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_26);\n  float tmpvar_31;\n  tmpvar_31 = dot (zz_26, zz_26);\n  if ((tmpvar_31 <= 0.25)) {\n    zz_26 = (zz_26 * 4.0);\n  } else {\n    if ((tmpvar_31 <= 1.0)) {\n      zz_26 = (zz_26 / tmpvar_31);\n    };\n  };\n  zz_26 = ((2.6 * zz_26) + uv2_4);\n  zz_26 = ((2.0 * clamp (zz_26, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_26);\n  float tmpvar_32;\n  tmpvar_32 = dot (zz_26, zz_26);\n  if ((tmpvar_32 <= 0.25)) {\n    zz_26 = (zz_26 * 4.0);\n  } else {\n    if ((tmpvar_32 <= 1.0)) {\n      zz_26 = (zz_26 / tmpvar_32);\n    };\n  };\n  zz_26 = ((2.6 * zz_26) + uv2_4);\n  zz_26 = ((2.0 * clamp (zz_26, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_26);\n  float tmpvar_33;\n  tmpvar_33 = dot (zz_26, zz_26);\n  if ((tmpvar_33 <= 0.25)) {\n    zz_26 = (zz_26 * 4.0);\n  } else {\n    if ((tmpvar_33 <= 1.0)) {\n      zz_26 = (zz_26 / tmpvar_33);\n    };\n  };\n  zz_26 = ((2.6 * zz_26) + uv2_4);\n  zz_26 = ((2.0 * clamp (zz_26, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_26);\n  float tmpvar_34;\n  tmpvar_34 = dot (zz_26, zz_26);\n  if ((tmpvar_34 <= 0.25)) {\n    zz_26 = (zz_26 * 4.0);\n  } else {\n    if ((tmpvar_34 <= 1.0)) {\n      zz_26 = (zz_26 / tmpvar_34);\n    };\n  };\n  zz_26 = ((2.6 * zz_26) + uv2_4);\n  float tmpvar_35;\n  tmpvar_35 = sqrt(dot (zz_26, zz_26));\n  xlat_mutablestruc = (sqrt(dot (zz_26.zy, zz_26.zy)) / 20.0);\n  vec2 tmpvar_36;\n  tmpvar_36 = ((1.0/(q31)) * floor((\n    (q31 * texture (sampler_pw_main, uv_3).yz)\n   + vec2(0.5, 0.5))));\n  float tmpvar_37;\n  tmpvar_37 = pow ((1.0 - (tmpvar_36.y + \n    (0.015625 * (tmpvar_36.x - 0.505))\n  )), (1.0/(q30)));\n  if ((((tmpvar_24 <= tmpvar_37) && (tmpvar_35 < 20.0)) && (tmpvar_24 > 0.005))) {\n    ret_5.x = (((1.0 - sustain) * xlat_mutablestruc) + (sustain * mix (texture (sampler_main, uv_3).xyz, \n      ((((texture (sampler_blur1, uv_3).xyz * scale1) + bias1) * 3.0) / 3.0)\n    , vec3(\n      (q14 * 4.0)\n    )).x));\n    float tmpvar_38;\n    tmpvar_38 = pow (tmpvar_24, q30);\n    vec2 tmpvar_39;\n    tmpvar_39 = ((1.0/(q31)) * floor((\n      (q31 * vec2((1.0 - tmpvar_38)))\n     + vec2(0.5, 0.5))));\n    vec2 tmpvar_40;\n    tmpvar_40.x = ((64.0 * (\n      (1.0 - tmpvar_38)\n     - tmpvar_39.x)) + 0.495);\n    tmpvar_40.y = tmpvar_39.x;\n    ret_5.yz = tmpvar_40;\n  } else {\n    vec3 tmpvar_41;\n    tmpvar_41.yz = vec2(1.0, 1.0);\n    tmpvar_41.x = sustain;\n    vec3 tmpvar_42;\n    tmpvar_42.xy = vec2(0.0, 0.0);\n    tmpvar_42.z = q14;\n    ret_5 = ((texture (sampler_pc_main, uv_orig).xyz * tmpvar_41) - tmpvar_42);\n  };\n  vec4 tmpvar_43;\n  tmpvar_43 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv2_4.xyy) * (\n    (q27 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q29)));\n  if (((ret_5.x > (q21 * q13)) && (ret_5.x <= (q24 * q11)))) {\n    ret_5.y = (ret_5.y + (tmpvar_43.x * 0.5));\n  };\n  if (((ret_5.y > (q22 * q11)) && (ret_5.y <= (q25 * q12)))) {\n    ret_5.z = (ret_5.z + (tmpvar_43.y * 0.5));\n  };\n  if (((ret_5.z > (q23 * q12)) && (ret_5.z <= (q26 * q13)))) {\n    ret_5.x = (ret_5.x + (tmpvar_43.z * 0.5));\n  };\n  vec4 tmpvar_44;\n  tmpvar_44.w = 1.0;\n  tmpvar_44.xyz = ret_5;\n  ret = tmpvar_44.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  ret_1 = tmpvar_2.xyz;\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv.xyy) * (\n    (q28 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q31)));\n  if (((tmpvar_2.x > (q26 * q13)) && (tmpvar_2.x <= (q23 * q11)))) {\n    ret_1.z = (tmpvar_2.z - (tmpvar_3.x * 0.5));\n  };\n  if (((tmpvar_2.y > (q25 * q11)) && (tmpvar_2.y <= (q22 * q12)))) {\n    ret_1.x = (tmpvar_2.x - (tmpvar_3.y * 0.5));\n  };\n  if (((ret_1.z > (q24 * q12)) && (ret_1.z <= (q21 * q13)))) {\n    ret_1.y = (tmpvar_2.y - (tmpvar_3.z * 0.5));\n  };\n  ret_1 = (abs((ret_1 - \n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  )) * 6.0);\n  ret_1 = (ret_1 * 1.333);\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_1;\n  ret = tmpvar_4.xyz;\n }","warp_hlsl":"float dist, struc; float2 uv0, uv1; float3 box;\nstatic const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);\nstatic const float3 CamPos = float3(q4,q5,q6);\nstatic const float myzoom = q7,  res = q31, res2 = 64, limit = 20;\nstatic const float sustain = .98 - q14*2, change = q14;\n\nfloat2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}\n\nfloat GetDist(float2 uvi) {float2 tmp; tmp = fstep2(tex2D (sampler_pw_main, uvi).gb); \n  return pow(1-(tmp.y + 1.0/res2*(tmp.x-.505)),1/q30);}\n\nfloat2 PutDist(float x) {float tmp; x = pow(x,q30);   tmp = fstep2(1-x);\n  return (float2(res2*((1-x)-tmp)+.495,tmp));}\n\nfloat MinDist (float2 uvi) {float tmp; float4 nb; float2 pix;\n  pix = texsize.zw*(1+length(uvi-.5)*3);\n  tmp = GetDist(uvi);\n  nb.x = GetDist(uvi+pix*float2(-1,-1));  nb.y = GetDist(uvi+pix*float2(1,-1));\n  nb.z = GetDist(uvi+pix*float2(1,1));   nb.w = GetDist(uvi+pix*float2(-1,1));\n  tmp = min(tmp,min(min(min(nb.x, nb.y),nb.z),nb.w)) ;\n  nb.x = GetDist(uvi+pix*float2(0,-1));  nb.y = GetDist(uvi+pix*float2(1,0));\n  nb.z = GetDist(uvi+pix*float2(0,1));   nb.w = GetDist(uvi+pix*float2(-1,0));\n  tmp = min(tmp,min(min(min(nb.x, nb.y),nb.z),nb.w)) ;\n  return tmp;}\n\nfloat3 Get1 (float2 uvi) {float3 tmp; float2 pix;\n  tmp = GetBlur1(uvi)*3;\n  return lerp (GetPixel(uvi),tmp/3,change*4);}\n\nfloat3 mbox (float3 uvi) {float3 zz, zz0; float tmp, li;\n  zz = uvi; zz0 = zz;\n  for (int n = 0; n <= 7; n++) {\n    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);\n    if (tmp <= 0.25) {zz *= 4;} else if (tmp <= 1) {zz /= pow(tmp,1);}\n    zz = 2.6*zz + zz0;}\n  return zz;}\n\nshader_body {\nuv = (uv-.5)*q13 + .5;\nuv1 = (uv-.5)*aspect.xy;\nfloat3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); \n\ndist = noise.r;\nif (noise.g > 0.2) {dist = MinDist(uv+.003*(noise.zy-.5)) + .005*(noise.r-.4)*abs(noise.b-.5);}\ndist = min(dist,GetDist(uv));\n\nfloat3 uv2 = mul(float3(uv1*dist,dist-.02)/myzoom,RotMat)+CamPos;\nuv2 = (frac(uv2/8.0+.5)-.5)*8.0;\nbox = mbox (uv2);\nfloat len = (length(box));\nstruc = length(box.zy) /limit;\n\nif ((dist <= GetDist(uv)) && (len < limit) && (dist > 0.005)){\n ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); } \n else {ret = tex2D(sampler_pc_main,uv_orig)*float3(sustain,1,1)-float3(0,0,change);} \nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv2.xyy*q27\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q29\n                     );\nif(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y += (noise9).x*.5; \nif(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z += (noise9).y*.5; \nif(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x += (noise9).z*.5; \n}","comp_hlsl":"shader_body\n{  \n    ret = tex2D(sampler_main, uv).xyz;\n\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy*q28\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q31\n                     );\nif(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; \nif(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; \nif(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; \n\n    ret = abs(ret - GetBlur1(uv))*6;\n\n    ret *= 1.333; // a little bit of overbright\n}"}