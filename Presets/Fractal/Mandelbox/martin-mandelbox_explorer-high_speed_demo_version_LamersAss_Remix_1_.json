{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":7,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.001,"wave_scale":0.958,"wave_smoothing":0.45,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0.05,"ob_g":0.1,"ob_b":1,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_x":25.6,"mv_y":9.6,"mv_l":0,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"textured":1,"x":0.09,"y":0.9,"rad":0.22437,"tex_zoom":1.76002,"r2":1,"g2":0,"a2":0.6,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"x":0.26,"y":0.2,"rad":0.39317,"tex_zoom":6.19589,"r":0,"g":0.55,"b":0.5,"g2":0.4,"b2":0.4,"a2":0.07,"border_r":0.3,"border_g":0.7,"border_b":0.8,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":44,"additive":1,"x":0.503,"rad":0.03886,"tex_zoom":0.60986,"g":0.1,"a":0.9,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":100,"rad":0.01,"tex_zoom":0.49981,"r":0,"g2":0,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"samples":282,"sep":20,"usedots":1,"thick":1,"additive":1,"scaling":3.91581,"smoothing":0.1,"r":0.2,"g":0.3,"a":0.6,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"usedots":1,"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.2,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.look=0;a.n=0;a.reg26=0;a.uvx0=0;a.reg34=0;a.reg28=0;a.reg23=0;a.q25=0;a.angchg=0;a.reg20=0;a.reg15=0;a.reg10=0;a.q12=0;a.v3=0;a.q22=0;a.q21=0;a.diry=0;a.q13=0;a.q6=0;a.posx=0;a.fps_=0;a.reg25=0;a.uvx=0;a.q1=0;a.travel=0;a.posz=0;a.q5=0;a.dirz=0;a.dec_s=0;a.reg16=0;a.slow=0;a.reg36=0;a.reg22=0;a.uvy=0;a.rotz=0;a.ly=0;a.dist_=0;a.q23=0;a.q24=0;a.reg24=0;a.cran0=0;a.ran2=0;a.q11=0;a.q10=0;a.reg14=0;a.posy=0;a.reg31=0;a.dirx=0;a.q4=0;a.start=0;a.reg12=0;a.reg13=0;a.c2=0;a.reg37=\n0;a.s3=0;a.yslope=0;a.lampy=0;a.q16=0;a.xslope=0;a.q26=0;a.reg38=0;a.reg35=0;a.reg11=0;a.tx=0;a.avg=0;a.uvz=0;a.c3=0;a.uvy0=0;a.reg27=0;a.q19=0;a.beat=0;a.reg32=0;a.lx=0;a.reg21=0;a.uvz0=0;a.len=0;a.reg18=0;a.reg30=0;a.q2=0;a.q27=0;a.slen=0;a.q14=0;a.dist=0;a.reg17=0;a.v1=0;a.speed=0;a.s1=0;a.t0=0;a.s2=0;a.ran1=0;a.reg33=0;a.q7=0;a.ds=0;a.q28=0;a.lampx=0;a.ty=0;a.c1=0;a.v2=0;a.q20=0;a.q8=0;a.avg=.01;a.q7=.25;a.q8=rand(2)-1;a.q16=1+rand(2);a.q18=rand(.8)+.1;a.q30=1;a.q31=128;a.start=1;a.travel=0;a.rotz=\n0;a.look=0;a.slow=0;a.t0=a.time+3;a.lampx=.5;a.lampy=.5;a.cran0=rand(1);for(var b=a.n=0;1E4>b;b++)a.gmegabuf[Math.floor(a.n)]=0,a.n+=1;for(b=a.n=0;1E4>b;b++)a.megabuf[Math.floor(a.n)]=0,a.n+=1;a.trelx=0;a.trely=0;a.trelz=0;a.reg20=1;a.reg21=0;a.reg22=0;a.reg23=0;a.reg24=1;a.reg25=0;a.reg26=0;a.reg27=0;a.reg28=1;b=0;do{b+=1;var c;a.ran1=div(rand(800),100);a.ran2=div(rand(800),100);a.ran3=div(rand(800),100);a.posx=rand(5)-2;a.posy=rand(5)-2;a.posz=rand(5)-2;a.c1=Math.cos(a.ran1);a.c2=Math.cos(a.ran2);\na.c3=Math.cos(a.ran3);a.s1=Math.sin(a.ran1);a.s2=Math.sin(a.ran2);a.s3=Math.sin(a.ran3);a.reg20=a.c2*a.c1;a.reg21=a.c2*a.s1;a.reg22=-a.s2;a.reg23=a.s3*a.s2*a.c1-a.c3*a.s1;a.reg24=a.s3*a.s2*a.s1+a.c3*a.c1;a.reg25=a.s3*a.c2;a.reg26=a.c3*a.s2*a.c1+a.s3*a.s1;a.reg27=a.c3*a.s2*a.s1-a.s3*a.c1;a.reg28=a.c3*a.c2;a.dist=.001;var d=0;do{d+=1;a.uvx=div(a.reg26*a.dist,a.q7);a.uvy=div(a.reg27*a.dist,a.q7);a.uvz=div(a.reg28*a.dist,a.q7);a.uvx+=a.posx;a.uvy+=a.posy;a.uvz+=a.posz;a.uvx=8*(div(a.uvx,8)+30.5-Math.floor(div(a.uvx,\n8)+30.5)-.5);a.uvy=8*(div(a.uvy,8)+30.5-Math.floor(div(a.uvy,8)+30.5)-.5);a.uvz=8*(div(a.uvz,8)+30.5-Math.floor(div(a.uvz,8)+30.5)-.5);a.uvx0=a.uvx+a.q8;a.uvy0=a.uvy+a.q8;a.uvz0=a.uvz+a.q8;for(c=0;8>c;c++)a.uvx=.00001<Math.abs(1<a.uvx?1:0)?2-a.uvx:.00001<Math.abs(-1>a.uvx?1:0)?-2-a.uvx:a.uvx,a.uvy=.00001<Math.abs(1<a.uvy?1:0)?2-a.uvy:.00001<Math.abs(-1>a.uvy?1:0)?-2-a.uvy:a.uvy,a.uvz=.00001<Math.abs(1<a.uvz?1:0)?2-a.uvz:.00001<Math.abs(-1>a.uvz?1:0)?-2-a.uvz:a.uvz,a.slen=a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*\na.uvz,a.uvx=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvx:.00001<Math.abs(1>a.slen?1:0)?div(a.uvx,a.slen):a.uvx)+a.uvx0,a.uvy=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvy:.00001<Math.abs(1>a.slen?1:0)?div(a.uvy,a.slen):a.uvy)+a.uvy0,a.uvz=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvz:.00001<Math.abs(1>a.slen?1:0)?div(a.uvz,a.slen):a.uvz)+a.uvz0;a.len=sqrt(a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz);a.dist*=1.05;c=(.6>a.dist?1:0)*(30<a.len?1:0)}while(.00001<Math.abs(c)&&1048576>d);d=.06>a.dist?1:0}while(.00001<\nMath.abs(d)&&1048576>b);","frame_eqs_str":"a.q8=.5*Math.sin(.00075*a.time)*Math.sin(.001*a.time);a.q16=1+9*(1-Math.abs(Math.sin(.008*a.time)));a.fps_=0*a.fps_+1*(.00001<Math.abs(25>=a.fps?1:0)?a.fps:25+.5*(a.fps-25));a.dec_s=1-div(.06*30,a.fps_);a.beat=a.time>a.t0+3?1:0;a.t0=.00001<Math.abs(a.beat)?a.time:a.t0;a.speed=div(Math.min(.2,a.dist_+.1)*(1+2*a.avg)*(1-0*a.slow)*.7,a.q7);a.speed*=Math.max(.3,.8*Math.max(a.treb_att,Math.max(a.mid_att,a.bass_att)));a.ds=a.ds*a.dec_s+div((1-a.dec_s)*a.speed*.25,a.fps_);a.ds=Math.max(.001,\na.ds);a.rotz=.00001<Math.abs(.00001>Math.abs(a.rotz-0)?1:0)?a.beat*(rand(100)<20*a.travel?1:0)*(div(rand(10),10)-.3):bnot(a.beat*(30>rand(100)?1:0))*a.rotz;a.slow=.00001<Math.abs(bnot(a.slow))?a.beat*(6>rand(1E3*a.avg)?1:0):bnot(a.beat*(50>rand(100)?1:0));a.look=.00001<Math.abs(bnot(a.look))?a.beat*(12>rand(1E3*a.speed)?1:0):bnot(a.beat*(50>rand(100)?1:0));a.rotz=.00001<Math.abs(.00001>Math.abs(a.rotz-0)?1:0)?.1*Math.sin(.11*a.time):a.rotz;a.lx=.00001<Math.abs(a.beat)?div(rand(150),200)+.15:a.lx;\na.ly=.00001<Math.abs(a.beat)?div(rand(150),200)+.15:a.ly;a.lampx=a.lampx*a.dec_s+(1-a.dec_s)*(.00001<Math.abs(a.look)?a.lx:.5);a.lampy=a.lampy*a.dec_s+(1-a.dec_s)*(.00001<Math.abs(a.look)?a.ly:.5);a.q1=a.lampx;a.q2=a.lampy;a.dirx=a.reg26;a.diry=a.reg27;a.dirz=a.reg28;a.posx+=a.ds*a.dirx;a.posy+=a.ds*a.diry;a.posz+=a.ds*a.dirz;a.q4=a.posx;a.q5=a.posy;a.q6=a.posz;a.angchg=(.2-a.dist_)*(.2>a.dist_?1:0)*2;a.travel=.00001<Math.abs(0<a.angchg?1:0)?0:a.travel+a.ds;a.v1=a.v1*a.dec_s+(1-a.dec_s)*a.rotz*a.ds;\na.v2=a.v2*a.dec_s+div((1-a.dec_s)*a.angchg*a.xslope,a.fps_);a.v3=a.v3*a.dec_s+(1-a.dec_s)*(div(a.angchg*a.yslope,a.fps_)+2*a.v1*Math.sin(.1*a.time));a.reg30=a.reg20;a.reg31=a.reg21;a.reg32=a.reg22;a.reg33=a.reg23;a.reg34=a.reg24;a.reg35=a.reg25;a.reg36=a.reg26;a.reg37=a.reg27;a.reg38=a.reg28;a.n=0;for(var b=a.avg=0;15>b;b++){a.n+=1;a.ran1=div(rand(100),100);a.ran2=div(rand(100),200)-.25;a.tx=Math.cos(1.57*a.n+a.ran2)*(4>=a.n?1:0)*a.ran1;a.ty=Math.sin(1.57*a.n+a.ran2)*(4>=a.n?1:0)*a.ran1;a.c1=Math.cos(a.v1);\na.c2=Math.cos(a.v2+a.ty);a.c3=Math.cos(a.v3+a.tx);a.s1=Math.sin(a.v1);a.s2=Math.sin(a.v2+a.ty);a.s3=Math.sin(a.v3+a.tx);a.reg10=a.c2*a.c1;a.reg11=a.c2*a.s1;a.reg12=-a.s2;a.reg13=a.s3*a.s2*a.c1-a.c3*a.s1;a.reg14=a.s3*a.s2*a.s1+a.c3*a.c1;a.reg15=a.s3*a.c2;a.reg16=a.c3*a.s2*a.c1+a.s3*a.s1;a.reg17=a.c3*a.s2*a.s1-a.s3*a.c1;a.reg18=a.c3*a.c2;a.reg20=a.reg30;a.reg21=a.reg31;a.reg22=a.reg32;a.reg23=a.reg33;a.reg24=a.reg34;a.reg25=a.reg35;a.reg26=a.reg36;a.reg27=a.reg37;a.reg28=a.reg38;a.q20=a.reg10*a.reg20+\na.reg11*a.reg23+a.reg12*a.reg26;a.q21=a.reg10*a.reg21+a.reg11*a.reg24+a.reg12*a.reg27;a.q22=a.reg10*a.reg22+a.reg11*a.reg25+a.reg12*a.reg28;a.q23=a.reg13*a.reg20+a.reg14*a.reg23+a.reg15*a.reg26;a.q24=a.reg13*a.reg21+a.reg14*a.reg24+a.reg15*a.reg27;a.q25=a.reg13*a.reg22+a.reg14*a.reg25+a.reg15*a.reg28;a.q26=a.reg16*a.reg20+a.reg17*a.reg23+a.reg18*a.reg26;a.q27=a.reg16*a.reg21+a.reg17*a.reg24+a.reg18*a.reg27;a.q28=a.reg16*a.reg22+a.reg17*a.reg25+a.reg18*a.reg28;a.reg20=a.q20;a.reg21=a.q21;a.reg22=a.q22;\na.reg23=a.q23;a.reg24=a.q24;a.reg25=a.q25;a.reg26=a.q26;a.reg27=a.q27;a.reg28=a.q28;a.dist=.002;var c,d=0;do{d+=1;a.uvx=div(a.reg26*a.dist,a.q7);a.uvy=div(a.reg27*a.dist,a.q7);a.uvz=div(a.reg28*a.dist,a.q7);a.uvx+=a.posx;a.uvy+=a.posy;a.uvz+=a.posz;a.uvx=8*(div(a.uvx,8)+30.5-Math.floor(div(a.uvx,8)+30.5)-.5);a.uvy=8*(div(a.uvy,8)+30.5-Math.floor(div(a.uvy,8)+30.5)-.5);a.uvz=8*(div(a.uvz,8)+30.5-Math.floor(div(a.uvz,8)+30.5)-.5);a.uvx0=a.uvx+a.q8;a.uvy0=a.uvy+a.q8;a.uvz0=a.uvz+a.q8;for(c=0;8>c;c++)a.uvx=\n.00001<Math.abs(1<a.uvx?1:0)?2-a.uvx:.00001<Math.abs(-1>a.uvx?1:0)?-2-a.uvx:a.uvx,a.uvy=.00001<Math.abs(1<a.uvy?1:0)?2-a.uvy:.00001<Math.abs(-1>a.uvy?1:0)?-2-a.uvy:a.uvy,a.uvz=.00001<Math.abs(1<a.uvz?1:0)?2-a.uvz:.00001<Math.abs(-1>a.uvz?1:0)?-2-a.uvz:a.uvz,a.slen=a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz,a.uvx=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvx:.00001<Math.abs(1>a.slen?1:0)?div(a.uvx,a.slen):a.uvx)+a.uvx0,a.uvy=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvy:.00001<Math.abs(1>a.slen?1:0)?div(a.uvy,\na.slen):a.uvy)+a.uvy0,a.uvz=2.6*(.00001<Math.abs(.25>a.slen?1:0)?4*a.uvz:.00001<Math.abs(1>a.slen?1:0)?div(a.uvz,a.slen):a.uvz)+a.uvz0;a.len=sqrt(a.uvx*a.uvx+a.uvy*a.uvy+a.uvz*a.uvz);a.dist*=1.1;c=(.6>a.dist?1:0)*(30<a.len?1:0)}while(.00001<Math.abs(c)&&1048576>d);a.megabuf[Math.floor(a.n)]=a.megabuf[Math.floor(a.n)]*a.dec_s+(1-a.dec_s)*a.dist;a.avg+=Math.abs(div(a.megabuf[Math.floor(a.n)],5))}a.n=0;for(b=a.avg=0;5>b;b++)a.n+=1,a.avg+=Math.abs(div(a.megabuf[Math.floor(a.n)],5));a.xslope=Math.min(Math.max(div(2,\na.avg)*(a.megabuf[1]-a.megabuf[3]),-3),3);a.yslope=Math.min(Math.max(div(2,a.avg)*(a.megabuf[4]-a.megabuf[2]),-3),3);a.dist_=a.dist_*a.dec_s+(1-a.dec_s)*a.dist;a.dist_=Math.max(.15,a.dist_);a.q10=a.ds*a.q7;a.q14=Math.abs(a.ds)+2*(Math.abs(a.v1)+Math.abs(a.v2)+Math.abs(a.v3))+div(1,255)+.05*a.start;a.q19=.6+.4*Math.sin(.02*a.time+6*a.cran0);a.start*=.9;a.q11=a.v1;a.q12=a.v2;a.q13=a.v3;","pixel_eqs_str":"a.warp=0;a.zoom=1;a.dx=div(-a.q12,a.q16)*(1+0*pow(a.x-.5,2));a.dy=div(a.q13,a.q16)*(1+0*pow(a.y-.5,2));a.rot=a.q11;","init_eqs_eel":"//******** INITIALIZATION *********\n//---------- some global vars, do not change -------------\navg = 0.01;\nq7 = .25; //MyZoom\nq8 =  rand(2.0)-1.0; //fractal modifier\n//q8 = 1; //#\nq16 = 1 + rand(2); //Tele ; rather fish eye\n//q16 = 1; //#\nq18 = rand(0.8)+.1; //brightness balance back/front\nq30 = 1; //logarithmic Z-Dist storage; unused\nq31 =128;\nstart = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;\ncran0 = rand(1);\nn = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); \nn = 0; loop (10000,  megabuf(n)=0; n=n+1; ); \ntrelx = 0;  trely = 0; trelz = 0;\nreg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;\n\n//Find random starting point\nwhile (exec2(\n  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;\n  PosX = rand(5)-2;   PosY = rand(5)-2;   PosZ = rand(5)-2; \n\n//  PosX = 3.3; PosY = 2; PosZ = -2; ran1 = 0; ran2 = 0; ran3 = 0; //#\n\n  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); \n  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);\n\n  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;\n  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;\n  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;\n\n  //***********BOT*************\n  //Coord. Trans. must exactly match def in warp S. !!!!\n  dist = 0.001;\n  while (exec2(\n    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;\n    uvx += PosX; uvy += PosY; uvz += PosZ;\n    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);\n    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);\n    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);\n    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;\n    loop (7+1,\n      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));\n      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));\n      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));\n      slen = uvx*uvx + uvy*uvy + uvz*uvz;\n      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; \n      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; \n      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; \n    );\n    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);\n    dist *= 1.05;\n  ,(dist < 0.6)*(len > 30)));\n,(dist < .06))); //end while","frame_eqs_eel":"// mod\nq8 = sin(time*.00075)*(sin(time*.001)*.5);\n// mod\nq16 = 1 + (1-abs(sin(time*.008))) * 9;\n\nfps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); \ndec_s = 1-.06*30/fps_;\nbeat = (time >  t0+3); t0 = if(beat, time, t0);\n\n// speed = min(0.2,dist_-.02) * (1+2*avg) *(1-slow*.0)*.7/q7; //#\n\n// mod\nspeed = min(0.2,dist_+.1) * (1+2*avg) *(1-slow*.0)*.7/q7; //#\n\n// mod\nspeed *= max(.3,max(treb_att,max(mid_att,bass_att))*.8);\n\nds = ds * dec_s + (1-dec_s)*speed*.25/fps_; \n// mod\nds = max(0.001,ds);\n\nRotZ = if (RotZ==0,beat*(rand(100)<20*travel)*(rand(10)/10-.3),\n                   bnot(beat*(rand(100)<30))*RotZ);\nslow = if (bnot(slow), beat*(rand(1000*avg)<6), bnot(beat*(rand(100)<50)));\nlook = if (bnot(look), beat*(rand(1000*speed)<12), bnot(beat*(rand(100)<50)));\n\n// mod\nRotZ = if ( RotZ == 0, sin(time*.11)*.1, RotZ );\n\n//Lamp View\nlx = if (beat,rand(150)/200+.15,lx);\nly = if (beat,rand(150)/200+.15,ly);\nlampx = lampx * dec_s + (1-dec_s)*if (look,lx,0.5);\nlampy = lampy * dec_s + (1-dec_s)*if (look,ly,0.5);\nq1 = lampx; q2 = lampy;\n\n//Position \nDirX= reg26; \nDirY= reg27; \nDirZ = reg28;\nPosX = PosX + ds*DirX ; \nPosY = PosY + ds*DirY; \nPosZ = PosZ + ds*DirZ; \nq4 = PosX; \nq5 = PosY; \nq6 = PosZ;\n\nangchg = (.2-dist_)*(dist_ < .2)*2;\n// mod\n// angchg = min( .05, angchg );\n\ntravel = if (angchg > 0,0,travel+ds);\n\nv1 = v1 * dec_s + (1-dec_s)* RotZ * ds;\nv2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;\nv3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + 2*v1*sin(time*.1));\n//v2 = .008;\n//push old RotMat\nreg30 =reg20; reg31 =reg21; reg32 =reg22; \nreg33 =reg23; reg34 =reg24; reg35 =reg25; \nreg36 =reg26; reg37 =reg27; reg38 =reg28; \n\nn = 0; avg = 0;\nloop (15,\n  n = n+1;\n  //new Rot. Mat for infinitesimal angles\n  ran1 = rand(100)/100;\n  ran2 = rand(100)/200-.25;\n\n  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; \n  ty = sin(n*1.57+ran2) * (n <= 4)*ran1;\n\n  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); \n  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);\n\n  reg10 = c2*c1; \n  reg11 = c2*s1; \n  reg12 = -s2;\n  reg13 = s3*s2*c1 - c3*s1; \n  reg14 = s3*s2*s1 + c3*c1; \n  reg15 = s3*c2;\n  reg16 = c3*s2*c1 + s3*s1; \n  reg17 = c3*s2*s1 - s3*c1; \n  reg18 = c3*c2;\n\n  //pop old RotMat\n  reg20 =reg30; reg21 =reg31; reg22 =reg32; \n  reg23 =reg33; reg24 =reg34; reg25 =reg35; \n  reg26 =reg36; reg27 =reg37; reg28 =reg38; \n\n  //Multiply new RotMat by old one\n  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;\n  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;\n  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;\n  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;\n  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;\n  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;\n  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;\n  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;\n  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;\n\n  reg20 =q20; reg21 =q21; reg22 =q22;\n  reg23 =q23; reg24 =q24; reg25 =q25;\n  reg26 =q26; reg27 =q27; reg28 =q28;\n\n  //***********BOT*************\n  //Coord. Trans. must exactly match def in warp S. !!!!\n  dist = 0.002;\n  while (exec2(\n    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;\n\n    uvx += PosX; uvy += PosY; uvz += PosZ;\n    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);\n    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);\n    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);\n    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;\n    loop (7+1,\n      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));\n      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));\n      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));\n      slen = uvx*uvx + uvy*uvy + uvz*uvz;\n      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; \n      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; \n      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; \n    );\n    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);\n    dist *= 1.1;\n  ,(dist < 0.6)*(len > 30)));\n  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points\n  avg = avg+abs(megabuf(n)/5);\n); //end loop 5\n\nn = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));\n\nxslope = min(max(2/avg*(megabuf(1)-megabuf(3)),-3),3);\nyslope = min(max(2/avg*(megabuf(4)-megabuf(2)),-3),3);\n\ndist_ = dist_*dec_s + (1-dec_s)*dist;\n\n// mod\ndist_ = max( 0.15, dist_ );\n\nq10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv\nq14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + 1.0/255 + start*.05; \nq19 = .6 + .4*sin(time*.02+cran0*6); //brightness backgd\nstart = start * .9;\nq11 = v1; q12 = v2; q13 = v3;\n//forward comp. of Rotation","pixel_eqs_eel":"warp = 0.0; \nzoom = 1; \ndx = -q12/q16*(1+0*pow(x-.5,2)); \ndy = q13/q16*(1+0*pow(y-.5,2)); \nrot =q11;","warp":"float sustain;\nvec4 xlat_mutablebox;\nfloat xlat_mutabledist;\nfloat xlat_mutablestruc;\nvec2 xlat_mutableuv1;\nvec3 xlat_mutableuv2;\n shader_body { \n  mat3 tmpvar_1;\n  tmpvar_1[uint(0)].x = q20;\n  tmpvar_1[uint(0)].y = q23;\n  tmpvar_1[uint(0)].z = q26;\n  tmpvar_1[1u].x = q21;\n  tmpvar_1[1u].y = q24;\n  tmpvar_1[1u].z = q27;\n  tmpvar_1[2u].x = q22;\n  tmpvar_1[2u].y = q25;\n  tmpvar_1[2u].z = q28;\n  vec3 tmpvar_2;\n  tmpvar_2.x = q4;\n  tmpvar_2.y = q5;\n  tmpvar_2.z = q6;\n  sustain = (0.98 - q14);\n  vec2 uv_3;\n  vec3 ret_4;\n  vec2 tmpvar_5;\n  tmpvar_5 = (uv - 0.5);\n  xlat_mutableuv1 = ((tmpvar_5 * aspect.xy) * q16);\n  vec4 tmpvar_6;\n  tmpvar_6 = texture (sampler_pc_main, uv);\n  uv_3 = ((tmpvar_5 * (1.0 - \n    (q10 / (1.0 - ((tmpvar_6.z + \n      (0.003921569 * tmpvar_6.y)\n    ) + (q10 * 0.7))))\n  )) + 0.5);\n  vec4 tmpvar_7;\n  tmpvar_7 = fract((8.0 * texture (sampler_noise_lq, (uv_3 + rand_frame.yz))));\n  xlat_mutabledist = tmpvar_7.x;\n  if ((tmpvar_7.y > 0.2)) {\n    vec3 tmpvar_8;\n    tmpvar_8 = (tmpvar_7.xyz - vec3(0.4, 0.5, 0.5));\n    vec2 uvi_9;\n    uvi_9 = ((tmpvar_8.zy * 0.003) + uv_3);\n    vec2 pix_10;\n    vec4 nb2_11;\n    vec4 nb_12;\n    vec2 x_13;\n    x_13 = (uvi_9 - 0.5);\n    pix_10 = (texsize.zw * (1.0 + (\n      sqrt(dot (x_13, x_13))\n     * 8.0)));\n    float tmpvar_14;\n    tmpvar_14 = (q10 * 0.7);\n    vec4 tmpvar_15;\n    tmpvar_15 = texture (sampler_pc_main, (uvi_9 - pix_10));\n    nb_12.x = (1.0 - ((tmpvar_15.z + \n      (0.003921569 * tmpvar_15.y)\n    ) + tmpvar_14));\n    vec4 tmpvar_16;\n    tmpvar_16 = texture (sampler_pc_main, (uvi_9 + (pix_10 * vec2(1.0, -1.0))));\n    nb_12.y = (1.0 - ((tmpvar_16.z + \n      (0.003921569 * tmpvar_16.y)\n    ) + tmpvar_14));\n    vec4 tmpvar_17;\n    tmpvar_17 = texture (sampler_pc_main, (uvi_9 + pix_10));\n    nb_12.z = (1.0 - ((tmpvar_17.z + \n      (0.003921569 * tmpvar_17.y)\n    ) + tmpvar_14));\n    vec4 tmpvar_18;\n    tmpvar_18 = texture (sampler_pc_main, (uvi_9 + (pix_10 * vec2(-1.0, 1.0))));\n    nb_12.w = (1.0 - ((tmpvar_18.z + \n      (0.003921569 * tmpvar_18.y)\n    ) + tmpvar_14));\n    vec4 tmpvar_19;\n    tmpvar_19 = texture (sampler_pc_main, (uvi_9 + (pix_10 * vec2(0.0, -1.0))));\n    nb2_11.x = (1.0 - ((tmpvar_19.z + \n      (0.003921569 * tmpvar_19.y)\n    ) + tmpvar_14));\n    vec4 tmpvar_20;\n    tmpvar_20 = texture (sampler_pc_main, (uvi_9 + (pix_10 * vec2(1.0, 0.0))));\n    nb2_11.y = (1.0 - ((tmpvar_20.z + \n      (0.003921569 * tmpvar_20.y)\n    ) + tmpvar_14));\n    vec4 tmpvar_21;\n    tmpvar_21 = texture (sampler_pc_main, (uvi_9 + (pix_10 * vec2(0.0, 1.0))));\n    nb2_11.z = (1.0 - ((tmpvar_21.z + \n      (0.003921569 * tmpvar_21.y)\n    ) + tmpvar_14));\n    vec4 tmpvar_22;\n    tmpvar_22 = texture (sampler_pc_main, (uvi_9 + (pix_10 * vec2(-1.0, 0.0))));\n    nb2_11.w = (1.0 - ((tmpvar_22.z + \n      (0.003921569 * tmpvar_22.y)\n    ) + tmpvar_14));\n    vec4 tmpvar_23;\n    tmpvar_23 = min (nb_12, nb2_11);\n    nb_12.zw = tmpvar_23.zw;\n    nb_12.xy = min (tmpvar_23.xy, tmpvar_23.zw);\n    xlat_mutabledist = (min (nb_12.x, nb_12.y) + ((0.008 * tmpvar_8.x) * abs(tmpvar_8.y)));\n  };\n  vec4 tmpvar_24;\n  tmpvar_24 = texture (sampler_pc_main, uv_3);\n  float tmpvar_25;\n  tmpvar_25 = min (xlat_mutabledist, (1.0 - (\n    (tmpvar_24.z + (0.003921569 * tmpvar_24.y))\n   + \n    (q10 * 0.7)\n  )));\n  xlat_mutabledist = tmpvar_25;\n  float tmpvar_26;\n  tmpvar_26 = (tmpvar_25 + pow (tmpvar_25, 3.0));\n  vec3 tmpvar_27;\n  tmpvar_27.xy = (xlat_mutableuv1 * tmpvar_26);\n  tmpvar_27.z = tmpvar_26;\n  xlat_mutableuv2 = (((tmpvar_27 / q7) * tmpvar_1) + tmpvar_2);\n  xlat_mutableuv2 = ((fract(\n    ((xlat_mutableuv2 / 8.0) + 0.5)\n  ) - 0.5) * 8.0);\n  float mod3_29;\n  float mod2_30;\n  float mod1_31;\n  float li_32;\n  vec3 zz0_33;\n  vec3 zz_34;\n  float tmpvar_35;\n  tmpvar_35 = sin((time * 0.0085));\n  mod1_31 = tmpvar_35;\n  float tmpvar_36;\n  tmpvar_36 = sin((time * 0.0076));\n  mod2_30 = tmpvar_36;\n  float tmpvar_37;\n  tmpvar_37 = sin((time * 0.009));\n  mod3_29 = tmpvar_37;\n  zz_34.x = (xlat_mutableuv2.x * (1.0 + (tmpvar_36 * 0.23)));\n  zz_34.z = (xlat_mutableuv2.z * (1.0 + (tmpvar_35 * 0.25)));\n  zz_34.y = (xlat_mutableuv2.y * (1.0 + (tmpvar_37 * 0.27)));\n  zz0_33 = (zz_34 + q8);\n  li_32 = 0.0;\n  for (int n_28 = 0; n_28 <= 7; n_28++) {\n    zz_34 = ((2.0 * clamp (zz_34, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_34);\n    float tmpvar_38;\n    tmpvar_38 = dot (zz_34, zz_34);\n    if ((tmpvar_38 <= 0.25)) {\n      zz_34 = (zz_34 * 4.0);\n      li_32 = 24.0;\n    } else {\n      if ((tmpvar_38 <= 1.0)) {\n        zz_34 = (zz_34 / tmpvar_38);\n      };\n    };\n    zz_34 = (((\n      (2.6 + (mod1_31 * 0.155))\n     * \n      ((zz_34 - 0.3) + abs((mod2_30 * 0.5)))\n    ) + zz0_33) + (mod3_29 * 0.5));\n  };\n  vec4 tmpvar_39;\n  tmpvar_39.xyz = zz_34;\n  tmpvar_39.w = li_32;\n  xlat_mutablebox = (tmpvar_39 * (1.5 - (bass_att * 0.15)));\n  float tmpvar_40;\n  tmpvar_40 = sqrt(dot (xlat_mutablebox.xyz, xlat_mutablebox.xyz));\n  xlat_mutablestruc = (sqrt(dot (xlat_mutablebox.xyw, xlat_mutablebox.xyw)) / 24.0);\n  vec4 tmpvar_41;\n  tmpvar_41 = texture (sampler_pc_main, uv_3);\n  float tmpvar_42;\n  float tmpvar_43;\n  tmpvar_43 = (q10 * 0.7);\n  tmpvar_42 = ((log(\n    (1.0 + (tmpvar_40 / 24.0))\n  ) * 0.02) * (1.0 - (1.0 - \n    ((tmpvar_41.z + (0.003921569 * tmpvar_41.y)) + tmpvar_43)\n  )));\n  float tmpvar_44;\n  vec4 tmpvar_45;\n  tmpvar_45 = texture (sampler_pc_main, uv_3);\n  tmpvar_44 = (1.0 - ((tmpvar_45.z + \n    (0.003921569 * tmpvar_45.y)\n  ) + tmpvar_43));\n  bool tmpvar_46;\n  if (((tmpvar_25 <= tmpvar_44) && (tmpvar_40 < 24.0))) {\n    tmpvar_46 = (tmpvar_25 > (0.005 + (\n      pow ((1.0 - rad), 15.0)\n     * 0.035)));\n  } else {\n    tmpvar_46 = bool(0);\n  };\n  if (tmpvar_46) {\n    ret_4.x = (((1.0 - sustain) * xlat_mutablestruc) + (sustain * mix (texture (sampler_main, uv_3).xyz, \n      ((texture (sampler_blur1, uv_3).xyz * scale1) + bias1)\n    , vec3(\n      (q14 * 4.0)\n    )).x));\n    float x_47;\n    x_47 = ((1.0 - tmpvar_25) * 255.0);\n    float ip_48;\n    ip_48 = float(int(x_47));\n    vec2 tmpvar_49;\n    tmpvar_49.x = (x_47 - ip_48);\n    tmpvar_49.y = (ip_48 / 255.0);\n    ret_4.yz = tmpvar_49;\n  } else {\n    vec3 tmpvar_50;\n    tmpvar_50.y = 0.0;\n    tmpvar_50.x = sustain;\n    tmpvar_50.z = (1.0 - tmpvar_42);\n    vec3 tmpvar_51;\n    tmpvar_51.xy = vec2(0.003921569, 0.0);\n    tmpvar_51.z = (q14 / 6.0);\n    ret_4 = ((texture (sampler_fc_main, uv_3).xyz * tmpvar_50) - tmpvar_51);\n  };\n  vec4 tmpvar_52;\n  tmpvar_52.w = 1.0;\n  tmpvar_52.xyz = ret_4;\n  ret = tmpvar_52.xyz;\n }","comp":" shader_body { \n  vec3 tmpvar_1;\n  tmpvar_1.x = q4;\n  tmpvar_1.y = q5;\n  tmpvar_1.z = q6;\n  mat3 tmpvar_2;\n  tmpvar_2[uint(0)].x = q20;\n  tmpvar_2[uint(0)].y = q23;\n  tmpvar_2[uint(0)].z = q26;\n  tmpvar_2[1u].x = q21;\n  tmpvar_2[1u].y = q24;\n  tmpvar_2[1u].z = q27;\n  tmpvar_2[2u].x = q22;\n  tmpvar_2[2u].y = q25;\n  tmpvar_2[2u].z = q28;\n  vec2 tmpvar_3;\n  tmpvar_3.x = q1;\n  tmpvar_3.y = q2;\n  vec2 uv_4;\n  vec3 ret_5;\n  uv_4 = (((uv - 0.5) * 0.9) + 0.5);\n  vec3 tmpvar_6;\n  tmpvar_6.xy = ((uv_4 - 0.5) * min ((1.0 - texture (sampler_main, uv_4).z), (\n    (1.0 - ((texture (sampler_blur2, uv_4).xyz * scale2) + bias2).z)\n   * 0.7)));\n  tmpvar_6.z = min ((1.0 - texture (sampler_main, uv_4).z), ((1.0 - \n    ((texture (sampler_blur2, uv_4).xyz * scale2) + bias2)\n  .z) * 0.7));\n  float tmpvar_7;\n  tmpvar_7 = clamp ((abs(\n    ((1.0 - ((texture (sampler_blur2, uv_4).xyz * scale2) + bias2).z) - clamp ((1.0 - (\n      (texture (sampler_blur2, tmpvar_3).xyz * scale2)\n     + bias2).z), 0.1, 0.4))\n  ) + 0.2), 0.0, 1.0);\n  ret_5 = ((mix (texture (sampler_main, uv_4).xyz, \n    ((texture (sampler_blur1, uv_4).xyz * scale1) + bias1)\n  , vec3(tmpvar_7)).x * (0.2 + \n    ((1.0 - tmpvar_7) * (1.0 - min ((1.0 - texture (sampler_main, uv_4).z), (\n      (1.0 - ((texture (sampler_blur2, uv_4).xyz * scale2) + bias2).z)\n     * 0.7))))\n  )) * (1.0 + (0.5 * \n    sin((((tmpvar_6 / q7) * tmpvar_2) + tmpvar_1))\n  )));\n  vec3 tmpvar_8;\n  tmpvar_8.x = sin((time * 0.0125));\n  tmpvar_8.y = sin((time * 0.025));\n  tmpvar_8.z = sin((time * 0.0375));\n  ret_5 = (mix (ret_5, tmpvar_8, vec3((\n    sin((time * 0.016))\n   * 0.15))) + ((\n    (pow ((1.0 - mix (texture (sampler_main, uv_4).xyz, \n      ((texture (sampler_blur1, uv_4).xyz * scale1) + bias1)\n    , vec3(0.8, 0.8, 0.8)).z), (3.0 + sin(\n      (time * 0.1)\n    ))) * (0.5 + (0.5 * slow_roam_cos)))\n   * q19) * max (1.0, \n    (bass_att * 2.0)\n  )).xyz);\n  ret_5 = (1.0 - exp((-2.0 * ret_5)));\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ret_5;\n  ret = tmpvar_9.xyz;\n }","warp_hlsl":"float dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;\nstatic const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);\n\nstatic const float3 CamPos = float3(q4,q5,q6);\nstatic const float sustain = .98 - q14, change = q14, ds = q10;\nstatic const float myzoom = q7, limit = 24, tele=q16;\n\nfloat GetDist(float2 uvi) \n{\n  float2 tmp; \n  tmp = tex2D (sampler_pc_main, uvi).gb; \n  return 1-(tmp.y + 1.0/255*tmp.x + ds*.7);\n}\n\nfloat2 PutDist(float x) {float fg, fb; fg = modf((1-x)*255.0,fb);\n  return (float2(fg,fb/255.0));}\n\n\nfloat MinDist (float2 uvi) \n{\n   float tmp; float4 nb; float4 nb2; float2 pix;\n   pix = texsize.zw*(1.0+length(uvi-0.5)*8.0);\n   tmp = GetDist(uvi);\n   nb.x = GetDist(uvi+pix*float2(-1,-1));  \n   nb.y = GetDist(uvi+pix*float2(1,-1));\n   nb.z = GetDist(uvi+pix*float2(1,1));   \n   nb.w = GetDist(uvi+pix*float2(-1,1));\n   nb2.x = GetDist(uvi+pix*float2(0,-1));  \n   nb2.y = GetDist(uvi+pix*float2(1,0));\n   nb2.z = GetDist(uvi+pix*float2(0,1));   \n   nb2.w = GetDist(uvi+pix*float2(-1,0));\n   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU\n   nb = min( nb, nb2 );\n   nb.xy = min( nb.xy, nb.zw );\n   tmp = min( nb.x, nb.y );\n   return tmp;\n}\n\nfloat3 Get1 (float2 uvi) \n{\n   return lerp (GetPixel(uvi), GetBlur1(uvi), change * 4);\n} //#\n\nfloat4 mbox (float3 uvi) \n{\n  float3 zz, zz0; \n  float tmp, li;\n\n  float mod1 = sin(time*.0085);\n  float mod2 = sin(time*.0076);\n  float mod3 = sin(time*.009);\n\n  zz = uvi;\n\n  // mod\n  zz.x *= (1+mod2*.23);\n  zz.z *= (1+mod1*.25);\n  zz.y *= (1+mod3*.27);\n\n  zz0 = zz + q8; \n  li = 0;\n  for (int n = 0; n <= 7; n++)   \n  {\n    zz = 2.0*clamp(zz,-1,1)-zz;  \n    tmp = dot(zz,zz);\n    if (tmp <= 0.25) \n    {\n      zz *= 4; \n      li=limit;\n    } \n    else if (tmp <= 1) \n    { \n      zz /= pow(tmp,1);\n    }\n\n    // zz = 2.6 * zz + zz0;\n    // mod\n    zz = (2.6 + (mod1*.155) ) * (zz-.3+abs(mod2*.5)) + zz0 + (mod3*.5);\n  }\n  return float4(zz,li);\n}\n\nshader_body {\nuv1 = (uv-.5)*aspect.xy*tele;\nuv = (uv-.5)*(1-ds/(GetDist(uv))) + .5;\n\nfloat3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); \n\ndist = noise.r;\n   if (noise.g > 0.2) \n   {\n       float3 noiseBiased = noise - float3( 0.4, 0.5, 0.5 );\n//Eo.S. combine the subtraction on noise to a single float3 to ensure compiler does the subtraction in a single ALU\n       dist = MinDist( (noiseBiased.zy) * 0.003 +uv ) +  0.008 * (noiseBiased.x) * abs(noiseBiased.y);\n   }\ndist = min(dist,GetDist(uv));\nfloat tdist = dist + pow(dist,3);\n\nuv2 = mul(float3(uv1*tdist,tdist-.0)/myzoom,RotMat)+CamPos;\nuv2 = (frac(uv2/8.0+.5)-.5)*8.0;\n\nbox = mbox (uv2 );\n// mod\n// box *= (.1 + (abs(sin(time*.013)*2.5)));\n// mod\nbox *= 1.5 - (bass_att*.15);\n\nlen = (length(box.xyz));\nstruc = length(box.xyw)/limit;\nfloat dec = log(1+len/limit)*.02*(1-GetDist(uv));\nif (\n  (dist <= GetDist(uv)) \n  && (len < limit) \n  // && (dist > 0.005)\n  // mod\n  && (dist > 0.005 + (pow(1-rad,15)*.035))\n) \n{\n  ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); \n} \nelse \n  ret = tex2D(sampler_fc_main,uv)*float3(sustain,0,1-dec)-float3(1.0/255,0,change/6);\n\n}","comp_hlsl":"#define sat saturate\nstatic const float2 pix = texsize.zw;\nfloat glow, tmp, lamp, dist, bdist, b2dist, dist_c;\nfloat2 dz, uv1, uv3;\nstatic const float3 CamPos = float3(q4,q5,q6);\nstatic const float myzoom = q7;\nstatic const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);\nstatic const float3 col_struc =  float3(1,.7,.3) + .2*(rand_preset.xyz-.5);\nstatic float2 center = float2 (q1,q2);\n\nfloat3 GetBlurX (float2 uvi, float x) {return lerp (GetPixel(uvi), GetBlur1(uvi), x);}\n\nfloat GetDist(float2 uvi)   {return 1-GetPixel(uvi).b;}\n\n// mod\nfloat GetDistB(float2 uvi)  {return GetDist(uvi); } // 1-GetBlur1(uvi).b;}\n\nfloat GetDistB2(float2 uvi) {return 1-GetBlur2(uvi).b;}\n\nfloat MinDistB (float2 uvi) {float tmp; float4 nb; //##nicht ideal\n  tmp = GetDist(uvi);\n  tmp = min(tmp,GetDistB2(uvi)*.7) ;\n  return tmp;}\n\nshader_body {\nuv = (uv-.5)*.9 + .5;\nuv1 = (uv-center)*aspect.xy;\n\ndist = MinDistB(uv);\nbdist = lerp(dist,GetDistB(uv),.2);\ndist_c = clamp(GetDistB2 (center),.1,.4); //center distance\n\nfloat3 uv2 = mul(float3((uv-.5)*MinDistB(uv),MinDistB(uv))/myzoom,RotMat)+CamPos;\nglow = pow (sat(tex2D (sampler_noise_hq,.02*uv2).r-.6)*2,2);\n//uv += .003*glow*(tex2D (sampler_noise_mq,uv*2+float2(0,time/4).xy-.5));\n\nfloat focus = sat(abs(GetDistB2(uv)-dist_c)*1+.2);\nfloat struc = GetBlurX(uv,focus).r;\n\n// mod\n// glow = sat(1-exp(-(GetBlur1(uv).r))-.2);\n// mod\nglow = sin(time*.09)*.18;\n\nq18 = 1;\nret = pow(struc,1) * (.2+(1-focus) *lerp(dist,1-dist,q18)) * (1+.5*sin(uv2));\n// mod\n// ret = lerp(ret, float3(0,1,glow*3), glow);\nret = lerp(ret, float3(sin(time*.0125),sin(time*.025),sin(time*.0375)), sin(time*.016)*.15);\n\n//distant light\nret += \n  // mod\n  pow(1-GetBlurX(uv,.8).b,(3+sin(time*.1)))\n  * (.5+.5*slow_roam_cos) \n  * q19 \n  // mod\n  * max(1,bass_att*2);\n\n//Lamp\nuv3 = uv1; \nlamp = saturate(1-4*length(uv3))*(struc)*saturate(1-2*bdist)*1.8;\n//ret += (1-lum(ret))*lamp;\nret = 1-exp((-2)*ret);\n//ret = GetPixel(uv).xyz;\n}\n\n//-------------------------------------------\n//Written by martin\n"}