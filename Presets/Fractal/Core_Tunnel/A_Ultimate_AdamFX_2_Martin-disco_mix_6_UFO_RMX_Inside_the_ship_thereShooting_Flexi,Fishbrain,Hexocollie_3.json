{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":3,"wave_dots":1,"modwavealphabyvolume":1,"darken":1,"wave_scale":16.217,"wave_mystery":-0.44,"zoomexp":1.00015,"zoom":1.00022,"warp":0,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"ob_size":0.15,"ib_size":0.05,"ib_a":1,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"additive":1,"textured":1,"rad":0.59958,"g":1,"b":1,"r2":1,"b2":1,"border_r":0,"border_g":0,"border_b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.beatfreq=0;a.pulsefreq=0;a.mvrot=0;a.q6=0;a.bt=0;a.lastbeat=0;a.pulse=0;a.le=0;a.btblock=0;a.zone=0;a.minorccl=0;a.beat=0;a.hccp=0;a.ccl=0;a.lastpulse=0;a.th=0;a.q7=0;a.q8=0;","frame_eqs_str":"a.le=1.4*a.bass_att+.1*a.bass+.5*a.treb;a.pulse=above(a.le,a.th);a.pulsefreq=.00001<Math.abs(equal(a.pulsefreq,0))?2:.00001<Math.abs(a.pulse)?.8*a.pulsefreq+.2*(a.time-a.lastpulse):a.pulsefreq;a.lastpulse=.00001<Math.abs(a.pulse)?a.time:a.lastpulse;a.bt=div(a.time-a.lastbeat,.5*a.beatfreq+.5*a.pulsefreq);a.hccp=div(.03,a.bt+.2)+.5*(.00001<Math.abs(band(above(a.bt,.8),below(a.bt,1.2)))?pow(Math.sin(7.854*(a.bt-1)),4)-1:0);a.beat=band(above(a.le,a.th+a.hccp),a.btblock);a.btblock=\n1-above(a.le,a.th+a.hccp);a.lastbeat=.00001<Math.abs(a.beat)?a.time:a.lastbeat;a.beatfreq=.00001<Math.abs(equal(a.beatfreq,0))?2:.00001<Math.abs(a.beat)?.8*a.beatfreq+.2*(a.time-a.lastbeat):a.beatfreq;a.th=.00001<Math.abs(above(a.le,a.th))?a.le+div(114,a.le+10)-7.407:a.th+div(.07*a.th,a.th-12)+.1*below(a.th,2.7)*(2.7-a.th);a.th=.00001<Math.abs(above(a.th,6))?6:a.th;a.q8=div(30,a.fps);a.ccl+=a.beat;a.minorccl+=a.le*a.q8;a.q7=a.ccl+.0002*a.minorccl;a.q6=3.7*a.ccl+.01*a.minorccl;a.ob_size=.3+.3*Math.sin(16*\na.ccl+.007*a.minorccl);a.ib_a=.5+.4*Math.sin(.01*a.minorccl+a.ccl);a.wave_r=.7+.3*Math.sin(.04*a.ccl+.01*a.minorccl);a.wave_g=.7+.3*Math.sin(.02*a.ccl+.012*a.minorccl);a.wave_b=.3+.3*Math.sin(36*a.ccl+.013*a.minorccl);a.ib_r=.25+.25*Math.sin(72*a.ccl+.016*a.minorccl);a.ib_g=.25+.25*Math.sin(48*a.ccl+.021*a.minorccl);a.ib_b=.5+.3*Math.sin(86*a.ccl)+.2*.028*a.minorccl;a.echo_alpha=.5+.5*Math.cos(68*a.ccl+.0041*a.minorccl);a.echo_zoom=Math.exp(Math.sin(13.7*a.ccl+.017*a.minorccl));a.echo_orient=mod(a.ccl,\n4);a.mvrot=mod(a.ccl,6);a.mv_r=.00001<Math.abs(above(a.mvrot,2))?.00001<Math.abs(above(a.mvrot,4))?.039:.00001<Math.abs(equal(a.mvrot,3))?.137:.835:.00001<Math.abs(above(a.mvrot,1))?.651:.00001<Math.abs(equal(a.mvrot,0))?1:.773;a.mv_g=.00001<Math.abs(above(a.mvrot,2))?.00001<Math.abs(above(a.mvrot,4))?.267:.00001<Math.abs(equal(a.mvrot,3))?.886:.176:.00001<Math.abs(above(a.mvrot,1))?.804:.00001<Math.abs(equal(a.mvrot,0))?1:.38;a.mv_b=.00001<Math.abs(above(a.mvrot,2))?.00001<Math.abs(above(a.mvrot,\n4))?.694:.00001<Math.abs(equal(a.mvrot,3))?.776:.851:.00001<Math.abs(above(a.mvrot,1))?.114:.00001<Math.abs(equal(a.mvrot,0))?1:.145;","pixel_eqs_str":"a.zone=below(Math.sin(14*Math.sin(49*a.q7)*a.x-14*Math.sin(36*a.q7)*a.y),-.2);a.zoom=1+.33*a.q8*(.00001<Math.abs(a.zone)?-.5+.1*Math.sin(1.08*a.q6):.5+.1*Math.sin(.96*a.q6));a.zoomexp=Math.exp(Math.sin(.00001<Math.abs(a.zone)?a.q6:-a.q6));a.rot=.03*a.q8*Math.sin(a.q6+a.q7+a.q7*a.zone);","init_eqs_eel":"","frame_eqs_eel":"// timed sidon sensor\n// le = signal level; desired average value = 2\nle=1.4*bass_att+.1*bass+.5*treb;\npulse=above(le,th);\n// pulsefreq = running average of interval between last 5 pulses\npulsefreq=if(equal(pulsefreq,0),2,\nif(pulse,.8*pulsefreq+.2*(time-lastpulse),pulsefreq));\nlastpulse=if(pulse,time,lastpulse);\n// bt = relative time; 0 = prev beat; 1 = expected beat\nbt=(time-lastbeat)/(.5*beatfreq+.5*pulsefreq);\n// hccp = handcicap for th driven by bt\nhccp=(.03/(bt+.2))+.5*if(band(above(bt,.8),below(bt,1.2)),\n(pow(sin((bt-1)*7.854),4)-1),0);\nbeat=band(above(le,th+hccp),btblock);\nbtblock=1-above(le,th+hccp);\nlastbeat=if(beat,time,lastbeat);\nbeatfreq=if(equal(beatfreq,0),2,\nif(beat,.8*beatfreq+.2*(time-lastbeat),beatfreq));\n// th = threshold\nth=if(above(le,th),le+114/(le+10)-7.407,\nth+th*.07/(th-12)+below(th,2.7)*.1*(2.7-th));\nth=if(above(th,6),6,th);\n\nq8=30/fps;\nccl=ccl+beat;\nminorccl=minorccl+le*q8;\nq7=ccl+.0002*minorccl;\nq6=3.7*ccl+.01*minorccl;\nob_size=.3+.3*sin(16*ccl+.007*minorccl);\nib_a=.5+.4*sin(.01*minorccl+ccl);\nwave_r=.7+.3*sin(.04*ccl+.01*minorccl);\nwave_g=.7+.3*sin(.02*ccl+.012*minorccl);\nwave_b=.3+.3*sin(36*ccl+.013*minorccl);\nib_r=.25+.25*sin(72*ccl+.016*minorccl);\nib_g=.25+.25*sin(48*ccl+.021*minorccl);\nib_b=.5+.3*sin(86*ccl)+.2*(.028*minorccl);\n\necho_alpha=.5+.5*cos(68*ccl+.0041*minorccl);\necho_zoom=exp(sin(13.7*ccl+.017*minorccl));\necho_orient=ccl%4;\n\nmvrot=ccl%6;\nmv_r=if(above(mvrot,2),if(above(mvrot,4),.039,\nif(equal(mvrot,3),.137,.835)),if(above(mvrot,1),.651,\nif(equal(mvrot,0),1,.773)));\nmv_g=if(above(mvrot,2),if(above(mvrot,4),.267,\nif(equal(mvrot,3),.886,.176)),if(above(mvrot,1),.804,\nif(equal(mvrot,0),1,.38)));\nmv_b=if(above(mvrot,2),if(above(mvrot,4),.694,\nif(equal(mvrot,3),.776,.851)),if(above(mvrot,1),.114,\nif(equal(mvrot,0),1,.145)));","pixel_eqs_eel":"zone=below(sin(sin(49*q7)*14*x-sin(36*q7)*14*y),-.2);\nzoom=1+.33*q8*if(zone,-.5+.1*sin(1.08*q6),.5+.1*sin(.96*q6));\nzoomexp=exp(sin(if(zone,q6,-q6)));\nrot=q8*.03*sin(q6+q7+q7*zone);","warp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1 = ((uv_orig - 0.5) * vec2(1.81, 1.81));\n  vec2 tmpvar_2;\n  tmpvar_2.x = ((tmpvar_1.x * tmpvar_1.x) - (tmpvar_1.y * tmpvar_1.y));\n  tmpvar_2.y = ((2.0 * tmpvar_1.x) * tmpvar_1.y);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = (texture (sampler_fc_main, (tmpvar_2 + vec2(0.448, 0.701))) - 0.004).xyz;\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  vec3 crisp_1;\n  vec2 uv3_2;\n  vec2 uv2_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = ((uv - 0.5) * aspect.xy);\n  float tmpvar_5;\n  tmpvar_5 = (0.1 / (sqrt(\n    dot (tmpvar_4, tmpvar_4)\n  ) + 0.1));\n  vec2 tmpvar_6;\n  float tmpvar_7;\n  tmpvar_7 = (ang / 3.14);\n  tmpvar_6.x = tmpvar_7;\n  tmpvar_6.y = tmpvar_5;\n  uv2_3.y = (tmpvar_5 + (0.1 * time));\n  uv2_3.x = tmpvar_6.x;\n  vec2 tmpvar_8;\n  tmpvar_8.x = tmpvar_7;\n  tmpvar_8.y = (tmpvar_5 * 1.5);\n  uv3_2.y = (tmpvar_8.y + (0.08 * time));\n  uv3_2.x = (tmpvar_7 + (time / 32.0));\n  crisp_1 = (((2.0 * texture (sampler_main, \n    fract(uv2_3)\n  ).xyz) + texture (sampler_main, fract(uv3_2)).xyz) + ((2.0 * \n    ((texture (sampler_blur2, fract(uv2_3)).xyz * scale2) + bias2)\n  ) + (2.0 * \n    ((texture (sampler_blur2, fract(uv3_2)).xyz * scale2) + bias2)\n  )));\n  crisp_1 = ((3.0 * crisp_1) * rad);\n  float tmpvar_9;\n  tmpvar_9 = clamp ((1.0 - (4.0 * rad)), 0.0, 1.0);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = ((crisp_1 + (\n    ((vec3(0.0, 0.0, 1.0) * uv.y) * pow ((1.0 - rad), 8.0))\n   * tmpvar_9)) + (tmpvar_9 * texture (sampler_main, uv).xyz));\n  ret = tmpvar_10.xyz;\n }","warp_hlsl":"shader_body\n{\n\nfloat2 zoom = 2;\nfloat2 cntr = float2(-0,-0);\nfloat2 c = float2(0.6,0.6); // complex constant\n\n float2 my_uv = (uv-0.5-cntr)*zoom;\n my_uv = float2(my_uv.x*my_uv.x - my_uv.y*my_uv.y, 2*my_uv.x*my_uv.y) + c; // u -> u^2 + c\n\nzoom =1.81;\ncntr = float2(0,0);\nc = float2(0.448,0.701);\n\n float2 my_uv2 = (uv_orig-0.5-cntr)*zoom; // using uv_orig here - no contortion to the nice julia island\n my_uv2 = float2(my_uv2.x*my_uv2.x - my_uv2.y*my_uv2.y, 2*my_uv2.x*my_uv2.y) + c; // u -> u^2 + c\n\n//ret.x = tex2D( sampler_fc_main, my_uv).x - 0.1;\nret = tex2D( sampler_fc_main, my_uv2) - 0.004;\n\n my_uv = lerp(my_uv, my_uv2, 0.5);\n//ret.z = tex2D( sampler_fc_main, my_uv2).z - 0.1;\n\n}","comp_hlsl":"shader_body\n{\nfloat2 uv1 = (uv-0.5)*aspect.xy;\n\n//float ang1 = atan2(uv1.y, uv1.x);\n//float rad1 = log(length(uv1)-0.1);\n\nfloat rad2 = length(uv1) + .1;\nfloat rad1 = .1/rad2 ;\n\nfloat2 uv2 = float2 (ang/3.14, rad1);\nuv2.y = uv2.y  +0.1*time;\nuv2.x = uv2.x  +.0*time;\n\nfloat2 uv3 = float2 (ang/3.14, rad1*1.5);\nuv3.y = uv3.y  +0.08*time ;\nuv3.x = uv3.x  + time/32;\n\nfloat3 crisp = 2*GetPixel(frac(uv2)) + GetPixel(frac(uv3));\ncrisp += 2*GetBlur2(frac(uv2)) + 2*GetBlur2(frac(uv3));\n\nfloat3 lay1 = float3 (0,0,1)*uv.y*pow(1-rad,8);\n\ncrisp = 3*crisp * pow(rad,1);\n\nfloat mask = saturate(1-4*rad);\n\nret = crisp + lay1*mask + mask * GetPixel(uv);\n\n}"}