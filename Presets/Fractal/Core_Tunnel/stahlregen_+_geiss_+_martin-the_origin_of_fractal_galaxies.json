{"version":2,"baseVals":{"rating":5,"wave_mode":1,"wave_thick":1,"darken_center":1,"wave_a":5.9,"wave_scale":0.56,"wave_smoothing":0.9,"warpanimspeed":0.905,"warpscale":0.01,"zoom":0.96098,"rot":0.08,"warp":0.01,"wave_r":0.9,"wave_g":0,"wave_b":0,"ob_size":0.005,"ob_a":0.25,"ib_size":0.18,"ib_r":0.3,"ib_g":0.3,"ib_b":0.3,"ib_a":0.09,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.vol=0;a.beat=0;a.res=0;a.diff=0;a.x=0;a.y=0;","frame_eqs_str":"a.wave_r=.5+.5*Math.sin(1.12*a.time);a.wave_g=.5+.5*Math.sin(1.22*a.time);a.wave_b=.25*Math.sin(1.32*a.time);a.ib_r=a.wave_b;a.ib_g=a.wave_r;a.ib_b=a.wave_g;a.vol=8*a.bass+4*a.mid+2*a.treb;a.vol*=above(a.vol,17);a.monitor=a.vol;a.beat=above(a.vol,a.res);a.diff=(1-a.beat)*a.diff+a.beat*(a.vol-a.res);a.res=a.beat*(a.vol+2*a.diff)+(1-a.beat)*(a.res-div(60*(.04*a.diff+.12),a.fps));a.res=Math.max(0,a.res);a.monitor=a.res;a.x=.00001<Math.abs(a.beat)?.01*Math.floor(rand(60))+.2:a.x;\na.y=.00001<Math.abs(a.beat)?.01*Math.floor(rand(60))+.2:a.y;a.rot=(a.rot+.05*Math.sin(a.bass)*Math.sin(a.bass))*(.00001<Math.abs(above(a.x,a.y))?1:-1);","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"wave_r = 0.5+0.5*sin(time*1.12);\nwave_g = 0.5+0.5*sin(time*1.22);\nwave_b = 0.5*0.5*sin(time*1.32);\nib_r = wave_b;\nib_g = wave_r;\nib_b = wave_g;\n\n// Thanks a bunch to flexi (once again) for beat detection!\n\nvol = bass*8 + mid*4 + treb*2;\nvol = vol*above(vol,17);\nmonitor = vol;\nbeat = above(vol,res);\ndiff = (1-beat)*diff + beat*(vol-res);\nres = beat*(vol+2*diff) + (1-beat)*(res - (diff*0.04 + 0.12)*60/fps);\nres = max(0,res);\nmonitor = res;\n\nx = if(beat,int(rand(60))*0.01 + 0.2,x);\ny = if(beat,int(rand(60))*0.01 + 0.2,y);\nrot = (rot+0.05*(sin(bass)*sin(bass)))*if(above(x,y),1,-1)","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1 = ((uv_orig - 0.5) * vec2(1.81, 1.81));\n  vec2 tmpvar_2;\n  tmpvar_2.x = ((tmpvar_1.x * tmpvar_1.x) - (tmpvar_1.y * tmpvar_1.y));\n  tmpvar_2.y = ((2.0 * tmpvar_1.x) * tmpvar_1.y);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = (texture (sampler_fc_main, (tmpvar_2 + vec2(0.448, 0.701))) - 0.004).xyz;\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  vec3 crisp_1;\n  vec2 uv3_2;\n  vec2 uv2_3;\n  vec3 ret_4;\n  vec2 tmpvar_5;\n  tmpvar_5 = ((uv - 0.5) * aspect.xy);\n  float tmpvar_6;\n  tmpvar_6 = (0.1 / (sqrt(\n    dot (tmpvar_5, tmpvar_5)\n  ) + 0.05));\n  vec2 tmpvar_7;\n  float tmpvar_8;\n  tmpvar_8 = (ang / 3.14);\n  tmpvar_7.x = tmpvar_8;\n  tmpvar_7.y = (tmpvar_6 * 1.5);\n  uv2_3.y = (tmpvar_7.y + (0.1 * time));\n  uv2_3.x = (tmpvar_8 + (0.02 * time));\n  uv3_2.y = (tmpvar_6 + q30);\n  uv3_2.x = (tmpvar_8 + (time / 32.0));\n  crisp_1 = ((texture (sampler_main, fract(uv2_3)).xyz + (2.0 * texture (sampler_main, \n    fract(uv3_2)\n  ).xyz)) + ((2.0 * \n    ((texture (sampler_blur2, fract(uv2_3)).xyz * scale2) + bias2)\n  ) + (2.0 * \n    ((texture (sampler_blur2, fract(uv3_2)).xyz * scale2) + bias2)\n  )));\n  crisp_1 = ((3.0 * crisp_1) * rad);\n  float tmpvar_9;\n  tmpvar_9 = clamp ((1.0 - (4.0 * rad)), 0.0, 1.0);\n  ret_4 = ((crisp_1 + (\n    ((vec3(1.0, 0.0, 1.0) * uv.y) * pow ((1.0 - rad), 8.0))\n   * tmpvar_9)) + (tmpvar_9 * texture (sampler_main, fract(uv)).xyz));\n  ret_4 = (ret_4 * 0.8);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = ret_4;\n  ret = tmpvar_10.xyz;\n }","warp_hlsl":"shader_body\n{\n\nfloat2 zoom = 2;\nfloat2 cntr = float2(-0,-0);\nfloat2 c = float2(0.6,0.6); // complex constant\n\n float2 my_uv = (uv-0.5-cntr)*zoom;\n my_uv = float2(my_uv.x*my_uv.x - my_uv.y*my_uv.y, 2*my_uv.x*my_uv.y) + c; // u -> u^2 + c\n\nzoom =1.81;\ncntr = float2(0,0);\nc = float2(0.448,0.701);\n\n float2 my_uv2 = (uv_orig-0.5-cntr)*zoom; // using uv_orig here - no contortion to the nice julia island\n my_uv2 = float2(my_uv2.x*my_uv2.x - my_uv2.y*my_uv2.y, 2*my_uv2.x*my_uv2.y) + c; // u -> u^2 + c\n\n//ret.x = tex2D( sampler_fc_main, my_uv).x - 0.1;\nret = tex2D( sampler_fc_main, my_uv2) - 0.004;\n\n my_uv = lerp(my_uv, my_uv2, 0.5);\n//ret.z = tex2D( sampler_fc_main, my_uv2).z - 0.1;\n\n}","comp_hlsl":"shader_body\n{\nfloat2 uv1 = (uv-0.5)*aspect.xy;\n\nfloat rad2 = length(uv1) + .05;\nfloat rad1 = .1/rad2 ;\n\nfloat2 uv2 = float2 (ang/3.14, rad1*1.5);\nuv2.y = uv2.y  +0.1*time;\nuv2.x = uv2.x  +.02*time;\n\nfloat2 uv3 = float2 (ang/3.14, rad1);\nuv3.y = uv3.y  + q30 ;\nuv3.x = uv3.x  + time/32;\n\n\nfloat3 crisp = GetPixel(frac(uv2)) + 2*GetPixel(frac(uv3));\ncrisp += 2*GetBlur2(frac(uv2)) + 2*GetBlur2(frac(uv3));\n\nfloat3 lay1 = float3 (1,0,1)*uv.y*pow(1-rad,8);\n\ncrisp = 3*crisp * pow(rad,1);\n\nfloat mask = saturate(1-4*rad);\n\nret = crisp + lay1*mask + mask * GetPixel(frac(uv));\n\nret *= .8;\n}"}