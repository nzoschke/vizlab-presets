{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"echo_orient":1,"additivewave":1,"wave_brighten":0,"wave_a":0.001,"wave_scale":0.01,"wave_smoothing":0.63,"wave_mystery":-1,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"zoom":0.9995,"warp":0.009,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0.5,"ob_r":0.01,"ib_size":0.26,"mv_x":30.08,"mv_y":35.04,"mv_l":3.4,"mv_r":0.08,"mv_g":0.71,"mv_b":0.05,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":13,"textured":1,"rad":1.62172,"tex_ang":3.76991,"tex_zoom":0.75819,"g":1,"b":1,"r2":1,"b2":1,"border_a":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":3,"additive":1,"textured":1,"rad":0.17914,"ang":4.39823,"tex_ang":3.89558,"tex_zoom":1.23001,"g":1,"b":1,"r2":1,"b2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":23,"textured":1,"rad":0.36456,"ang":2.89027,"tex_ang":3.76991,"tex_zoom":3.10329,"g":1,"g2":0,"b2":1,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.tex_ang=Math.cos(div(a.time,3));","init_eqs_eel":"","frame_eqs_eel":"tex_ang=cos(time/3);"},{"baseVals":{"enabled":1,"sides":14,"thickoutline":1,"textured":1,"x":0.6,"y":0.8,"rad":0.59957,"ang":5.34071,"tex_ang":3.14159,"tex_zoom":3.20893,"g":1,"b":1,"r2":1,"b2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.ang=Math.sin(a.time);","init_eqs_eel":"","frame_eqs_eel":"ang=sin(time);"}],"waves":[{"baseVals":{"thick":1,"a":0.5,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"n=sample*6.283;\nsize=0.165;\n\nx=0;\ny=sample;\n\nflux=sin(n*2-time)*0.5+0.5;\nflux=flux* min( (1-abs(y-0.5)*2)*10 , 1);\n\ntm=time*0.3;\nr=sin(n+tm)*0.5 + 0.5;\ng=sin(n+2.1+tm)*0.5+0.5;\nb=sin(n+4.2+tm)*0.5 + 0.5;\nr=r*flux;\ng=g*flux;\nb=b*flux","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n=sample*6.283;\nsize=0.165;\n\nx=0;\ny=sample;\n\nflux=sin(n*2-time)*0.5+0.5;\nflux=flux* min( (1-abs(y-0.5)*2)*10 , 1);\n\ntm=time*0.3;\nr=sin(n+tm)*0.5 + 0.5;\ng=sin(n+2.1+tm)*0.5+0.5;\nb=sin(n+4.2+tm)*0.5 + 0.5;\nr=r*flux;\ng=g*flux;\nb=b*flux"},{"baseVals":{"thick":1,"a":0.5,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"n=sample*6.283;\nsize=0.165;\n\nx=0.999;\ny=sample;\n\nr=0;g=0;b=0","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n=sample*6.283;\nsize=0.165;\n\nx=0.999;\ny=sample;\n\nr=0;g=0;b=0"},{"baseVals":{"enabled":1,"thick":1},"init_eqs_str":"a.n=0;a.tm=0;a.flx=0;","frame_eqs_str":"","point_eqs_str":"a.x=.5;a.y=a.sample;a.n=6.283*a.sample;a.tm=.1*a.time;a.flx=Math.sin(5*a.n+a.tm)*Math.sin(13*(a.n-a.tm))*Math.sin(23*(a.n+a.tm))*Math.sin(15*(a.n+a.tm))*.5+.5;a.flx=2*a.flx-.5;a.flx=Math.min(a.flx,1);a.flx=Math.max(a.flx,0);a.flx=pow(a.flx,3);a.b=a.flx;a.g=pow(a.b,1.3);a.r=pow(a.b,2);a.a=1;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x=0.5;\ny=sample;\n\nn=sample*6.283;\n\ntm=time*0.1;\n\nflx=(sin(n*5+tm) * sin((n-tm)*13) * sin((n+tm)*23) * sin((n+tm)*15)  )*0.5+0.5;\nflx= (flx*2 -0.5);\nflx= min(flx,1);\nflx= max(flx,0);\nflx= pow(flx,3);\nb=flx;\ng=pow(b,1.3);\nr=pow(b,2);\n\na=1;"},{"baseVals":{"thick":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"x=0.44;\ny=sample;\n\nn=sample*6.283;\n\ntm=time*0.1;\n\nflx=(sin(n*5+tm) * sin((n-tm)*13) * sin((n+tm)*23) * sin((n+tm)*15)  )*0.5+0.5;\nflx= (flx*2 -0.5);\nflx= min(flx,1);\nflx= max(flx,0);\nflx= pow(flx,3);\nb=flx;\ng=pow(b,1.3);\nr=pow(b,2);\n\na=1;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x=0.44;\ny=sample;\n\nn=sample*6.283;\n\ntm=time*0.1;\n\nflx=(sin(n*5+tm) * sin((n-tm)*13) * sin((n+tm)*23) * sin((n+tm)*15)  )*0.5+0.5;\nflx= (flx*2 -0.5);\nflx= min(flx,1);\nflx= max(flx,0);\nflx= pow(flx,3);\nb=flx;\ng=pow(b,1.3);\nr=pow(b,2);\n\na=1;"}],"init_eqs_str":"a.d=0;a.n=0;a.z=0;a.n2=0;a.q25=0;a.w2=0;a.q22=0;a.q21=0;a.q29=0;a.j3=0;a.q1=0;a.n1=0;a.v=0;a.w3=0;a.q31=0;a.q23=0;a.q24=0;a.pi=0;a.pi2inv=0;a.j2=0;a.w1=0;a.zz=0;a.vol=0;a.j1=0;a.q27=0;a.maskangle=0;a.q3=0;a.q32=0;a.q28=0;a.q30=0;a.q20=0;a.mtime=0;a.x1=2;a.y1=2;a.z1=2;","frame_eqs_str":"a.d=20;a.z=4;a.zz=1+0*a.bass_att;a.pi=2*Math.asin(1);a.pi2inv=div(.5,a.pi);a.maskangle=Math.asin(div(1,a.d));a.q32=a.maskangle;a.q31=a.d;a.q30=a.z;a.q29=a.pi2inv;a.q28=a.pi;a.q27=div(1,a.zz);a.v=.4;a.j1=.95*a.j1+sqr(4*a.bass)*a.v;a.j2=.95*a.j2+sqr(4*a.mid)*a.v;a.j3=.95*a.j3+sqr(4*a.treb)*a.v;a.n+=.0152*a.j1;a.n1+=.0152*a.j2;a.n2+=.0152*a.j3;a.vol=.25*(a.bass+a.mid+a.treb);a.vol=a.vol;a.q3=a.vol;a.mtime+=.01*a.vol;a.q1=a.mtime;a.zoom+=.015*a.vol;a.w1=.01*a.n;a.w2=.01*a.n1;a.w3=\n.01*a.n2;a.q20=Math.cos(a.w1);a.q21=Math.sin(a.w1);a.q22=Math.cos(a.w2);a.q23=Math.sin(a.w2);a.q24=Math.cos(a.w3);a.q25=Math.sin(a.w3);","pixel_eqs_str":"","init_eqs_eel":"x1 = 2;\ny1= 2;\nz1 = 2;","frame_eqs_eel":"// raytraced sphere code\n\nd = 20; // distance of the sphere, the farther you're away the more you'll see on the horizon\nz = 4; // distance of the pane where the scene is projected on, wider distance = smaller apex angle of the camera, very small distances = fish eyes view\n\nzz = 1 + bass_att*0; // linear zoom\n\npi = asin(1)*2;\npi2inv = 0.5/pi;\nmaskangle = asin( 1/d);\nq32 = maskangle; // hit = (cameras angle < mask_angle)\nq31 = d;\nq30 = z;\nq29 = pi2inv;\nq28 = pi;\nq27 = 1/zz;\n\nv = 0.4;\nj1 = j1*0.95 + sqr(bass*4)*v;\nj2 = j2*0.95 + sqr(mid*4)*v;\nj3 = j3*0.95 + sqr(treb*4)*v;\n\nn = n + j1*0.0152;\nn1 = n1 + j2*0.0152;\nn2 = n2 + j3*0.0152;\n\nvol=(bass+mid+treb)*0.25;\nvol=vol;\nq3=vol;\nmtime = mtime+vol*0.01;\nq1=mtime;\n\nzoom = zoom + 0.015*vol;\n\nw1 = n*0.01;    // solid angles to rotate the sphere in its origin\nw2 = n1*0.01;\nw3 = n2*0.01;\n\nq20 = cos(w1);\nq21 = sin(w1);\nq22 = cos(w2);\nq23 = sin(w2);\nq24 = cos(w3);\nq25 = sin(w3);","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 noise2_1;\n  vec3 rc_2;\n  vec3 p_3;\n  vec2 polar_4;\n  vec3 ret_5;\n  vec2 tmpvar_6;\n  tmpvar_6 = ((q27 * (uv - 0.5)) * aspect.xy);\n  float tmpvar_7;\n  tmpvar_7 = sqrt(dot (tmpvar_6, tmpvar_6));\n  float tmpvar_8;\n  float tmpvar_9;\n  tmpvar_9 = (min (abs(\n    (tmpvar_7 / q30)\n  ), 1.0) / max (abs(\n    (tmpvar_7 / q30)\n  ), 1.0));\n  float tmpvar_10;\n  tmpvar_10 = (tmpvar_9 * tmpvar_9);\n  tmpvar_10 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)\n     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)\n   * tmpvar_10) + 0.9999793) * tmpvar_9);\n  tmpvar_10 = (tmpvar_10 + (float(\n    (abs((tmpvar_7 / q30)) > 1.0)\n  ) * (\n    (tmpvar_10 * -2.0)\n   + 1.570796)));\n  tmpvar_8 = (tmpvar_10 * sign((tmpvar_7 / q30)));\n  if ((abs(q30) > (1e-08 * abs(tmpvar_7)))) {\n    if ((q30 < 0.0)) {\n      if ((tmpvar_7 >= 0.0)) {\n        tmpvar_8 += 3.141593;\n      } else {\n        tmpvar_8 = (tmpvar_8 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_8 = (sign(tmpvar_7) * 1.570796);\n  };\n  bool tmpvar_11;\n  tmpvar_11 = (q32 >= tmpvar_8);\n  float tmpvar_12;\n  float tmpvar_13;\n  tmpvar_13 = (min (abs(\n    (tmpvar_6.x / tmpvar_6.y)\n  ), 1.0) / max (abs(\n    (tmpvar_6.x / tmpvar_6.y)\n  ), 1.0));\n  float tmpvar_14;\n  tmpvar_14 = (tmpvar_13 * tmpvar_13);\n  tmpvar_14 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_14) + 0.05368138) * tmpvar_14) - 0.1173503)\n     * tmpvar_14) + 0.1938925) * tmpvar_14) - 0.3326756)\n   * tmpvar_14) + 0.9999793) * tmpvar_13);\n  tmpvar_14 = (tmpvar_14 + (float(\n    (abs((tmpvar_6.x / tmpvar_6.y)) > 1.0)\n  ) * (\n    (tmpvar_14 * -2.0)\n   + 1.570796)));\n  tmpvar_12 = (tmpvar_14 * sign((tmpvar_6.x / tmpvar_6.y)));\n  if ((abs(tmpvar_6.y) > (1e-08 * abs(tmpvar_6.x)))) {\n    if ((tmpvar_6.y < 0.0)) {\n      if ((tmpvar_6.x >= 0.0)) {\n        tmpvar_12 += 3.141593;\n      } else {\n        tmpvar_12 = (tmpvar_12 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_12 = (sign(tmpvar_6.x) * 1.570796);\n  };\n  float x_15;\n  x_15 = (q31 * sin(tmpvar_8));\n  vec2 tmpvar_16;\n  tmpvar_16.x = tmpvar_12;\n  tmpvar_16.y = ((q28 - tmpvar_8) + (sign(x_15) * (1.570796 - \n    (sqrt((1.0 - abs(x_15))) * (1.570796 + (abs(x_15) * (-0.2146018 + \n      (abs(x_15) * (0.08656672 + (abs(x_15) * -0.03102955)))\n    ))))\n  )));\n  polar_4 = tmpvar_16;\n  vec3 tmpvar_17;\n  tmpvar_17.x = (sin(tmpvar_12) * sin(tmpvar_16.y));\n  tmpvar_17.y = (cos(tmpvar_12) * sin(tmpvar_16.y));\n  tmpvar_17.z = cos(tmpvar_16.y);\n  vec2 tmpvar_18;\n  tmpvar_18.x = ((tmpvar_17.z * q20) - (tmpvar_17.y * q21));\n  tmpvar_18.y = ((tmpvar_17.z * q21) + (tmpvar_17.y * q20));\n  vec2 tmpvar_19;\n  tmpvar_19.x = ((tmpvar_18.x * q22) - (tmpvar_17.x * q23));\n  tmpvar_19.y = ((tmpvar_18.x * q23) + (tmpvar_17.x * q22));\n  p_3.z = tmpvar_19.x;\n  vec2 tmpvar_20;\n  tmpvar_20.x = ((tmpvar_18.y * q24) - (tmpvar_19.y * q25));\n  tmpvar_20.y = ((tmpvar_18.y * q25) + (tmpvar_19.y * q24));\n  p_3.xy = tmpvar_20.yx;\n  float tmpvar_21;\n  float tmpvar_22;\n  tmpvar_22 = (min (abs(\n    (tmpvar_19.x / tmpvar_20.y)\n  ), 1.0) / max (abs(\n    (tmpvar_19.x / tmpvar_20.y)\n  ), 1.0));\n  float tmpvar_23;\n  tmpvar_23 = (tmpvar_22 * tmpvar_22);\n  tmpvar_23 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_23) + 0.05368138) * tmpvar_23) - 0.1173503)\n     * tmpvar_23) + 0.1938925) * tmpvar_23) - 0.3326756)\n   * tmpvar_23) + 0.9999793) * tmpvar_22);\n  tmpvar_23 = (tmpvar_23 + (float(\n    (abs((tmpvar_19.x / tmpvar_20.y)) > 1.0)\n  ) * (\n    (tmpvar_23 * -2.0)\n   + 1.570796)));\n  tmpvar_21 = (tmpvar_23 * sign((tmpvar_19.x / tmpvar_20.y)));\n  if ((abs(tmpvar_20.y) > (1e-08 * abs(tmpvar_19.x)))) {\n    if ((tmpvar_20.y < 0.0)) {\n      if ((tmpvar_19.x >= 0.0)) {\n        tmpvar_21 += 3.141593;\n      } else {\n        tmpvar_21 = (tmpvar_21 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_21 = (sign(tmpvar_19.x) * 1.570796);\n  };\n  float tmpvar_24;\n  tmpvar_24 = sqrt(dot (p_3.xz, p_3.xz));\n  float tmpvar_25;\n  float tmpvar_26;\n  tmpvar_26 = (min (abs(\n    (tmpvar_20.x / tmpvar_24)\n  ), 1.0) / max (abs(\n    (tmpvar_20.x / tmpvar_24)\n  ), 1.0));\n  float tmpvar_27;\n  tmpvar_27 = (tmpvar_26 * tmpvar_26);\n  tmpvar_27 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_27) + 0.05368138) * tmpvar_27) - 0.1173503)\n     * tmpvar_27) + 0.1938925) * tmpvar_27) - 0.3326756)\n   * tmpvar_27) + 0.9999793) * tmpvar_26);\n  tmpvar_27 = (tmpvar_27 + (float(\n    (abs((tmpvar_20.x / tmpvar_24)) > 1.0)\n  ) * (\n    (tmpvar_27 * -2.0)\n   + 1.570796)));\n  tmpvar_25 = (tmpvar_27 * sign((tmpvar_20.x / tmpvar_24)));\n  if ((abs(tmpvar_24) > (1e-08 * abs(tmpvar_20.x)))) {\n    if ((tmpvar_24 < 0.0)) {\n      if ((tmpvar_20.x >= 0.0)) {\n        tmpvar_25 += 3.141593;\n      } else {\n        tmpvar_25 = (tmpvar_25 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_25 = (sign(tmpvar_20.x) * 1.570796);\n  };\n  vec2 tmpvar_28;\n  tmpvar_28.x = tmpvar_21;\n  tmpvar_28.y = tmpvar_25;\n  polar_4 = (((tmpvar_28 * q29) * vec2(1.0, 2.0)) + vec2(0.0, 0.5));\n  vec3 tmpvar_29;\n  tmpvar_29.xy = polar_4;\n  tmpvar_29.z = (time * 0.15);\n  rc_2 = (texture (sampler_noisevol_hq, tmpvar_29).xyz + (texture (sampler_noisevol_hq, (2.0 * tmpvar_29)) * 0.5).xyz);\n  rc_2 = (rc_2 + (texture (sampler_noisevol_hq, (4.0 * tmpvar_29)) * 0.25).xyz);\n  rc_2 = (rc_2 + (texture (sampler_noisevol_hq, (8.0 * tmpvar_29)) * 0.125).xyz);\n  rc_2 = (rc_2 + (texture (sampler_noisevol_hq, (16.0 * tmpvar_29)) * 0.0625).xyz);\n  rc_2 = ((rc_2 * rc_2) * (rc_2 * 2.0));\n  rc_2 = (rc_2 * (q3 * 0.5));\n  vec4 tmpvar_30;\n  tmpvar_30 = texture (sampler_fc_main, (0.5 + (uv - 0.5)));\n  noise2_1 = (texture (sampler_noise_lq, ((\n    (uv_orig * texsize.xy)\n   * texsize_noise_lq.zw) + rand_frame.xy)).xyz + mix ((rc_2 * 2.0), vec3(2.0, 2.0, 2.0), vec3(rad)));\n  vec3 a_31;\n  a_31 = (1.0 - tmpvar_30.xyz);\n  ret_5 = (tmpvar_30.xyz + (vec3(0.3, 0.25, 0.2) * dot (\n    ((a_31.yzx * noise2_1.zxy) - (a_31.zxy * noise2_1.yzx))\n  , vec3(0.32, 0.49, 0.29))));\n  ret_5 = (ret_5 - (0.1 * rad));\n  ret_5 = (ret_5 + ((0.1 * texture (sampler_noisevol_hq, \n    ((p_3 + (time * 0.1)) * 0.7)\n  )) * float(tmpvar_11)).xyz);\n  vec4 tmpvar_32;\n  tmpvar_32.w = 1.0;\n  tmpvar_32.xyz = ret_5;\n  ret = tmpvar_32.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  ret_1 = (texture (sampler_main, uv).xyz - ((\n    (texture (sampler_blur1, uv).xyz * scale1)\n   + bias1) * 0.5));\n  ret_1 = (ret_1 * 2.0);\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ret_1;\n  ret = tmpvar_2.xyz;\n }","warp_hlsl":"float2 polar, factorA, factorB, product;\n\nshader_body\n{\n\nfloat z = q30;\nfloat d = q31;\nfloat pi = q28;\nfloat pi2inv = q29;\nfloat mask_apex = q32;\nfloat zoom = q27;\n\nfloat2 c = zoom*(uv-0.5)*aspect.xy;\n\nfloat camera_apex = atan2( length(c),z);\n\nbool mask = mask_apex >= camera_apex;\n\nfloat longitude = atan2(c.x,c.y);\nfloat latitude = (pi - camera_apex + asin(d*sin(camera_apex)));\n\nfloat2 polar = float2(longitude,latitude);\n\nfloat3 p = float3( sin(polar.x)*sin(polar.y),cos(polar.x)*sin(polar.y),cos(polar.y));\n\nfactorA = p.zy;\nfactorB = float2(q20,q21);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y,factorA.x*factorB.y + factorA.y*factorB.x);\np.zy = product.xy;\n\nfactorA = p.zx;\nfactorB = float2(q22,q23);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y,factorA.x*factorB.y + factorA.y*factorB.x);\np.zx = product.xy;\n\nfactorA = p.yx;\nfactorB = float2(q24,q25);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);\np.yx = product.xy;\npolar = float2(atan2(p.z,p.x),atan2(p.y,length(p.xz)))*pi2inv*float2(1,2)+float2(0,0.5);\n\npolar = polar;\n\n    float3 pos = float3(polar,time*0.15);\n    float3 rc = tex3D(sampler_noisevol_hq, pos);\n    rc += tex3D(sampler_noisevol_hq, 2*pos)*0.5;\n    rc += tex3D(sampler_noisevol_hq, 4*pos)*0.25;\n    rc += tex3D(sampler_noisevol_hq, 8*pos)*0.125;\n    rc += tex3D(sampler_noisevol_hq, 16*pos)*0.0625;\n    //rc = rc*0.556;    \n    rc = (rc*rc*rc)*2;\n    //rc -= GetBlur1(uv);   \n    rc *= q3*0.5;\n\n    float2 ruv = uv = 0.5 + (uv-0.5)*(1+(rc.x*.0));  \n    ret = tex2D(sampler_fc_main, float2(ruv.x, ruv.y)).xyz;\n    \n    float3 noise2 = tex2D(sampler_noise_lq, uv_orig*texsize.xy*texsize_noise_lq.zw+rand_frame.xy);\n    noise2 += lerp(rc*2, 2, rad);\n    \n    ret = ret+0.5*lum(cross((1-ret),(noise2)))*float3(0.6,0.5,0.4);\n    ret -= lerp(0.0,0.1,rad);    \n\n    ret +=0.1*tex3d(sampler_noisevol_hq, (p+time*0.1)*0.7)*mask;\n\n\n}","comp_hlsl":"shader_body \n{ \n\nfloat3 reta = tex2D(sampler_main, uv);\nret = reta;\n//ret = sqrt(ret)*1;\n//ret += GetBlur2(uv);\nret -= GetBlur1(uv)*0.5;\n\nret *= 2;\n\n}"}