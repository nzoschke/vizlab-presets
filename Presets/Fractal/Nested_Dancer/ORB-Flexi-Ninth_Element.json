{"version":2,"baseVals":{"rating":5,"decay":0.9,"echo_zoom":1.007,"echo_alpha":0.5,"echo_orient":1,"wave_mode":7,"wrap":0,"brighten":1,"wave_a":0.001,"wave_scale":0.9,"zoom":0.96,"rot":-18.84024,"warp":0.00052,"wave_r":0,"wave_g":0.4,"wave_b":0,"ob_r":0.9,"ob_g":0.5,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":0.1,"mv_x":44.8,"mv_y":24,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":3,"x":0.9,"y":0.6,"rad":0.4448,"tex_zoom":0.27425,"g":1,"b":1,"g2":0,"b2":1,"a2":1,"border_r":0,"border_a":1},"init_eqs_str":"a.q1=0;a.q2=0;","frame_eqs_str":"a.x=.5+.45*Math.sin(.12*a.q1+Math.cos(.1*a.q1));a.x=.5+.45*Math.cos(.12*a.q1+Math.cos(.1*a.q1));a.ang=100*a.q2;","init_eqs_eel":"","frame_eqs_eel":"x = 0.5 + 0.45*sin(q1*0.12 + cos(q1*0.1));\nx = 0.5 + 0.45*cos(q1*0.12 + cos(q1*0.1));\n\n\nang = q2*100;"},{"baseVals":{"textured":1,"rad":2.6671,"tex_zoom":0.2742,"g":1,"b":1,"a":0.1,"r2":1,"g2":0,"a2":0.4,"border_r":0,"border_g":0,"border_b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"textured":1,"rad":2.66718,"tex_zoom":0.36964,"g":1,"b":1,"a":0.1,"a2":0.4,"border_g":0,"border_b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"textured":1,"rad":2.66718,"tex_zoom":0.30294,"g":1,"b":1,"a":0.1,"a2":0.4,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"thick":1,"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.basstime=0;a.stickybit=0;a.volavg2=0;a.q1=0;a.q9=0;a.sample1=0;a.difftime=0;a.diff=0;a.edge=0;a.volavg=0;a.bit2=0;a.vol=0;a.q2=0;a.q3=0;a.basssum=0;a.sample2=0;a.state=0;","frame_eqs_str":"a.basstime+=.06*a.bass;a.q1=a.basstime;a.q9=.000005*a.basstime;a.basstime=.00001<Math.abs(below(a.basstime,1E3))?1E3:a.basstime;a.vol=pow(a.bass+a.mid+a.treb,2);a.basssum=a.vol;a.stickybit=mod(a.time,2);a.volavg+=a.vol*equal(a.stickybit,1);a.sample1+=equal(a.stickybit,1);a.volavg2+=a.vol*equal(a.stickybit,0);a.sample2+=equal(a.stickybit,0);a.edge=bnot(equal(a.bit2,a.stickybit));a.volavg-=a.volavg*a.edge*a.stickybit;a.volavg2-=a.volavg2*a.edge*equal(a.stickybit,0);a.sample1-=\na.sample1*a.edge*a.stickybit;a.sample2-=a.sample2*a.edge*equal(a.stickybit,0);a.diff=.00001<Math.abs(equal(a.stickybit,1))?div(a.basssum,div(a.volavg2,a.sample2)):0;a.diff=.00001<Math.abs(equal(a.stickybit,0))?div(a.basssum,div(a.volavg,a.sample1)):a.diff;a.q3=a.diff;a.bit2=mod(a.time,2);a.difftime+=.03*a.diff;a.q2=.001*a.basstime;a.difftime=.00001<Math.abs(above(a.difftime,2E3))?0:a.difftime;a.monitor=a.q1;","pixel_eqs_str":"a.zoom=.98;a.rot=0;","init_eqs_eel":"state = 0;","frame_eqs_eel":"basstime = basstime + bass*0.06;\nq1 = basstime;\n\nq9 = basstime * 0.000005;\n\nbasstime = if(below(basstime,1000),1000,basstime);\n\nvol = pow(bass+mid+treb,2);\nbasssum = vol;\n\nstickybit = time%2;\n\n//avg vol\n//buffer 1\nvolAvg = volAvg + vol*equal(stickybit,1);\n//number of samples 1 or framerate\nsample1 = sample1 + equal(stickybit,1);\n//buffer 2\nvolAvg2 = volAvg2 + vol*equal(stickybit,0);\n//number of samples 2\nsample2 = sample2 + equal(stickybit,0);\n\n//transision\nedge = bnot(equal(bit2,stickybit));\n\nvolAvg = volAvg - volAvg*edge*stickybit;\nvolAvg2 = volAvg2 - volAvg2*edge*equal(stickybit,0);\n\nsample1 = sample1  - sample1*edge*stickybit;\nsample2 = sample2  - sample2*edge*equal(stickybit,0);\n\n//test vol against avg buffer lvl\ndiff = if(equal(stickybit,1), (basssum/(volAvg2/sample2)) , 0);\ndiff = if(equal(stickybit,0), (basssum/(volAvg/sample1)), diff);\n\nq3 = diff;\n\nbit2 = time%2;\n\ndifftime = difftime + diff*0.03;\nq2 = basstime*0.001;\n\n//fix a strange error\ndifftime = if(above(difftime,2000),0, difftime);\n\n\n\nmonitor = q1;","pixel_eqs_eel":"zoom = 0.98;\nrot = 0;","warp":"uniform sampler2D sampler_cells;\n shader_body { \n  mat2 tmpvar_1;\n  float tmpvar_2;\n  tmpvar_2 = cos(q2);\n  tmpvar_1[uint(0)].x = tmpvar_2;\n  float tmpvar_3;\n  tmpvar_3 = sin(q2);\n  tmpvar_1[uint(0)].y = -(tmpvar_3);\n  tmpvar_1[1u].x = tmpvar_3;\n  tmpvar_1[1u].y = tmpvar_2;\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = texture (sampler_main, (((\n    ((uv + (texture (sampler_main, (uv + \n      ((texture (sampler_cells, (uv * 2.0)).x * 0.1) * (1.0 + (bass * 1e-05)))\n    )).xyz * 0.001).xy) - 0.5)\n   * tmpvar_1) * 0.99) + 0.5)).xyz;\n  ret = tmpvar_4.xyz;\n }","comp":" shader_body { \n  vec3 ret2_1;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (texsize.zw * 6.0);\n  vec2 tmpvar_4;\n  tmpvar_4.x = dot (((\n    (texture (sampler_blur1, (uv + (vec2(1.0, 0.0) * tmpvar_3))).xyz * scale1)\n   + bias1) - (\n    (texture (sampler_blur1, (uv - (vec2(1.0, 0.0) * tmpvar_3))).xyz * scale1)\n   + bias1)), vec3(0.32, 0.49, 0.29));\n  tmpvar_4.y = dot (((\n    (texture (sampler_blur1, (uv + (vec2(0.0, 1.0) * tmpvar_3))).xyz * scale1)\n   + bias1) - (\n    (texture (sampler_blur1, (uv - (vec2(0.0, 1.0) * tmpvar_3))).xyz * scale1)\n   + bias1)), vec3(0.32, 0.49, 0.29));\n  vec2 tmpvar_5;\n  tmpvar_5 = (uv - (0.25 * tmpvar_4));\n  vec4 tmpvar_6;\n  tmpvar_6 = texture (sampler_blur3, uv);\n  ret_2 = (0.25 * clamp ((2.0 * \n    ((tmpvar_6.xyz * scale3) + bias3)\n  ), 0.0, 1.0));\n  ret_2 = (ret_2 - (0.8 * clamp (\n    ((20.0 * ((0.6 * \n      ((texture (sampler_blur2, uv).xyz * scale2) + bias2)\n    ) - 0.01)) - 2.0)\n  , 0.0, 1.0)));\n  vec4 tmpvar_7;\n  tmpvar_7 = texture (sampler_blur1, uv);\n  ret_2 = (ret_2 + clamp ((\n    (30.0 * ((texture (sampler_main, uv).xyz + (\n      ((tmpvar_7.xyz * scale1) + bias1)\n     * 0.15)) - 0.01))\n   - 2.0), 0.0, 1.0));\n  ret_2 = (ret_2 + 0.75);\n  float tmpvar_8;\n  tmpvar_8 = dot (ret_2, vec3(0.32, 0.49, 0.29));\n  vec3 tmpvar_9;\n  tmpvar_9 = mix (vec3(tmpvar_8), (vec3(tmpvar_8) * dot (\n    (((texture (sampler_blur3, tmpvar_5).xyz * scale3) + bias3) - ((texture (sampler_blur1, tmpvar_5).xyz * scale1) + bias1))\n  , vec3(0.32, 0.49, 0.29))), pow (hue_shader, vec3(tmpvar_8)));\n  ret2_1 = (vec3((-0.5 * dot (\n    ((texture (sampler_blur3, tmpvar_5).xyz * scale3) + bias3)\n  , vec3(0.32, 0.49, 0.29)))) + (0.8 * (\n    (texture (sampler_blur1, tmpvar_5).xyz * scale1)\n   + bias1)));\n  ret2_1 = (ret2_1 - (0.9 * texture (sampler_main, tmpvar_5).xyz));\n  ret2_1 = (ret2_1 - 0.75);\n  float tmpvar_10;\n  tmpvar_10 = dot (ret2_1, vec3(0.32, 0.49, 0.29));\n  vec3 tmpvar_11;\n  tmpvar_11 = mix (vec3(tmpvar_10), (vec3(tmpvar_10) * dot (\n    (((tmpvar_6.xyz * scale3) + bias3) - ((tmpvar_7.xyz * scale1) + bias1))\n  , vec3(0.32, 0.49, 0.29))), pow (hue_shader.zxy, tmpvar_9));\n  ret2_1 = tmpvar_11;\n  vec3 tmpvar_12;\n  tmpvar_12 = abs((tmpvar_9 - (2.0 * tmpvar_11)));\n  ret_2 = (tmpvar_12 * tmpvar_12);\n  vec4 tmpvar_13;\n  tmpvar_13.w = 1.0;\n  tmpvar_13.xyz = ret_2;\n  ret = tmpvar_13.xyz;\n }","warp_hlsl":"sampler sampler_cells = sampler_state\n{\n  AddressU = mirror; \n  \tAddressV = mirror;\n};\n\nshader_body\n{\n    float2x2 rot = {cos(q2), sin(q2),\n                    -sin(q2), cos(q2)}; \n\n    float distort = tex2D(sampler_cells, uv*2).xy;\n\n    ret = tex2D(sampler_main, uv + distort*0.1*(1 + bass*0.00001) ).xyz;\n    ret = tex2D(sampler_main, mul((uv +  ret*0.001  - 0.5),rot)*0.99 + 0.5);\n    ret *= 1; //gamma\n}","comp_hlsl":"shader_body\n{\n\n//Code bits by Flexi and Geiss\n\n    float2 d = texsize.zw*6;\n    float3 dx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );\n    float3 dy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );\nfloat2 uv_y = uv-0.25*(float2(lum(dx),lum(dy)));\n\nret = .25*saturate(2*GetBlur3(uv));\nret -= .8*saturate(20*(0.6*GetBlur2(uv)-.01)-2);\nret += saturate(30*((GetPixel(uv)+GetBlur1(uv)*.15)-.01)-2);\nret += .75;\nret = lum(ret);\nret = lerp(ret,ret*lum(GetBlur3(uv_y)-GetBlur1(uv_y)),pow(hue_shader,ret));\n\nfloat3 ret2 = -.5*lum(GetBlur3(uv_y));\nret2 += .8*GetBlur1(uv_y);\nret2 -= .9*GetPixel(uv_y);\nret2 -= .75;\nret2 = lum(ret2);\nret2 = lerp(ret2,ret2*lum(GetBlur3(uv)-GetBlur1(uv)),pow(hue_shader.zxy,ret));\n\nret = abs(ret-2*ret2);\n//ret = ret2;\n\nret *= ret;\n\n}"}