{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.95,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":1,"wave_brighten":0,"wave_a":1.742,"wave_scale":2.469,"wave_smoothing":0.36,"wave_mystery":-0.18,"warpanimspeed":5.996,"warpscale":1.331,"zoomexp":1.01,"zoom":0.99953,"warp":0.01,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0.3,"ob_r":0.84,"ob_g":0.706,"ob_b":0.589,"ob_a":0.931,"ib_r":0.364,"ib_g":0.902,"ib_b":0.38,"ib_a":0.355,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":100,"thickoutline":1,"textured":1,"rad":0.86643,"tex_ang":0.62832,"tex_zoom":1.0303,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"a.q7=0;a.q6=0;","frame_eqs_str":"a.tex_zoom=a.q7+a.tex_zoom;a.a2=1;a.border_a=a.q7;a.additive=a.q6;","init_eqs_eel":"","frame_eqs_eel":"tex_zoom = q7+tex_zoom;\na2 = 1;\nborder_a = q7;\nadditive = q6;"},{"baseVals":{"enabled":1,"sides":6,"thickoutline":1,"textured":1,"rad":0.5482,"tex_ang":0.62832,"tex_zoom":1.0303,"g":1,"b":1,"g2":0,"a2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"a.q7=0;a.q2=0;a.q1=0;a.q3=0;","frame_eqs_str":"a.tex_zoom=a.q7+a.tex_zoom;a.a2=1;a.border_a=a.q7;a.r2+=.5*a.q2;a.g2+=.5*a.q1;a.b2+=.5*a.q3;a.b=bnot(a.r2+a.g2+a.b2);","init_eqs_eel":"","frame_eqs_eel":"tex_zoom = q7+tex_zoom;\na2 = 1;\nborder_a = q7;\nr2=r2+.5*q2;\ng2=g2+.5*q1;\nb2=b2+.5*q3;\nb=bnot(r2+g2+b2);"},{"baseVals":{"enabled":1,"sides":100,"thickoutline":1,"textured":1,"rad":0.86643,"tex_ang":0.62832,"tex_zoom":1.0303,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"a.q7=0;","frame_eqs_str":"a.tex_zoom=a.q7+a.tex_zoom;a.a2=1;a.border_a=a.q7;","init_eqs_eel":"","frame_eqs_eel":"tex_zoom = q7+tex_zoom;\na2 = 1;\nborder_a = q7;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.mq29=0;a.cthr=0;a.mq1=0;a.beateven=0;a.q25=0;a.q12=0;a.q22=0;a.q21=0;a.q13=0;a.meanbass_att=0;a.q29=0;a.q1=0;a.mq31=0;a.mq21=0;a.mq24=0;a.chng=0;a.mq28=0;a.lastbeat=0;a.mq23=0;a.beatrate=0;a.q31=0;a.q23=0;a.q24=0;a.q11=0;a.peakbass_att=0;a.atime=0;a.beatcounter=0;a.a=0;a.q26=0;a.mq27=0;a.mq25=0;a.volume=0;a.mq22=0;a.beat=0;a.vol=0;a.mq26=0;a.q27=0;a.q28=0;","frame_eqs_str":"a.chng=Math.sin(.5*a.time);a.cthr=.9999;a.mq21=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq21;a.mq22=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq22;a.mq23=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq23;a.mq24=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq24;a.mq25=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq25;a.mq26=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq26;a.mq27=.00001<Math.abs(above(a.chng,a.cthr))?rand(1):a.mq27;a.mq28=.00001<Math.abs(above(a.chng,\na.cthr))?rand(1):a.mq28;a.mq29=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq29;a.mq31=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq31;a.monitor=a.chng;a.q21=a.mq21;a.q22=a.mq22;a.q23=a.mq23;a.q24=a.mq24;a.q25=a.mq25;a.q26=a.mq26;a.q27=a.mq27;a.q28=a.mq28;a.q29=a.mq29;a.q31=a.mq31;a.monitor=a.mq1;a.vol=a.bass+a.treb+a.mid;a.atime+=a.vol;a.q11=.4+.4*Math.sin(.006*a.atime);a.q12=.4+.4*Math.cos(.00613828348*a.atime);a.q13=.4+.4*Math.sin(.00598593455*a.atime);a.monitor=a.q13;a.wave_mystery=\n.00001<Math.abs(above(mod(4*a.time,2),0))?1:0;a.zoom=.997;a.wave_r=.5*a.bass;a.wave_g=.5*a.treb;a.wave_b=.5*a.mid;a.ib_a=.3*a.bass_att+.1;a.wave_b=.5+.5*Math.sin(a.time);a.warp=0;a.volume=.15*(a.bass_att+a.bass+a.mid+a.mid_att);a.beatrate=.00001<Math.abs(equal(a.beatrate,0))?1:.00001<Math.abs(below(a.volume,.01))?1:a.beatrate;a.lastbeat=.00001<Math.abs(equal(a.lastbeat,0))?a.time:a.lastbeat;a.meanbass_att=.1*(9*a.meanbass_att+a.bass_att);a.peakbass_att=.00001<Math.abs(above(a.bass_att,a.peakbass_att))?\na.bass_att:a.peakbass_att;a.beat=.00001<Math.abs(above(a.volume,.8))?.00001<Math.abs(below(a.peakbass_att-a.bass_att,.05*a.peakbass_att))?.00001<Math.abs(above(a.time-a.lastbeat,.1+.5*(a.beatrate-.1)))?1:0:0:0;a.beatrate=Math.max(.00001<Math.abs(a.beat)?.00001<Math.abs(below(a.time-a.lastbeat,2*a.beatrate))?.1*(9*a.beatrate+a.time-a.lastbeat):a.beatrate:a.beatrate,.1);a.peakbass_att=.00001<Math.abs(equal(a.beat,0))?.00001<Math.abs(above(a.time-a.lastbeat,2*a.beatrate))?.95*a.peakbass_att:.995*a.peakbass_att:\na.bass_att;a.lastbeat=.00001<Math.abs(a.beat)?a.time:a.lastbeat;a.peakbass_att=Math.max(.00001<Math.abs(a.beat)?a.bass_att:a.peakbass_att,1.1*a.meanbass_att);a.beatcounter=.00001<Math.abs(above(a.beat,0))?a.beatcounter+1:a.beatcounter;a.beatcounter=.00001<Math.abs(above(a.beatcounter,19))?0:a.beatcounter;a.mv_y=1.25+.1*a.beatcounter;a.beateven=mod(a.beatcounter,2);a.mv_g=.5+.5*Math.sin(.7981*a.time);a.mv_r=.7+.3*Math.sin(.8341*a.time);a.mv_b=.00001<Math.abs(a.beateven)?.3:.7;a.q1=.00001<Math.abs(mod(a.beatcounter,\n5))?0:-.22;a.ib_r=.00001<Math.abs(mod(a.beatcounter,4))?.00001<Math.abs(a.beat)?1:0:1;a.ob_a=a.treb*a.wave_r;a.wave_r=a.wave_b-a.wave_b;a.warp=a.treb*a.treb;a.wave_y=a.wave_b*a.bass;a.ob_g=a.wave_b*a.wave_r;a.ob_g*=a.treb;a.ob_g*=a.treb;a.ob_size=a.time-a.time;a.wave_mode=a.wave_r*a.time;a.mv_l=a.wave_b*a.time;a.wave_mode*=a.wave_r;a.ob_g-=a.wave_r;a.ib_b=a.treb*a.wave_r;a.wave_b=a.bass*a.wave_r;a.mv_b=a.wave_b-a.bass;a.mv_b*=a.time;a.rot=a.treb*a.treb;a.rot=.00001<Math.abs(below(a.rot,-1))?-1:a.rot;\na.rot=.00001<Math.abs(above(a.rot,1))?1:a.rot;a.warp=.00001<Math.abs(below(a.warp,.01))?.01:a.warp;a.warp=.00001<Math.abs(above(a.warp,100))?100:a.warp;a.wave_r=.00001<Math.abs(below(a.wave_r,0))?0:a.wave_r;a.wave_r=.00001<Math.abs(above(a.wave_r,1))?1:a.wave_r;a.wave_b=.00001<Math.abs(below(a.wave_b,0))?0:a.wave_b;a.wave_b=.00001<Math.abs(above(a.wave_b,1))?1:a.wave_b;a.wave_y=.00001<Math.abs(below(a.wave_y,0))?0:a.wave_y;a.wave_y=.00001<Math.abs(above(a.wave_y,1))?1:a.wave_y;a.wave_mode=.00001<\nMath.abs(below(a.wave_mode,0))?0:a.wave_mode;a.wave_mode=.00001<Math.abs(above(a.wave_mode,7))?7:a.wave_mode;a.ob_size=.00001<Math.abs(below(a.ob_size,0))?0:a.ob_size;a.ob_size=.00001<Math.abs(above(a.ob_size,.5))?.5:a.ob_size;a.ob_g=.00001<Math.abs(below(a.ob_g,0))?0:a.ob_g;a.ob_g=.00001<Math.abs(above(a.ob_g,1))?1:a.ob_g;a.ob_a=.00001<Math.abs(below(a.ob_a,0))?0:a.ob_a;a.ob_a=.00001<Math.abs(above(a.ob_a,1))?1:a.ob_a;a.ib_b=.00001<Math.abs(below(a.ib_b,0))?0:a.ib_b;a.ib_b=.00001<Math.abs(above(a.ib_b,\n1))?1:a.ib_b;a.mv_b=.00001<Math.abs(below(a.mv_b,0))?0:a.mv_b;a.mv_b=.00001<Math.abs(above(a.mv_b,1))?1:a.mv_b;a.mv_l=.00001<Math.abs(below(a.mv_l,0))?0:a.mv_l;a.mv_l=.00001<Math.abs(above(a.mv_l,5))?5:a.mv_l;a.wave_r=.00001<Math.abs(below(a.wave_r,0))?0:a.wave_r;a.wave_r=.00001<Math.abs(above(a.wave_r,1))?1:a.wave_r;a.wave_b=.00001<Math.abs(below(a.wave_b,0))?0:a.wave_b;a.wave_b=.00001<Math.abs(above(a.wave_b,1))?1:a.wave_b;a.ob_g=.00001<Math.abs(below(a.ob_g,0))?0:a.ob_g;a.ob_g=.00001<Math.abs(above(a.ob_g,\n1))?1:a.ob_g;a.ob_size=.00001<Math.abs(below(a.ob_size,0))?0:a.ob_size;a.ob_size=.00001<Math.abs(above(a.ob_size,.5))?.5:a.ob_size;","pixel_eqs_str":"a.zoom=.00001<Math.abs(below(a.rad,.4+a.q1))?.1*(-a.rad+.5):a.zoom;a.warp=a.a*a.rot;a.warp=.00001<Math.abs(below(a.warp,.01))?.01:a.warp;a.warp=.00001<Math.abs(above(a.warp,100))?100:a.warp;","init_eqs_eel":"","frame_eqs_eel":"chng=sin(time*.5);\ncthr=.9999;\nmq21=if(above(chng,cthr),rand(3),mq21);\nmq22=if(above(chng,cthr),rand(3),mq22);\nmq23=if(above(chng,cthr),rand(3),mq23);\nmq24=if(above(chng,cthr),rand(2),mq24);\nmq25=if(above(chng,cthr),rand(2),mq25);\nmq26=if(above(chng,cthr),rand(2),mq26);\nmq27=if(above(chng,cthr),rand(1),mq27);\nmq28=if(above(chng,cthr),rand(1),mq28);\nmq29=if(above(chng,cthr),rand(1)*.3,mq29);\nmq31=if(above(chng,cthr),rand(1)*.3,mq31);\nmonitor=chng;\nq21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;\nq27=mq27;q28=mq28;q29=mq29;q31=mq31;\n\nmonitor=mq1;\nvol=bass+treb+mid;\natime=atime+vol;\nq11=.4+sin(atime*.006        )*.4;\nq12=.4+cos(atime*.00613828348)*.4;\nq13=.4+sin(atime*.00598593455)*.4;\nmonitor=q13;\n\nwave_mystery = if(above((time*4)%2,0),1,0);\nzoom = .997;\nwave_r = bass*.5;\nwave_g = treb*.5;\nwave_b = mid*.5;\nib_a = (bass_att*.3) + 0.1;\nwave_b = 0.5+0.5*sin(time);\nwarp=0;\nvolume = 0.15*(bass_att+bass+mid+mid_att);\nbeatrate = if(equal(beatrate,0),1,if(below(volume,0.01),1,beatrate));\nlastbeat = if(equal(lastbeat,0),time,lastbeat);\nmeanbass_att = 0.1*(meanbass_att*9 + bass_att);\npeakbass_att = if(above(bass_att,peakbass_att),bass_att,peakbass_att);\nbeat = if(above(volume,0.8),if(below(peakbass_att - bass_att, 0.05*peakbass_att),if(above(time - lastbeat,0.1+0.5*(beatrate-0.1)),1,0),0),0);\nbeatrate = max(if(beat,if(below(time-lastbeat,2*beatrate),0.1*(beatrate*9 + time - lastbeat),beatrate),beatrate),0.1);\npeakbass_att = if(equal(beat,0),if(above(time - lastbeat,2*beatrate),peakbass_att*0.95,peakbass_att*0.995),bass_att);\nlastbeat = if(beat,time,lastbeat);\npeakbass_att = max(if(beat,bass_att,peakbass_att),1.1*meanbass_att);\nbeatcounter = if(above(beat,0),beatcounter +1, beatcounter);\nbeatcounter = if(above(beatcounter,19), 0, beatcounter);\nmv_y = 1.25 + 0.1*beatcounter;\nbeateven = beatcounter%2;\nmv_g = 0.5 + 0.5*sin(time*0.7981);\nmv_r = 0.7 + 0.3*sin(time*0.8341);\nmv_b =  if(beateven,0.3,0.7);\nq1 = if(beatcounter%5,0,-0.22);\nib_r = if(beatcounter%4,if(beat,1,0),1);\nob_a = treb * wave_r;\nwave_r = wave_b - wave_b;\nwarp = treb * treb;\nwave_y = wave_b * bass;\nob_g = wave_b * wave_r;\nob_g = ob_g * treb;\nob_g = ob_g * treb;\nob_size = time - time;\nwave_mode = wave_r * time;\nmv_l = wave_b * time;\nwave_mode = wave_mode * wave_r;\nob_g = ob_g - wave_r;\nib_b = treb * wave_r;\nwave_b = bass * wave_r;\nmv_b = wave_b - bass;\nmv_b = mv_b * time;\nrot = treb * treb;\nrot=if(below(rot,-1.0), -1.0, rot);\nrot=if(above(rot,1.0), 1.0, rot);\nwarp=if(below(warp,0.01), 0.01, warp);\nwarp=if(above(warp,100.0), 100.0, warp);\nwave_r=if(below(wave_r,0.0), 0.0, wave_r);\nwave_r=if(above(wave_r,1.0), 1.0, wave_r);\nwave_b=if(below(wave_b,0.0), 0.0, wave_b);\nwave_b=if(above(wave_b,1.0), 1.0, wave_b);\nwave_y=if(below(wave_y,0.0), 0.0, wave_y);\nwave_y=if(above(wave_y,1.0), 1.0, wave_y);\nwave_mode=if(below(wave_mode,0), 0, wave_mode);\nwave_mode=if(above(wave_mode,7.0), 7.0, wave_mode);\nob_size=if(below(ob_size,0.0), 0.0, ob_size);\nob_size=if(above(ob_size,0.5), 0.5, ob_size);\nob_g=if(below(ob_g,0.0), 0.0, ob_g);\nob_g=if(above(ob_g,1.0), 1.0, ob_g);\nob_a=if(below(ob_a,0.0), 0.0, ob_a);\nob_a=if(above(ob_a,1.0), 1.0, ob_a);\nib_b=if(below(ib_b,0.0), 0.0, ib_b);\nib_b=if(above(ib_b,1.0), 1.0, ib_b);\nmv_b=if(below(mv_b,0.0), 0.0, mv_b);\nmv_b=if(above(mv_b,1.0), 1.0, mv_b);\nmv_l=if(below(mv_l,0.0), 0.0, mv_l);\nmv_l=if(above(mv_l,5.0), 5.0, mv_l);\nwave_r=if(below(wave_r,0.0), 0.0, wave_r);\nwave_r=if(above(wave_r,1.0), 1.0, wave_r);\nwave_b=if(below(wave_b,0.0), 0.0, wave_b);\nwave_b=if(above(wave_b,1.0), 1.0, wave_b);\nob_g=if(below(ob_g,0.0), 0.0, ob_g);\nob_g=if(above(ob_g,1.0), 1.0, ob_g);\nob_size=if(below(ob_size,0.0), 0.0, ob_size);\nob_size=if(above(ob_size,0.5), 0.5, ob_size);","pixel_eqs_eel":"zoom = if(below(rad,.4+q1),(-rad+.5)*.1,zoom);\nwarp = a * rot;\nwarp=if(below(warp,0.01), 0.01, warp);\nwarp=if(above(warp,100.0), 100.0, warp);","warp":" shader_body { \n  vec3 noise_1;\n  vec3 ret_2;\n  noise_1 = ((texture (sampler_noise_lq, (\n    (((texsize.xy * texsize_noise_lq.zw).x * uv) / 2.0)\n   + q23)) + 1.0).xyz - ((roam_sin.xyz * roam_cos.zxy) * 0.2));\n  vec3 tmpvar_3;\n  tmpvar_3 = (((texture (sampler_blur1, uv).xyz * scale1) + bias1) - 0.3);\n  vec2 tmpvar_4;\n  tmpvar_4.x = (0.3 * tmpvar_3.x);\n  tmpvar_4.y = tmpvar_3.y;\n  ret_2 = ((-0.4 * (\n    ((texture (sampler_blur1, ((uv / 4.0) + (0.4 * tmpvar_4))).xyz * scale1) + bias1)\n   - \n    (noise_1 * 0.1)\n  )) + (texture (sampler_main, (uv + \n    (tmpvar_3 * 0.01)\n  .xy)).xyz + (noise_1 * 0.1)));\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv.xyy) * (\n    (q27 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q29)));\n  if (((ret_2.x > (q21 * q13)) && (ret_2.x <= (q24 * q11)))) {\n    ret_2.y = (ret_2.y - (tmpvar_5.x * 0.5));\n  };\n  if (((ret_2.y > (q22 * q11)) && (ret_2.y <= (q25 * q12)))) {\n    ret_2.z = (ret_2.z - (tmpvar_5.y * 0.5));\n  };\n  if (((ret_2.z > (q23 * q12)) && (ret_2.z <= (q26 * q13)))) {\n    ret_2.x = (ret_2.x - (tmpvar_5.z * 0.5));\n  };\n  float tmpvar_6;\n  tmpvar_6 = (1.0 - ((0.01 * q28) * (q28 * rad)));\n  ret_2 = (ret_2 * (0.98 * (tmpvar_6 * tmpvar_6)));\n  ret_2 = (ret_2 - 0.04);\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ret_2;\n  ret = tmpvar_7.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  vec3 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv).zzz;\n  ret_1 = ((pow (\n    mix (vec3((((texture (sampler_blur1, uv).xyz * scale1) + bias1).z + ((texture (sampler_blur3, uv).xyz * scale3) + bias3).z)), tmpvar_2, tmpvar_2)\n  , vec3(0.8, 2.0, 8.0)) * 1.25) - 0.25);\n  ret_1 = (ret_1 - ((roam_sin.wzy * roam_cos.xyz) * 0.2));\n  ret_1 = (ret_1 * ((\n    (texture (sampler_blur2, (uv + vec2(0.0, 0.01))).xyz * scale2)\n   + bias2).y * 1.2));\n  ret_1 = (ret_1 * 2.0);\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv.xyy) * (\n    (q28 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q31)));\n  if (((ret_1.x > (q26 * q13)) && (ret_1.x <= (q23 * q11)))) {\n    ret_1.z = (ret_1.z - (tmpvar_3.x * 0.5));\n  };\n  if (((ret_1.y > (q25 * q11)) && (ret_1.y <= (q22 * q12)))) {\n    ret_1.x = (ret_1.x - (tmpvar_3.y * 0.5));\n  };\n  if (((ret_1.z > (q24 * q12)) && (ret_1.z <= (q21 * q13)))) {\n    ret_1.y = (ret_1.y - (tmpvar_3.z * 0.5));\n  };\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_1;\n  ret = tmpvar_4.xyz;\n }","warp_hlsl":"shader_body {\n\n//uv = uv_orig;\nfloat corr = texsize.xy*texsize_noise_lq.zw;\nfloat2 uv1 = float2(uv.x-0.5,uv.y-0.5)*aspect.xy;\n\nfloat2 tmp = uv1;\ntmp.x = ang*3; tmp.y = rad;\nuv1 = tmp;\n\nfloat3 noise = (tex2D(sampler_noise_lq,corr*uv/2+q23)+1);\nnoise-=roam_sin*roam_cos.zxy*.2;\n\nfloat3 ret1 = GetBlur1 (uv)-.3;\nfloat3 crisp = tex2D(sampler_main, uv+ret1*.01 ) + noise*0.1;\nfloat3 blur = GetBlur1 (uv/4+.4*float2(.3*ret1.x,ret1.y)) - noise*.1;\n\nret = -.4*blur + crisp;\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy*q27\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q29\n                     );\nif(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y -= (noise9).x*.5; \nif(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z -= (noise9).y*.5; \nif(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x -= (noise9).z*.5; \n    \n ret *= 0.98 * pow(1-.01*q28*q28*rad,2); \n  ret -= 0.04;\n}","comp_hlsl":"sampler sampler_rose;\nshader_body\n{\n\nret = tex2D(sampler_main, uv).z,\n\nret = lerp (\nGetBlur1(uv).z + GetBlur3(uv).z,\nret,\npow(ret,1));\n  \nfloat1 val = ret*6.2831853;\n    ret = pow(ret,float3(.8,2,8))*1.25 - .25;\n\nret-=roam_sin.wzy*roam_cos*.2;\nret *= GetBlur2(uv+float2(0,.01)).y*1.2;\n\nret *= 2; //gamma\n\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy*q28\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q31\n                     );\nif(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; \nif(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; \nif(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; \n}"}