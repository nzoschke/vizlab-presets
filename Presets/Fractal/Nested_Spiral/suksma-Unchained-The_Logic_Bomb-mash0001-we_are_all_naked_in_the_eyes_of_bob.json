{"version":2,"baseVals":{"rating":5,"echo_zoom":67.165,"echo_alpha":0.5,"wave_mode":7,"wave_a":7.74,"wave_scale":0.656,"wave_smoothing":0.8,"warpscale":1.772,"zoomexp":1.96,"fshader":0.19,"zoom":0.98,"warp":0.513,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"ob_a":0.58,"ib_size":0.015,"ib_r":0.55,"ib_g":1,"ib_b":0.5,"ib_a":0.23,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"","frame_eqs_str":"a.wave_x+=.5*(.6*Math.sin(2.121*a.time)+.4*Math.sin(1.621*a.time));a.wave_y+=.5*(.6*Math.sin(1.742*a.time)+.4*Math.sin(2.322*a.time));a.wave_r+=.5*(.6*Math.sin(.823*a.time)+.4*Math.sin(.916*a.time));a.wave_g+=.5*(.6*Math.sin(.9*a.time)+.4*Math.sin(1.023*a.time));a.wave_b+=.5*(.6*Math.sin(.808*a.time)+.4*Math.sin(.949*a.time));a.zoom+=.02*(.6*Math.sin(.239*a.time)+.4*Math.sin(.296*a.time));a.rot+=.028*(.6*Math.sin(.381*a.time)+.4*Math.sin(.539*a.time));a.cx+=.3*(.6*Math.sin(.374*\na.time)+.4*Math.sin(.194*a.time));a.cy+=.037*(.6*Math.sin(.274*a.time)+.4*Math.sin(.394*a.time));a.dx+=.015*(.6*Math.sin(.334*a.time)+.4*Math.sin(.277*a.time));a.dy+=.25*(.6*Math.sin(.384*a.time)+.4*Math.sin(.247*a.time));a.sx+=.015*(.6*Math.sin(.313*a.time)+.4*Math.sin(.383*a.time));a.decay-=.06*equal(mod(a.frame,50),0);a.ib_g=a.wave_r;a.ib_b=a.wave_g;a.ib_r=a.wave_b;a.ib_size+=.003*Math.sin(5*a.time);a.ob_g=a.wave_b;a.ob_b=a.wave_r;a.ob_r=a.wave_g;","pixel_eqs_str":"a.rot+=.618*a.rad*Math.sin(a.time);","init_eqs_eel":"","frame_eqs_eel":"wave_x = wave_x + 0.500*( 0.60*sin(2.121*time) + 0.40*sin(1.621*time) ); \nwave_y = wave_y + 0.500*( 0.60*sin(1.742*time) + 0.40*sin(2.322*time) ); \nwave_r = wave_r + 0.500*( 0.60*sin(0.823*time) + 0.40*sin(0.916*time) ); \nwave_g = wave_g + 0.500*( 0.60*sin(0.900*time) + 0.40*sin(1.023*time) ); \nwave_b = wave_b + 0.500*( 0.60*sin(0.808*time) + 0.40*sin(0.949*time) ); \nzoom = zoom + 0.020*( 0.60*sin(0.239*time) + 0.40*sin(0.296*time) ); \nrot = rot + 0.028*( 0.60*sin(0.381*time) + 0.40*sin(0.539*time) ); \ncx = cx + 0.30*( 0.60*sin(0.374*time) + 0.40*sin(0.194*time) ); \ncy = cy + 0.037*( 0.60*sin(0.274*time) + 0.40*sin(0.394*time) ); \ndx = dx + 0.015*( 0.60*sin(0.334*time) + 0.40*sin(0.277*time) ); \ndy = dy + .25*( 0.60*sin(0.384*time) + 0.40*sin(0.247*time) ); \nsx = sx + 0.015*( 0.60*sin(0.313*time) + 0.40*sin(0.383*time) ); \ndecay = decay - 0.06*equal(frame%50,0); \nib_g=wave_r; \nib_b=wave_g; \nib_r=wave_b; \nib_size=ib_size+.003*sin(time*5); \nob_g=wave_b; \nob_b=wave_r; \nob_r=wave_g;","pixel_eqs_eel":"rot=rot+rad*.618*sin(time);","warp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  ret_1 = (tmpvar_2.xyz + ((tmpvar_2.xyz - \n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  ) * 0.3));\n  ret_1 = (ret_1 * 0.9);\n  ret_1 = (ret_1 + ((\n    (texture (sampler_noise_lq, ((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 0.1))).xyz - 0.5)\n   / 256.0) * 28.0));\n  vec3 tmpvar_3;\n  tmpvar_3 = mix (ret_1, vec3(dot (ret_1, vec3(0.32, 0.49, 0.29))), vec3(0.04, 0.04, 0.04));\n  ret_1 = tmpvar_3;\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = tmpvar_3;\n  ret = tmpvar_4.xyz;\n }","comp":"","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_main, uv ).xyz;\n\n    // take the difference between the crisp and blurred images,\n    // then add it back into the image.  Creates spots and stripes over time.\n    ret += (ret - GetBlur1(uv))*0.3;\n    ret *= 0.9;\n\n   // add noise:\n   float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.1;// + rand_frame.xy;\n   ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0 * 28;\n\n   // desaturate over time, to keep the globs white\n   ret = lerp(ret, lum(ret), 0.04);\n}","comp_hlsl":""}