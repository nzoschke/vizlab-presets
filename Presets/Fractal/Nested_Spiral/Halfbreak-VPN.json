{"version":2,"baseVals":{"rating":5,"gammaadj":1.28,"decay":0.955,"echo_zoom":1.193,"echo_alpha":1,"wave_mode":4,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wrap":0,"brighten":1,"darken":1,"wave_a":1,"wave_scale":0,"wave_smoothing":0.9,"wave_mystery":0.173,"warpanimspeed":0.01,"warpscale":100,"zoomexp":0.92178,"fshader":0.4,"zoom":0.9901,"warp":0.01,"wave_g":0,"wave_b":0,"wave_x":0.448,"wave_y":0.122,"ob_size":0.005,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":1,"mv_y":1,"mv_dx":0.087,"mv_dy":0.343,"mv_l":1.663,"mv_r":0.89,"mv_g":0.03,"mv_b":0.881,"mv_a":0.199,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"thickoutline":1,"textured":1,"rad":1.32775,"tex_zoom":0.57959,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0},"init_eqs_str":"a.q2=0;a.my_ang=0;","frame_eqs_str":"a.border_r+=1.5*Math.sin(1.13*a.q2);a.border_b+=.5*Math.sin(1.23*a.q2);a.border_g+=.5*Math.sin(1.33*a.q2);a.my_ang+=.005+.001*a.bass;a.ang=a.my_ang;","init_eqs_eel":"","frame_eqs_eel":"border_r = border_r + 1.5*sin(q2*1.13);\nborder_b = border_b + 0.5*sin(q2*1.23);\nborder_g = border_g + 0.5*sin(q2*1.33);\n//ang = 0.503 + (bass_att * 0.04);\nmy_ang = my_ang + (0.005 + (0.001 * bass));\nang = my_ang;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":1},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":1},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":1},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.d=0;a.y3=0;a.y1=0;a.xx=0;a.q25=0;a.q12=0;a.x1=0;a.q22=0;a.q21=0;a.vx3=0;a.q6=0;a.dt=0;a.q1=0;a.q5=0;a.q9=0;a.v=0;a.vx4=0;a.mm=0;a.tt=0;a.bm=0;a.x3=0;a.q23=0;a.q24=0;a.q11=0;a.q10=0;a.xx2=0;a.q4=0;a.yy1=0;a.vy4=0;a.q26=0;a.x4=0;a.mt=0;a.r=0;a.x2=0;a.mx=0;a.mn=0;a.vy2=0;a.y2=0;a.bb=0;a.q2=0;a.q27=0;a.vx2=0;a.q3=0;a.yy=0;a.y4=0;a.q7=0;a.vy3=0;a.xx1=0;a.q8=0;a.x1=.9;a.y1=.5;a.x2=.5;a.y2=.5;a.x3=.5;a.y3=.5;a.x4=.5;a.y4=.5;","frame_eqs_str":"a.zoom=1;a.warp=0;a.wave_a=0;a.xx1=.9*a.xx1+.01*a.bass;a.xx2=.9*a.xx2+.01*a.treb;a.yy1=.94*a.yy1+.0075*(a.treb+a.bass);a.x1=.5+2*(a.xx1-a.xx2);a.y1=.4+1.5*a.yy1;a.dt=div(.03,a.fps);a.vx2=a.vx2*(1-2*a.dt)+10*a.dt*(a.x1+a.x3-2*a.x2);a.vy2=a.vy2*(1-2*a.dt)+a.dt*(10*(a.y1+a.y3-2*a.y2)-.5);a.vx3=a.vx3*(1-2*a.dt)+10*a.dt*(a.x2+a.x4-2*a.x3);a.vy3=a.vy3*(1-2*a.dt)+a.dt*(10*(a.y2+a.y4-2*a.y3)-.5);a.vx4=a.vx4*(1-2*a.dt)+10*a.dt*(a.x3-a.x4);a.vy4=a.vy4*(1-2*a.dt)+a.dt*(10*(a.y3-a.y4)-\n.5);a.x2+=a.vx2;a.y2+=a.vy2;a.x3+=a.vx3;a.y3+=a.vy3;a.x4+=a.vx4;a.y4+=a.vy4;a.vx2=.00001<Math.abs(above(a.x2,0))?a.vx2:.5*Math.abs(a.vx2);a.vx2=.00001<Math.abs(below(a.x2,1))?a.vx2:.5*-Math.abs(a.vx2);a.vx3=.00001<Math.abs(above(a.x3,0))?a.vx3:.5*Math.abs(a.vx3);a.vx3=.00001<Math.abs(below(a.x3,1))?a.vx3:.5*-Math.abs(a.vx3);a.vx4=.00001<Math.abs(above(a.x4,0))?a.vx4:.5*Math.abs(a.vx4);a.vx4=.00001<Math.abs(below(a.x4,1))?a.vx4:.5*-Math.abs(a.vx4);a.vy2=.00001<Math.abs(above(a.y2,0))?a.vy2:.5*Math.abs(a.vy2);\na.vy2=.00001<Math.abs(below(a.y2,1))?a.vy2:.5*-Math.abs(a.vy2);a.vy3=.00001<Math.abs(above(a.y3,0))?a.vy3:.5*Math.abs(a.vy3);a.vy3=.00001<Math.abs(below(a.y3,1))?a.vy3:.5*-Math.abs(a.vy3);a.vy4=.00001<Math.abs(above(a.y4,0))?a.vy4:.5*Math.abs(a.vy4);a.vy4=.00001<Math.abs(below(a.y4,1))?a.vy4:.5*-Math.abs(a.vy4);a.q1=a.x1;a.q2=a.x2;a.q3=a.x3;a.q4=a.x4;a.q5=a.y1;a.q6=a.y2;a.q7=a.y3;a.q8=a.y4;a.q9=div(1,a.aspectx);a.q10=div(1,a.aspecty);a.q11=a.aspectx;a.q12=a.aspecty;a.bb=.99*a.bb+.02*a.bass;a.mm=.99*\na.mm+.02*a.mid;a.tt=.99*a.tt+.02*a.treb;a.mx=Math.max(Math.max(a.bb,a.mm),a.tt);a.mn=Math.min(Math.min(a.bb,a.mm),a.tt);a.ob_r=div(a.bb-a.mn,a.mx-a.mn);a.ob_b=div(a.mm-a.mn,a.mx-a.mn);a.ob_g=div(a.tt-a.mn,a.mx-a.mn);a.v=div(.4,a.fps);a.bm+=(a.ob_r-a.ob_b)*a.v;a.mt+=(a.ob_b-a.ob_g)*a.v;a.q21=.5;a.q22=0;a.q23=-.5;a.q24=0;a.q25=div(.5,Math.asin(1));a.q26=-a.bm;a.q27=a.mt;","pixel_eqs_str":"a.x=.5+(a.x-.5)*a.q11;a.y=.5+(a.y-.5)*a.q12;a.xx=a.q4;a.yy=1-a.q8;a.dx=0;a.dy=0;a.d=sqrt((a.x-a.xx)*(a.x-a.xx)+(a.y-a.yy)*(a.y-a.yy));a.r=.11;a.v=20;a.dx=a.v*(Math.sin(a.y-a.yy)*(a.d-a.r)-(a.x-a.xx)*(a.d-div(a.r,2)))*(1-sigmoid(a.d-a.r,100));a.dy=-a.v*(Math.sin(a.x-a.xx)*(a.d-a.r)+(a.y-a.yy)*(a.d-div(a.r,2)))*(1-sigmoid(a.d-a.r,100));","init_eqs_eel":"x1 = 0.9;\ny1 = 0.5;\n\nx2 = 0.5; y2 = 0.5;\nx3 = 0.5; y3 = 0.5;\nx4 = 0.5; y4 = 0.5;","frame_eqs_eel":"zoom = 1;\nwarp = 0;\nwave_a = 0;\n\n// elastic thread code\n\nxx1 = xx1*0.9 + (bass)*0.01;\nxx2 = xx2*0.9 + (treb)*0.01;\nyy1 = yy1*0.94 + (treb+bass)*0.0075;\nx1 = 0.5 + (xx1-xx2)*2;\ny1 = 0.4 + yy1*1.5;\ndt = 0.03/fps;\nvx2 = vx2*(1-2*dt) + dt*((x1+x3-2*x2)*10);\nvy2 = vy2*(1-2*dt) + dt*((y1+y3-2*y2)*10-0.5);\nvx3 = vx3*(1-2*dt) + dt*((x2+x4-2*x3)*10);\nvy3 = vy3*(1-2*dt) + dt*((y2+y4-2*y3)*10-0.5);\nvx4 = vx4*(1-2*dt) + dt*((x3-x4)*10);\nvy4 = vy4*(1-2*dt) + dt*((y3-y4)*10-0.5);\nx2 = x2 + vx2; y2 = y2 + vy2;\nx3 = x3 + vx3; y3 = y3 + vy3;\nx4 = x4 + vx4; y4 = y4 + vy4;\nvx2 = if(above(x2,0),vx2,abs(vx2)*0.5);\nvx2 = if(below(x2,1),vx2,-abs(vx2)*0.5);\nvx3 = if(above(x3,0),vx3,abs(vx3)*0.5);\nvx3 = if(below(x3,1),vx3,-abs(vx3)*0.5);\nvx4 = if(above(x4,0),vx4,abs(vx4)*0.5);\nvx4 = if(below(x4,1),vx4,-abs(vx4)*0.5);\nvy2 = if(above(y2,0),vy2,abs(vy2)*0.5);\nvy2 = if(below(y2,1),vy2,-abs(vy2)*0.5);\nvy3 = if(above(y3,0),vy3,abs(vy3)*0.5);\nvy3 = if(below(y3,1),vy3,-abs(vy3)*0.5);\nvy4 = if(above(y4,0),vy4,abs(vy4)*0.5);\nvy4 = if(below(y4,1),vy4,-abs(vy4)*0.5);\nq1 = x1;q2 = x2;q3 = x3;q4 = x4;\nq5 = y1;q6 = y2;q7 = y3;q8 = y4;\nq9 = 1/aspectx;\nq10 = 1/aspecty;\nq11 = aspectx;\nq12 = aspecty;\n\n// coloring borders\nbb = bb*0.99 + bass*0.02;\nmm = mm*0.99 + mid*0.02;\ntt = tt*0.99 + treb*0.02;\n\nmx = max(max(bb,mm),tt);\nmn = min(min(bb,mm),tt);\n\nob_r = (bb-mn)/(mx-mn);\nob_b = (mm-mn)/(mx-mn);\nob_g = (tt-mn)/(mx-mn);\n\nv = 0.4/fps;\nbm = bm + (ob_r-ob_b)*v;\nmt = mt + (ob_b-ob_g)*v;\n\n// coordinates spiral 1\nq21 = 0.5; // X\nq22 = 0; // Y\n\n// coordinates spiral 2\nq23 = -0.5;\nq24 = 0;\n\nq25 = 0.5/asin(1); // pi/4\n\nq26 = -bm; // rotation\nq27 = mt; // growth","pixel_eqs_eel":"x = 0.5 + (x-0.5)*q11;\ny = 0.5 + (y-0.5)*q12;\nxx = q4;\nyy = 1-q8;\n\ndx = 0; dy = 0;\n\nd = sqrt((x-xx)*(x-xx)+(y-yy)*(y-yy));\n\nr = 0.11;\nv = 20;\ndx = (v*(sin(y-yy)*(d-r)-(x-xx)*(d-r/2)))*(1.00-sigmoid(d-r,100));\ndy = (-v*(sin(x-xx)*(d-r)+(y-yy)*(d-r/2)))*(1.00-sigmoid(d-r,100));","warp":"vec2 xlat_mutableball;\nvec2 xlat_mutablers;\nvec2 xlat_mutableuv1;\nvec2 xlat_mutableuv6;\n shader_body { \n  vec2 uv_1;\n  vec3 ret_2;\n  xlat_mutableuv1 = ((uv_orig - 0.5) * aspect.xy);\n  float tmpvar_3;\n  tmpvar_3 = ((18.0 * sqrt(\n    dot (xlat_mutableuv1, xlat_mutableuv1)\n  )) + time);\n  xlat_mutablers = (clamp ((\n    (sin(tmpvar_3) / cos(tmpvar_3))\n   * \n    normalize(xlat_mutableuv1)\n  ), vec2(-5.0, -5.0), vec2(5.0, 5.0)) / 2.0);\n  vec2 tmpvar_4;\n  tmpvar_4.x = q9;\n  tmpvar_4.y = q10;\n  xlat_mutableball = (xlat_mutableuv1 - tmpvar_4);\n  float tmpvar_5;\n  tmpvar_5 = clamp ((1.0 - (\n    sqrt(dot (xlat_mutableball, xlat_mutableball))\n   / 0.035)), 0.0, 1.0);\n  float tmpvar_6;\n  tmpvar_6 = float((tmpvar_5 >= 0.001));\n  xlat_mutablers = ((q28 * xlat_mutablers) + ((1.0 - q28) * xlat_mutablers.yx));\n  uv_1 = (uv_orig + ((\n    ((1.0 - tmpvar_6) * 0.03)\n   * xlat_mutablers.yx) + (\n    ((0.6 * tmpvar_6) * tmpvar_5)\n   * \n    normalize(xlat_mutableball)\n  )));\n  mat2 tmpvar_7;\n  tmpvar_7[uint(0)] = _qb.xy;\n  tmpvar_7[1u] = _qb.zw;\n  xlat_mutableuv6 = (xlat_mutableuv1 * tmpvar_7);\n  ret_2 = (((\n    (texture (sampler_main, uv_1).xyz - (((texture (sampler_blur1, \n      fract(uv_1)\n    ).xyz * scale1) + bias1) * 0.03))\n   + \n    (vec3(1.0, 0.84, 0.6) * ((0.08 * abs(vec3(\n      (0.12 / sqrt(xlat_mutableuv6.x))\n    ))) - (tmpvar_5 * (0.2 + \n      (0.3 * slow_roam_cos.xyz)\n    ))))\n  ) * 0.9) - 0.018);\n  vec4 tmpvar_8;\n  tmpvar_8 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * xlat_mutableuv6.xyy) * (\n    (q27 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q29)));\n  if (((ret_2.x > (q21 * q13)) && (ret_2.x <= (q24 * q11)))) {\n    ret_2.y = (ret_2.y + (tmpvar_8.x * 0.5));\n  };\n  if (((ret_2.y > (q22 * q11)) && (ret_2.y <= (q25 * q12)))) {\n    ret_2.z = (ret_2.z + (tmpvar_8.y * 0.5));\n  };\n  if (((ret_2.z > (q23 * q12)) && (ret_2.z <= (q26 * q13)))) {\n    ret_2.x = (ret_2.x + (tmpvar_8.z * 0.5));\n  };\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ret_2;\n  ret = tmpvar_9.xyz;\n }","comp":" shader_body { \n  vec2 uv3_1;\n  vec2 uv2_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = ((uv - 0.5) * aspect.xy);\n  float tmpvar_4;\n  tmpvar_4 = (0.1 / (sqrt(\n    dot (tmpvar_3, tmpvar_3)\n  ) + 0.1));\n  vec2 tmpvar_5;\n  float tmpvar_6;\n  tmpvar_6 = (ang / 3.14);\n  tmpvar_5.x = tmpvar_6;\n  tmpvar_5.y = (q27 * tmpvar_4);\n  float tmpvar_7;\n  tmpvar_7 = (0.1 * q30);\n  uv2_2.y = (tmpvar_5.y + tmpvar_7);\n  uv2_2.x = (tmpvar_6 + (0.2 * time));\n  vec2 tmpvar_8;\n  tmpvar_8.x = tmpvar_6;\n  tmpvar_8.y = (4.0 * tmpvar_4);\n  uv3_1.x = tmpvar_8.x;\n  uv3_1.y = (tmpvar_8.y - tmpvar_7);\n  float tmpvar_9;\n  tmpvar_9 = clamp ((1.0 - (4.0 * rad)), 0.0, 1.0);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = (((\n    (3.0 * max (((2.0 * texture (sampler_main, \n      fract(uv2_2)\n    ).xyz) + texture (sampler_main, fract(uv3_1)).xyz), ((2.0 * \n      ((texture (sampler_blur2, fract(uv2_2)).xyz * scale2) + bias2)\n    ) + (\n      (texture (sampler_blur2, fract(uv3_1)).xyz * scale2)\n     + bias2))))\n   * rad) + (\n    ((vec3(0.0, 0.0, 1.0) * uv.y) * pow ((1.0 - rad), 8.0))\n   * tmpvar_9)) + ((tmpvar_9 * 2.0) * (\n    (texture (sampler_blur1, fract(uv)).xyz * scale1)\n   + bias1)));\n  ret = tmpvar_10.xyz;\n }","warp_hlsl":"float3 mus;\nfloat2 rs,ball, uv1, uv6, uv7;\nfloat dx,dy;\nshader_body {\nuv = uv_orig;\nuv1 = (uv-.5) * aspect.xy;\n\n//GOLD\nfloat z = 18*length(uv1)+time;\nfloat2 uvn =normalize(uv1);\nrs = clamp(tan(z)*uvn,-5,5)/2;\n\n// KUGEL\nfloat2 p0 = float2(q9,q10);\nball = uv1 - p0;\nfloat size = .035;\nfloat dist = length(ball)  / size;\nz = saturate(1-dist);\n\n//ADD\nfloat mask = (z >= .001); \nrs = q28*rs + (1-q28)*rs.yx;\nuv += (1-mask)*.03*(rs.yx) + .6*mask*z*normalize(ball);\n\n\nuv6 = mul (uv1,float2x2(_qb));\nmus = (.12/(sqrt(uv6.x)));\nmus = .08*abs(mus) - z* (.2 + .3*slow_roam_cos.xyz);\n\nfloat3 gold = float3 (1,.84,.6); \n\n//float2 uv2 = .7*uv1+.3*float2 (sin(uv1.y*16), sin(uv1.x*16));\n//uv2 *= .2;\n//float3 dots = q26*saturate(.0015/(length(uv2)));\n\nfloat3 col = gold;\n\nfloat3 blur = GetBlur1(frac(uv));\nfloat3 crisp= tex2D(sampler_main,uv);\n\nfloat3 ret1 = crisp - blur*.03 + col*(mus);\nret = ret1*.9-.018;\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv6.xyy*q27\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q29\n                     );\nif(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y += (noise9).x*.5; \nif(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z += (noise9).y*.5; \nif(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x += (noise9).z*.5; \n}","comp_hlsl":"shader_body\n{\nfloat2 uv1 = (uv-0.5)*aspect.xy;\n\nfloat rad2 = length(uv1) + .1;\nfloat rad1 = .1/rad2 ;\n\nfloat2 uv2 = float2 (ang/3.14, q27*rad1);\nuv2.y = uv2.y  +.1*q30;\nuv2.x = uv2.x  +.2*time;\n\nfloat2 uv3 = float2 (ang/3.14, 4*rad1);\nuv3.y = uv3.y  -.1*q30;\n\n\nfloat3 crisp = 2*GetPixel(frac(uv2)) + GetPixel(frac(uv3));\ncrisp = max(crisp,2*GetBlur2(frac(uv2)) + GetBlur2(frac(uv3)));\n\nfloat3 lay1 = float3 (0,0,1)*uv.y*pow(1-rad,8);\n\ncrisp = 3*crisp * pow(rad,1);\nfloat mask = saturate(1-4*rad);\n\nret = crisp + lay1*mask + mask * 2*GetBlur1(frac(uv));\n\n}"}