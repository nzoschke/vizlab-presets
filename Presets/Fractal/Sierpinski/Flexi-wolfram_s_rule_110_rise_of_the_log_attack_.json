{"version":2,"baseVals":{"rating":5,"gammaadj":1.56,"decay":1,"echo_zoom":0.362,"echo_orient":1,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"fshader":1,"zoom":1.0039,"warp":0.19788,"sx":0.99967,"sy":0.9999,"wave_g":0.65,"wave_b":0.65,"ob_size":0.5,"ob_a":1,"ib_size":0.5,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":1.28,"mv_y":1.44,"mv_dy":0.3,"mv_l":0,"mv_a":0.5},"shapes":[{"baseVals":{"sides":5,"additive":1,"num_inst":2,"x":0.49,"rad":0.11589,"tex_zoom":4.36077,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = rand(1000)/1000;\ny = rand(1000)/1000;\nang = rand(150)/100;","init_eqs_eel":"","frame_eqs_eel":"x = rand(1000)/1000;\ny = rand(1000)/1000;\nang = rand(150)/100;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"thick":1,"r":0,"g":0.3,"b":0.75,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"ma=ma+(above(bass,1)*3.1415*.01*bass);\nma=ma-(above(treb,1)*3.1415*.01*treb);\n\nmx=mx+(.0002*cos(ma));\nmy=my+(.0002*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.8));","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,1)*3.1415*.01*bass);\nma=ma-(above(treb,1)*3.1415*.01*treb);\n\nmx=mx+(.0002*cos(ma));\nmy=my+(.0002*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.8));"},{"baseVals":{"thick":1,"r":0,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"ma=ma+(above(bass,1)*3.1415*.05*bass);\nma=ma-(above(mid,1)*3.1415*.05*mid);\n\nmx=mx+(.0001*cos(ma));\nmy=my+(.0001*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.1));","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,1)*3.1415*.05*bass);\nma=ma-(above(mid,1)*3.1415*.05*mid);\n\nmx=mx+(.0001*cos(ma));\nmy=my+(.0001*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.1));"},{"baseVals":{"thick":1,"g":0.5,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"ma=ma+(above(mid,1)*3.1415*.01*mid);\nma=ma-(above(treb,1)*3.1415*.01*treb);\n\nmx=mx+(.0004*cos(ma));\nmy=my+(.0004*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.3));","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(mid,1)*3.1415*.01*mid);\nma=ma-(above(treb,1)*3.1415*.01*treb);\n\nmx=mx+(.0004*cos(ma));\nmy=my+(.0004*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.3));"},{"baseVals":{"thick":1,"r":0.4,"g":0,"b":0.6,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"ma=ma+(above(bass,.5)*3.1415*.02*bass);\nma=ma-(above(treb,.5)*3.1415*.02*treb);\n\nmx=mx+(.0008*cos(ma));\nmy=my+(.0008*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.2));","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ma=ma+(above(bass,.5)*3.1415*.02*bass);\nma=ma-(above(treb,.5)*3.1415*.02*treb);\n\nmx=mx+(.0008*cos(ma));\nmy=my+(.0008*sin(ma));\n\nmx=if(above(mx,.9),(.9-mx),mx);\nmy=if(above(my,.9),(.9-my),my);\nmx=if(below(mx,.1),(.9+mx),mx);\nmy=if(below(my,.1),(.9+my),my);\n\nx=mx;\ny=my;\n\na=(above(bass+mid+treb,.2));"}],"init_eqs_str":"a.n=0;a.y1=0;a.x1=0;a.dy1=0;a.q1=0;a.v=0;a.angle=0;a.initframes=0;a.initializing=0;a.t=0;a.framecount=0;a.stages=0;a.dx1=0;a.stage=0;a.initialized=0;a.framecount=0;a.stage=1;a.initframes=128;a.stages=16;","frame_eqs_str":"a.initializing=below(a.framecount,a.initframes);a.ib_a=1-a.framecount;a.ob_a=a.ib_a;a.mv_a=1;a.wave_a=0;a.warp=0;a.zoom=1;a.framecount+=1;a.stage+=equal(mod(a.framecount*a.stages,a.initframes),0);a.stage=.00001<Math.abs(a.initializing)?a.stage:1;a.q1=a.stage;","pixel_eqs_str":"a.angle=Math.asin(1)*(.5+Math.sin(.05*a.time));a.x1=(a.x-.5)*a.aspectx;a.y1=(a.y-.5)*a.aspecty;a.x=Math.cos(-a.angle)*a.x1-Math.sin(-a.angle)*a.y1;a.y=Math.sin(-a.angle)*a.x1+Math.cos(-a.angle)*a.y1;a.t=.25*a.time;a.v=.0005;a.n=11;a.dx=a.v*Math.sin(a.y*a.n+a.t);a.dy=a.v*Math.sin(a.x*a.n+a.t);a.dx1=Math.cos(a.angle)*a.dx-Math.sin(a.angle)*a.dy;a.dy1=Math.sin(a.angle)*a.dx+Math.cos(a.angle)*a.dy;a.dx=a.dx1*a.aspectx;a.dy=a.dy1*a.aspecty;","init_eqs_eel":"initialized = 0;\nframecount = 0;\nstage = 1;\n\ninitframes = 128;\nstages = 16;","frame_eqs_eel":"initializing = below(framecount,initframes);\n\nib_a = 1-framecount;\nob_a = ib_a;\nmv_a = 1;//initializing;\n\nwave_a = 0;\nwarp = 0;\nzoom = 1.0;\n\nframecount = framecount + 1;\nstage = stage + equal((framecount*stages)%initframes,0);\nstage = if(initializing,stage,1);\nq1 = stage;","pixel_eqs_eel":"// have a nice warp effect? - rotate it like a shape!\n\n  angle = asin(1)*(0.5+sin(time*0.05));\n\n/////////////////////////////////////////////////////////\nX1 = (x-0.5)*aspectx; // center\nY1 = (y-0.5)*aspecty;\nx = cos(-angle)*X1 -sin(-angle)*Y1; // rotate the original x/y coordinates\ny = sin(-angle)*X1 +cos(-angle)*Y1;\n/////////////////////////////////////////////////////////\n// x = x + 0.5;\n// y = y + 0.5;\n// place your original code below (so far center is at 0,0)\n\n\n  t = time*0.25;\n  v = 0.0005;\n  n = 11;\n\n  dx = v*sin(y*n+t); // these are the 2 lines for my mushroom motion\n  dy = v*sin(x*n+t); // insert your per-vertex-code-to-rotate here (and shift back center to 0.5/0.5 if needed)\n\n\n\n/////////////////////////////////////////////////////////\ndx1 = cos(angle)*dx - sin(angle)*dy; // and finally rotate the resulting vector for the rotated domain\ndy1 = sin(angle)*dx + cos(angle)*dy;\ndx = dx1*aspectx;\ndy = dy1*aspecty;\n/////////////////////////////////////////////////////////","warp":" shader_body { \n  vec2 uv_1;\n  uv_1 = (uv_orig - ((vec2(0.0, 1.0) * texsize.zw) * q1));\n  vec2 tmpvar_2;\n  tmpvar_2 = (vec2(1.0, 0.0) * texsize.zw);\n  vec3 tmpvar_3;\n  tmpvar_3 = vec3(greaterThan (vec3(dot (texture (sampler_fw_main, \n    (uv_1 - tmpvar_2)\n  ), vec4(0.32, 0.49, 0.29, 0.0))), vec3(0.5, 0.5, 0.5)));\n  vec3 tmpvar_4;\n  tmpvar_4 = vec3(greaterThan (vec3(dot (texture (sampler_fw_main, \n    (uv_1 + tmpvar_2)\n  ), vec4(0.32, 0.49, 0.29, 0.0))), vec3(0.5, 0.5, 0.5)));\n  vec3 tmpvar_5;\n  tmpvar_5 = vec3(greaterThan (vec3(dot (texture (sampler_fw_main, uv_1), vec4(0.32, 0.49, 0.29, 0.0))), vec3(0.5, 0.5, 0.5)));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ((tmpvar_3 * (\n    (tmpvar_5 * (1.0 - tmpvar_4))\n   + \n    ((1.0 - tmpvar_5) * tmpvar_4)\n  )) + ((1.0 - tmpvar_3) * (1.0 - \n    (((1.0 - tmpvar_3) * (1.0 - tmpvar_5)) * (1.0 - tmpvar_4))\n  ))).xxx;\n  ret = tmpvar_6.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = texture (sampler_main, uv).xyz;\n  ret = tmpvar_1.xyz;\n }","warp_hlsl":"shader_body\n{\n\nfloat2 d = texsize.zw;\n\nuv = uv_orig - float2(0,1)*d*q1;\n\nfloat3 left = lum(tex2d(sampler_fw_main, uv - float2(1,0)*d));\nfloat3 right = lum(tex2d(sampler_fw_main, uv + float2(1,0)*d));\nfloat3 it = lum(tex2d(sampler_fw_main, uv));\n\nleft = left > 0.5;\nright = right >0.5;\nit = it > 0.5;\nfloat wolfram110 = left*( it*(1-right) + (1-it)*right) + (1-left)*(1-(1-left)*(1-it)*(1-right));\nfloat wolfram90 = left*(1-right) + (1-left)*right;\nret = wolfram110;\nuv_orig *= texsize - texsize.zw*10;\n}","comp_hlsl":"shader_body\n{\nret=GetPixel(uv);\n}"}