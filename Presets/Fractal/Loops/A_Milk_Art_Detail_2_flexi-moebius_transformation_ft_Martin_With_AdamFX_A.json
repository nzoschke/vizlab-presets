{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.95,"echo_zoom":0.498,"echo_orient":3,"additivewave":1,"wave_brighten":0,"wave_a":0.001,"wave_scale":0.01,"wave_smoothing":0.63,"wave_mystery":-1,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"zoom":13.29089,"dx":-0.28,"dy":-0.32,"warp":0.00909,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0,"ob_a":1,"ib_size":0,"ib_r":1,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":12.8,"mv_y":9.6,"mv_l":1,"mv_g":0.91,"mv_b":0.71,"mv_a":0},"shapes":[{"baseVals":{"sides":100,"rad":0.49138,"r":0,"g":1,"b":1,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x=.5;y=.5;","init_eqs_eel":"","frame_eqs_eel":"x=.5;y=.5;"},{"baseVals":{"sides":24,"textured":1,"y":1.8,"rad":0.0112,"tex_zoom":0.81954,"g":1,"r2":1,"b2":1,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"tex_ang=0.01;\nx=.5-q4;\ny=.5-q5;","init_eqs_eel":"","frame_eqs_eel":"tex_ang=0.01;\nx=.5-q4;\ny=.5-q5;"},{"baseVals":{"sides":34,"textured":1,"rad":0.22167,"tex_zoom":0.40839,"g":1,"b":1,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x=.5+q4;y=.5+q5;\nrad=sin(time);;","init_eqs_eel":"","frame_eqs_eel":"x=.5+q4;y=.5+q5;\nrad=sin(time);;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.c_inv_i=0;a.translation_x=0;a.a_i=0;a.c_r=0;a.a_r=0;a.iangle=0;a.scale=0;a.q6=0;a.ac_i=0;a.itranslation_u=0;a.q1=0;a.itranslation_v=0;a.q5=0;a.c_inv_r=0;a.d_i=0;a.angle=0;a.mu_i=0;a.bcad_r=0;a.iscale=0;a.q4=0;a.b_r=0;a.mu_r=0;a.bcad_i=0;a.c_i=0;a.q2=0;a.ac_r=0;a.translation_y=0;a.q3=0;a.b_i=0;a.q7=0;a.d_r=0;a.q8=0;a.zoom=1;a.xpos=0;a.ypos=0;","frame_eqs_str":"a.scale=1;a.angle=.2*a.time;a.translation_x=0;a.translation_y=.1;a.iscale=1;a.iangle=.2;a.itranslation_u=0;a.itranslation_v=0;a.a_r=Math.cos(a.angle)*a.scale;a.a_i=Math.sin(a.angle)*a.scale;a.b_r=a.translation_x;a.b_i=a.translation_y;a.c_r=-Math.cos(a.iangle)*a.iscale;a.c_i=-Math.sin(a.iangle)*a.iscale;a.d_r=a.itranslation_u;a.d_i=a.itranslation_v;a.c_inv_r=div(a.c_r,a.c_r*a.c_r+a.c_i*a.c_i);a.c_inv_i=div(a.c_i,a.c_r*a.c_r+a.c_i*a.c_i);a.ac_r=a.a_r*a.c_inv_r-a.a_i*a.c_inv_i;\na.ac_i=a.a_r*a.c_inv_i-a.a_i*a.c_inv_r;a.bcad_r=a.b_r*a.c_r-a.b_i*a.c_i-(a.a_r*a.d_r-a.a_i*a.d_i);a.bcad_i=a.b_r*a.c_i-a.b_i*a.c_r-(a.a_r*a.d_i-a.a_i*a.d_r);a.mu_r=a.bcad_r*a.c_inv_r-a.bcad_i*a.c_inv_i;a.mu_i=a.bcad_r*a.c_inv_i-a.bcad_i*a.c_inv_r;a.q1=a.ac_r;a.q2=a.ac_i;a.q3=a.mu_r;a.q4=a.mu_i;a.q5=a.c_r;a.q6=a.c_i;a.q7=a.d_r;a.q8=a.d_i;a.monitor=a.bcad_r;","pixel_eqs_str":"","init_eqs_eel":"zoom=1;\nxpos=0;\nypos=0;","frame_eqs_eel":"//before inversion\nscale = 1;\nangle = time*.2;\ntranslation_x = 0;\ntranslation_y = 0.1;\n\n//complex inverted\niscale = 1;\niangle = 0.2;\nitranslation_u = 0;\nitranslation_v = 0;\n\n\n// the mï¿½bius transformation\n// z -> (az+b)/(cz-d); where a,b,c,d are complex numbers and z will be the uv-vector\n// (az+b)/(cz-d) = a/c + mu/(cz+d), with mu = (bc-ad)/c\n// so a/c and mu can be calculated outside of the shader\n\na_r = cos(angle)*scale;\na_i = sin(angle)*scale;\nb_r = translation_x;\nb_i = translation_y;\n\nc_r = -cos(iangle)*iscale;\nc_i = -sin(iangle)*iscale;\nd_r = itranslation_u;\nd_i = itranslation_v;\n\n// c^(-1)\nc_inv_r = c_r/(c_r*c_r+c_i*c_i);\nc_inv_i = c_i/(c_r*c_r+c_i*c_i);\n\n// a*c^(-1)\nac_r = (a_r*c_inv_r - a_i*c_inv_i);\nac_i = (a_r*c_inv_i - a_i*c_inv_r);\n\n// (bc-ad)\nbcad_r = (b_r*c_r - b_i*c_i)-(a_r*d_r-a_i*d_i);\nbcad_i = (b_r*c_i - b_i*c_r)-(a_r*d_i-a_i*d_r);\n\n// mu*c^(-1)\nmu_r = bcad_r*c_inv_r - bcad_i*c_inv_i;\nmu_i = bcad_r*c_inv_i - bcad_i*c_inv_r;\n\nq1 = ac_r;\nq2 = ac_i;\nq3 = mu_r;\nq4 = mu_i;\n\nq5 = c_r;\nq6 = c_i;\nq7 = d_r;\nq8 = d_i;\n\nmonitor = bcad_r;","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 uv6_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = ((uv - 0.5) * aspect.xy);\n  float tmpvar_3;\n  tmpvar_3 = (rand_frame * 64.0).x;\n  uv6_1 = (0.5 * cos((\n    ((tmpvar_2 * mat2(0.7, -0.7, 0.7, 0.7)) * 17.0)\n   + \n    (rand_frame * 6.0)\n  .xy)));\n  float x_4;\n  x_4 = (uv6_1.x + uv6_1.y);\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = ((0.147 * (\n    (texture (sampler_main, (uv + clamp ((\n      (sin(tmpvar_3) / cos(tmpvar_3))\n     * \n      normalize(tmpvar_2)\n    ), vec2(-8.0, -8.0), vec2(8.0, 8.0)))).xyz + (0.15 * (vec3((0.01 / \n      sqrt((x_4 * x_4))\n    )) * roam_cos.xyz)))\n   - 0.02)) + ((0.85 * \n    (texture (sampler_main, uv_orig).xyz - 0.002)\n  ) * q32));\n  ret = tmpvar_5.xyz;\n }","comp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1.x = q1;\n  tmpvar_1.y = q2;\n  vec2 tmpvar_2;\n  tmpvar_2.x = q7;\n  tmpvar_2.y = q8;\n  vec2 tmpvar_3;\n  tmpvar_3 = ((uv - 0.5) * aspect.wz);\n  vec2 tmpvar_4;\n  tmpvar_4.x = ((tmpvar_3.x * q5) - (tmpvar_3.y * q6));\n  tmpvar_4.y = ((tmpvar_3.x * q6) - (tmpvar_3.y * q5));\n  vec2 tmpvar_5;\n  tmpvar_5 = ((tmpvar_4 * aspect.yx) + tmpvar_2);\n  vec2 tmpvar_6;\n  tmpvar_6.x = ((q3 * tmpvar_5.x) + (q4 * tmpvar_5.y));\n  tmpvar_6.y = ((q4 * tmpvar_5.x) - (q3 * tmpvar_5.y));\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = texture (sampler_fc_main, (0.5 + ((\n    (1.0 - abs(((\n      fract((((tmpvar_6 / \n        ((tmpvar_5.x * tmpvar_5.x) + (tmpvar_5.y * tmpvar_5.y))\n      ) + tmpvar_1) * 0.5))\n     * 2.0) - 1.0)))\n   - 0.5) * 0.99))).xyz;\n  ret = tmpvar_7.xyz;\n }","warp_hlsl":"sampler sampler_worms;\nfloat3 color, mus;\nfloat dx,dy;\nshader_body {\nfloat2 uv1 = (uv-.5) * aspect.xy;\n\n\nfloat2 uv6 = uv1;\nfloat z = 0*length(uv1)+rand_frame * 64;\nfloat2 d = normalize(uv1);\nfloat clp = 8;\nfloat2 rs = clamp(tan(z)*d,-clp,clp);\nuv += rs;\n\nuv1 = mul(uv1,float2x2(.7,.7,-.7,.7));\n\nuv6 = .5*cos(uv1*17+rand_frame*6);\nmus = .01/(length(uv6.x+uv6.y));\nmus *= roam_cos;\n\nfloat3 crisp= tex2D(sampler_main,uv);\n\nfloat3 ret1 = crisp + .15*mus;\nq25 = q24; q25 = .15;\nret = q25*(ret1-.02)*.98 + (1-q25)* (GetPixel(uv_orig)-.002) * q32;\n}","comp_hlsl":"shader_body\n{\n\nfloat2 ac = float2(q1,q2);\nfloat2 mu = float2(q3,q4);\nfloat2 c = float2(q5,q6);\nfloat2 d = float2(q7,q8);\n\nfloat2 z = (uv-0.5)*aspect.wz;\n\n// (c*z + d)\nfloat2 czd = float2(z.x*c.x-z.y*c.y,z.x*c.y-z.y*c.x)*aspect.yx + d;\n// mu/(cz+d)\nfloat2 moebius = float2( mu.x*czd.x + mu.y*czd.y , mu.y*czd.x-mu.x*czd.y )/(czd.x*czd.x+czd.y*czd.y) + ac;\n\nmoebius = 0.5 + (1.0 - abs( frac( moebius * 0.5 ) * 2 - 1.0 )-0.5)*0.99;\n\nret = tex2D(sampler_fc_main, moebius );\n}"}