{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.95,"echo_zoom":0.55,"echo_alpha":0.5,"echo_orient":1,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":4.1,"wave_scale":1.157,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"zoomexp":0.8428,"fshader":1,"zoom":0.87822,"warp":0.01,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0.03,"ib_size":0.26,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":74,"thickoutline":1,"textured":1,"x":0.8,"y":0.2,"rad":0.60857,"tex_ang":3.14159,"tex_zoom":0.75681,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_b":0,"border_a":0},"init_eqs_str":"a.q1=0;a.t1=.01*Math.floor(rand(100));a.t2=.01*Math.floor(rand(100));a.te=1;a.poly=5;","frame_eqs_str":"a.ang=-a.q1;","init_eqs_eel":"t1 = int(rand(100))*0.01;\nt2 = int(rand(100))*0.01;\nte = 1;\npoly = 5;","frame_eqs_eel":"ang = -q1;"},{"baseVals":{"enabled":1,"sides":74,"thickoutline":1,"textured":1,"x":0.2,"y":0.8,"rad":0.60857,"tex_ang":3.14159,"tex_zoom":0.75681,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_b":0,"border_a":0},"init_eqs_str":"a.q1=0;a.t1=.01*Math.floor(rand(100));a.t2=.01*Math.floor(rand(100));a.te=1;a.poly=5;","frame_eqs_str":"a.ang=-a.q1;","init_eqs_eel":"t1 = int(rand(100))*0.01;\nt2 = int(rand(100))*0.01;\nte = 1;\npoly = 5;","frame_eqs_eel":"ang = -q1;"},{"baseVals":{"enabled":1,"sides":74,"thickoutline":1,"textured":1,"x":0.2,"y":0.2,"rad":0.60857,"tex_ang":3.14159,"tex_zoom":0.75681,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_b":0,"border_a":0},"init_eqs_str":"a.q1=0;a.t1=.01*Math.floor(rand(100));a.t2=.01*Math.floor(rand(100));a.te=1;a.poly=5;","frame_eqs_str":"a.ang=a.q1;","init_eqs_eel":"t1 = int(rand(100))*0.01;\nt2 = int(rand(100))*0.01;\nte = 1;\npoly = 5;","frame_eqs_eel":"ang = q1;"},{"baseVals":{"enabled":1,"sides":74,"thickoutline":1,"textured":1,"x":0.8,"y":0.8,"rad":0.60857,"tex_ang":3.14159,"tex_zoom":0.75681,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_b":0,"border_a":0},"init_eqs_str":"a.q1=0;a.t1=.01*Math.floor(rand(100));a.t2=.01*Math.floor(rand(100));a.te=1;a.poly=5;","frame_eqs_str":"a.ang=a.q1;","init_eqs_eel":"t1 = int(rand(100))*0.01;\nt2 = int(rand(100))*0.01;\nte = 1;\npoly = 5;","frame_eqs_eel":"ang = q1;"}],"waves":[{"baseVals":{"enabled":1,"spectrum":1,"additive":1,"smoothing":0},"init_eqs_str":"a.xang=0;a.fov=0;a.tic=0;a.ab=0;a.tir=0;a.yang=0;a.vb=0;a.vg=0;a.dis=0;a.my=0;a.oz=0;a.ti=0;a.q4=0;a.mz=0;a.vr=0;a.oy=0;a.ag=0;a.mx=0;a.vol=0;a.ar=0;a.sp=0;a.q2=0;a.zang=0;a.q3=0;a.ox=0;","frame_eqs_str":"a.tic=Math.min(a.time-a.tir,.1);a.tir=a.time;a.ti=a.ti+.5*a.tic+below(a.vr+a.vg+a.vb,.4)*a.tic*8;a.vr=.75+.25*Math.sin(1.132*a.ti+1);a.vg=.75+.25*Math.sin(1.121*a.ti+1);a.vb=.75+.25*Math.sin(1.187*a.ti+1);a.ar=a.vr;a.ag=a.vg;a.ab=a.vb;","point_eqs_str":"a.sp=10*a.sample;a.ti=a.time;a.ox=.001*Math.floor(rand(1001))+.001*Math.floor(rand(1001))-.001*Math.floor(rand(1001))-.001*Math.floor(rand(1001));a.oy=.001*Math.floor(rand(1001))+.001*Math.floor(rand(1001))-.001*Math.floor(rand(1001))-.001*Math.floor(rand(1001));a.oz=.001*Math.floor(rand(1001))+.001*Math.floor(rand(1001))-.001*Math.floor(rand(1001))-.001*Math.floor(rand(1001));a.dis=pow(a.ox*a.ox+a.oy*a.oy+a.oz*a.oz,.5);a.vol=2*(a.value1+a.value2);a.ox=sign(a.ox)*pow(a.ox,4)*\na.vol;a.oy=sign(a.oy)*pow(a.oy,4)*a.vol;a.oz=sign(a.oz)*pow(a.oz,4)*a.vol;a.a=.173205*(3.464-a.dis);a.xang=a.q2;a.yang=a.q3;a.zang=a.q4;a.fov=.5;a.mx=a.ox*Math.cos(a.yang)+a.oz*Math.sin(a.yang);a.mz=-a.ox*Math.sin(a.yang)+a.oz*Math.cos(a.yang);a.ox=a.mx;a.oz=a.mz;a.mx=a.ox*Math.cos(a.zang)-a.oy*Math.sin(a.zang);a.my=a.ox*Math.sin(a.zang)+a.oy*Math.cos(a.zang);a.ox=a.mx;a.oy=a.my;a.my=a.oy*Math.cos(a.xang)-a.oz*Math.sin(a.xang);a.mz=a.oy*Math.sin(a.xang)+a.oz*Math.cos(a.xang);a.oy=a.my;a.oz=a.mz;a.oz=\n2*(a.oz-5*Math.floor(.2*a.oz)-5);a.x=div(a.ox*a.fov,a.oz)+.5;a.x=.75*(a.x-.5)+.5;a.y=div(a.oy*a.fov,a.oz)+.5;","init_eqs_eel":"","frame_eqs_eel":"tic = min(time-tir,.1);\ntir = time;\nti = ti + tic*.5 + below(vr+vg+vb,.4)*tic*8;\n\n\nvr = .75 + .25*sin(ti*1.132 + 1);\nvg = .75 + .25*sin(ti*1.121 + 1);\nvb = .75 + .25*sin(ti*1.187 + 1);\nar=vr;\nag=vg;\nab=vb;","point_eqs_eel":"sp = sample*10;\nti = time;\n\n\nox = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\noy = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\noz = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\n\ndis = pow(ox*ox + oy*oy + oz*oz,.5);\n\nvol = (value1+value2)*2;\n\nox = sign(ox)*pow(ox,4)*vol;\noy = sign(oy)*pow(oy,4)*vol;\noz = sign(oz)*pow(oz,4)*vol;\n\na = (3.464 - dis)*.57735*.3;\n\nxang = q2;\nyang = q3;\nzang = q4;\n\nfov = .5;\n\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\nox = mx;\noy = my;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = (oz - int(oz*.2)*5 - 5)*2;\nx = ox*fov/oz + 0.5;\nx = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n\n"},{"baseVals":{"spectrum":1,"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"tic = min(time-tir,.1);\ntir = time;\nti = ti + tic*.5 + below(vr+vg+vb,.4)*tic*8;\n\n\nvr = .75 + .25*sin(ti*1.132 + 1);\nvg = .75 + .25*sin(ti*1.121 + 1);\nvb = .75 + .25*sin(ti*1.187 + 1);\nar=vr;\nag=vg;\nab=vb;","point_eqs_str":"sp = sample*10;\nti = time;\n\n\nox = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\noy = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\noz = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\n\ndis = pow(ox*ox + oy*oy + oz*oz,.5);\n\nox = sign(ox)*pow(ox,4)*2;\noy = sign(oy)*pow(oy,4)*2;\noz = sign(oz)*pow(oz,4)*2;\n\na = (1.732 - dis)*.57735;\n\nxang = q2;\nyang = q3;\nzang = q4;\n\nfov = .5;\n\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\nox = mx;\noy = my;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = (oz - int(oz*.2)*5 - 5)*2;\nx = ox*fov/oz + 0.5;\nx = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n\n","init_eqs_eel":"","frame_eqs_eel":"tic = min(time-tir,.1);\ntir = time;\nti = ti + tic*.5 + below(vr+vg+vb,.4)*tic*8;\n\n\nvr = .75 + .25*sin(ti*1.132 + 1);\nvg = .75 + .25*sin(ti*1.121 + 1);\nvb = .75 + .25*sin(ti*1.187 + 1);\nar=vr;\nag=vg;\nab=vb;","point_eqs_eel":"sp = sample*10;\nti = time;\n\n\nox = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\noy = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\noz = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\n\ndis = pow(ox*ox + oy*oy + oz*oz,.5);\n\nox = sign(ox)*pow(ox,4)*2;\noy = sign(oy)*pow(oy,4)*2;\noz = sign(oz)*pow(oz,4)*2;\n\na = (1.732 - dis)*.57735;\n\nxang = q2;\nyang = q3;\nzang = q4;\n\nfov = .5;\n\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\nox = mx;\noy = my;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = (oz - int(oz*.2)*5 - 5)*2;\nx = ox*fov/oz + 0.5;\nx = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n\n"},{"baseVals":{"spectrum":1,"usedots":1,"smoothing":0,"r":0,"g":0,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"tic = min(time-tir,.1);\ntir = time;\nti = ti + tic*.5 + below(vr+vg+vb,.4)*tic*8;\n\n\nvr = .75 + .25*sin(ti*1.132 + 1);\nvg = .75 + .25*sin(ti*1.121 + 1);\nvb = .75 + .25*sin(ti*1.187 + 1);\nar=vr;\nag=vg;\nab=vb;","point_eqs_str":"sp = sample*10;\nti = time;\n\n\nox = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\noy = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\noz = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\n\ndis = pow(ox*ox + oy*oy + oz*oz,.5);\n\nox = sign(ox)*pow(ox,3)*8;\noy = sign(oy)*pow(oy,3)*8;\noz = sign(oz)*pow(oz,3)*8;\n\na = (1.732 - dis)*.57735;\n\nxang = q2;\nyang = q3;\nzang = q4;\n\nfov = .5;\n\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\nox = mx;\noy = my;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = (oz - int(oz*.2)*5 - 5)*2;\nx = ox*fov/oz + 0.5;\nx = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n\n","init_eqs_eel":"","frame_eqs_eel":"tic = min(time-tir,.1);\ntir = time;\nti = ti + tic*.5 + below(vr+vg+vb,.4)*tic*8;\n\n\nvr = .75 + .25*sin(ti*1.132 + 1);\nvg = .75 + .25*sin(ti*1.121 + 1);\nvb = .75 + .25*sin(ti*1.187 + 1);\nar=vr;\nag=vg;\nab=vb;","point_eqs_eel":"sp = sample*10;\nti = time;\n\n\nox = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\noy = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\noz = (int(rand(1001))*.001 + int(rand(1001))*.001 - int(rand(1001))*.001 - int(rand(1001))*.001);\n\ndis = pow(ox*ox + oy*oy + oz*oz,.5);\n\nox = sign(ox)*pow(ox,3)*8;\noy = sign(oy)*pow(oy,3)*8;\noz = sign(oz)*pow(oz,3)*8;\n\na = (1.732 - dis)*.57735;\n\nxang = q2;\nyang = q3;\nzang = q4;\n\nfov = .5;\n\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\nox = mx;\noy = my;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = (oz - int(oz*.2)*5 - 5)*2;\nx = ox*fov/oz + 0.5;\nx = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n\n"},{"baseVals":{"spectrum":1,"thick":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"ra = .7;\nrb = .1;\npib = 6.28318530718;\n\ntic = min(time-tin,.1);\ntin = if(equal(sample,0),time,tin);\n\nmod = pow(pib,21);\nmed = 1;\n\nsp = sample*pib*mod + time*1;\nsam = sample*med - q7;\n\nox = ra*sin(sam*pib);\noy = ra*cos(sam*pib);\nox = ox + rb*-cos(sp)*sin(sam*pib);\noz = rb*-sin(sp);\noy = oy + rb*-cos(sp)*cos(sam*pib);\n\n\na = .5 + .5*cos(sample*pib*3 + pib*.5);\n\nxang = q2;\nyang = q3;\nzang = q4;\nfov = .5;\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 2;\nx = ox*fov/oz + 0.5;\nx = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ra = .7;\nrb = .1;\npib = 6.28318530718;\n\ntic = min(time-tin,.1);\ntin = if(equal(sample,0),time,tin);\n\nmod = pow(pib,21);\nmed = 1;\n\nsp = sample*pib*mod + time*1;\nsam = sample*med - q7;\n\nox = ra*sin(sam*pib);\noy = ra*cos(sam*pib);\nox = ox + rb*-cos(sp)*sin(sam*pib);\noz = rb*-sin(sp);\noy = oy + rb*-cos(sp)*cos(sam*pib);\n\n\na = .5 + .5*cos(sample*pib*3 + pib*.5);\n\nxang = q2;\nyang = q3;\nzang = q4;\nfov = .5;\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 2;\nx = ox*fov/oz + 0.5;\nx = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n"}],"init_eqs_str":"a.tic=0;a.slide=0;a.vt=0;a.it=0;a.bt=0;a.q1=0;a.q5=0;a.mid_avg=0;a.tt=0;a.tin=0;a.bass_avg=0;a.vav=0;a.q4=0;a.mt=0;a.ra=0;a.treb_avg=0;a.sp=0;a.q2=0;a.q3=0;a.q7=0;a.q8=0;","frame_eqs_str":"a.wave_a=0;a.tic=Math.min(a.time-a.tin,.1);a.tin=a.time;a.ra=10;a.treb_avg=a.tic*(a.treb_avg*(div(1,a.tic)-a.ra)+a.ra*a.treb);a.mid_avg=a.tic*(a.mid_avg*(div(1,a.tic)-a.ra)+a.ra*a.mid);a.bass_avg=a.tic*(a.bass_avg*(div(1,a.tic)-a.ra)+a.ra*a.bass);a.vav=a.tic*(a.vav*(div(1,a.tic)-a.ra)+a.ra*(a.bass+a.treb+a.mid)*.33333);a.tt+=a.tic*a.treb_avg;a.mt+=a.tic*a.mid_avg;a.bt+=a.tic*a.bass_avg;a.vt+=a.tic*a.vav;a.sp=.1*Math.abs(a.vav-a.slide);a.slide=.00001<Math.abs(above(a.slide,a.vav))?\na.slide-a.tic*a.sp:a.slide+a.tic*a.sp;a.slide=1.4;a.q1=.5*a.vt;a.q2=.1*a.tt;a.q3=.1*a.mt;a.q4=.1*a.bt;a.q5=.5*a.slide;a.q7=.1*a.vt;a.q8=.1*a.time;a.decay=1;a.it=(a.it+1)*below(a.it,1);a.ob_a=.005*equal(a.it,0);a.ob_a=.2;a.echo_zoom=.45*a.slide;","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"wave_a = 0;\n\ntic = min(time-tin,.1);\ntin = time;\n\nra = 10;\ntreb_avg = tic*(treb_avg*(1/tic - ra) + ra*treb);\nmid_avg = tic*(mid_avg*(1/tic - ra) + ra*mid);\nbass_avg = tic*(bass_avg*(1/tic - ra) + ra*bass);\nvav = tic*(vav*(1/tic - ra) + ra*(bass+treb+mid)*.33333);\n\ntt = tt + tic*treb_avg;\nmt = mt + tic*mid_avg;\nbt = bt + tic*bass_avg;\nvt = vt + tic*vav;\n\nsp = abs(vav - slide)*.1;\n\nslide = if(above(slide,vav),slide-tic*sp,slide+tic*sp);\nslide = 1.4;\n\nq1 = vt*.5;\nq2 = tt*.1;\nq3 = mt*.1;\nq4 = bt*.1;\nq5 = .5*slide;\nq7 = vt*.1;\nq8 = time*.1;\ndecay = 1;\n\n\nit = (it+1)*below(it,1);\n\nob_a = equal(it,0)*.005;\n\nob_a = .2;\n\necho_zoom = slide*.45;","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 ret_1;\n  ret_1 = (((\n    (texture (sampler_blur2, uv).xyz * scale2)\n   + bias2) * exp(\n    (-2.0 * dot (((texture (sampler_blur2, uv_orig).xyz * scale2) + bias2), vec3(0.32, 0.49, 0.29)))\n  )) - 0.003);\n  vec3 tmpvar_2;\n  tmpvar_2 = max (ret_1, (texture (sampler_main, uv).xyz * 0.3));\n  ret_1 = tmpvar_2;\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = tmpvar_2;\n  ret = tmpvar_3.xyz;\n }","comp":"float sw1;\nvec2 xlat_mutableuv2;\n shader_body { \n  sw1 = float((rand_preset.x >= 0.4));\n  vec2 uv_1;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3.x = ((0.2 / rad) + (time / 4.0));\n  tmpvar_3.y = (ang / 3.14);\n  xlat_mutableuv2 = (tmpvar_3 * 2.0);\n  vec2 tmpvar_4;\n  tmpvar_4 = sin(((\n    (xlat_mutableuv2 * 3.141)\n   / 2.0) + (time * 0.1)));\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_noise_hq, (xlat_mutableuv2 + sqrt(dot (tmpvar_4, tmpvar_4))));\n  vec2 tmpvar_6;\n  tmpvar_6.x = (1.0 - uv.x);\n  tmpvar_6.y = uv.y;\n  ret_2 = (texture (sampler_main, uv).xyz + texture (sampler_main, tmpvar_6).xyz);\n  ret_2 = (ret_2 - (roam_sin.wzy * roam_cos.xyz));\n  uv_1 = (uv + ((\n    (((sw1 * rad) * (tmpvar_5.xy - 0.5)) / 2.0)\n   * \n    float((tmpvar_5.x <= rand_preset.y))\n  ) * sw1));\n  vec2 tmpvar_7;\n  tmpvar_7.x = (1.0 - uv_1.x);\n  tmpvar_7.y = uv_1.y;\n  ret_2 = (ret_2 + ((\n    ((((texture (sampler_blur2, uv_1).xyz * scale2) + bias2) + ((texture (sampler_blur2, tmpvar_7).xyz * scale2) + bias2)) * min ((0.5 + (treb_att / 4.0)), 2.0))\n   * \n    (1.0 + sw1)\n  ) * clamp (\n    (1.0 - (dot (ret_2, vec3(0.32, 0.49, 0.29)) / 2.0))\n  , 0.0, 1.0)));\n  ret_2 = (ret_2 + (float(\n    !(bool(sw1))\n  ) * vec3((0.2 * \n    ((0.5 + ((uv.x - 0.5) * q1)) + ((uv.y - 0.5) * q2))\n  ))));\n  vec3 tmpvar_8;\n  tmpvar_8 = mix ((ret_2 * (\n    (hue_shader * 2.0)\n   - 1.0)), ret_2, vec3(dot (ret_2, vec3(0.32, 0.49, 0.29))));\n  ret_2 = tmpvar_8;\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = tmpvar_8;\n  ret = tmpvar_9.xyz;\n }","warp_hlsl":"sampler sampler_pw_noise_lq;\nfloat dx,dy,rad1,mask1;\nfloat2 uv0, uv1,uv4,rsk, Kugel1,dz1;\n\nshader_body {\nuv0 = uv;\n\nfloat2 uv1 = float2(uv.x,uv.y+texsize.w*3);\nret = GetPixel(uv1);\n\nfloat fak = exp(-2*lum(GetBlur2(uv_orig)));\nret = (GetBlur2(uv))*fak-.003 ;\n\nfloat3 add = GetPixel(uv)*.3;\nret = max(ret,add);\n//ret = 0;\n}","comp_hlsl":"sampler sampler_pw_noise_lq;\nfloat2 uv0, uv1, uv2,uv4,rsk,dz1,Kugel1;;\nstatic const float sw1 =  (rand_preset.x) >= .4;\nstatic const float sw2 =  (rand_preset.y);\n\nshader_body {\nuv0 = uv;\nuv2 = float2(.2/rad+time/4,ang/3.14)*2;\nfloat mod = length(sin(uv2*3.141/2+time*.1));\nfloat2 noise = tex2D (sampler_noise_hq,uv2+mod).rg;\nfloat mask = (noise.r <= sw2);\nfloat2 rohr = sw1*rad * (noise-.5) /2*mask;\n\nuv1 = float2(1-uv.x,uv.y);\nret =  GetPixel(uv)+GetPixel(uv1);\nret-=roam_sin.wzy*roam_cos;\n\nfloat3 back = .2*(.5+(uv.x-.5)*q1+(uv.y-.5)*q2);\nuv+= rohr * sw1;\n\nuv1 = float2(1-uv.x,uv.y);\nret += (GetBlur2(uv) + GetBlur2(uv1)) *min(.5+treb_att/4,2) *(1+1*sw1) * saturate(1-lum(ret)/2);\nret += !sw1*back;\nret = lerp(ret*(hue_shader*2-1),ret,lum(ret));;\n//ret = GetPixel(uv);\n//ret=.81-ret;\n}"}