{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.925,"echo_zoom":1.007,"echo_orient":3,"wave_mode":7,"additivewave":1,"wave_brighten":0,"wrap":0,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"zoom":1.0003,"warp":0.01,"sy":1.1046,"ob_size":0,"ob_r":1,"ob_g":0.05,"ob_b":0.1,"ob_a":1,"ib_size":0.26,"mv_x":64,"mv_y":1.248,"mv_l":5,"mv_b":0,"mv_a":0,"b1x":0.5},"shapes":[{"baseVals":{"sides":54,"textured":1,"rad":0.5427,"tex_ang":2.51327,"tex_zoom":1.3476,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":34,"textured":1,"rad":0.27048,"tex_zoom":3.30038,"g":1,"b":1,"r2":1,"b2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":34,"rad":0.24486,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.wzoom=0;a.q6=0;a.q1=0;a.q5=0;a.bass_thresh=0;a.count=0;a.q10=0;a.ry=0;a.q4=0;a.rx=0;a.tx=0;a.vol=0;a.q2=0;a.q3=0;a.q7=0;a.ty=0;a.q20=0;a.mtime=0;","frame_eqs_str":"a.wzoom=.18*Math.sin(a.time);a.q3=a.wzoom;a.q1=.8-.3*Math.sin(1.3*-a.time);a.q2=.8-.3*Math.cos(-a.time);a.monitor=a.fps;a.vol=.1*(9*a.vol+.333333*(a.bass_att+a.mid_att+a.treb_att));a.q20=a.vol;a.mtime+=.05*a.vol;a.rx=.3+.05*Math.sin(.3*a.mtime);a.ry=.5+.05*Math.sin(.4*a.mtime);a.q4=a.rx;a.q5=a.ry;a.tx=.5+.4*Math.sin(.18*a.mtime);a.ty=.5+1.3*Math.sin(.14*a.mtime);a.q6=a.tx;a.q7=a.ty;a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*(.96*(a.bass_thresh-\n1.3)+1.3);a.count=1*equal(a.bass_thresh,2)+(1-equal(a.bass_thresh,2))*a.count;a.count-=.02*above(a.count,.02);a.q10=a.count;","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"wzoom = 0.18*sin(time);\nq3=wzoom;\nq1 = 0.8 - 0.3*sin(-time*1.3);\nq2 = 0.8 - 0.3*cos(-time);\nmonitor=fps;\nvol = 0.1*(vol*9 + (bass_att+mid_att+treb_att)*0.333333);\nq20 = vol;\n\nmtime = mtime+vol*0.05;\nrx = 0.3+0.05*sin(mtime*0.3);\nry = 0.5+0.05*sin(mtime*0.4);\nq4=rx;\nq5=ry;\ntx = 0.5+0.4*sin(mtime*0.18);\nty = 0.5+1.3*sin(mtime*0.14);\nq6=tx;\nq7=ty;\n\nbass_thresh = above(bass_att,bass_thresh)*2 + \n    (1-above(bass_att,bass_thresh))*((bass_thresh-1.3)*0.96+1.3);\ncount = equal(bass_thresh, 2)*1 + (1-equal(bass_thresh, 2))*count;\ncount = count - above(count, 0.02)*0.02;\nq10=count;","pixel_eqs_eel":"","warp":" shader_body { \n  int n_1;\n  vec2 uxy_2;\n  vec2 c_3;\n  vec3 ret_4;\n  vec2 tmpvar_5;\n  tmpvar_5.x = q4;\n  tmpvar_5.y = q5;\n  c_3 = tmpvar_5;\n  vec2 tmpvar_6;\n  tmpvar_6.x = (uv.x - q6);\n  tmpvar_6.y = (uv.y - q7);\n  uxy_2 = (tmpvar_6 * 0.6);\n  n_1 = 0;\n  while (true) {\n    bool tmpvar_7;\n    if ((n_1 < 32)) {\n      tmpvar_7 = (dot (uxy_2, uxy_2) < 4.0);\n    } else {\n      tmpvar_7 = bool(0);\n    };\n    if (!(tmpvar_7)) {\n      break;\n    };\n    vec2 tmpvar_8;\n    tmpvar_8.x = ((uxy_2.x * uxy_2.x) - (uxy_2.y * uxy_2.y));\n    tmpvar_8.y = ((uxy_2.x * uxy_2.y) * 2.0);\n    uxy_2 = (tmpvar_8 + c_3);\n    n_1++;\n  };\n  float tmpvar_9;\n  tmpvar_9 = dot (uxy_2, uxy_2);\n  if ((tmpvar_9 > 4.0)) {\n    ret_4 = vec3(0.0, 0.0, 0.0);\n  } else {\n    ret_4 = vec3(1.0, 1.0, 1.0);\n  };\n  ret_4 = (ret_4 - (texture (sampler_noisevol_hq, (\n    ((vec3(0.05, 0.05, 0.0) * uv.xyy) * (texsize.xyy * texsize_noisevol_hq.zww))\n   + \n    (vec3(0.0, 0.0, 0.4) * time)\n  )) * 0.5).xyz);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = ret_4;\n  ret = tmpvar_10.xyz;\n }","comp":" shader_body { \n  vec3 crisp_1;\n  vec2 uv3_2;\n  vec2 uv2_3;\n  vec3 ret_4;\n  vec2 tmpvar_5;\n  tmpvar_5 = ((uv - 0.5) * aspect.xy);\n  float tmpvar_6;\n  tmpvar_6 = (0.1 / (sqrt(\n    dot (tmpvar_5, tmpvar_5)\n  ) + 0.05));\n  vec2 tmpvar_7;\n  float tmpvar_8;\n  tmpvar_8 = (ang / 3.14);\n  tmpvar_7.x = tmpvar_8;\n  tmpvar_7.y = (tmpvar_6 * 1.5);\n  uv2_3.y = (tmpvar_7.y + (0.1 * time));\n  uv2_3.x = (tmpvar_8 + (0.02 * time));\n  uv3_2.y = (tmpvar_6 + q30);\n  uv3_2.x = (tmpvar_8 + (time / 32.0));\n  crisp_1 = ((texture (sampler_main, fract(uv2_3)).xyz + (2.0 * texture (sampler_main, \n    fract(uv3_2)\n  ).xyz)) + ((2.0 * \n    ((texture (sampler_blur2, fract(uv2_3)).xyz * scale2) + bias2)\n  ) + (2.0 * \n    ((texture (sampler_blur2, fract(uv3_2)).xyz * scale2) + bias2)\n  )));\n  crisp_1 = ((3.0 * crisp_1) * rad);\n  float tmpvar_9;\n  tmpvar_9 = clamp ((1.0 - (4.0 * rad)), 0.0, 1.0);\n  ret_4 = ((crisp_1 + (\n    ((vec3(1.0, 0.0, 1.0) * uv.y) * pow ((1.0 - rad), 8.0))\n   * tmpvar_9)) + (tmpvar_9 * texture (sampler_main, fract(uv)).xyz));\n  ret_4 = (1.0 - clamp (pow (\n    (1.0 - ret_4)\n  , ret_4), 0.0, 1.0));\n  ret_4 = (ret_4 - (texture (sampler_noisevol_hq, (\n    ((vec3(0.05, 0.05, 0.0) * uv.xyy) * (texsize.xyy * texsize_noisevol_hq.zww))\n   + \n    (vec3(0.0, 0.0, 0.4) * time)\n  )) * 0.5).xyz);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = ret_4;\n  ret = tmpvar_10.xyz;\n }","warp_hlsl":"shader_body \n{ \n\n    float2 c = float2(q4, q5);\n    float zoom = 0.6;\n    float2 uxy = (float2(uv.x-q6, uv.y-q7))*zoom;\n\n int n = 0;\n for (n = 0; n < 32 && dot(uxy,uxy)<4; n++)        \n {            \n    uxy = float2(uxy.x*uxy.x - uxy.y*uxy.y, uxy.x*uxy.y*2)+c;\n }\n\n if (dot(uxy,uxy)>4) {ret = 0;} else {ret=1;}\n\nfloat4 noise2 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*0.4 \n                     );\nret -= (noise2)*.5; \n}","comp_hlsl":"shader_body\n{\nfloat2 uv1 = (uv-0.5)*aspect.xy;\n\nfloat rad2 = length(uv1) + .05;\nfloat rad1 = .1/rad2 ;\n\nfloat2 uv2 = float2 (ang/3.14, rad1*1.5);\nuv2.y = uv2.y  +0.1*time;\nuv2.x = uv2.x  +.02*time;\n\nfloat2 uv3 = float2 (ang/3.14, rad1);\nuv3.y = uv3.y  + q30 ;\nuv3.x = uv3.x  + time/32;\n\n\nfloat3 crisp = GetPixel(frac(uv2)) + 2*GetPixel(frac(uv3));\ncrisp += 2*GetBlur2(frac(uv2)) + 2*GetBlur2(frac(uv3));\n\nfloat3 lay1 = float3 (1,0,1)*uv.y*pow(1-rad,8);\n\ncrisp = 3*crisp * pow(rad,1);\n\nfloat mask = saturate(1-4*rad);\n\nret = crisp + lay1*mask + mask * GetPixel(frac(uv));\n\n//ret *= ret;\nret = pow(1-ret,ret);\nret = 1-saturate(ret);\n\nfloat4 noise2 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*0.4 \n                     );\nret -= (noise2)*.5; \n}"}