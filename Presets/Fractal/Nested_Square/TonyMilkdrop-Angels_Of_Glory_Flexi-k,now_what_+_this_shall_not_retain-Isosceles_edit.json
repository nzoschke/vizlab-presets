{"version":2,"baseVals":{"rating":5,"decay":1,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":1,"wave_dots":1,"wave_thick":1,"wrap":0,"invert":1,"wave_a":0.001,"wave_scale":0.5,"wave_smoothing":0,"zoomexp":100,"zoom":0.99504,"warp":0.01,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0.004,"ob_a":1,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.q1=0;","frame_eqs_str":"a.q1=.0003*pow(1+1.2*a.bass+.4*a.bass_att+.1*a.treb+.1*a.treb_att+.1*a.mid+.1*a.mid_att,6);a.wave_r+=Math.sin(.339*a.time);a.wave_g+=Math.sin(.369*a.time);a.wave_b+=Math.sin(.399*a.time);a.wave_x+=.3*Math.sin(a.time);a.wave_y+=.3*Math.cos(a.time);a.ib_r+=Math.sin(.565*a.time);a.ib_g+=Math.sin(.615*a.time);a.ib_b+=Math.sin(.665*a.time);a.ob_r+=Math.cos(.565*a.time);a.ob_g+=Math.cos(.615*a.time);a.ob_b+=Math.cos(.665*a.time);a.warp=0;","pixel_eqs_str":"a.zoom-=.025*Math.sin(6.6*a.fps);a.zoom-=.035*Math.sin(11*a.ang+a.time);a.rot+=.005*Math.sin(5.8*a.fps);","init_eqs_eel":"","frame_eqs_eel":"q1 = 0.0003*(pow(1+1.2*bass+0.4*bass_att+0.1*treb+0.1*treb_att+0.1*mid+0.1*mid_att,6));\nwave_r = wave_r + 1*sin(time*0.339);\nwave_g = wave_g + 1*sin(time*0.369);\nwave_b = wave_b + 1*sin(time*0.399);\nwave_x = wave_x + 0.3*sin(time);\nwave_y = wave_y + 0.3*cos(time);\nib_r = ib_r + 1*sin(time*0.565);\nib_g = ib_g + 1*sin(time*0.615);\nib_b = ib_b + 1*sin(time*0.665);\nob_r = ob_r + 1*cos(time*0.565);\nob_g = ob_g + 1*cos(time*0.615);\nob_b = ob_b + 1*cos(time*0.665);\n//ib_size = ib_size + 0.035*bass;\nwarp = 0;","pixel_eqs_eel":"zoom = zoom - 0.025*sin(fps*6.6);\nzoom = zoom - 0.035*sin(ang*11+(time));\nrot = rot + 0.005*sin(fps*5.8);","warp":" shader_body { \n  vec3 ret_1;\n  vec3 tmpvar_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (vec2(1.0, 0.0) * texsize.zw);\n  tmpvar_2 = (((2.0 * \n    ((texture (sampler_blur1, (uv + tmpvar_3)).xyz * scale1) + bias1)\n  ) - (2.0 * \n    ((texture (sampler_blur1, (uv - tmpvar_3)).xyz * scale1) + bias1)\n  )) * 0.5);\n  vec3 tmpvar_4;\n  vec2 tmpvar_5;\n  tmpvar_5 = (vec2(0.0, 1.0) * texsize.zw);\n  tmpvar_4 = (((2.0 * \n    ((texture (sampler_blur1, (uv + tmpvar_5)).xyz * scale1) + bias1)\n  ) - (2.0 * \n    ((texture (sampler_blur1, (uv - tmpvar_5)).xyz * scale1) + bias1)\n  )) * 0.5);\n  vec2 tmpvar_6;\n  tmpvar_6.x = tmpvar_2.x;\n  tmpvar_6.y = tmpvar_4.x;\n  vec2 tmpvar_7;\n  tmpvar_7 = fract((uv + (\n    (tmpvar_6 * texsize.zw)\n   * 4.0)));\n  vec2 tmpvar_8;\n  tmpvar_8.x = tmpvar_2.y;\n  tmpvar_8.y = tmpvar_4.y;\n  vec2 tmpvar_9;\n  tmpvar_9 = fract((uv + (\n    (tmpvar_8 * texsize.zw)\n   * 4.0)));\n  vec2 tmpvar_10;\n  tmpvar_10.x = tmpvar_2.z;\n  tmpvar_10.y = tmpvar_4.z;\n  vec2 tmpvar_11;\n  tmpvar_11 = fract((uv + (\n    (tmpvar_10 * texsize.zw)\n   * 4.0)));\n  ret_1.x = (texture (sampler_main, tmpvar_7).x - ((\n    (2.0 * texture (sampler_main, tmpvar_7).xyz)\n   - \n    (2.0 * ((texture (sampler_blur3, tmpvar_7).xyz * scale3) + bias3))\n  ).x * 0.01));\n  ret_1.y = (texture (sampler_main, tmpvar_9).y - ((\n    (2.0 * texture (sampler_main, tmpvar_9).xyz)\n   - \n    (2.0 * ((texture (sampler_blur3, tmpvar_9).xyz * scale3) + bias3))\n  ).y * 0.01));\n  ret_1.z = (texture (sampler_main, tmpvar_11).z - ((\n    (2.0 * texture (sampler_main, tmpvar_11).xyz)\n   - \n    (2.0 * ((texture (sampler_blur3, tmpvar_11).xyz * scale3) + bias3))\n  ).z * 0.01));\n  ret_1 = (ret_1 + ((texture (sampler_noise_lq, \n    (((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 1.2)) + rand_frame.xy)\n  ).xyz - 0.5) * 0.008));\n  ret_1 = (ret_1 - ((ret_1.yzx * 0.1) - 0.014));\n  vec4 tmpvar_12;\n  tmpvar_12.w = 1.0;\n  tmpvar_12.xyz = ret_1;\n  ret = tmpvar_12.xyz;\n }","comp":" shader_body { \n  vec2 dz_1;\n  vec3 dy_2;\n  vec3 dx_3;\n  vec2 d_4;\n  vec3 ret_5;\n  vec2 tmpvar_6;\n  vec2 tmpvar_7;\n  tmpvar_7 = (vec2(1.0, 0.0) * texsize.zw);\n  tmpvar_6.x = (texture (sampler_main, (uv + tmpvar_7)).xyz - texture (sampler_main, (uv - tmpvar_7)).xyz).y;\n  vec2 tmpvar_8;\n  tmpvar_8 = (vec2(0.0, 1.0) * texsize.zw);\n  tmpvar_6.y = (texture (sampler_main, (uv + tmpvar_8)).xyz - texture (sampler_main, (uv - tmpvar_8)).xyz).y;\n  d_4 = (texsize.zw * 2.0);\n  dx_3 = (((texture (sampler_blur1, \n    (uv + (vec2(1.0, 0.0) * d_4))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv - (vec2(1.0, 0.0) * d_4))\n  ).xyz * scale1) + bias1));\n  dy_2 = (((texture (sampler_blur1, \n    (uv + (vec2(0.0, 1.0) * d_4))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv - (vec2(0.0, 1.0) * d_4))\n  ).xyz * scale1) + bias1));\n  vec2 tmpvar_9;\n  tmpvar_9.x = dx_3.y;\n  tmpvar_9.y = dy_2.y;\n  dz_1 = ((tmpvar_6 * 3.0) + tmpvar_9);\n  ret_5 = (vec3(((\n    pow ((sqrt(dot (dz_1, dz_1)) * 0.8), 0.7)\n   * 2.0) + (\n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  .y * 2.0))) * vec3(0.2, 0.3, 0.6));\n  vec2 tmpvar_10;\n  tmpvar_10.x = q19;\n  tmpvar_10.y = q20;\n  vec2 tmpvar_11;\n  tmpvar_11 = fract(((0.5 + \n    (uv - 0.5)\n  ) + (tmpvar_10 * vec2(-1.0, 1.0))));\n  vec2 tmpvar_12;\n  tmpvar_12.x = dx_3.y;\n  tmpvar_12.y = dy_2.y;\n  vec3 tmpvar_13;\n  tmpvar_13 = ((mix (ret_5, vec3(3.0, 2.0, 1.0), \n    ((texture (sampler_blur3, (tmpvar_11 - tmpvar_12)).xyz * scale3) + bias3)\n  .xxx) * (vec3(1.0, 1.0, 1.0) - \n    ((texture (sampler_blur2, (tmpvar_11 - dz_1)).xyz * scale2) + bias2)\n  .xxx)) * (vec3(1.0, 1.0, 1.0) - vec3((1.5 * texture (sampler_main, tmpvar_11).x))));\n  ret_5 = tmpvar_13;\n  vec4 tmpvar_14;\n  tmpvar_14.w = 1.0;\n  tmpvar_14.xyz = tmpvar_13;\n  ret = tmpvar_14.xyz;\n }","warp_hlsl":"shader_body\n{\n    float2 d = texsize.zw;\n    float3 dx = ( 2*GetBlur1(uv + float2(1,0)*d) - 2*GetBlur1(uv-float2(1,0)*d) )*0.5;\n    float3 dy = ( 2*GetBlur1(uv + float2(0,1)*d) - 2*GetBlur1(uv-float2(0,1)*d) )*0.5;\n\n    float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 1.2 + rand_frame.xy;\n\n    float2 my_uv =  lerp(uv_orig,uv,1) ;\n    float2 uv_x= frac(my_uv + float2(dx.x,dy.x)*texsize.zw  *4);\n    float2 uv_y= frac(my_uv + float2(dx.y,dy.y)*texsize.zw  *4);\n    float2 uv_z= frac(my_uv + float2(dx.z,dy.z)*texsize.zw  *4);\n    ret.x = GetPixel(uv_x).x - (2*GetPixel(uv_x) - 2*GetBlur3(uv_x)).x  * 0.01;\n    ret.y = GetPixel(uv_y).y - (2*GetPixel(uv_y) - 2*GetBlur3(uv_y)).y  * 0.01;\n    ret.z = GetPixel(uv_z).z - (2*GetPixel(uv_z) - 2*GetBlur3(uv_z)).z  * 0.01;\n\n    ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5) *0.008;\nret -= ret.yzx*0.1 - 0.014;\n\n}","comp_hlsl":"shader_body\n{\n    float2 d = texsize.zw;\n    float3 dx = ( GetPixel(uv+float2(1,0)*d)-GetPixel(uv-float2(1,0)*d) );\n    float3 dy = ( GetPixel(uv+float2(0,1)*d)-GetPixel(uv-float2(0,1)*d) );\nfloat2 dz = float2(dx.y,dy.y)*3;\n\nd = texsize.zw*2;\ndx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );\ndy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );\n\ndz +=float2(dx.y,dy.y);\n\nfloat3 bg = pow(length(dz)*0.8+0,0.7)*2 + GetBlur1(uv).y*2;\n\nret = bg*float3(0.2,0.3,0.6);\nfloat2 uv_swimmer =frac(0.5 + (uv-0.5)+float2(q19,q20)*float2(-1,1));\nret = lerp(ret,float3(3,2,1),GetBlur3(uv_swimmer -float2(dx.y,dy.y)).x);\nret = lerp(ret,0,GetBlur2(uv_swimmer-dz).x);\nret = lerp(ret,float3(0,0,0),1.5*GetPixel(uv_swimmer).x);\n\n//ret = GetPixel(uv);\n}"}