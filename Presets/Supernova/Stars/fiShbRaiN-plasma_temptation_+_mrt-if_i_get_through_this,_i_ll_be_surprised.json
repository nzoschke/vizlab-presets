{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.95,"echo_zoom":1.448,"echo_alpha":0.8,"wave_mode":5,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"wave_a":0.001,"wave_scale":0.01,"wave_smoothing":0.9,"modwavealphastart":2,"modwavealphaend":2,"warpanimspeed":3.3,"warpscale":2.671,"zoomexp":100,"fshader":1,"zoom":0.81914,"warp":36.97113,"sx":3.54492,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0.5,"ob_r":0.01,"ib_size":0.26,"mv_x":64,"mv_y":20.16,"mv_l":0.4,"mv_g":0.4,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":100,"additive":1,"r":0.9,"g":0.7,"b":0.9,"a":0.7,"r2":1,"g2":0,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.x=.5*(Math.sin(a.time)+1);a.y=.5*a.bass_att+.2*Math.sin(.5*a.time);a.ang=a.time;a.rad=.5*a.bass;","init_eqs_eel":"","frame_eqs_eel":"x=(sin(time)+1)*.5;\ny=(bass_att*.5)+(sin(time*.5)*.2);\n\nang=time;\nrad=bass*.5;"},{"baseVals":{"enabled":1,"sides":100,"textured":1,"rad":0.80814,"tex_zoom":1.22018,"a":0.5,"r2":0.9,"b2":0.8,"a2":0.5,"border_a":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":100,"additive":1,"textured":1,"rad":0.7316,"tex_ang":5.02655,"tex_zoom":0.24832,"r":0.8,"g":0.3,"b":0.8,"a2":0.1,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.rad=.9*a.bass;a.ang=a.time;","init_eqs_eel":"","frame_eqs_eel":"rad=bass*.9;\nang=time;"},{"baseVals":{"enabled":1,"sides":100,"additive":1,"g":0.2,"b":0.3,"g2":0,"b2":0.1,"border_r":0,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.x=.5*(Math.cos(.2*(a.time+.233))+1);a.y=.5*(Math.sin(.1*a.time)+1)+.5*Math.sin(.13*a.time);a.rad=.2*a.treb;","init_eqs_eel":"","frame_eqs_eel":"x=(cos((time+.233)*.2)+1)*.5;\ny=(sin(time*.1)+1)*.5+(sin(time*.13)*.5);\n\nrad=treb*.2;"}],"waves":[{"baseVals":{"thick":1,"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"x=int(rand(1));\ny=int(rand(1));","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x=int(rand(1));\ny=int(rand(1));"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.direc=0;a.runtreb=0;a.vt=0;a.vb=0;a.q9=0;a.pi23=0;a.q10=0;a.atime=0;a.runbass=0;a.runmids=0;a.vvm=0;a.vvb=0;a.vm=0;a.vvt=0;a.q8=0;","frame_eqs_str":"a.vb=.95*a.vb+(1-a.vb)*pow(a.bass_att,2)*.02;a.vvb=.95*a.vvb+(1-a.vvb)*a.vb*.01;a.vm=.95*a.vm+(1-a.vm)*pow(a.mid_att,2)*.02;a.vvm=.95*a.vvm+(1-a.vvm)*a.vm*.01;a.vt=.95*a.vt+(1-a.vt)*pow(a.treb_att,2)*.02;a.vvt=.95*a.vvt+(1-a.vvt)*a.vt*.01;a.vvb=Math.min(1,Math.max(0,a.vvb));a.vvm=Math.min(1,Math.max(0,a.vvm));a.vvt=Math.min(1,Math.max(0,a.vvt));a.runbass+=a.vvb;a.runmids+=a.vvm;a.runtreb+=a.vvt;a.pi23=1.33333333333332*Math.asin(-1);a.atime=.05*(a.runtreb+a.runmids+a.runbass);\na.q8=.5*(Math.sin(a.atime-0*a.pi23)+1);a.q9=.5*(Math.sin(a.atime-1*a.pi23)+1);a.q10=.5*(Math.sin(a.atime-2*a.pi23)+1);","pixel_eqs_str":"a.direc=.00001<Math.abs(above(a.treb,1.3))?-1*a.direc:a.direc;a.zoom+=Math.sin(a.x*a.treb*a.mid*.1)*a.direc*-1;a.rot+=Math.cos(a.y*a.bass)*a.x*a.direc;","init_eqs_eel":"","frame_eqs_eel":"//martin no religion / my omniversal absence for changing the background light\nvb = vb*0.95 + (1-vb)*pow(bass_att,2)*0.02;\nvvb = vvb*0.95 + (1-vvb)*vb*0.01;\nvm = vm*0.95 + (1-vm)*pow(mid_att,2)*0.02;\nvvm = vvm*0.95 + (1-vvm)*vm*0.01;\nvt = vt*0.95 + (1-vt)*pow(treb_att,2)*0.02;\nvvt = vvt*0.95 + (1-vvt)*vt*0.01;\nvvb = min(1,max(0,vvb));\nvvm = min(1,max(0,vvm));\nvvt = min(1,max(0,vvt));\nrunbass=runbass+vvb;\nrunmids=runmids+vvm ;\nruntreb=runtreb+vvt;\npi23=4*asin(-1)*.33333333333333;\natime=(runtreb+runmids+runbass)*.05;\nq8= (sin(atime-0*pi23)+1)*.5;\nq9= (sin(atime-1*pi23)+1)*.5;\nq10=(sin(atime-2*pi23)+1)*.5;","pixel_eqs_eel":"direc=if(above(treb,1.3),direc*-1,direc);\n\nzoom=zoom+sin(x*treb*mid*.1)*direc*-1;\nrot=rot+(cos(y*bass)*x)*direc;","warp":" shader_body { \n  vec2 uv_1;\n  vec2 zz_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (uv - vec2(0.5, 0.5));\n  mat2 tmpvar_4;\n  tmpvar_4[uint(0)] = _qb.xy;\n  tmpvar_4[1u] = _qb.zw;\n  zz_2 = (((tmpvar_3 * texsize.xy) * q28) * tmpvar_4);\n  uv_1 = (uv + ((\n    clamp ((sin(zz_2.yx) / cos(zz_2.yx)), vec2(-16.0, -16.0), vec2(16.0, 16.0))\n   * \n    cos(((zz_2 * 2.0) * q9))\n  ) * 0.01));\n  float tmpvar_5;\n  tmpvar_5 = (texture (sampler_noise_hq, ((uv_1 / 6.0) + (0.001 * time))).x * 16.0);\n  float tmpvar_6;\n  tmpvar_6 = sin(tmpvar_5);\n  float tmpvar_7;\n  tmpvar_7 = cos(tmpvar_5);\n  mat2 tmpvar_8;\n  tmpvar_8[uint(0)].x = tmpvar_7;\n  tmpvar_8[uint(0)].y = -(tmpvar_6);\n  tmpvar_8[1u].x = tmpvar_6;\n  tmpvar_8[1u].y = tmpvar_7;\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = (((texture (sampler_main, uv_1).xyz + \n    (0.02 * vec3((inversesqrt((tmpvar_3 * tmpvar_8).y) * ((0.5 - q30) + (0.03 * q26)))))\n  ) - (0.3 * \n    ((texture (sampler_blur3, uv_1).xyz * scale3) + bias3)\n  )) - (rad / 10.0));\n  ret = tmpvar_9.xyz;\n }","comp":"vec3 xlat_mutablecont;\nvec3 xlat_mutableneu;\nvec3 xlat_mutableret1;\nvec2 xlat_mutablers2;\n shader_body { \n  vec2 uv_1;\n  float inten_2;\n  float dist_3;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  dist_3 = (1.0 - fract(q6));\n  inten_2 = ((dist_3 * (1.0 - dist_3)) * 6.0);\n  vec2 tmpvar_4;\n  tmpvar_4 = fract(((uv_1 * dist_3) + 0.55));\n  xlat_mutableneu = texture (sampler_main, tmpvar_4).xyz;\n  xlat_mutableret1 = max (vec3(0.0, 0.0, 0.0), (xlat_mutableneu * inten_2));\n  xlat_mutablecont = max (vec3(0.0, 0.0, 0.0), ((\n    -(texture (sampler_main, tmpvar_4).xyz)\n   + \n    ((texture (sampler_blur1, (tmpvar_4 + q7)).xyz * scale1) + bias1)\n  ) * inten_2));\n  dist_3 = (1.0 - fract((0.5 + q6)));\n  inten_2 = ((dist_3 * (1.0 - dist_3)) * 6.0);\n  vec2 tmpvar_5;\n  tmpvar_5 = fract(((uv_1 * dist_3) + 0.55));\n  xlat_mutableneu = texture (sampler_main, tmpvar_5).xyz;\n  xlat_mutableret1 = max (xlat_mutableret1, (xlat_mutableneu * inten_2));\n  xlat_mutablecont = max (xlat_mutablecont, ((\n    -(texture (sampler_main, tmpvar_5).xyz)\n   + \n    ((texture (sampler_blur1, (tmpvar_5 + q7)).xyz * scale1) + bias1)\n  ) * inten_2));\n  dist_3 = (1.0 - fract((1.0 + q6)));\n  inten_2 = ((dist_3 * (1.0 - dist_3)) * 6.0);\n  vec2 tmpvar_6;\n  tmpvar_6 = fract(((uv_1 * dist_3) + 0.55));\n  xlat_mutableneu = texture (sampler_main, tmpvar_6).xyz;\n  xlat_mutableret1 = max (xlat_mutableret1, (xlat_mutableneu * inten_2));\n  xlat_mutablecont = max (xlat_mutablecont, ((\n    -(texture (sampler_main, tmpvar_6).xyz)\n   + \n    ((texture (sampler_blur1, (tmpvar_6 + q7)).xyz * scale1) + bias1)\n  ) * inten_2));\n  vec2 tmpvar_7;\n  tmpvar_7.y = 5.0;\n  tmpvar_7.x = (time / 12.0);\n  xlat_mutablers2 = ((0.1 * cos(\n    ((uv_1 * 3.0) + tmpvar_7)\n  )) + (0.1 * xlat_mutableret1).xy);\n  vec3 tmpvar_8;\n  tmpvar_8.x = q10;\n  tmpvar_8.y = q9;\n  tmpvar_8.z = q8;\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = (((-0.1 * xlat_mutableret1) + (\n    (18.0 * (clamp ((0.005 / \n      sqrt(dot (xlat_mutablers2, xlat_mutablers2))\n    ), 0.0, 1.0) * tmpvar_8))\n   * \n    (0.2 + (0.3 * xlat_mutableret1))\n  )) + ((xlat_mutablecont * \n    (1.0 + slow_roam_cos)\n  .xyz) / 2.0));\n  ret = tmpvar_9.xyz;\n }","warp_hlsl":"shader_body {\nfloat2 uv1 = float2(uv.x-0.5,uv.y-0.5);//*aspect.xy;\n\n\nfloat2 zz = uv1 *texsize.xy *q28;\n\nzz =mul(zz,float2x2(_qb));\n\nfloat2 h1 = clamp(tan(zz.yx),-16,16) * cos(zz*2*q9);\n\nuv.xy += h1 * .01;\n\nfloat r = tex2D (sampler_noise_hq,uv/6 + .001*time).x*16;\nfloat2 uv6 = uv1;\nfloat sr = sin(r); float cr = cos(r);\nuv6 = mul(uv6, float2x2(cr,sr,-sr,cr));\nfloat3 mus = 1/(sqrt(uv6.y)) * ((.5-q30)+.03*q26);\n\nfloat3 crisp = tex2D(sampler_main,uv) + .02*mus;\n//crisp = lerp(crisp, crisp.bgr, saturate(crisp));\nret = crisp-.0 -.3* GetBlur3(uv) - rad/10 ;\n}","comp_hlsl":"sampler sampler_pw_noise_lq;\n\nfloat3 ret1, neu, cont;\nfloat2 rs,rs2,uv1,dz, uv3;\nfloat noise;\nshader_body\n{\nfloat2 uv2;\nuv -= 0.5;\nuv *= aspect.xy;    \n\nnoise = tex2D (sampler_pw_noise_lq,uv3);\nnoise *= (noise >= .9);\n\nfloat dist = 1;\nfloat inten = 1;\nfloat mask = 0;\nret1 = 0;\nint anz = 2;\nfloat n = 0;\ncont = 0;\nwhile (n <= anz) {\nuv2 = uv;\n    dist = 1-frac(1.0/anz*n+q6); //evtl sqrt !\n\n    inten =  (dist)*(1-dist)*6;\n    float2 uv3 =  frac(1*uv2*dist+.55);\n\n    neu = 1*GetPixel(uv3) + GetBlur1(uv3)*0;\n    ret1 = max(ret1,neu*inten);\n    cont = max(cont,(-GetPixel(uv3)+GetBlur1(uv3+q7))*inten);\nn++;\n}\n\nrs2 = .1*cos(uv*3+float2(time/12,5)) + .1*ret1;\nfloat3 dots = saturate(.005/length(rs2)) * float3 (q10,q9,q8);\n\nret = -.1*ret1 + 18*dots*(.2+.3*ret1) \n+ (cont)*(1+slow_roam_cos)/2;\nret += .0*ret1;\n//ret = GetPixel(uv_orig+.5);\n}"}