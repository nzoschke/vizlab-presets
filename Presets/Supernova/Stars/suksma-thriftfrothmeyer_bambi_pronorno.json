{"version":2,"baseVals":{"rating":5,"gammaadj":2.96,"decay":0.99,"echo_zoom":1.484,"echo_alpha":0.38,"wave_mode":1,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"brighten":1,"invert":1,"wave_a":4.1,"wave_scale":0.01,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"zoomexp":1.00041,"fshader":0.42,"zoom":1.006,"rot":-0.08,"warp":0.05723,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"mv_a":0.4},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"","frame_eqs_str":"a.wave_r+=.35*(.6*Math.sin(.742*a.time)+.4*Math.sin(1.021*a.time));a.wave_g+=.35*(.6*Math.sin(.703*a.time)+.4*Math.sin(.969*a.time));a.wave_b+=.35*(.6*Math.sin(1.09*a.time)+.4*Math.sin(.963*a.time));a.rot+=.01*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*a.time));a.cx+=.11*(.6*Math.sin(.374*a.time)+.4*Math.sin(.294*a.time));a.cy+=.11*(.6*Math.sin(.393*a.time)+.4*Math.sin(.223*a.time));","pixel_eqs_str":"a.cx=.5+.3*Math.cos(a.ang+.97*a.time);a.cy=.5+.3*Math.sin(a.ang+.78*a.time);","init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.350*( 0.60*sin(0.742*time) + 0.40*sin(1.021*time) );\nwave_g = wave_g + 0.350*( 0.60*sin(0.703*time) + 0.40*sin(0.969*time) );\nwave_b = wave_b + 0.350*( 0.60*sin(1.090*time) + 0.40*sin(0.963*time) );\nrot = rot + 0.010*( 0.60*sin(0.381*time) + 0.40*sin(0.579*time) );\ncx = cx + 0.110*( 0.60*sin(0.374*time) + 0.40*sin(0.294*time) );\ncy = cy + 0.110*( 0.60*sin(0.393*time) + 0.40*sin(0.223*time) );","pixel_eqs_eel":"cx=0.5 + 0.3*cos(ang+time*0.97);\ncy=0.5 + 0.3*sin(ang+time*0.78);","warp":" shader_body { \n  vec2 uv_1;\n  uv_1 = uv;\n  vec2 zz_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (uv - vec2(0.5, 0.5));\n  vec3 tmpvar_4;\n  tmpvar_4 = (0.016 * texture (sampler_noise_lq, ((uv * 0.3) + (0.01 * rand_frame).xy))).xyz;\n  vec2 tmpvar_5;\n  tmpvar_5 = (0.8 * sin((tmpvar_3 * 8.0)));\n  float tmpvar_6;\n  tmpvar_6 = clamp ((0.01 / sqrt(\n    dot (tmpvar_5, tmpvar_5)\n  )), 0.0, 1.0);\n  vec2 tmpvar_7;\n  tmpvar_7 = ((-(tmpvar_3) * texsize.xy) * q26);\n  zz_2 = tmpvar_7;\n  if ((q25 == 1.0)) {\n    zz_2 = (tmpvar_7 * (abs(tmpvar_3.y) / abs(tmpvar_3.x)));\n  } else {\n    if ((q25 == 2.0)) {\n      zz_2 = (zz_2 * (abs(tmpvar_3.y) - abs(tmpvar_3.x)));\n    };\n  };\n  uv_1 = (uv + ((\n    clamp ((sin(zz_2) / cos(zz_2)), vec2(-20.0, -20.0), vec2(20.0, 20.0))\n   * texsize.zw) * 4.0));\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = (((\n    (0.95 * (texture (sampler_main, uv_1) + tmpvar_6).xyz)\n   + tmpvar_4) - 0.02) - (0.06 * (\n    (texture (sampler_blur2, uv_1).xyz * scale2)\n   + bias2).x));\n  ret = tmpvar_8.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  ret_1 = (tmpvar_2.xyz * (fract(\n    (tmpvar_2.xyz * 4.0)\n  ) * 2.0));\n  ret_1 = (ret_1 + ((\n    (texture (sampler_blur1, uv).xyz * scale1)\n   + bias1) * 0.1));\n  ret_1 = (ret_1 * ret_1);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }","warp_hlsl":"shader_body {\n\nfloat2 uv1 = float2(uv.x-0.5,uv.y-0.5);//*aspect.xy;\n\nfloat3 noiseVal =.016*(tex2D(sampler_noise_lq, uv*.3+.01*rand_frame));\nfloat3 Feedback = GetBlur1(1-uv);\n\nfloat2 uv2 = .8*sin((uv1)*8);;\nfloat dots = saturate(.01/length(uv2));\n\nfloat2 zz = -uv1 *texsize.xy *q26;\n\nif (q25 ==1) {zz *= (abs(uv1.y)/abs(uv1.x));}\nelse if (q25==2)  {zz *= (abs(uv1.y)-abs(uv1.x));}\n\n\nfloat2 h1 = clamp(tan(zz),-20,20);\n\nuv.xy += h1*texsize.zw * 4;\n\nfloat3 crisp1 = tex2D(sampler_main,uv) + dots;\nfloat blur = GetBlur2 (uv);\nret = .95*crisp1+noiseVal-.02 - .06*blur;\n\n\n}","comp_hlsl":"shader_body\n{\n    ret = tex2D(sampler_main, uv).xyz;\n\n    ret *= frac(ret*4)*2;\n    ret += GetBlur1(uv) * .1;\n    ret *= ret; \n}"}