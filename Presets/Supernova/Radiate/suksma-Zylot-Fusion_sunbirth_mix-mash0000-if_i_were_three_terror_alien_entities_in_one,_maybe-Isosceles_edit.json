{"version":2,"baseVals":{"rating":5,"decay":0.9,"wrap":0,"wave_a":1.959,"wave_scale":0.01,"wave_smoothing":0.54,"wave_mystery":0.08,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"ob_size":0.31,"ob_r":0.3,"mv_a":0},"shapes":[{"baseVals":{"sides":100,"r":0,"g2":0,"border_r":0,"border_g":0,"border_a":0,"enabled":0},"init_eqs_str":"trebc = 0;","frame_eqs_str":"x = .5;\ny = .5;\n\ntrebc = trebc+treb*.3;\n\nx = .5+((bass*.1)*sin(time+trebc));\ny = .5+((mid*.1)*cos(time+trebc));\n\nr = bass;","init_eqs_eel":"trebc = 0;","frame_eqs_eel":"x = .5;\ny = .5;\n\ntrebc = trebc+treb*.3;\n\nx = .5+((bass*.1)*sin(time+trebc));\ny = .5+((mid*.1)*cos(time+trebc));\n\nr = bass;"},{"baseVals":{"sides":100,"r":0,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = .5;\ny = .5;\n\ntrebc = trebc+mid*.3;\n\nx = .5+((treb*.1)*sin(time+trebc));\ny = .5+((bass*.1)*cos(time+trebc));\n\ng = treb;","init_eqs_eel":"","frame_eqs_eel":"x = .5;\ny = .5;\n\ntrebc = trebc+mid*.3;\n\nx = .5+((treb*.1)*sin(time+trebc));\ny = .5+((bass*.1)*cos(time+trebc));\n\ng = treb;"},{"baseVals":{"sides":100,"r":0,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = .5;\ny = .5;\n\ntrebc = trebc+bass*.3;\n\nx = .5+((mid*.1)*sin(time+trebc));\ny = .5+((treb*.1)*cos(time+trebc));\n\nb = mid;","init_eqs_eel":"","frame_eqs_eel":"x = .5;\ny = .5;\n\ntrebc = trebc+bass*.3;\n\nx = .5+((mid*.1)*sin(time+trebc));\ny = .5+((treb*.1)*cos(time+trebc));\n\nb = mid;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.changer=1;a.speed=1;a.setter=0;a.timer=0;a.random=0;","frame_eqs_str":"a.wave_a=0;a.warp=0;","pixel_eqs_str":"a.zoom+=.4*Math.abs(a.rad-.5);","init_eqs_eel":"changer = 1;\nspeed = 1;\nsetter = 0;\ntimer = 0;\nrandom = 0;","frame_eqs_eel":"wave_a = 0;\nwarp = 0;","pixel_eqs_eel":"zoom = zoom + (abs(rad-.5)*.4);","warp":" shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2.x = (((\n    ((texture (sampler_blur2, (uv + vec2(0.01, 0.0))).xyz * scale2) + bias2)\n   - \n    ((texture (sampler_blur2, (uv - vec2(0.01, 0.0))).xyz * scale2) + bias2)\n  ).y * 1280.0) * texsize.z);\n  tmpvar_2.y = (((\n    ((texture (sampler_blur2, (uv + vec2(0.0, 0.01))).xyz * scale2) + bias2)\n   - \n    ((texture (sampler_blur2, (uv - vec2(0.0, 0.01))).xyz * scale2) + bias2)\n  ).y * 1024.0) * texsize.w);\n  ret_1.y = texture (sampler_fw_main, (uv + (tmpvar_2 * 0.005))).y;\n  ret_1 = (ret_1 + ((\n    (ret_1 - ((texture (sampler_blur3, uv).xyz * scale3) + bias3))\n   * 0.3) - 0.05));\n  ret_1 = (ret_1 + ((texture (sampler_noise_lq, \n    (((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 0.25)) + rand_frame.xy)\n  ).xyz - 0.5) * 0.1));\n  ret_1 = mix (ret_1, vec3(dot (ret_1, vec3(0.32, 0.49, 0.29))), vec3(0.2, 0.2, 0.2));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }","comp":"","warp_hlsl":"sampler sampler_cells;\n \nshader_body\n{\n\n    float1 d = 0.01;\n    float1 dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).y*1280*texsize.z;\n    float1 dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).y*1024*texsize.w;\n    float2 my_uv = uv + float2(dx,dy)*0.005;\n\n\n\n//    float1 v = 0.01;\n    ret.y = tex2D( sampler_fw_main, my_uv).y;\n\n    \n//ret = 0;\n//   ret = tex2D( sampler_cells, uv)/ lerp(ret,tex2D(sampler_main,uv_orig-my_uv+uv),0.3);\n      // take the difference between the crisp and blurred images,\n      // then add it back into the image.  Creates spots and stripes over time.\n      ret.xyz += (ret - GetBlur3(uv-floor(uv)*0))*0.3 - 0.05;\n      ret.xyz *= 1;\n\n      // add noise:\n      float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.25 + rand_frame.xy;\n      ret.xyz += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)*0.1;\n\n      // desaturate over time, to keep the globs white\n      ret.xyz = lerp(ret.xyz, lum(ret.xyz), 0.2);\n}","comp_hlsl":""}