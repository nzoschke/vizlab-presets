{"version":2,"baseVals":{"rating":5,"gammaadj":1.28,"echo_zoom":1.228,"echo_alpha":0.5,"wave_mode":5,"additivewave":1,"wave_dots":1,"wave_thick":1,"brighten":1,"wave_a":0.134,"wave_scale":1.647,"wave_smoothing":0.9,"wave_mystery":1,"zoomexp":2.89992,"fshader":1,"zoom":1.10356,"warp":0.02001,"sx":1.01,"sy":1.01,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"mv_x":0,"mv_y":48,"mv_l":5,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.rg2=0;a.decay_rate=0;a.q12=0;a.q13=0;a.q15=0;a.q1=0;a.rg=0;a.q9=0;a.prev_beat=0;a.is_beat=0;a.q11=0;a.q16=0;a.min_att=0;a.beat=0;a.decay_to=0;a.q2=0;a.q14=0;a.beat_level=0;","frame_eqs_str":"a.wave_r+=.2*(.6*Math.sin(1.517*a.time)+.4*Math.sin(1.58*a.time));a.wave_g+=.2*(.6*Math.sin(1.088*a.time)+.4*Math.sin(1.076*a.time));a.wave_b+=.2*(.6*Math.sin(1.037*a.time)+.4*Math.sin(.922*a.time));a.rot+=.01*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*a.time));a.cx+=.11*(.6*Math.sin(.374*a.time)+.4*Math.sin(.294*a.time));a.cy+=.11*(.6*Math.sin(.393*a.time)+.4*Math.sin(.223*a.time));a.q1=Math.cos(1.41*a.time);a.q2=a.time+.3*Math.sin(1.47*a.time);a.rg=Math.max(.77*a.rg,.02+.5*\nMath.min(2,1.3*Math.max(0,a.mid_att-1)));a.q9=a.rg*above(a.rg,2*a.rg2);a.rg2=Math.max(a.rg,.8*a.rg2);a.monitor=a.q9;a.q11=a.aspectx;a.q12=a.aspecty;a.q13=a.wave_r;a.q14=a.wave_g;a.q15=a.wave_b;a.q16=.01*Math.floor(rand(100));a.decay_rate=pow(.993,a.fps);a.min_att=2.5;a.decay_to=1;a.beat=div(a.bass,Math.max(a.min_att,a.bass_att));a.beat=Math.max(a.beat,div(a.mid,Math.max(a.min_att,a.mid_att)));a.beat=Math.max(a.beat,div(a.treb,Math.max(a.min_att,a.treb_att)));a.beat=Math.max(a.beat,(a.prev_beat-a.decay_to)*\na.decay_rate+a.decay_to);a.beat_level=24*(a.beat-a.prev_beat);a.is_beat=above(a.beat_level,.5);a.prev_beat=a.beat;a.q1=a.is_beat;","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.200*( 0.60*sin(1.517*time) + 0.40*sin(1.580*time) );\nwave_g = wave_g + 0.200*( 0.60*sin(1.088*time) + 0.40*sin(1.076*time) );\nwave_b = wave_b + 0.200*( 0.60*sin(1.037*time) + 0.40*sin(0.922*time) );\nrot = rot + 0.010*( 0.60*sin(0.381*time) + 0.40*sin(0.579*time) );\ncx = cx + 0.110*( 0.60*sin(0.374*time) + 0.40*sin(0.294*time) );\ncy = cy + 0.110*( 0.60*sin(0.393*time) + 0.40*sin(0.223*time) );\nq1=cos(1.41*time);\nq2=time + 0.3*sin(time*1.47);\n\n// this is a great way to respond to beats:\n// once you get one, let it decay at a constant rate!!\nrg = max(rg*0.77, 0.02 + 0.5*min(2,max(0,mid_att-1)*1.3));\nq9 = rg * above(rg,rg2*2);\nrg2 = max(rg, rg2*0.8);\n\n//zoom = zoom + q9*0.1;\nmonitor = q9;\n\n// for custom shape 1:\nq11 = aspectx;\nq12 = aspecty;\nq13 = wave_r;\nq14 = wave_g;\nq15 = wave_b;\nq16 = int(rand(100))*0.01;\n\n// custom beat detection code: (fps-independent; quiet songs don't freak out)\ndecay_rate = pow(0.993, fps);  // lower # = more hasty to declare a beat\nmin_att    = 2.5;               // lower # = quieter songs can declare beats\ndecay_to   = 1.0;               // lower # = more hasty to declare a beat\nbeat =           bass/max(min_att,bass_att);\nbeat = max(beat, mid /max(min_att,mid_att ));\nbeat = max(beat, treb/max(min_att,treb_att));\nbeat = max( beat, (prev_beat-decay_to)*decay_rate + decay_to );\nbeat_level     = (beat - prev_beat - 0.0)*24;\nis_beat = above(beat_level, 0.5);\nprev_beat = beat;\n  // put your beat responses HERE:\n  //wave_a = beat_level + 1.95;\n  q1 = is_beat;   //drives shape #1","pixel_eqs_eel":"//rot=rot+0.05*sin(rad*13.5 + q2*1.3 + q*1.31);\n//zoom=zoom+0.05*sin(ang*10.0 + rad*7.5 + q2*1.63 + q);","warp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  float tmpvar_2;\n  tmpvar_2 = dot (texsize.zw, texsize.zw);\n  vec2 tmpvar_3;\n  tmpvar_3 = (uv - 0.5);\n  tmpvar_1.xyz = (max (max (texture (sampler_main, uv).xyz, texture (sampler_main, \n    ((tmpvar_3 * (1.0 - (8.0 * \n      sqrt(tmpvar_2)\n    ))) + 0.5)\n  ).xyz), texture (sampler_main, (\n    (tmpvar_3 * (1.0 + (8.0 * sqrt(tmpvar_2))))\n   + 0.5)).xyz) - 0.034);\n  ret = tmpvar_1.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  vec2 uv3_2;\n  vec2 uv2_3;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  uv2_3.x = ((uv_1.x * -0.497265) - (uv_1.y * 0.8675987));\n  uv2_3.y = ((uv_1.x * 0.8675987) + (uv_1.y * -0.497265));\n  uv3_2.x = ((uv_1.x * -0.5000263) - (uv_1.y * -0.8660102));\n  uv3_2.y = ((uv_1.x * -0.8660102) + (uv_1.y * -0.5000263));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = max (max (texture (sampler_main, (uv_1 + 0.5)).xyz, texture (sampler_main, (uv2_3 + 0.5)).xyz), texture (sampler_main, (uv3_2 + 0.5)).xyz);\n  ret = tmpvar_4.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_main, uv ).xyz;\n\n    // feather pen\n    ret = max(ret, tex2D( sampler_main, (uv-0.5)*(1-8*length(texsize.zw)) + 0.5 ).xyz);\n    ret = max(ret, tex2D( sampler_main, (uv-0.5)*(1+8*length(texsize.zw)) + 0.5 ).xyz);\n\n    // darken over time\n    ret -= 0.034;\n}","comp_hlsl":"shader_body\n{\n    float2 uv2, uv3;\n    float ang2, c, s;\n\n    uv -= 0.5;\n    uv *= aspect.xy;    \n\n    ang2 = 6.28*0.333;\n    c = cos(ang2);\n    s = sin(ang2);\n    uv2.x =  uv.x*c - uv.y*s;\n    uv2.y =  uv.x*s + uv.y*c;\n\n    ang2 = 6.28*0.667;\n    c = cos(ang2);\n    s = sin(ang2);\n    uv3.x =  uv.x*c - uv.y*s;\n    uv3.y =  uv.x*s + uv.y*c;\n\n    ret = tex2D(sampler_main, uv + 0.5).xyz;\n    ret = max(ret, tex2D(sampler_main,uv2 + 0.5).xyz);\n    ret = max(ret, tex2D(sampler_main,uv3 + 0.5).xyz);\n\n    //ret *= 1.3; // a little bit of overbright\n}\n\n"}