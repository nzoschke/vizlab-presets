{"version":2,"baseVals":{"rating":5,"gammaadj":1.9,"echo_zoom":1.169,"wave_mode":2,"wave_dots":1,"wave_brighten":0,"wave_a":0.001,"wave_scale":0.012,"wave_smoothing":0.9,"dx":0.00001,"dy":0.00001,"warp":0.01,"wave_r":0.5,"wave_g":0.4,"wave_b":0.3,"ob_size":0,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_x":64,"mv_y":48,"mv_l":1,"mv_r":0.39,"mv_g":0.44,"mv_b":0.9,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":10,"additive":1,"textured":1,"rad":0.41906,"tex_zoom":1.25716,"r":0.8,"g":0.9,"b":1,"a":0.2,"g2":0.5,"b2":1,"border_a":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"additive":1,"r":0.3,"g":0.7},"init_eqs_str":"a.n=0;a.yq=0;a.xp=0;a.xs=0;a.yp=0;a.xq=0;a.flip=0;a.ys=0;a.zq=0;a.ang=0;a.zp=0;a.phase=0;","frame_eqs_str":"","point_eqs_str":"a.n=6.283*a.sample;a.flip+=1;a.flip*=below(a.flip,2);a.phase=Math.sin(3*a.n)*Math.sin(7.9*a.n)*Math.sin(16.7*a.n)*Math.sin(63.5*a.n)*6;a.xp=Math.sin(a.n+a.phase)*a.flip;a.yp=Math.cos(a.n+a.phase)*a.flip;a.zp=0;a.ang=2*a.n+.2*a.phase;a.xq=a.xp*Math.sin(a.ang)+a.zp*Math.cos(a.ang);a.yq=a.yp;a.zq=a.xp*Math.cos(a.ang)-a.zp*Math.sin(a.ang);a.ang=.1*a.time;a.xp=a.xq*Math.sin(a.ang)+a.zq*Math.cos(a.ang);a.yp=a.yq;a.zp=a.xq*Math.cos(a.ang)-a.zq*Math.sin(a.ang);a.ang=.17*a.time;a.xq=\na.xp;a.yq=a.yp*Math.sin(a.ang)+a.zp*Math.cos(a.ang);a.zq=a.yp*Math.cos(a.ang)-a.zp*Math.sin(a.ang);a.zq+=3.1;a.xs=div(a.xq,a.zq);a.ys=div(a.yq,a.zq);a.x=a.xs+.5;a.y=1.3*a.ys+.5;a.a=.05*(1-a.flip);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n=sample*6.283;\n\nflip=flip+1;\nflip=flip*below(flip,2);\n\nphase=sin(n*3)*sin(n*7.9)*sin(n*16.7)*sin(n*63.5)*6;\n\nxp=sin(n+phase)*flip;\nyp=cos(n+phase)*flip;\nzp=0;\n\n//rotate on y during draw\nang=n*2+phase*0.2;\nxq=xp*sin(ang) + zp*cos(ang);\nyq=yp;\nzq=xp*cos(ang) - zp*sin(ang);\n\n//rotation;\nang=time*0.1;\nxp=xq*sin(ang) + zq*cos(ang);\nyp=yq;\nzp=xq*cos(ang) - zq*sin(ang);\n\nang=time*0.17;\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\n\n\n//push into viewspace\nzq=zq+3.1;\n\n\n//project into screenspace\nxs=xq/zq;\nys=yq/zq;\n\n\nx=xs+0.5;\ny=ys*1.3+0.5;\na=(1-flip)*0.05;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.thresh=0;a.dx_r=0;a.dy_r=0;a.q1=0;a.q2=0;a.q3=0;","frame_eqs_str":"a.warp=0;a.wave_r=a.wave_r+.25*Math.cos(1.12*a.time)+.2*(.3*Math.cos(1.28*a.time)+.3*Math.sin(2*a.time));a.wave_g=a.wave_g+.25*Math.cos(1.142*a.time)+.2*(.3*Math.cos(1.2*a.time)+.32*Math.sin(1.623*a.time));a.wave_b=a.wave_b+.25*Math.cos(1.13*a.time)+.2*(.4*Math.cos(1.9*a.time)+.34*Math.sin(1.5245*a.time));a.q1=a.wave_r;a.q2=a.wave_g;a.q3=a.wave_b;","pixel_eqs_str":"a.thresh=2*above(a.bass_att,a.thresh)+(1-above(a.bass_att,a.thresh))*(.96*(a.thresh-1.3)+1.3);a.dx_r=.15*equal(a.thresh,2)*Math.sin(5*a.time)+(1-equal(a.thresh,2))*a.dx_r;a.dy_r=.15*equal(a.thresh,2)*Math.sin(6*a.time)+(1-equal(a.thresh,2))*a.dy_r;a.rot+=.2*Math.abs(7*a.dx_r*(2*a.rad-Math.cos(12*a.ang))*Math.sin(2-a.rad)*Math.abs(1.2*a.dx_r));a.zoom+=.2*Math.abs(8*a.dy_r*Math.abs(a.dx_r*Math.sin(2*Math.sin(2*a.rad)*Math.tan(6*a.rad))));a.zoom+=4*a.dx_r*(a.rad-3.5*a.x*Math.cos(Math.sin(3-\n3*a.rad*Math.cos(2*a.y-a.bass_att)))*(.5-a.rad));","init_eqs_eel":"","frame_eqs_eel":"warp = 0;\nwave_r = wave_r + 0.25*cos(1.12*time) +\n0.2*(0.3*cos(1.28*time)+0.3*sin(2*time));\nwave_g = wave_g + 0.25*cos(1.142*time) +\n0.2*(0.3*cos(1.2*time)+0.32*sin(1.623*time));\nwave_b = wave_b + 0.25*cos(1.13*time) +\n0.2*(0.4*cos(1.9*time)+0.34*sin(1.5245*time));\n\nq1 = wave_r;\nq2 = wave_g;\nq3 = wave_b;","pixel_eqs_eel":"thresh = above(bass_att,thresh)*2+(1-above(bass_att,thresh))*((thresh-1.3)*0.96+1.3);\ndx_r = equal(thresh,2)*0.15*sin(5*time)+(1-equal(thresh,2))*dx_r;\ndy_r = equal(thresh,2)*0.15*sin(6*time)+(1-equal(thresh,2))*dy_r;\n\n\nrot = rot + 0.2*abs(dx_r*7*((2*rad-cos(12*ang))*sin(2-rad)*abs(1.2*dx_r)));\nzoom = zoom + 0.2*abs(8*dy_r*abs(dx_r*sin(2*sin(2*rad)*tan(6*rad))));\nzoom = zoom + 4*dx_r*(rad-x*(3.5*cos(sin(3-rad*3*cos(2*y-bass_att))))*(0.5-rad));","warp":" shader_body { \n  vec2 uv_1;\n  uv_1.y = uv.y;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3.x = roam_cos.x;\n  tmpvar_3.y = roam_sin.x;\n  vec2 tmpvar_4;\n  tmpvar_4 = (texsize_noise_lq.zw * texsize.xy);\n  uv_1.x = (uv.x + ((0.02 * \n    ((texture (sampler_noise_lq, ((\n      (0.1 * tmpvar_4)\n     * uv) + (tmpvar_3 * 0.1))).y * 2.0) - 1.0)\n  ) * aspect.x));\n  vec2 tmpvar_5;\n  tmpvar_5.x = roam_sin.y;\n  tmpvar_5.y = -(roam_cos.y);\n  uv_1.x = (uv_1.x + ((0.04 * \n    ((texture (sampler_noise_lq, ((\n      (0.0125 * tmpvar_4)\n     * uv_1) + (tmpvar_5 * 0.03))).z * 2.0) - 1.0)\n  ) * aspect.x));\n  ret_2 = (texture (sampler_main, uv_1).xyz * vec3(0.99, 0.98, 0.97));\n  ret_2 = (ret_2 + ((\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)).x - 0.5)\n   / 256.0) * 2.0));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_2;\n  ret = tmpvar_6.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (((texture (sampler_main, uv).xyz - 0.5) * 3.0) + 0.5);\n  ret = tmpvar_1.xyz;\n }","warp_hlsl":"// to access a texture on disk: make a sampler.  This example loads \"noise_lq.{tga/jpg/etc}\".\n\n     // auto-binds; .xy = (w,h); .zw = (1/w,1/h)\n\nshader_body \n{\n    uv.x += 0.02 * (tex2D( sampler_noise_lq, \n                         uv*0.050*texsize_noise_lq.zw*texsize.xy*2\n                         + float2(roam_cos.x,roam_sin.x)*0.1 ).y*2-1)*aspect.x;\n    uv.x += 0.04 * (tex2D( sampler_noise_lq, \n                         uv*0.025*texsize_noise_lq.zw*texsize.xy*0.5\n                         + float2(roam_sin.y,-roam_cos.y)*0.03  ).z*2-1)*aspect.x;\n\n    ret = tex2D( sampler_main, uv ).xyz;\n\n    // darken over time\n    // cool idea: different falloff rates for the 3 colors-\n    ret *= float3(0.99,0.98,0.97);\n\n    // ERROR DIFFUSION DITHER - looks great\n    float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\n    ret.xyz += (tex2D(sampler_noise_lq, dither_uv).x-0.5)/256.0*2; \n}","comp_hlsl":"shader_body\n{\n    ret = tex2D(sampler_main, uv).xyz;\n    ret = (ret-0.5)*3 + 0.5;\n}\n\n"}