{"version":2,"baseVals":{"rating":5,"gammaadj":2.001,"decay":1,"echo_zoom":1,"additivewave":1,"wave_brighten":0,"wave_a":0.001,"warpanimspeed":100,"warpscale":1.951,"zoomexp":0.01,"zoom":0.90485,"warp":2.90523,"sx":0.99999,"ob_size":0.5,"ob_r":0.01,"ib_size":0.26,"mv_x":9.44,"mv_y":7.56,"mv_l":2.5,"mv_r":0,"mv_g":0,"mv_a":0.1},"shapes":[{"baseVals":{"enabled":1,"thickoutline":1,"textured":1,"rad":1.08925,"tex_zoom":0.68515,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":0},"init_eqs_str":"a.q2=0;a.q3=0;a.q4=0;","frame_eqs_str":"a.border_b=a.q2;a.border_g=a.q3;a.border_r=a.q4;a.ang=.09*Math.sin(.8*a.time);a.x=.5+.05*(Math.sin(.5*a.time)+Math.sin(.2*a.time));a.y=.5+.05*(Math.sin(.8*a.time)+Math.sin(.4*a.time));","init_eqs_eel":"","frame_eqs_eel":"border_b = q2;\nborder_g = q3;\nborder_r = q4;\nang = .09 * sin(.8 * time);\n// + .05 * treb_att * sin(.8 * time);\nx = .5 + .05 * (sin(.5 * time) + sin(.2 * time));\ny = .5 + .05 * (sin(.8 * time) + sin(.4 * time));"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"a = .002 + q1;","point_eqs_str":"x = .5 * abs(sin(treb * time * .0007));\nr = 1 - x;\ng = 0;\nb = 0;","init_eqs_eel":"","frame_eqs_eel":"a = .002 + q1;","point_eqs_eel":"x = .5 * abs(sin(treb * time * .0007));\nr = 1 - x;\ng = 0;\nb = 0;"},{"baseVals":{"additive":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"a = .002 + q1;","point_eqs_str":"x = 1 - .5 * abs(sin(treb * time * .0007));\nr = 1 - x;\ng = 0;\nb = 0;","init_eqs_eel":"","frame_eqs_eel":"a = .002 + q1;","point_eqs_eel":"x = 1 - .5 * abs(sin(treb * time * .0007));\nr = 1 - x;\ng = 0;\nb = 0;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"","frame_eqs_str":"a.sx=a.bass;a.wave_r=.5*a.treb;a.wave_g=a.wave_r;a.wave_b=1;a.echo_zoom+=above(a.bass,1.3)*a.bass*.1;","pixel_eqs_str":"a.rot=a.ang*Math.sin(a.time)*.02;a.zoom+=above(a.y,.4)*below(a.y,.6)*a.bass*.1*a.rad;","init_eqs_eel":"","frame_eqs_eel":"sx=bass;\nwave_r=treb*.5;\nwave_g=wave_r;\nwave_b=1;\necho_zoom=echo_zoom+(above(bass,1.3)*bass*.1);","pixel_eqs_eel":"rot=(ang*sin(time)*.02);\nzoom=zoom+(above(y,.4)*below(y,.6)*bass*.1)*rad;","warp":" shader_body { \n  vec3 ret_1;\n  ret_1 = (texture (sampler_main, uv).xyz + ((\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)).xyz - 0.5)\n   / 256.0) * 3.0));\n  vec3 tmpvar_2;\n  tmpvar_2 = fract((ret_1 - 0.005));\n  ret_1 = tmpvar_2;\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = tmpvar_2;\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  vec2 uv3_1;\n  vec2 uv2_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = ((uv - 0.5) * aspect.xy);\n  float tmpvar_4;\n  tmpvar_4 = (0.1 / (sqrt(\n    dot (tmpvar_3, tmpvar_3)\n  ) + 0.1));\n  vec2 tmpvar_5;\n  float tmpvar_6;\n  tmpvar_6 = (ang / 3.14);\n  tmpvar_5.x = tmpvar_6;\n  tmpvar_5.y = (q27 * tmpvar_4);\n  float tmpvar_7;\n  tmpvar_7 = (0.1 * q30);\n  uv2_2.y = (tmpvar_5.y + tmpvar_7);\n  uv2_2.x = (tmpvar_6 + (0.2 * time));\n  vec2 tmpvar_8;\n  tmpvar_8.x = tmpvar_6;\n  tmpvar_8.y = (4.0 * tmpvar_4);\n  uv3_1.x = tmpvar_8.x;\n  uv3_1.y = (tmpvar_8.y - tmpvar_7);\n  float tmpvar_9;\n  tmpvar_9 = clamp ((1.0 - (4.0 * rad)), 0.0, 1.0);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = (((\n    (3.0 * max (((2.0 * texture (sampler_main, uv2_2).xyz) + texture (sampler_main, uv3_1).xyz), ((2.0 * \n      ((texture (sampler_blur2, fract(uv2_2)).xyz * scale2) + bias2)\n    ) + (\n      (texture (sampler_blur2, fract(uv3_1)).xyz * scale2)\n     + bias2))))\n   * rad) + (\n    ((vec3(0.0, 0.0, 1.0) * uv.y) * pow ((1.0 - rad), 8.0))\n   * tmpvar_9)) + ((tmpvar_9 * 2.0) * (\n    (texture (sampler_blur1, uv).xyz * scale1)\n   + bias1)));\n  ret = tmpvar_10.xyz;\n }","warp_hlsl":"shader_body\n{\n    ret = tex2D( sampler_main, uv ).xyz;\n\n    // ERROR DIFFUSION DITHER - looks great\n    float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\n    ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0*3;\n\n    // darken over time\n    //ret -= 0.004;\n    //ret *= 0.99;\n    //ret *= 0.97 + 0.03*saturate( length(uv - uv_orig)*200 );  // center only\n \n    ret = frac(ret - 0.005);\n}","comp_hlsl":"shader_body\n{\nfloat2 uv1 = (uv-0.5)*aspect.xy;\n\nfloat rad2 = length(uv1) + .1;\nfloat rad1 = .1/rad2 ;\n\nfloat2 uv2 = float2 (ang/3.14, q27*rad1);\nuv2.y = uv2.y  +.1*q30;\nuv2.x = uv2.x  +.2*time;\n\nfloat2 uv3 = float2 (ang/3.14, 4*rad1);\nuv3.y = uv3.y  -.1*q30;\n\n\nfloat3 crisp = 2*GetPixel(uv2) + GetPixel(uv3);\ncrisp = max(crisp,2*GetBlur2(frac(uv2)) + GetBlur2(frac(uv3)));\n\nfloat3 lay1 = float3 (0,0,1)*uv.y*pow(1-rad,8);\n\ncrisp = 3*crisp * pow(rad,1);\nfloat mask = saturate(1-4*rad);\n\nret = crisp + lay1*mask + mask * 2*GetBlur1(uv);\n\n}"}