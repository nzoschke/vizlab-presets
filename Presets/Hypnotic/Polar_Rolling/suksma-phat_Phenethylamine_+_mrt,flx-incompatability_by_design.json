{"version":2,"baseVals":{"rating":5,"gammaadj":1.07,"decay":0.97,"echo_zoom":0.998,"echo_alpha":0.5,"echo_orient":1,"wave_mode":6,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_a":0.001,"wave_scale":0.331,"wave_smoothing":0,"wave_mystery":1,"modwavealphastart":0.3,"modwavealphaend":2,"warpanimspeed":0.01,"warpscale":0.01,"warp":0.01,"sx":1.07213,"wave_r":0.5,"wave_g":0,"wave_x":0.49,"ob_size":0.015,"ob_g":0.8,"ob_b":0.7,"ib_r":0.6,"ib_g":0,"ib_b":0.4,"mv_x":6.4,"mv_y":9.6,"mv_l":0.6,"mv_g":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":3,"additive":1,"thickoutline":1,"x":0.9,"rad":0.54822,"ang":6.28319,"tex_zoom":100,"r":0.3,"b":0.4,"a":0.56,"g2":0.3,"b2":1,"border_r":0,"border_g":0,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.ang=6*Math.sin(a.time);a.sides=20-div(a.bass+a.treb+a.mid,3);a.r=.23*Math.sin(a.time);a.g=.59*Math.sin(a.time);a.b=.89*Math.sin(a.time);a.r2=.23*Math.cos(a.time);a.g2=.59*Math.cos(a.time);a.b2=.89*Math.cos(a.time);","init_eqs_eel":"","frame_eqs_eel":"ang=sin(time)*6;\nsides=20-((bass+treb+mid)/3);\nr=sin(time)*0.23;\ng=sin(time)*0.59;\nb=sin(time)*0.89;\nr2=cos(time)*0.23;\ng2=cos(time)*0.59;\nb2=cos(time)*0.89"},{"baseVals":{"enabled":1,"sides":16,"additive":1,"thickoutline":1,"textured":1,"x":0.13,"y":1,"rad":0.26671,"ang":2.38761,"tex_ang":0.12566,"tex_zoom":100,"b":0.1,"a":0,"b2":1,"a2":0.5,"border_r":0,"border_a":0},"init_eqs_str":"","frame_eqs_str":"a.r=.4*Math.cos(a.time);a.g=.3*Math.sin(a.time);a.b=.6*Math.sin(a.time);","init_eqs_eel":"","frame_eqs_eel":"r=cos(time)*0.4;\ng=sin(time)*0.3;\nb=sin(time)*0.6"},{"baseVals":{"sides":15,"additive":1,"textured":1,"x":0.61,"rad":1.18646,"ang":3.39292,"tex_zoom":100,"r":0,"g":0.25,"a":0.2,"g2":0,"a2":0.1,"border_r":0,"border_a":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"ang=sin(time)","init_eqs_eel":"","frame_eqs_eel":"ang=sin(time)"},{"baseVals":{"enabled":1,"sides":6,"additive":1,"thickoutline":1,"textured":1,"x":0,"rad":4.09138,"ang":0.37699,"tex_ang":2.45044,"tex_zoom":100,"r":0.5,"a":0.04,"g2":0.3,"b2":1,"a2":0.2,"border_b":0,"border_a":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"spectrum":1,"thick":1,"additive":1,"scaling":100,"smoothing":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"scaling":81.95444,"smoothing":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"wave_x=1;","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"wave_x=1;","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.w=0;a.chemy=0;a.q12=0;a.q18=0;a.q22=0;a.q13=0;a.scale=0;a.q15=0;a.q6=0;a.dt=0;a.q1=0;a[\"var\"]=0;a.q5=0;a.dm=0;a.radm=0;a.mm=0;a.tt=0;a.angle=0;a.q11=0;a.q4=0;a.q16=0;a.t=0;a.db=0;a.q17=0;a.bb=0;a.chemx=0;a.q2=0;a.q14=0;a.q3=0;a.q7=0;a.q8=0;a.mv_x=64;a.mv_y=48;a.nut=0;a.stp=0;a.stq=0;a.rtp=0;a.rtq=0;a.wvr=0;a.decay=0;a.dcsp=0;","frame_eqs_str":"a.t+=div(2.5,a.fps);a.t=.00001<Math.abs(above(a.t,2))?a.t-2:a.t;a.q22=-a.t;a.db=.98*a.db+.2*a.bass_att;a.bb+=.1*a.db;a.dt=.98*a.dt+.2*a.treb_att;a.tt+=.1*a.dt;a.dm=.98*a.dm+.2*a.mid_att;a.mm+=.1*a.dm;a.q13=.5+.25*Math.sin(.1*(a.bb-a.mm));a.q14=.5+.25*Math.sin(.1*(a.tt-a.mm));a.w=.1*(a.bb-a.tt);a.q16=.8-.04*(a.db-a.dt);a.q11=Math.sin(a.w);a.q12=Math.cos(a.w);a.q17=Math.sin(-a.w);a.q18=Math.cos(-a.w);a.q15=div(1,a.q16);a.zoom=1;a.warp=0;a.scale=8;a.angle=.2*-a.time;a.q1=a.scale*\nMath.cos(a.angle);a.q2=a.scale*Math.sin(a.angle);a.q3=0;a.q4=.3;a.scale=.8;a.angle=.2*a.time;a.q5=a.scale*Math.cos(a.angle);a.q6=a.scale*Math.sin(a.angle);a.q7=-.25;a.q8=.2;a.q11=div(1,Math.asin(1));a.decay=.965;a.zoom=1;a.rot=.008;","pixel_eqs_str":"a[\"var\"]=30+15*above(a.bass,.9);a.chemx=.2*above(a.treb,1);a.chemy=.2*above(a.treb,1);a.radm=a.rad+2;a.cx=a.chemx*div(div(a.radm,a.radm),a.radm);a.cy=a.chemy*div(div(a.radm,a.radm),a.radm);a.dx=.01*Math.sin(a.y*a[\"var\"]);a.dy=.01*Math.cos(a.x*a[\"var\"])*a.rad;","init_eqs_eel":"mv_x=64;mv_y=48;\nnut=0;\nstp=0;stq=0;\nrtp=0;rtq=0;\nwvr=0;\ndecay=0;\ndcsp=0","frame_eqs_eel":"//spiral collide frame\nt = t + 2.5/fps;\nt = if(above(t,2),t-2,t);\nq22 = -t;\n// Flexis dampened sound response functions\ndb = db*0.98 + bass_att*0.2; // dampener\nbb = bb + db*0.1; // accumulation, replace time expressions with this ;)\ndt = dt*0.98 + treb_att*0.2;\ntt = tt + dt*0.1;\ndm = dm*0.98 + mid_att*0.2;\nmm = mm + dm*0.1;\n//***** [q11-q18] variables for Flexis caleidoscope shader code *****\n// change\nq13 = 0.5 + sin((bb-mm)*0.1)*0.25; // center x\nq14 = 0.5 + sin((tt-mm)*0.1)*0.25; // center y\nw = (bb-tt)*0.1;                   // angle\nq16 = 0.8 - (db-dt)*0.04;         // size\n//don't change\nq11 = sin(w);\nq12 = cos(w);\nq17 = sin(-w);\nq18 = cos(-w);\nq15 = 1/q16;\nzoom =1;// 0.999;\nwarp = 0;\n\n\n// a\nscale = 8;\nangle = -time*0.2;\n\nq1 = scale*cos(angle); // the real part\nq2 = scale*sin(angle); // the imaginary part\n\n// b\n\nq3 = 0; // the real part\nq4 = 0.3; // the imaginary part\n\n// c\nscale = 0.8;\nangle = time*0.2;\n\nq5 = scale*cos(angle); // the real part\nq6 = scale*sin(angle); // the imaginary part\n\n// d\nq7 = -0.25; // the real part\nq8 = 0.2; // the imaginary part\n\nq11 = 1/asin(1);\ndecay=0.965;\nzoom=1;\nrot=0.008","pixel_eqs_eel":"var=30+above(bass,0.9)*15;\n\nchemx=above(treb,1)*0.2;\nchemy=above(treb,1)*0.2;\n\nradm=rad+2;\ncx=chemx*(radm/radm/radm);\ncy=chemy*(radm/radm/radm);\n\ndx=sin(y*var)*0.01;\ndy=cos(x*var)*0.01*rad;","warp":" shader_body { \n  vec2 uv_1;\n  vec2 uv6_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = ((uv - 0.5) * aspect.xy);\n  float x_4;\n  x_4 = (tmpvar_3.x * tmpvar_3.y);\n  float tmpvar_5;\n  tmpvar_5 = ((q10 * 24.0) * sqrt((x_4 * x_4)));\n  uv_1 = (uv + (vec2(0.0, 0.01) * dot (\n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  , vec3(0.32, 0.49, 0.29))));\n  uv_1 = (uv_1 - (clamp (\n    ((sin(tmpvar_5) / cos(tmpvar_5)) * normalize(tmpvar_3))\n  , vec2(-2.0, -2.0), vec2(2.0, 2.0)) / 200.0));\n  uv6_2 = (0.4 * sin((\n    (uv_1 * 6.0)\n   + \n    (rand_frame * 16.0)\n  .xy)));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = (((\n    (texture (sampler_main, uv_1).xyz - (((texture (sampler_blur2, \n      fract(uv_1)\n    ).xyz * scale2) + bias2) * 0.02))\n   + \n    (0.1 * (vec3((0.1 / sqrt(\n      dot (uv6_2, uv6_2)\n    ))) * (0.5 * (1.0 + roam_cos)).xyz))\n  ) * 0.99) - 0.025);\n  ret = tmpvar_6.xyz;\n }","comp":"vec2 xlat_mutabledenominator;\nvec2 xlat_mutablenumerator;\n shader_body { \n  vec2 uv_1;\n  vec2 spiral_2;\n  uv_1 = (((uv - 0.5) * aspect.xy) * 2.0);\n  vec2 tmpvar_3;\n  tmpvar_3.x = ((uv_1.x * q1) - (uv_1.y * q2));\n  tmpvar_3.y = ((uv_1.x * q2) + (uv_1.y * q1));\n  vec2 tmpvar_4;\n  tmpvar_4.x = q3;\n  tmpvar_4.y = q4;\n  xlat_mutablenumerator = (tmpvar_3 + tmpvar_4);\n  vec2 tmpvar_5;\n  tmpvar_5.x = ((uv_1.x * q5) - (uv_1.y * q6));\n  tmpvar_5.y = ((uv_1.x * q6) + (uv_1.y * q5));\n  vec2 tmpvar_6;\n  tmpvar_6.x = q7;\n  tmpvar_6.y = q8;\n  xlat_mutabledenominator = (tmpvar_5 + tmpvar_6);\n  vec2 tmpvar_7;\n  tmpvar_7.x = ((xlat_mutablenumerator.x * xlat_mutabledenominator.x) + (xlat_mutablenumerator.y * xlat_mutabledenominator.y));\n  tmpvar_7.y = ((xlat_mutablenumerator.y * xlat_mutabledenominator.x) - (xlat_mutablenumerator.x * xlat_mutabledenominator.y));\n  uv_1 = ((tmpvar_7 / (\n    (xlat_mutabledenominator.x * xlat_mutabledenominator.x)\n   + \n    (xlat_mutabledenominator.y * xlat_mutabledenominator.y)\n  )) * 0.5);\n  float tmpvar_8;\n  tmpvar_8 = (-(time) * 0.5);\n  vec2 tmpvar_9;\n  tmpvar_9 = (uv_1 - 0.5);\n  float tmpvar_10;\n  float tmpvar_11;\n  tmpvar_11 = (min (abs(\n    (tmpvar_9.x / tmpvar_9.y)\n  ), 1.0) / max (abs(\n    (tmpvar_9.x / tmpvar_9.y)\n  ), 1.0));\n  float tmpvar_12;\n  tmpvar_12 = (tmpvar_11 * tmpvar_11);\n  tmpvar_12 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_12) + 0.05368138) * tmpvar_12) - 0.1173503)\n     * tmpvar_12) + 0.1938925) * tmpvar_12) - 0.3326756)\n   * tmpvar_12) + 0.9999793) * tmpvar_11);\n  tmpvar_12 = (tmpvar_12 + (float(\n    (abs((tmpvar_9.x / tmpvar_9.y)) > 1.0)\n  ) * (\n    (tmpvar_12 * -2.0)\n   + 1.570796)));\n  tmpvar_10 = (tmpvar_12 * sign((tmpvar_9.x / tmpvar_9.y)));\n  if ((abs(tmpvar_9.y) > (1e-08 * abs(tmpvar_9.x)))) {\n    if ((tmpvar_9.y < 0.0)) {\n      if ((tmpvar_9.x >= 0.0)) {\n        tmpvar_10 += 3.141593;\n      } else {\n        tmpvar_10 = (tmpvar_10 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_10 = (sign(tmpvar_9.x) * 1.570796);\n  };\n  float tmpvar_13;\n  tmpvar_13 = -(tmpvar_10);\n  vec2 tmpvar_14;\n  tmpvar_14.x = (((tmpvar_13 * q11) * 3.0) + tmpvar_8);\n  tmpvar_14.y = (((aspect.w * \n    log(sqrt(dot (tmpvar_9, tmpvar_9)))\n  ) + (tmpvar_13 * q11)) - tmpvar_8);\n  spiral_2 = (0.5 + ((0.5 - \n    abs(((fract(\n      (tmpvar_14 * 0.5)\n    ) * 2.0) - 1.0))\n  ) * 0.95));\n  uv_1 = spiral_2;\n  vec4 tmpvar_15;\n  tmpvar_15.w = 1.0;\n  tmpvar_15.xyz = texture (sampler_main, spiral_2).xyz;\n  ret = tmpvar_15.xyz;\n }","warp_hlsl":"sampler sampler_worms;\nfloat3 color, mus;\nfloat dx,dy;\nshader_body {\n\n\nfloat2 uv1 = (uv-.5) * aspect.xy;\n\nfloat2 uv6 = uv1;\nfloat z = q10*24*length(((uv1.x)*(uv1.y)));\nfloat2 d = normalize(uv1);\nfloat2 rs = clamp(tan(z)*d,-2,2);\nuv += .01*lum(GetBlur1(uv))*float2 (0,1);\nuv -= rs/200;\n\nuv6 = .4*sin(uv*6+rand_frame*16);\nmus = .1/(length(uv6));\nmus *= .5*(1+roam_cos);\n\nfloat3 blur = GetBlur2(frac(uv));\n\nfloat3 crisp= tex2D(sampler_main,uv);\n\nfloat3 ret1 = crisp - blur*.02 + .1*mus;\n\nq25 = 1;\nret = q25*(ret1*.99-.025) + (1-q25)* GetPixel(uv_orig);\n\n}","comp_hlsl":"sampler sampler_sunrise;\n\nfloat2 factorA, factorB, product;\nfloat2 numerator, denominator, fraction;\n\nshader_body\n{\nfloat2 uvo = uv;\n//*** Flexis Moebius transformation code\n\nuv = (uv-0.5)*aspect.xy*2;\nfactorA = uv;\nfactorB = float2(q1,q2);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y,   // the products real part\n                  factorA.x*factorB.y + factorA.y*factorB.x);  // the products imaginary part\n\nnumerator = product + float2(q3,q4);\n\nfactorA = uv;\nfactorB = float2(q5,q6);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y,   // the products real part\n                  factorA.x*factorB.y + factorA.y*factorB.x);  // the products imaginary part\n\n\ndenominator = product + float2(q7,q8);\n\nfraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,   // the fractions real part\n                   numerator.y*denominator.x - numerator.x*denominator.y)/  // the fractions imaginary part\n                   (denominator.x*denominator.x + denominator.y*denominator.y);\n\nuv = fraction*0.5;\n\n// ***\n\n\n// *** Flexis logarithmic spiral code\n\nfloat t = -time*0.5; // set velocity here\nfloat2 c = (uv-0.5);\nfloat1 ang_hq = -atan2(c.x,c.y);\n// q11 = 1/asin(1); from the init section\nfloat2 spiral = float2(ang_hq*q11*3+t,aspect.w*log(length(c))+ang_hq*q11-t);\nspiral = 0.5 + (0.5 - abs( frac( spiral * 0.5 ) * 2.0 - 1.0 ))*0.95; // mirror\nuv = spiral;\n\n// ***\n\nret = tex2d(sampler_main,spiral);\n//ret = GetPixel(uvo);\n}"}