{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.94,"echo_zoom":0.498,"echo_orient":2,"wave_mode":6,"wave_thick":1,"wrap":0,"brighten":1,"wave_a":100,"wave_scale":0.88,"wave_smoothing":0,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":0.01,"warpscale":1.766,"zoomexp":1.00016,"dx":0.00001,"dy":0.00001,"warp":0.01,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"ob_size":0.005,"ob_a":1,"ib_size":0.005,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":0.1,"mv_x":19.2,"mv_y":14.4,"mv_l":0.05,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.c_inv_i=0;a.translation_x=0;a.a_i=0;a.c_r=0;a.a_r=0;a.iangle=0;a.scale=0;a.q6=0;a.ac_i=0;a.itranslation_u=0;a.q1=0;a.itranslation_v=0;a.q5=0;a.c_inv_r=0;a.d_i=0;a.angle=0;a.mu_i=0;a.pi=0;a.bcad_r=0;a.iscale=0;a.an=0;a.q4=0;a.b_r=0;a.mu_r=0;a.oy=0;a.bcad_i=0;a.mod=0;a.c_i=0;a.num=0;a.q2=0;a.ac_r=0;a.seg=0;a.translation_y=0;a.q3=0;a.b_i=0;a.q7=0;a.anga=0;a.radi=0;a.d_r=0;a.ox=0;a.q8=0;","frame_eqs_str":"a.wave_r=a.wave_r+.35*Math.sin(1.14*a.time)+.16*Math.sin(1.5*a.time);a.wave_g=a.wave_g+.36*Math.sin(1.27*a.time)+.15*Math.sin(1.11*a.time);a.wave_b=a.wave_b+.37*Math.sin(1.284*a.time)+.15*Math.sin(1.3*a.time);a.warp=0;a.ob_r=a.wave_g;a.ob_b=a.wave_r;a.ob_g=a.wave_b;a.ib_r=a.wave_r;a.ib_b=a.wave_g;a.ib_g=a.wave_r;a.scale=4;a.angle=.2*a.time;a.translation_x=0;a.translation_y=.2;a.iscale=6;a.iangle=.3*Math.sin(.1337*a.time);a.itranslation_u=0;a.itranslation_v=.2;a.a_r=Math.cos(a.angle)*\na.scale;a.a_i=Math.sin(a.angle)*a.scale;a.b_r=a.translation_x;a.b_i=a.translation_y;a.c_r=-Math.cos(a.iangle)*a.iscale;a.c_i=-Math.sin(a.iangle)*a.iscale;a.d_r=a.itranslation_u;a.d_i=a.itranslation_v;a.c_inv_r=div(a.c_r,a.c_r*a.c_r+a.c_i*a.c_i);a.c_inv_i=div(a.c_i,a.c_r*a.c_r+a.c_i*a.c_i);a.ac_r=a.a_r*a.c_inv_r-a.a_i*a.c_inv_i;a.ac_i=a.a_r*a.c_inv_i-a.a_i*a.c_inv_r;a.bcad_r=a.b_r*a.c_r-a.b_i*a.c_i-(a.a_r*a.d_r-a.a_i*a.d_i);a.bcad_i=a.b_r*a.c_i-a.b_i*a.c_r-(a.a_r*a.d_i-a.a_i*a.d_r);a.mu_r=a.bcad_r*\na.c_inv_r-a.bcad_i*a.c_inv_i;a.mu_i=a.bcad_r*a.c_inv_i-a.bcad_i*a.c_inv_r;a.q1=a.ac_r;a.q2=a.ac_i;a.q3=a.mu_r;a.q4=a.mu_i;a.q5=a.c_r;a.q6=a.c_i;a.q7=a.d_r;a.q8=a.d_i;","pixel_eqs_str":"a.dy+=.00001<Math.abs(below(Math.abs(a.q1-a.x),.01))?.00001<Math.abs(below(a.y,a.q2))?Math.max(.02-Math.abs(a.q1-a.x),0):.001:.001;a.cx=8.13988973*sqr(a.warp-a.x);a.cx=.00001<Math.abs(below(a.cx,-1))?-1:a.cx;a.cx=.00001<Math.abs(above(a.cx,2))?2:a.cx;a.dy=.00001<Math.abs(below(a.dy,-1))?-1:a.dy;a.dy=.00001<Math.abs(above(a.dy,1))?1:a.dy;a.num=8;a.pi=3.141592654;a.radi=.75*(a.y-.5);a.radi=a.y-.5;a.radi=pow(a.radi*a.radi+(a.x-.5)*(a.x-.5),.5);a.an=a.ang+a.pi+a.time;a.an-=2*a.pi*\nMath.floor(div(a.an,2*a.pi));a.mod=.1;a.seg=a.ang+a.pi;a.seg=div(a.seg,2*a.pi)*a.num;a.seg=Math.floor(a.seg);a.seg-=equal(a.seg,a.num);a.anga=a.ang+a.pi-div(2*a.pi,a.num)*a.seg;a.anga=.00001<Math.abs(equal(mod(a.seg,2),0))?div(2*a.pi,a.num)-a.anga:a.anga;a.anga+=div(a.pi,4);a.ox=.5-a.radi*Math.sin(a.anga);a.oy=.5+a.radi*Math.cos(a.anga);a.dx=equal(a.seg,3)*(a.x-a.ox);a.dy=equal(a.seg,3)*(a.y-a.oy);a.dx=above(a.seg,0)*(a.x-a.ox);a.dy=above(a.seg,0)*(a.y-a.oy);a.dx=a.dx+.003*Math.sin(64*(2*a.y-1))+\n.001*Math.sin(96*(2*a.y-1));a.dy=a.dy+.004*Math.cos(64*(2*a.x-1))+.002*Math.cos(96*(2*a.x-1));","init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.35*sin(1.14*time) + 0.16*sin(1.5*time);\nwave_g = wave_g + 0.36*sin(1.27*time) + 0.15*sin(1.11*time);\nwave_b = wave_b + 0.37*sin(1.284*time) + 0.15*sin(1.3*time);\nwarp = 0;\n\nob_r = wave_g;\nob_b = wave_r;\nob_g = wave_b;\nib_r = wave_r;\nib_b = wave_g;\nib_g = wave_r;\n\n//before inversion\nscale = 4;\nangle = time*.2;\ntranslation_x = 0;\ntranslation_y = 0.2;\n\n//complex inverted\niscale = 6;\niangle = sin(time*0.1337)*0.3;\nitranslation_u = 0;\nitranslation_v = 0.2;\n\n\n// the mï¿½bius transformation\n// z -> (az+b)/(cz-d); where a,b,c,d are complex numbers and z will be the uv-vector\n// (az+b)/(cz-d) = a/c + mu/(cz+d), with mu = (bc-ad)/c\n// so a/c and mu can be calculated outside of the shader\n\na_r = cos(angle)*scale;\na_i = sin(angle)*scale;\nb_r = translation_x;\nb_i = translation_y;\n\nc_r = -cos(iangle)*iscale;\nc_i = -sin(iangle)*iscale;\nd_r = itranslation_u;\nd_i = itranslation_v;\n\n// c^(-1)\nc_inv_r = c_r/(c_r*c_r+c_i*c_i);\nc_inv_i = c_i/(c_r*c_r+c_i*c_i);\n\n// a*c^(-1)\nac_r = (a_r*c_inv_r - a_i*c_inv_i);\nac_i = (a_r*c_inv_i - a_i*c_inv_r);\n\n// (bc-ad)\nbcad_r = (b_r*c_r - b_i*c_i)-(a_r*d_r-a_i*d_i);\nbcad_i = (b_r*c_i - b_i*c_r)-(a_r*d_i-a_i*d_r);\n\n// mu*c^(-1)\nmu_r = bcad_r*c_inv_r - bcad_i*c_inv_i;\nmu_i = bcad_r*c_inv_i - bcad_i*c_inv_r;\n\nq1 = ac_r;\nq2 = ac_i;\nq3 = mu_r;\nq4 = mu_i;\n\nq5 = c_r;\nq6 = c_i;\nq7 = d_r;\nq8 = d_i;","pixel_eqs_eel":"dy = dy + if(below(abs(q1-x),0.01),if(below(y,q2),max(0.02-abs(q1-x),0),0.001),0.001);\ncx = 8.13988973*sqr(warp - x);\ncx=if(below(cx,-1.0), -1.0, cx);\ncx=if(above(cx,2.0), 2.0, cx);\ndy=if(below(dy,-1), -1, dy);\ndy=if(above(dy,1.0), 1.0, dy);\nnum = 8;\npi = 3.141592654;\nradi = (y-.5)*.75;\nradi = (y-.5);\nradi = pow(radi*radi + (x-.5)*(x-.5),.5);\n\nan = ang + pi + time;\nan = an - pi*2*int(an/(pi*2));\n\nmod = .1;\n\nseg = ang + pi;\nseg = seg/(pi*2)*num;\nseg = int(seg);\nseg = seg - equal(seg,num);\n\nanga = (ang + pi) - (pi*2/num)*seg;\nanga = if(equal(seg%2,0),(pi*2/num) - anga,anga);\n//anga = anga + pi/6; // num = 6\nanga = anga + pi/4; // num = 8\n//anga = anga + .85; // num = 10\n\n\nox = .5 - radi*sin(anga);\noy = .5 + radi*cos(anga);\n\n//rot = if(equal(seg,0),rot,0);\n\ndx = equal(seg,3)*(x-ox);\ndy = equal(seg,3)*(y-oy);\n\ndx = above(seg,0)*(x-ox);\ndy = above(seg,0)*(y-oy);\n\n//dx = equal(seg,1)*(x - .5)*2;\ndx=dx+0.003*sin((y*2-1)*64)+0.001*sin((y*2-1)*96);\ndy=dy+0.004*cos((x*2-1)*64)+0.002*cos((x*2-1)*96);","warp":"","comp":" shader_body { \n  vec2 moebius_1;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3.x = q1;\n  tmpvar_3.y = q2;\n  vec2 tmpvar_4;\n  tmpvar_4.x = q7;\n  tmpvar_4.y = q8;\n  vec2 tmpvar_5;\n  tmpvar_5 = ((uv - 0.5) * aspect.xy);\n  vec2 tmpvar_6;\n  tmpvar_6.x = ((tmpvar_5.x * q5) - (tmpvar_5.y * q6));\n  tmpvar_6.y = ((tmpvar_5.x * q6) - (tmpvar_5.y * q5));\n  vec2 tmpvar_7;\n  tmpvar_7 = (tmpvar_6 + tmpvar_4);\n  vec2 tmpvar_8;\n  tmpvar_8.x = ((q3 * tmpvar_7.x) + (q4 * tmpvar_7.y));\n  tmpvar_8.y = ((q4 * tmpvar_7.x) - (q3 * tmpvar_7.y));\n  moebius_1 = (0.5 + ((\n    (1.0 - abs(((\n      fract((((tmpvar_8 / \n        ((tmpvar_7.x * tmpvar_7.x) + (tmpvar_7.y * tmpvar_7.y))\n      ) + tmpvar_3) * 0.5))\n     * 2.0) - 1.0)))\n   - 0.5) * 0.99));\n  ret_2 = (texture (sampler_main, moebius_1).xyz * 4.0);\n  ret_2 = (ret_2 - ((\n    (texture (sampler_blur1, moebius_1).xyz * scale1)\n   + bias1) * 3.0));\n  ret_2 = (ret_2 * (1.0 + (0.12 * \n    ((texture (sampler_noise_lq, (rand_frame.xy + (\n      (moebius_1 * texsize.xy)\n     * texsize_noise_lq.zw))).xxx * 2.0) - 1.0)\n  )));\n  ret_2 = ((pow (ret_2, vec3(0.5, 0.5, 0.7)) - 0.1) * 1.1);\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ret_2;\n  ret = tmpvar_9.xyz;\n }","warp_hlsl":"","comp_hlsl":"shader_body\n{\n\nfloat2 ac = float2(q1,q2);\nfloat2 mu = float2(q3,q4);\nfloat2 c = float2(q5,q6);\nfloat2 d = float2(q7,q8);\n\nfloat2 z = (uv-0.5)*aspect.xy;\n\n// (c*z + d)\nfloat2 czd = float2(z.x*c.x-z.y*c.y,z.x*c.y-z.y*c.x) + d;\n// mu/(cz+d)\nfloat2 moebius = float2( mu.x*czd.x + mu.y*czd.y , mu.y*czd.x-mu.x*czd.y )/(czd.x*czd.x+czd.y*czd.y) + ac;\n\nmoebius = 0.5 + (1.0 - abs( frac( moebius * 0.5 ) * 2 - 1.0 )-0.5)*0.99;\n\nuv = moebius;\n    ret = 0;\n    ret += tex2D(sampler_main, uv ).xyz*4;\n    ret -= GetBlur1(uv)*3;\n\n    // little bit of noise:\n    ret *= 1 + 0.12*(tex2D(sampler_noise_lq, rand_frame.xy \n           + uv*texsize.xy*texsize_noise_lq.zw).xxx*2-1);\n \n    // palettize:\n    ret = pow(ret, float3(0.5, 0.5, 0.7));\n\n    ret = (ret-0.1)*1.1;\n   \n\n}"}