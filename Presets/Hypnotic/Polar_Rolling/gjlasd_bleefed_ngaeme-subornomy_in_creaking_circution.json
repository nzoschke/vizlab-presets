{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"echo_zoom":1,"wave_mode":5,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"wave_a":1.136,"wave_scale":1.229,"wave_smoothing":0,"wave_mystery":0.2,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0.015,"ob_b":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":12,"num_inst":92,"x":0.8,"rad":0.02705,"ang":1.5708,"tex_ang":1.25664,"tex_zoom":3.07268,"g":1,"b":1,"g2":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"a.xang=0;a.ampl=0;a.fov=0;a.t1=0;a.yang=0;a.my=0;a.oz=0;a.k1=0;a.t_rel=0;a.k2=0;a.mz=0;a.oy=0;a.mx=0;a.zang=0;a.sample=0;a.t_abs=0;a.ox=0;","frame_eqs_str":"a.t1=a.time-Math.floor(a.time);a.sample=div(a.instance,a.num_inst);a.t_abs=3*a.sample;a.t_rel=a.sample-div(a.time,5);a.ampl=div(2*a.t_abs,2);a.k1=Math.sin(div(a.time,13));a.k2=Math.sin(div(a.time,12));a.ox=a.ampl*Math.sin(a.t_abs*(31+5*a.k1))+Math.sin(div(a.time,25))*(1-a.t_abs)*.4;a.oy=a.ampl*Math.cos(a.t_abs*(31+5*a.k2));a.oz=-1;a.r=sqr(Math.sin(3.4*a.t_rel));a.g=sqr(Math.sin(a.t_rel));a.b=sqr(Math.cos(1.8*a.t_rel));a.xang=div(a.time,9.5);a.yang=div(0*a.time,7);a.zang=div(-a.time,\n22);a.fov=.5;a.mx=a.ox*Math.cos(a.zang)-a.oy*Math.sin(a.zang);a.my=a.ox*Math.sin(a.zang)+a.oy*Math.cos(a.zang);a.ox=a.mx;a.oy=a.my;a.mx=a.ox*Math.cos(a.yang)+a.oz*Math.sin(a.yang);a.mz=-a.ox*Math.sin(a.yang)+a.oz*Math.cos(a.yang);a.ox=a.mx;a.oz=a.mz;a.my=a.oy*Math.cos(a.xang)-a.oz*Math.sin(a.xang);a.mz=a.oy*Math.sin(a.xang)+a.oz*Math.cos(a.xang);a.oy=a.my;a.oz=a.mz;a.oz-=6;a.x=div(a.ox*a.fov,a.oz)+.5;a.y=div(a.oy*a.fov,a.oz)+.5;a.a=.5*div(1,a.mz);a.a2=.5*div(1,a.mz);a.border_a=.5*div(1,a.mz);a.rad=\n.005*div(1,a.mz);","init_eqs_eel":"","frame_eqs_eel":"t1 = time - int (time);\nsample = instance/num_inst;\nt_abs = sample*3;\nt_rel = sample-time/5;\n\nampl = 2*t_abs/2 ;\n\nk1=sin(time/13);\nk2=sin(time/12);\nox = ampl*sin (t_abs*(31+5*k1)) + sin(time/25)*(1-t_abs)*0.4  ;\noy = ampl*cos (t_abs*(31+5*k2));\noz = -1  ;\n\n\nr = sqr(sin(t_rel*3.4));\ng = sqr(sin(t_rel));\nb = sqr (cos(t_rel*1.8));\n\n//a=(0.1*(sin(t_abs*3)) + 0.6*q3*below (abs(1-t_abs-t1 ),0.3))*a;\n\nxang = time/9.5;\nyang = 0*time/7;\nzang = -time/22;\nfov = 0.5;\n\n\n// Rotation um x,y,z\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\n\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 6;\nx = ox*fov/oz +0.5;\n//x = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n\na=1/mz*.5;\na2=1/mz*.5;\nborder_a=1/mz*.5;\nrad=1/mz*.005;"},{"baseVals":{"sides":63,"textured":1,"rad":1.99863,"tex_zoom":0.49981,"g":1,"b":1,"a":0.1,"r2":1,"b2":1,"a2":0.6,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":63,"textured":1,"x":0.123,"y":0,"rad":0.27319,"tex_zoom":0.49981,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":63,"textured":1,"y":1,"rad":0.54822,"tex_zoom":0.49981,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"usedots":1,"scaling":0.89152,"smoothing":0.82,"a":0.6,"enabled":0},"init_eqs_str":"t1 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt2 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt3 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt4 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt5 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt6 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt7 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt8 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\n","frame_eqs_str":"t1 = time - int (time);","point_eqs_str":"\nt_abs = sample*3;\nt_rel = sample-time/5;\n\nampl = 2*t_abs/2 ;\n\nk1=sin(time/13);\nk2=sin(time/12);\nox = ampl*sin (t_abs*(31+5*k1)) + sin(time/25)*(1-t_abs)*0.4  ;\noy = ampl*cos (t_abs*(31+5*k2));\noz = -1  ;\n\n\nr = sqr(sin(t_rel*3.4));\ng = sqr(sin(t_rel));\nb = sqr (cos(t_rel*1.8));\n\na=0.1*(sin(t_abs*3)) \n  + 0.6*q3*below (abs(1-t_abs-t1 ),0.3);\n\nxang = time/9.5;\nyang = 0*time/7;\nzang = -time/22;\nfov = 0.5;\n\n\n// Rotation um x,y,z\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\n\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 6;\nx = ox*fov/oz +0.5;\n//x = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n","init_eqs_eel":"t1 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt2 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt3 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt4 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt5 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt6 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt7 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt8 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\n","frame_eqs_eel":"t1 = time - int (time);","point_eqs_eel":"\nt_abs = sample*3;\nt_rel = sample-time/5;\n\nampl = 2*t_abs/2 ;\n\nk1=sin(time/13);\nk2=sin(time/12);\nox = ampl*sin (t_abs*(31+5*k1)) + sin(time/25)*(1-t_abs)*0.4  ;\noy = ampl*cos (t_abs*(31+5*k2));\noz = -1  ;\n\n\nr = sqr(sin(t_rel*3.4));\ng = sqr(sin(t_rel));\nb = sqr (cos(t_rel*1.8));\n\na=0.1*(sin(t_abs*3)) \n  + 0.6*q3*below (abs(1-t_abs-t1 ),0.3);\n\nxang = time/9.5;\nyang = 0*time/7;\nzang = -time/22;\nfov = 0.5;\n\n\n// Rotation um x,y,z\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\n\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 6;\nx = ox*fov/oz +0.5;\n//x = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n"},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_str":"t1 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt2 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt3 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt4 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt5 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt6 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt7 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt8 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\n","frame_eqs_str":"tm = time*.1;\nt1 = t1*sin(tm*t4) + (1-t1)*sin(tm*t7);\nt2 = t2*sin(tm*t5) + (1-t2)*sin(tm*t8);\nt3 = t3*sin(tm*t6) + (1-t3)*sin(tm*1);\n\ntic = min(time - tin,1);\ntin = time;\n\ntva = (tic*q1*.5);\ntvb = (tic*q2*.5);\ntvc = (tic*q3*.5);\n\nq1 = tva;\nq2 = tvb;\nq3 = tvc;\n\nsz = .5;\nlen = q4;\nt4 = len;","point_eqs_str":"ang = 0;\nlen = t4;\nmad = .6;\n\nit = if(above(sample,0),(it+equal(lev,7)),1);\nita = (ita + 1)*above(sample,0);\n\nmod = if(equal(it%2,0),1,  if(equal((it+1)%4,0),2,  if(equal((it+3)%8,0),3,  if(equal((it+7)%16,0),4,  if(equal((it+15)%32,0),5,  if(equal((it+31)%64,0),6,  if(equal((it+63)%128,0),7,7)  ))))));\n\nsw = sw - 1;\nsw = if(equal(lev,7),mod,sw)*above(sample,0);\n\nlev = if(above(sample,0),if(above(sw,0),lev-1,lev+1),7);\na = lev*.1*1.46;\n\nar = if(above(sample,0),ar,1);\nar = if(equal(lev,0),ar*-1,ar);\nbr = if(above(sample,0),br,1);\nbr = if(equal(lev,1),br*-1,br);\ncr = if(above(sample,0),cr,1);\ncr = if(equal(lev,2),cr*-1,cr);\ndr = if(above(sample,0),dr,1);\ndr = if(equal(lev,3),dr*-1,dr);\ner = if(above(sample,0),er,1);\ner = if(equal(lev,4),er*-1,er);\nfr = if(above(sample,0),fr,1);\nfr = if(equal(lev,5),fr*-1,fr);\ngr = if(above(sample,0),gr,1);\ngr = if(equal(lev,6),gr*-1,gr);\n\nmlev = lev*above(sample,0);\n\nswi = equal(q4,0)*equal(sample,0);\n\nha = if(swi,1-2*int(rand(2)),ha);\nhb = if(swi,1-2*int(rand(2)),hb);\nhc = if(swi,1-2*int(rand(2)),hc);\nhd = if(swi,1-2*int(rand(2)),hd);\nhe = if(swi,1-2*int(rand(2)),he);\nhf = if(swi,1-2*int(rand(2)),hf);\nhg = if(swi,1-2*int(rand(2)),hg);\n\naang = if(above(sample,0),aang,aang + (q1*.8 + q2*.1 + q3*.1)*ha*1);\nbang = if(above(sample,0),bang,bang + (q1*.57 + q2*.33 + q3*.1)*hb*1.33);\ncang = if(above(sample,0),cang,cang + (q1*.33 + q2*.57 + q3*.1)*hc*1.67);\ndang = if(above(sample,0),dang,dang + (q1*.1 + q2*.8 + q3*.1)*hd*2);\neang = if(above(sample,0),eang,eang + (q1*.1 + q2*.57 + q3*.33)*he*2.33);\nfang = if(above(sample,0),fang,fang + (q1*.1 + q2*.33 + q3*.57)*hf*2.67);\ngang = if(above(sample,0),gang,gang + (q1*.1 + q2*.1 + q3*.8)*hg*3);\n\naang = 1.57;\nbang = 1.57;\ncang = 1.57;\ndang = 1.57;\neang = 1.57;\nfang = 1.57;\ngang = 1.57;\n\noz = 0;\n\nlen = len*mad;\nox = above(lev,0)*sin(aang)*len*ar;\noy = above(lev,0)*cos(aang)*len;\n\nan = (ar*aang + br*bang)*br;\nlen = len*mad;\noy = oy + above(lev,1)*sin(an)*len*br;\noz = oz + above(lev,1)*cos(an)*len;\n\nan = (ar*aang + br*bang + cr*cang)*cr;\nlen = len*mad;\nox = ox + above(lev,2)*sin(an)*len*cr;\noz = oz + above(lev,2)*cos(an)*len;\n\nan = (ar*aang + br*bang + cr*cang + dr*dang)*dr;\nlen = len*mad;\nox = ox + above(lev,3)*sin(an)*len*dr;\noy = oy + above(lev,3)*cos(an)*len;\n\nan = (ar*aang + br*bang + cr*cang + dr*dang + er*eang)*er;\nlen = len*mad;\nox = ox + above(lev,4)*sin(an)*len*er;\noz = oz + above(lev,4)*cos(an)*len;\n\nan = (ar*aang + br*bang + cr*cang + dr*dang + er*eang + fr*fang)*fr;\nlen = len*mad;\nox = ox + above(lev,5)*sin(an)*len*fr;\noz = oz + above(lev,5)*cos(an)*len;\n\nan = (ar*aang + br*bang + cr*cang + dr*dang + er*eang + fr*fang + gr*gang)*gr;\nlen = len*mad;\noy = oy + above(lev,6)*sin(an)*len*gr;\nox = ox + above(lev,6)*cos(an)*len;\n\n\nxang = time*1.132;\nxang = q5;\nyang = time*1.153;\nyang = q6;\nzang = time*1.110;\nzang = q7 + 1.57;\nfov = .5;\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 2;\nx = ox*fov/oz + 0.5;\nx = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n","init_eqs_eel":"t1 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt2 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt3 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt4 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt5 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt6 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt7 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt8 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\n","frame_eqs_eel":"tm = time*.1;\nt1 = t1*sin(tm*t4) + (1-t1)*sin(tm*t7);\nt2 = t2*sin(tm*t5) + (1-t2)*sin(tm*t8);\nt3 = t3*sin(tm*t6) + (1-t3)*sin(tm*1);\n\ntic = min(time - tin,1);\ntin = time;\n\ntva = (tic*q1*.5);\ntvb = (tic*q2*.5);\ntvc = (tic*q3*.5);\n\nq1 = tva;\nq2 = tvb;\nq3 = tvc;\n\nsz = .5;\nlen = q4;\nt4 = len;","point_eqs_eel":"ang = 0;\nlen = t4;\nmad = .6;\n\nit = if(above(sample,0),(it+equal(lev,7)),1);\nita = (ita + 1)*above(sample,0);\n\nmod = if(equal(it%2,0),1,  if(equal((it+1)%4,0),2,  if(equal((it+3)%8,0),3,  if(equal((it+7)%16,0),4,  if(equal((it+15)%32,0),5,  if(equal((it+31)%64,0),6,  if(equal((it+63)%128,0),7,7)  ))))));\n\nsw = sw - 1;\nsw = if(equal(lev,7),mod,sw)*above(sample,0);\n\nlev = if(above(sample,0),if(above(sw,0),lev-1,lev+1),7);\na = lev*.1*1.46;\n\nar = if(above(sample,0),ar,1);\nar = if(equal(lev,0),ar*-1,ar);\nbr = if(above(sample,0),br,1);\nbr = if(equal(lev,1),br*-1,br);\ncr = if(above(sample,0),cr,1);\ncr = if(equal(lev,2),cr*-1,cr);\ndr = if(above(sample,0),dr,1);\ndr = if(equal(lev,3),dr*-1,dr);\ner = if(above(sample,0),er,1);\ner = if(equal(lev,4),er*-1,er);\nfr = if(above(sample,0),fr,1);\nfr = if(equal(lev,5),fr*-1,fr);\ngr = if(above(sample,0),gr,1);\ngr = if(equal(lev,6),gr*-1,gr);\n\nmlev = lev*above(sample,0);\n\nswi = equal(q4,0)*equal(sample,0);\n\nha = if(swi,1-2*int(rand(2)),ha);\nhb = if(swi,1-2*int(rand(2)),hb);\nhc = if(swi,1-2*int(rand(2)),hc);\nhd = if(swi,1-2*int(rand(2)),hd);\nhe = if(swi,1-2*int(rand(2)),he);\nhf = if(swi,1-2*int(rand(2)),hf);\nhg = if(swi,1-2*int(rand(2)),hg);\n\naang = if(above(sample,0),aang,aang + (q1*.8 + q2*.1 + q3*.1)*ha*1);\nbang = if(above(sample,0),bang,bang + (q1*.57 + q2*.33 + q3*.1)*hb*1.33);\ncang = if(above(sample,0),cang,cang + (q1*.33 + q2*.57 + q3*.1)*hc*1.67);\ndang = if(above(sample,0),dang,dang + (q1*.1 + q2*.8 + q3*.1)*hd*2);\neang = if(above(sample,0),eang,eang + (q1*.1 + q2*.57 + q3*.33)*he*2.33);\nfang = if(above(sample,0),fang,fang + (q1*.1 + q2*.33 + q3*.57)*hf*2.67);\ngang = if(above(sample,0),gang,gang + (q1*.1 + q2*.1 + q3*.8)*hg*3);\n\naang = 1.57;\nbang = 1.57;\ncang = 1.57;\ndang = 1.57;\neang = 1.57;\nfang = 1.57;\ngang = 1.57;\n\noz = 0;\n\nlen = len*mad;\nox = above(lev,0)*sin(aang)*len*ar;\noy = above(lev,0)*cos(aang)*len;\n\nan = (ar*aang + br*bang)*br;\nlen = len*mad;\noy = oy + above(lev,1)*sin(an)*len*br;\noz = oz + above(lev,1)*cos(an)*len;\n\nan = (ar*aang + br*bang + cr*cang)*cr;\nlen = len*mad;\nox = ox + above(lev,2)*sin(an)*len*cr;\noz = oz + above(lev,2)*cos(an)*len;\n\nan = (ar*aang + br*bang + cr*cang + dr*dang)*dr;\nlen = len*mad;\nox = ox + above(lev,3)*sin(an)*len*dr;\noy = oy + above(lev,3)*cos(an)*len;\n\nan = (ar*aang + br*bang + cr*cang + dr*dang + er*eang)*er;\nlen = len*mad;\nox = ox + above(lev,4)*sin(an)*len*er;\noz = oz + above(lev,4)*cos(an)*len;\n\nan = (ar*aang + br*bang + cr*cang + dr*dang + er*eang + fr*fang)*fr;\nlen = len*mad;\nox = ox + above(lev,5)*sin(an)*len*fr;\noz = oz + above(lev,5)*cos(an)*len;\n\nan = (ar*aang + br*bang + cr*cang + dr*dang + er*eang + fr*fang + gr*gang)*gr;\nlen = len*mad;\noy = oy + above(lev,6)*sin(an)*len*gr;\nox = ox + above(lev,6)*cos(an)*len;\n\n\nxang = time*1.132;\nxang = q5;\nyang = time*1.153;\nyang = q6;\nzang = time*1.110;\nzang = q7 + 1.57;\nfov = .5;\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 2;\nx = ox*fov/oz + 0.5;\nx = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n"},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_str":"t1 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt2 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt3 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt4 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt5 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt6 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt7 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt8 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\n","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"t1 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt2 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt3 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt4 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt5 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt6 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt7 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\nt8 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;\n","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.index2=0;a.index=0;a.q12=0;a.q22=0;a.q21=0;a.q13=0;a.q6=0;a.q1=0;a.dec_med=0;a.q5=0;a.movz=0;a.trel=0;a.q9=0;a.rott=0;a.vol__=0;a.is_beat=0;a.q23=0;a.k1=0;a.q24=0;a.trel_=0;a.vx=0;a.dec_slow=0;a.q11=0;a.q10=0;a.vy=0;a.q4=0;a.dir=0;a.dir_=0;a.p2=0;a.avg=0;a.trig=0;a.beat=0;a.vol=0;a.p1=0;a.peak=0;a.dec_fast=0;a.q2=0;a.q27=0;a.q3=0;a.t0=0;a.vol_=0;a.q7=0;a.q28=0;a.q20=0;a.q8=0;a.step=0;","frame_eqs_str":"a.dec_med=pow(.9,div(30,a.fps));a.dec_slow=pow(.96,div(30,a.fps));a.dec_fast=pow(.6,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,0+a.avg+a.peak)*above(a.time,a.t0+.1);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,16);a.index2=mod(a.index2+a.is_beat*bnot(a.index),8);a.q20=a.avg;a.q21=a.beat;a.q22=a.peak;a.q24=a.is_beat;\na.vol=a.bass_att+a.mid_att+a.treb_att;a.vol_=a.dec_med*a.vol_+(1-a.dec_med)*a.vol;a.vol__=a.dec_med*a.vol__+(1-a.dec_med)*a.vol_;a.q27=a.index+1;a.q28=a.index2+1;a.q23=a.q22-div(.1,a.q22);a.q23=Math.max(a.q23,1);a.k1=a.is_beat*equal(mod(a.index,8),0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_fast*a.p2+(1-a.dec_fast)*a.p1;a.rott=div(3.1416*a.p2,4);a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.q3=-a.q2;a.q4=a.q1;a.trig=a.q24*bnot(mod(a.index,2));a.vx=a.vx*bnot(a.trig)+a.trig*(div(Math.floor(rand(100)),\n100)-.5);a.vy=a.vy*bnot(a.trig)+a.trig*(div(Math.floor(rand(100)),100)-.5);a.q10=.2+a.vy*a.vy*2;a.q11=div(Math.sin(div(a.time,9)),2)+.4;a.movz-=div(1,a.fps)*(.3+a.vx);a.q9=a.movz;a.q12=2*Math.min(a.q22,6);a.q13=Math.min(2,1+Math.abs(8*a.vy*a.vx));a.dir_=a.bass-1;a.trig=bnot(mod(a.index,4))*a.q24;a.dir=bnot(a.trig)*a.dir+a.trig*(Math.floor(rand(10))-5);a.trel+=div(.1,a.fps)*a.dir;a.trel_=a.dec_med*a.trel_+(1-a.dec_med)*a.trel;a.q5=Math.cos(a.trel_);a.q6=Math.sin(a.trel_+0*a.q27*mod(a.q28,2));a.q7=\n-a.q6;a.q8=a.q5;a.zoom=1.02;a.rot=.5*Math.sin(bnot(mod(a.q28,2))*a.q28);a.rot=0*Math.sin(div(a.time,3));a.dx=0;a.monitor=a.q11;","pixel_eqs_str":"","init_eqs_eel":"step = 0;","frame_eqs_eel":"dec_med = pow (0.9, 30/fps);\ndec_slow = pow (0.96, 30/fps);\ndec_fast = pow (0.6, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, 0+avg+peak) * above (time, t0+.1);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %16;\nindex2 = (index2 + is_beat*bnot(index))%8;\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq24 = is_beat;\nvol = bass_att + mid_att + treb_att;\nvol_ = dec_med * vol_ + (1-dec_med)* vol;\nvol__ = dec_med * vol__ + (1-dec_med)* vol_;\nq27 = index + 1;\nq28 = index2 + 1;\nq23 = q22 -0.1/q22;\nq23 = max(q23,1);\n\nk1 =  is_beat*equal(index%8,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_fast * p2+ (1-dec_fast)*p1;\nrott = p2 * 3.1416/4;\n\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\ntrig = q24 * bnot(index%2);\nvx = vx*bnot(trig) + trig* (int(rand(100))/100-.5);\nvy = vy*bnot(trig) + trig* (int(rand(100))/100-.5);\nq10 = 0.2+vy*vy*2;\nq11 = sin(time/9)/2+.4;\nmovz = movz-1/fps*(.3+vx);\nq9 = movz;\n\nq12 = min(q22,6)*2;\nq13 = min(2,1+abs(8*vy*vx));\n//dir_ = dec_med*dir_ + (1-dec_med)*(index2%2-.5);\ndir_ =  bass-1;\n\ntrig = bnot(index%4) * q24;\ndir = bnot(trig)*dir + trig*(int(rand(10))-5);\n\ntrel = trel + .1/fps*dir;\ntrel_ = dec_med*trel_ + (1-dec_med)*trel;\n\nq5 = cos(trel_);\nq6 = sin(trel_+0*q27*(q28%2));\nq7 = -q6;\nq8 = q5;\n\nzoom = 1.02;\nrot = .5*sin(bnot(q28%2)*q28) ;\nrot = .0*sin(time/3);\ndx = .0;\n\nmonitor = q11;","pixel_eqs_eel":"","warp":"vec3 xlat_mutablenoise;\nvec3 xlat_mutableret1;\nvec2 xlat_mutablers;\n shader_body { \n  float z_1;\n  mat2 tmpvar_2;\n  tmpvar_2[uint(0)] = _qb.xy;\n  tmpvar_2[1u] = _qb.zw;\n  vec2 tmpvar_3;\n  tmpvar_3 = ((uv * tmpvar_2) - 0.5);\n  float tmpvar_4;\n  tmpvar_4 = (0.4 / abs(tmpvar_3.y));\n  xlat_mutablers.x = (tmpvar_3.x * tmpvar_4);\n  xlat_mutablers.y = (tmpvar_4 + q30);\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_pw_noise_lq, (xlat_mutablers / 32.0));\n  xlat_mutablenoise = (tmpvar_5.xyz * vec3(greaterThanEqual (tmpvar_5.xyz, vec3(0.9, 0.9, 0.9))));\n  xlat_mutablenoise = (xlat_mutablenoise * (1.0 + (0.5 * \n    (dot (texture (sampler_noise_hq, (16.0 * xlat_mutablers)), vec4(0.32, 0.49, 0.29, 0.0)) - 0.5)\n  )));\n  xlat_mutableret1 = xlat_mutablenoise;\n  z_1 = (1.2 / abs(tmpvar_3.y));\n  xlat_mutablers.x = (tmpvar_3.x * z_1);\n  xlat_mutablers.y = (z_1 + q30);\n  vec4 tmpvar_6;\n  tmpvar_6 = texture (sampler_pw_noise_lq, (xlat_mutablers / 32.0));\n  xlat_mutablenoise = (tmpvar_6.xyz * vec3(greaterThanEqual (tmpvar_6.xyz, vec3(0.9, 0.9, 0.9))));\n  xlat_mutableret1 = (xlat_mutableret1 + xlat_mutablenoise);\n  z_1 = (0.4 / abs(tmpvar_3.x));\n  xlat_mutablers.y = (tmpvar_3.y * z_1);\n  xlat_mutablers.x = (z_1 + q30);\n  vec4 tmpvar_7;\n  tmpvar_7 = texture (sampler_pw_noise_lq, (xlat_mutablers / 32.0));\n  xlat_mutablenoise = (tmpvar_7.xyz * vec3(greaterThanEqual (tmpvar_7.xyz, vec3(0.9, 0.9, 0.9))));\n  xlat_mutablenoise = (xlat_mutablenoise * (1.0 + (0.5 * \n    (dot (texture (sampler_noise_hq, (16.0 * xlat_mutablers)), vec4(0.32, 0.49, 0.29, 0.0)) - 0.5)\n  )));\n  xlat_mutableret1 = (xlat_mutableret1 + xlat_mutablenoise);\n  z_1 = (1.2 / abs(tmpvar_3.x));\n  xlat_mutablers.y = (tmpvar_3.y * z_1);\n  xlat_mutablers.x = (z_1 + q30);\n  vec4 tmpvar_8;\n  tmpvar_8 = texture (sampler_pw_noise_lq, (xlat_mutablers / 32.0));\n  xlat_mutablenoise = (tmpvar_8.xyz * vec3(greaterThanEqual (tmpvar_8.xyz, vec3(0.9, 0.9, 0.9))));\n  xlat_mutableret1 = (xlat_mutableret1 + xlat_mutablenoise);\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = xlat_mutableret1;\n  ret = tmpvar_9.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  uv_1 = (0.5 + ((uv - 0.5) * aspect.wz));\n  vec2 tmpvar_2;\n  tmpvar_2.x = q26;\n  tmpvar_2.y = (0.1 * q27);\n  vec2 numerator_3;\n  numerator_3 = (uv_1 - vec2(0.0, 0.5));\n  vec2 denominator_4;\n  denominator_4 = (uv_1 - vec2(1.0, 0.5));\n  vec2 tmpvar_5;\n  tmpvar_5.x = ((numerator_3.x * denominator_4.x) + (numerator_3.y * denominator_4.y));\n  tmpvar_5.y = ((numerator_3.y * denominator_4.x) - (numerator_3.x * denominator_4.y));\n  vec2 tmpvar_6;\n  tmpvar_6 = (((tmpvar_5 / \n    ((denominator_4.x * denominator_4.x) + (denominator_4.y * denominator_4.y))\n  ) + 0.5) - vec2(0.5, 0.5));\n  float tmpvar_7;\n  tmpvar_7 = sqrt(dot (tmpvar_6, tmpvar_6));\n  float tmpvar_8;\n  float tmpvar_9;\n  tmpvar_9 = (min (abs(\n    (tmpvar_6.x / tmpvar_6.y)\n  ), 1.0) / max (abs(\n    (tmpvar_6.x / tmpvar_6.y)\n  ), 1.0));\n  float tmpvar_10;\n  tmpvar_10 = (tmpvar_9 * tmpvar_9);\n  tmpvar_10 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)\n     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)\n   * tmpvar_10) + 0.9999793) * tmpvar_9);\n  tmpvar_10 = (tmpvar_10 + (float(\n    (abs((tmpvar_6.x / tmpvar_6.y)) > 1.0)\n  ) * (\n    (tmpvar_10 * -2.0)\n   + 1.570796)));\n  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.y)));\n  if ((abs(tmpvar_6.y) > (1e-08 * abs(tmpvar_6.x)))) {\n    if ((tmpvar_6.y < 0.0)) {\n      if ((tmpvar_6.x >= 0.0)) {\n        tmpvar_8 += 3.141593;\n      } else {\n        tmpvar_8 = (tmpvar_8 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);\n  };\n  vec2 tmpvar_11;\n  tmpvar_11.x = ((tmpvar_8 * 4.0) + q26);\n  tmpvar_11.y = ((0.55 * log(tmpvar_7)) + tmpvar_2.y);\n  uv_1 = (0.5 + ((\n    (1.0 - abs(((\n      fract((vec2(0.07957745, 0.5) * tmpvar_11))\n     * 2.0) - 1.0)))\n   - 0.5) * 0.995));\n  vec2 tmpvar_12;\n  vec2 tmpvar_13;\n  tmpvar_13 = (uv_1 - vec2(0.5, 0.5));\n  float tmpvar_14;\n  tmpvar_14 = sqrt(dot (tmpvar_13, tmpvar_13));\n  float tmpvar_15;\n  float tmpvar_16;\n  tmpvar_16 = (min (abs(\n    (tmpvar_13.x / tmpvar_13.y)\n  ), 1.0) / max (abs(\n    (tmpvar_13.x / tmpvar_13.y)\n  ), 1.0));\n  float tmpvar_17;\n  tmpvar_17 = (tmpvar_16 * tmpvar_16);\n  tmpvar_17 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_17) + 0.05368138) * tmpvar_17) - 0.1173503)\n     * tmpvar_17) + 0.1938925) * tmpvar_17) - 0.3326756)\n   * tmpvar_17) + 0.9999793) * tmpvar_16);\n  tmpvar_17 = (tmpvar_17 + (float(\n    (abs((tmpvar_13.x / tmpvar_13.y)) > 1.0)\n  ) * (\n    (tmpvar_17 * -2.0)\n   + 1.570796)));\n  tmpvar_15 = (tmpvar_17 * sign((tmpvar_13.x / tmpvar_13.y)));\n  if ((abs(tmpvar_13.y) > (1e-08 * abs(tmpvar_13.x)))) {\n    if ((tmpvar_13.y < 0.0)) {\n      if ((tmpvar_13.x >= 0.0)) {\n        tmpvar_15 += 3.141593;\n      } else {\n        tmpvar_15 = (tmpvar_15 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_15 = (sign(tmpvar_13.x) * 1.570796);\n  };\n  float tmpvar_18;\n  tmpvar_18 = clamp ((1.0 - (tmpvar_14 / 0.5)), 0.0, 1.0);\n  float tmpvar_19;\n  float tmpvar_20;\n  tmpvar_20 = (tmpvar_18 - 1.0);\n  tmpvar_19 = sqrt((1.0 - (tmpvar_20 * tmpvar_20)));\n  float vec_y_21;\n  vec_y_21 = (1.0 - tmpvar_18);\n  float tmpvar_22;\n  float tmpvar_23;\n  tmpvar_23 = (min (abs(\n    (vec_y_21 / tmpvar_19)\n  ), 1.0) / max (abs(\n    (vec_y_21 / tmpvar_19)\n  ), 1.0));\n  float tmpvar_24;\n  tmpvar_24 = (tmpvar_23 * tmpvar_23);\n  tmpvar_24 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_24) + 0.05368138) * tmpvar_24) - 0.1173503)\n     * tmpvar_24) + 0.1938925) * tmpvar_24) - 0.3326756)\n   * tmpvar_24) + 0.9999793) * tmpvar_23);\n  tmpvar_24 = (tmpvar_24 + (float(\n    (abs((vec_y_21 / tmpvar_19)) > 1.0)\n  ) * (\n    (tmpvar_24 * -2.0)\n   + 1.570796)));\n  tmpvar_22 = (tmpvar_24 * sign((vec_y_21 / tmpvar_19)));\n  if ((abs(tmpvar_19) > (1e-08 * abs(vec_y_21)))) {\n    if ((tmpvar_19 < 0.0)) {\n      if ((vec_y_21 >= 0.0)) {\n        tmpvar_22 += 3.141593;\n      } else {\n        tmpvar_22 = (tmpvar_22 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_22 = (sign(vec_y_21) * 1.570796);\n  };\n  float x_25;\n  x_25 = (sin(tmpvar_22) / 3.0);\n  float tmpvar_26;\n  tmpvar_26 = (tmpvar_22 - (sign(x_25) * (1.570796 - \n    (sqrt((1.0 - abs(x_25))) * (1.570796 + (abs(x_25) * (-0.2146018 + \n      (abs(x_25) * (0.08656672 + (abs(x_25) * -0.03102955)))\n    ))))\n  )));\n  vec2 tmpvar_27;\n  tmpvar_27.x = sin(tmpvar_15);\n  tmpvar_27.y = cos(tmpvar_15);\n  vec2 x_28;\n  x_28 = (uv_1 - vec2(0.5, 0.5));\n  bool tmpvar_29;\n  tmpvar_29 = (sqrt(dot (x_28, x_28)) < 0.5);\n  tmpvar_12 = ((float(\n    !(tmpvar_29)\n  ) * uv_1) + (float(tmpvar_29) * (vec2(0.5, 0.5) + \n    ((tmpvar_27 * ((1.0 - tmpvar_18) - (\n      (sin(tmpvar_26) * tmpvar_19)\n     / \n      cos(tmpvar_26)\n    ))) * 0.5)\n  )));\n  uv_1 = tmpvar_12.yx;\n  vec2 tmpvar_30;\n  tmpvar_30.x = bass;\n  tmpvar_30.y = (0.5 + mid);\n  vec2 tmpvar_31;\n  tmpvar_31.x = q26;\n  tmpvar_31.y = (0.1 * q27);\n  vec2 numerator_32;\n  numerator_32 = (tmpvar_12.yx - tmpvar_30);\n  vec2 denominator_33;\n  denominator_33 = (tmpvar_12.yx - vec2(1.0, 0.5));\n  vec2 tmpvar_34;\n  tmpvar_34.x = ((numerator_32.x * denominator_33.x) + (numerator_32.y * denominator_33.y));\n  tmpvar_34.y = ((numerator_32.y * denominator_33.x) - (numerator_32.x * denominator_33.y));\n  vec2 tmpvar_35;\n  tmpvar_35 = (((tmpvar_34 / \n    ((denominator_33.x * denominator_33.x) + (denominator_33.y * denominator_33.y))\n  ) + 0.5) - vec2(0.5, 0.5));\n  float tmpvar_36;\n  tmpvar_36 = sqrt(dot (tmpvar_35, tmpvar_35));\n  float tmpvar_37;\n  float tmpvar_38;\n  tmpvar_38 = (min (abs(\n    (tmpvar_35.x / tmpvar_35.y)\n  ), 1.0) / max (abs(\n    (tmpvar_35.x / tmpvar_35.y)\n  ), 1.0));\n  float tmpvar_39;\n  tmpvar_39 = (tmpvar_38 * tmpvar_38);\n  tmpvar_39 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_39) + 0.05368138) * tmpvar_39) - 0.1173503)\n     * tmpvar_39) + 0.1938925) * tmpvar_39) - 0.3326756)\n   * tmpvar_39) + 0.9999793) * tmpvar_38);\n  tmpvar_39 = (tmpvar_39 + (float(\n    (abs((tmpvar_35.x / tmpvar_35.y)) > 1.0)\n  ) * (\n    (tmpvar_39 * -2.0)\n   + 1.570796)));\n  tmpvar_37 = (tmpvar_39 * sign((tmpvar_35.x / tmpvar_35.y)));\n  if ((abs(tmpvar_35.y) > (1e-08 * abs(tmpvar_35.x)))) {\n    if ((tmpvar_35.y < 0.0)) {\n      if ((tmpvar_35.x >= 0.0)) {\n        tmpvar_37 += 3.141593;\n      } else {\n        tmpvar_37 = (tmpvar_37 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_37 = (sign(tmpvar_35.x) * 1.570796);\n  };\n  vec2 tmpvar_40;\n  tmpvar_40.x = ((tmpvar_37 * 4.0) + q26);\n  tmpvar_40.y = ((0.55 * log(tmpvar_36)) + tmpvar_31.y);\n  uv_1 = (0.5 + ((\n    (1.0 - abs(((\n      fract(((tmpvar_40 * vec2(0.1591549, 1.0)).yx * 0.5))\n     * 2.0) - 1.0)))\n   - 0.5) * 0.995));\n  vec4 tmpvar_41;\n  tmpvar_41.w = 1.0;\n  tmpvar_41.xyz = ((texture (sampler_main, uv_1).xyz * 0.4) + ((\n    (texture (sampler_blur2, uv_1).xyz * scale2)\n   + bias2) * 1.75));\n  ret = tmpvar_41.xyz;\n }","warp_hlsl":"sampler sampler_pw_noise_lq;\n\nfloat2 rs;\nfloat3 noise, ret1;\n\nshader_body {\nfloat2 p0 = -.0*float2(q6,q6);\nuv = mul(uv,float2x2(_qb));\n\n\nfloat corr = texsize.xy*texsize_noise_lq.zw;\nfloat2 uv1 = (uv-.5+p0 );\n\nfloat h1 = .4;\n\nfloat z = +h1/abs(uv1.y);\nrs.x = uv1.x * z;\nrs.y = z + q30;\nnoise = tex2D(sampler_pw_noise_lq,rs/32);\nnoise *= (noise >= .9);\nnoise *= 1+.5*(lum(tex2D(sampler_noise_hq,16*rs))-.5);\nret1 = noise;\n\nz = 3*h1/abs(uv1.y);\nrs.x = uv1.x * z;\nrs.y = z + q30;\nnoise = tex2D(sampler_pw_noise_lq,rs/32);\nnoise *= (noise >= .9);\nret1 += noise;\n\nz = h1/abs(uv1.x);\nrs.y = uv1.y * z;\nrs.x = z + q30;\nnoise = tex2D(sampler_pw_noise_lq,rs/32);\nnoise *= (noise >= .9);\nnoise *= 1+.5*(lum(tex2D(sampler_noise_hq,16*rs))-.5);\nret1 += noise;\n\nz = 3*h1/abs(uv1.x);\nrs.y = uv1.y * z;\nrs.x = z + q30;\nnoise = tex2D(sampler_pw_noise_lq,rs/32);\nnoise *= (noise >= .9);\nret1 += noise;\n\n\nret = ret1;    \n}","comp_hlsl":"float2 complex_div(float2 numerator, float2 denominator){\n   return float2( numerator.x*denominator.x + numerator.y*denominator.y,\n                  numerator.y*denominator.x - numerator.x*denominator.y)/\n          (denominator.x*denominator.x + denominator.y*denominator.y);\n}\n\nfloat2 uv_polar(float2 domain, float2 center){\n   float2 c = domain - center;\n   float rad_hq = length(c);\n   float ang_hq = atan2(c.x,c.y);\n   return float2(ang_hq, rad_hq);\n}\n\nfloat2 uv_polar_logarithmic(float2 domain, float2 center, int fins, float log_factor, float2 coord){\n   float2 polar = uv_polar(domain, center);\n   return float2(polar.x*fins+coord.x, log_factor*log(polar.y) + coord.y);\n}\n\nfloat2 uv_moebius_transformation(float2 domain, float2 zeroPoint, float2 infinityPoint,float zoom){\n   return complex_div((domain - zeroPoint)*zoom, domain - infinityPoint)+0.5;\n}\n\nfloat2 uv_bipolar_logarithmic(float2 domain, float2 northPole, float2 southPole, int fins, float log_factor, float2 coord){\n   float2 help_uv = uv_moebius_transformation(domain, northPole, southPole, 1);\n   return uv_polar_logarithmic(help_uv,0.5,fins,log_factor,coord)*float2(M_INV_PI_2,1);\n}\n\nfloat2 uv_scale(float2 domain, float2 center, float2 scale){\n   return center + (domain-center)*scale;\n}\nfloat2 uv_lens_half_sphere(float2 domain, float2 position, float radius, float refractivity){\n   float2 polar = uv_polar(domain, position);\n   float cone = saturate(1-polar.y/radius);\n   float halfsphere = sqrt(1-pow(cone-1,2));\n   float w = atan2(1-cone,halfsphere);\n   float refrac_w = w-asin(sin(w)/refractivity);\n   float refrac_d = 1-cone - sin(refrac_w)*halfsphere/cos(refrac_w);\n   float2 refrac_uv =position+float2(sin(polar.x),cos(polar.x))*refrac_d*radius;\n   bool mask =(length(domain-position)<radius);\n   return !mask*domain + \n           mask*refrac_uv;\n}\nshader_body\n{\nfloat2 uvo = uv;\nuv = 0.5+(uv-0.5)*aspect.wz;\nuv = uv_bipolar_logarithmic(uv, float2(0,0.5), float2(1,0.5), 4, 0.55, float2(q26,0.1*q27));\nuv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5)*0.995; // Eo.S. mirror code with cutted borders\nuv = uv_lens_half_sphere(uv, 0.5, 0.5, 3).yx;\nuv = uv_bipolar_logarithmic(uv, float2(bass,0.5+mid), float2(1,0.5), 4, 0.55, float2(q26,0.1*q27)).yx;\nuv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5)*0.995; // Eo.S. mirror code with cutted borders\n\n    ret = GetPixel(uv)*0.4 + GetBlur2(uv)*1.75;\n//ret=1-ret;\n}\n\n"}