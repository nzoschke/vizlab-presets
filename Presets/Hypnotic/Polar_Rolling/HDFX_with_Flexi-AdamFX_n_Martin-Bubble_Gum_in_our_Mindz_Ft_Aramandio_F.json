{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":2,"wave_dots":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.001,"wave_scale":0.012,"wave_smoothing":0.9,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.5,"wave_g":0.4,"wave_b":0.3,"ob_size":0,"ob_b":1,"ob_a":0.3,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":5,"mv_b":0,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"sides":32,"additive":1,"rad":0.19477,"r":0,"b":1,"a":0,"r2":0.63,"g2":0.7,"b2":1,"a2":0.07,"border_a":0,"enabled":0},"init_eqs_str":"flip=1","frame_eqs_str":"","init_eqs_eel":"flip=1","frame_eqs_eel":""},{"baseVals":{"sides":6,"rad":0.04378,"r":0.3,"g":0.6,"b":1,"g2":0,"b2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":36,"rad":0.28428,"r":0,"a":0,"r2":0.23,"g2":0.54,"b2":1,"a2":0.05,"border_g":0.8,"border_b":0.4,"border_a":0.45,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":6,"additive":1,"rad":0.15804,"r":0.3,"g":0.6,"b":1,"r2":0.4,"g2":0.5,"b2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"scaling":0.01,"smoothing":1,"b":0.9,"a":0.7},"init_eqs_str":"a.scale=0;a.curves=0;a.speed=0;a.wave=0;a.nscale=0;a.xp=0;a.yp=0;a.zp=0;","frame_eqs_str":"","point_eqs_str":"a.scale=9;a.curves=6;a.speed=1.4;a.wave=a.sample*a.curves;a.nscale=div(15,a.scale);a.xp=.5*Math.sin(a.speed*a.time)*Math.cos(3*a.wave);a.yp=.5*Math.sin(2.6*a.wave)*Math.sin(1.2*a.wave);a.zp=.5*Math.sin(.8*a.wave)*Math.cos(1.5*a.wave);a.zp+=a.nscale;a.x=div(a.xp,a.zp)+.5;a.y=div(a.yp,a.zp)+.5;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"// Adjust the coefficients of \"wave\" to create new ones\n\nscale=9;\ncurves=6;\nspeed=1.4;\n\nwave=sample*curves;\nnscale=15*1/scale;\n\nxp= .5*sin(speed*time)*cos( 3 *wave);\nyp= .5*sin( 2.6 *wave)*sin( 1.2 *wave);\nzp= .5*sin( .8 *wave)*cos( 1.5 *wave);\n\nzp= zp+nscale;\nx= xp/zp + 0.5;\ny= yp/zp + 0.5;"},{"baseVals":{"thick":1,"r":0.5,"g":0.5,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"usedots":1,"thick":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.trig2=0;a.p3z=0;a.index2=0;a.vtrig=0;a.index=0;a.q12=0;a.q18=0;a.q22=0;a.q21=0;a.hy=0;a.q13=0;a.q15=0;a.q6=0;a.q1=0;a.dec_med=0;a.q5=0;a.p2z=0;a.trel=0;a.q9=0;a.rott=0;a.p1z=0;a.is_beat=0;a.q23=0;a.q22slow=0;a.k1=0;a.q24=0;a.vx=0;a.dec_slow=0;a.q11=0;a.z0=0;a.q10=0;a.vy=0;a.q4=0;a.q16=0;a.q26=0;a.p2=0;a.avg=0;a.q19=0;a.beat=0;a.q17=0;a.vol=0;a.p1=0;a.peak=0;a.trig1=0;a.q2=0;a.q27=0;a.q14=0;a.trig3=0;a.speed=0;a.q3=0;a.t0=0;a.hx=0;a.q28=0;a.q20=0;a.prox=1;","frame_eqs_str":"a.dec_med=pow(.8,div(30,a.fps));a.dec_slow=pow(.8,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,16);a.index2=mod(a.index2+a.is_beat*bnot(a.index),4);a.q22=a.peak;a.q22slow=a.q22slow*a.dec_slow+a.q22*(1-a.dec_slow);a.q23=a.q22slow;a.q24=\na.is_beat;a.q26=a.bass_att+a.mid_att+a.treb_att;a.vol=a.vol*a.dec_med+(1-a.dec_med)*a.q26;a.q27=a.index+1;a.q28=a.index2;a.k1=a.is_beat*equal(mod(a.index,2),0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_med*a.p2+(1-a.dec_med)*a.p1;a.rott+=div(16*a.q22*(1-a.dec_med),a.fps)*below(a.q27,6);a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.q3=-a.q2;a.q4=a.q1;a.vtrig=a.is_beat*bnot(mod(a.index,2));a.vx=a.vx*bnot(a.vtrig)+a.vtrig*(div(Math.floor(rand(100)),100)-.5);a.vy=a.vy*bnot(a.vtrig)+a.vtrig*(div(Math.floor(rand(100)),\n100)-.5);a.vx*=below(mod(a.index,15),15);a.vy*=below(mod(a.index,15),15);a.q5=5*a.vx;a.q6=5*a.vy;a.q21=div(1+Math.sin(div(a.time,12)),8)+.01;a.trig1=a.q24*bnot(mod(a.index,12));a.trig2=a.q24*bnot(mod(a.index+4,12));a.trig3=a.q24*bnot(mod(a.index+8,12));a.trel+=div(a.vol,a.fps);a.z0=1;a.speed=div(a.vol,2);a.hx=Math.sin(a.trel);a.hy=Math.cos(a.trel);a.p1z=bnot(a.trig1)*(a.p1z+div((5+a.p1z)*a.speed,a.fps))+a.trig1*a.z0;a.p1z=Math.max(a.p1z,.1);a.q9=div(a.hx,a.p1z);a.q10=div(a.hy,a.p1z);a.q11=a.p1z;a.q12=\n.1+.02*a.q26*bnot(mod(a.index+2,3))*a.p1z*Math.exp(div(-a.p1z,100));a.p2z=bnot(a.trig2)*(a.p2z+div((5+a.p2z)*a.speed,a.fps))+a.trig2*a.z0;a.p2z=Math.max(a.p2z,.1);a.q13=div(2*a.hx,a.p2z);a.q14=div(-.5*a.hy,a.p2z);a.q15=a.p2z;a.q16=.1+.02*a.q26*bnot(mod(a.index+2,3))*a.p2z*Math.exp(div(-a.p2z,100));a.p3z=bnot(a.trig3)*(a.p3z+div((5+a.p3z)*a.speed,a.fps))+a.trig3*a.z0;a.p3z=Math.max(a.p3z,.1);a.q17=div(-1.4*a.hx,a.p3z);a.q18=div(2*a.hy,a.p3z);a.q19=a.p3z;a.q20=.1+.02*a.q26*bnot(mod(a.index+2,3))*a.p3z*\nMath.exp(div(-a.p3z,100));","pixel_eqs_str":"a.zoom=1.2+.2*Math.sin(div(a.time,3));","init_eqs_eel":"prox = 1;","frame_eqs_eel":"dec_med = pow (0.8, 30/fps);\ndec_slow = pow (0.8, 30/fps);\n//dec_xlow = pow (0.999, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %16;\nindex2 = (index2 + is_beat*bnot(index))%4;\n\nq22 = peak;\nq22slow = q22slow*dec_slow + q22*(1-dec_slow);\nq23 = q22slow;\nq24 = is_beat;\nq26 = bass_att + mid_att + treb_att;\nvol = vol*dec_med + (1-dec_med)*q26;\nq27 = index + 1;\nq28 = index2 ;\n\nk1 =  is_beat*equal(index%2,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\n//rott = p2 * 3.1416/2;\nrott = rott + q22*16*(1-dec_med)/fps*below(q27,6);\n//*****tunnel tilting\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\n//****tunnel viewpoint x,y\nvtrig = is_beat * bnot(index%2);\nvx = vx * bnot(vtrig) + vtrig * (int(rand(100))/100-.5);\nvy = vy * bnot(vtrig) + vtrig * (int(rand(100))/100-.5);\nvx = vx* below(index%15,15); //###\nvy = vy* below(index%15,15);\nq5 = vx*5;\nq6 = vy*5;\n\n//***tunnel width\nq21 = (1+sin(time/12))/8+.01;\n\n\n//***********************\ntrig1= q24*bnot(index%12);\ntrig2= q24*bnot((index+4)%12);\ntrig3= q24*bnot((index+8)%12);\ntrel = trel + vol/fps;\nz0 = 1;\nspeed = vol/2;\nhx = sin(trel);\nhy = cos(trel);\n\np1z = bnot(trig1)* (p1z + (5+p1z)*speed/fps)+trig1*z0;\np1z = max(p1z,.1);\nq9 = hx/(p1z); \nq10 = hy/(p1z); \nq11 = p1z;\nq12 = .1+.02*q26*bnot((index+2)%3)*p1z*exp(-p1z/100);\n\np2z = bnot(trig2)* (p2z + (5+p2z)*speed/fps)+trig2*z0;\np2z = max(p2z,.1);\nq13 = 2*hx/(p2z); \nq14 = -.5*hy/(p2z); \nq15 = p2z;\nq16 = .1+.02*q26*bnot((index+2)%3)*p2z*exp(-p2z/100);\n\n\np3z = bnot(trig3)* (p3z + (5+p3z)*speed/fps)+trig3*z0;\np3z = max(p3z,.1);\nq17 = -1.4*hx/(p3z); \nq18 = 2*hy/(p3z); \nq19 = p3z;\nq20 = .1+.02*q26*bnot((index+2)%3)*p3z*exp(-p3z/100);","pixel_eqs_eel":"zoom = 1.2 + .2 *sin(time/3);","warp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_fc_main, uv);\n  ret_1 = (tmpvar_2.xyz + (tmpvar_2.xyz - (\n    (texture (sampler_blur2, uv).xyz * scale2)\n   + bias2)));\n  ret_1 = ((mix (tmpvar_2.xyz, ret_1, vec3(0.07, 0.07, 0.07)) - 0.005) * 0.995);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }","comp":"vec2 xlat_mutablec;\nvec2 xlat_mutabledenominator;\nvec2 xlat_mutablenumerator;\n shader_body { \n  vec2 uv_1;\n  uv_1 = (0.5 + ((uv - 0.5) * 4.0));\n  xlat_mutablec = (((uv_1 - 0.5) * 2.0) * aspect.wz);\n  vec2 tmpvar_2;\n  tmpvar_2.x = q21;\n  tmpvar_2.y = q22;\n  xlat_mutablenumerator = ((xlat_mutablec + tmpvar_2) * 64.0);\n  vec2 tmpvar_3;\n  tmpvar_3.x = q23;\n  tmpvar_3.y = q24;\n  xlat_mutabledenominator = (xlat_mutablec + tmpvar_3);\n  vec2 tmpvar_4;\n  tmpvar_4.x = ((xlat_mutablenumerator.x * xlat_mutabledenominator.x) + (xlat_mutablenumerator.y * xlat_mutabledenominator.y));\n  tmpvar_4.y = ((xlat_mutablenumerator.y * xlat_mutabledenominator.x) - (xlat_mutablenumerator.x * xlat_mutabledenominator.y));\n  xlat_mutablec = ((tmpvar_4 / (\n    (xlat_mutabledenominator.x * xlat_mutabledenominator.x)\n   + \n    (xlat_mutabledenominator.y * xlat_mutabledenominator.y)\n  )) - 0.5);\n  float tmpvar_5;\n  float tmpvar_6;\n  tmpvar_6 = (min (abs(\n    (xlat_mutablec.x / xlat_mutablec.y)\n  ), 1.0) / max (abs(\n    (xlat_mutablec.x / xlat_mutablec.y)\n  ), 1.0));\n  float tmpvar_7;\n  tmpvar_7 = (tmpvar_6 * tmpvar_6);\n  tmpvar_7 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)\n     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)\n   * tmpvar_7) + 0.9999793) * tmpvar_6);\n  tmpvar_7 = (tmpvar_7 + (float(\n    (abs((xlat_mutablec.x / xlat_mutablec.y)) > 1.0)\n  ) * (\n    (tmpvar_7 * -2.0)\n   + 1.570796)));\n  tmpvar_5 = (tmpvar_7 * sign((xlat_mutablec.x / xlat_mutablec.y)));\n  if ((abs(xlat_mutablec.y) > (1e-08 * abs(xlat_mutablec.x)))) {\n    if ((xlat_mutablec.y < 0.0)) {\n      if ((xlat_mutablec.x >= 0.0)) {\n        tmpvar_5 += 3.141593;\n      } else {\n        tmpvar_5 = (tmpvar_5 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_5 = (sign(xlat_mutablec.x) * 1.570796);\n  };\n  vec2 tmpvar_8;\n  tmpvar_8.x = ((0.3183098 * tmpvar_5) + q26);\n  tmpvar_8.y = (((0.333 * aspect.w) * log(\n    sqrt(dot (xlat_mutablec, xlat_mutablec))\n  )) + q27);\n  uv_1 = (0.5 + ((0.5 - \n    abs(((fract(\n      (tmpvar_8 * 0.5)\n    ) * 2.0) - 1.0))\n  ) * 0.96));\n  vec2 tmpvar_9;\n  tmpvar_9 = (texsize.zw * 4.0);\n  vec3 tmpvar_10;\n  tmpvar_10 = ((2.0 * (\n    (texture (sampler_blur1, (uv_1 + (vec2(1.0, 0.0) * tmpvar_9))).xyz * scale1)\n   + bias1)) - (2.0 * (\n    (texture (sampler_blur1, (uv_1 - (vec2(1.0, 0.0) * tmpvar_9))).xyz * scale1)\n   + bias1)));\n  vec3 tmpvar_11;\n  tmpvar_11 = ((2.0 * (\n    (texture (sampler_blur1, (uv_1 + (vec2(0.0, 1.0) * tmpvar_9))).xyz * scale1)\n   + bias1)) - (2.0 * (\n    (texture (sampler_blur1, (uv_1 - (vec2(0.0, 1.0) * tmpvar_9))).xyz * scale1)\n   + bias1)));\n  vec2 tmpvar_12;\n  tmpvar_12.x = tmpvar_10.y;\n  tmpvar_12.y = tmpvar_11.y;\n  vec2 tmpvar_13;\n  tmpvar_13.x = tmpvar_10.y;\n  tmpvar_13.y = tmpvar_11.y;\n  vec2 x_14;\n  x_14 = -((uv_1 + (tmpvar_12 * 0.25)));\n  vec4 tmpvar_15;\n  tmpvar_15.w = 1.0;\n  tmpvar_15.xyz = mix (mix (vec3(1.0, 2.0, 4.0), vec3(-1.5, -1.5, -3.0), vec3((\n    ((1.0 - (texture (sampler_main, (uv_1 + \n      (tmpvar_13 * 0.015)\n    )).y * 0.6)) - 0.5)\n   + \n    sqrt(dot (x_14, x_14))\n  ))), vec3(1.0, 0.5, 0.0), vec3(sqrt(dot (uv_1, uv_1))));\n  ret = tmpvar_15.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_fc_main, uv ).xyz;\n    float3 ret2 = tex2D( sampler_fc_main, uv ).xyz;\n    // darken (decay) over time\n    ret += ret - GetBlur2(uv);\n    ret = lerp(ret2,ret,.07);\n    ret = (ret - .005)*0.995; //or try: ret -= 0.004;\n}","comp_hlsl":"float2 d, uv_light1;\nfloat3 dx, dy, c1, c2, c3, c4, light1_dy;\nfloat2 numerator, denominator, fraction;\nfloat2 c,bipolar;\n\nshader_body\n{\n\n// bipolar fractal code\n\nuv = 0.5 + (uv-0.5)*4; // try apply some overall zoom in or out, works good in play with number of iterations\nfloat cutoff = 0.96;\nint n = 1; // number of radial mirrors\nfloat s = 0.333; // logarithmic zoom factor\nint depth = 1; //number of fractal iterations\n\nfor(int i = 0; i<depth;i++){\n c = (uv-0.5)*2*aspect.wz;\n   numerator = (c + float2(q21,q22))*64;\n   denominator = c + float2(q23,q24);\n   fraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,\n                      numerator.y*denominator.x - numerator.x*denominator.y)/\n                      (denominator.x*denominator.x + denominator.y*denominator.y);\n   c = fraction-0.5; // kind of a Moebius transformation\n   bipolar = float2(n*atan2(c.x,c.y)*M_INV_PI_2*2+q26,s*aspect.w*log(length(c))+q27);\n   uv = 0.5 + (0.5 - abs( frac( bipolar * 0.5 ) * 2.0 - 1.0 ))*cutoff; // mirror\n}\n\n\n    float2 d = texsize.zw*4;\n    float3 dx = ( 2*GetBlur1(uv+float2(1,0)*d)-2*GetBlur1(uv-float2(1,0)*d) );\n    float3 dy = ( 2*GetBlur1(uv+float2(0,1)*d)-2*GetBlur1(uv-float2(0,1)*d) );\n    float2 uv_y = uv+float2(dx.y,dy.y)*0.25;\n\nret = GetPixel(uv+float2(dx.y,dy.y)*0.015).y*0.6;\nret = lerp(float3(1,2,4),float3(-1.5,-1.5,-3),(1-ret.y)*1 - 0.5  + length(0-uv_y));\nret = lerp(ret,float3(1,0.5,0),length(uv));\n}"}