{"version":2,"baseVals":{"rating":5,"gammaadj":1.9,"echo_zoom":1.169,"wave_mode":4,"additivewave":1,"wave_thick":1,"wave_a":0.001,"wave_scale":0.26,"wave_smoothing":0.9,"modwavealphastart":0.63,"modwavealphaend":0.87,"warpscale":3.138,"zoom":0.99703,"warp":0.01,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"wave_y":0.72,"ob_size":0,"ob_r":0.1,"ob_g":0.08,"ob_a":0.6,"ib_size":0,"ib_r":1,"ib_g":1,"ib_b":1,"ib_a":0.1,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.q25=0;a.q22=0;a.q21=0;a.q1=0;a.q23=0;a.q24=0;a.q11=0;a.q26=0;a.q2=0;a.q27=0;a.q3=0;a.q28=0;","frame_eqs_str":"a.q1=.11*Math.sin(1.1*a.time)+.1*Math.cos(.43*a.time);a.q2=.11*Math.sin(.92*a.time)+.1*Math.cos(1.1*a.time);a.q3=.11*Math.sin(.22*a.time)+.1*Math.cos(.33*a.time);a.q21=Math.cos(.2*-a.time);a.q22=Math.sin(.2*-a.time);a.q23=0;a.q24=.3;a.q25=.333*Math.cos(.2*a.time);a.q26=.333*Math.sin(.2*a.time);a.q27=-.25;a.q28=.2;a.q11=div(1,Math.asin(1));","pixel_eqs_str":"a.zoom=1+.02*Math.sin(8*a.ang-10*Math.sin(.73*a.time)-a.rad*Math.cos(.31*a.time)-.8*a.time);a.rot=.121*Math.sin(5*a.rad-.1*Math.cos(6*a.ang+.1*a.time)+1.21*a.time);","init_eqs_eel":"","frame_eqs_eel":"q1=.11*sin(time*1.1)+.1*cos(time*.43);\nq2=.11*sin(time*.92)+.1*cos(time*1.1);\nq3=.11*sin(time*.22)+.1*cos(time*.33);\n// a\nq21 = 1*cos(-time*0.2); // the real part\nq22 = 1*sin(-time*0.2); // the imaginary part\n\n// b\nq23 = 0; // the real part\nq24 = 0.3; // the imaginary part\n\n// c\nq25 = 0.333*cos(time*0.2); // the real part\nq26 = 0.333*sin(time*0.2); // the imaginary part\n\n// d\nq27 = -0.25; // the real part\nq28 = 0.2; // the imaginary part\n\nq11 = 1/asin(1);","pixel_eqs_eel":"zoom=1.0+.02*sin(ang*8-10*sin(time*.73)-rad*cos(time*.31)-time*.8);\nrot=.121*sin(rad*5-.1*cos(ang*6+.1*time)+1.21*time) ;","warp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1.x = roam_cos.x;\n  tmpvar_1.y = roam_sin.x;\n  vec2 tmpvar_2;\n  tmpvar_2.x = (roam_sin.x * 1.2);\n  tmpvar_2.y = (roam_cos.x * 1.2);\n  vec3 tmpvar_3;\n  tmpvar_3.x = (0.918 + (0.05 * q2));\n  tmpvar_3.y = (0.912 + (0.05 * q3));\n  tmpvar_3.z = (0.905 + (0.05 * q1));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = (mix (texture (sampler_fw_main, uv).xyz, vec3((8.0 * texture (sampler_noise_hq, \n    ((uv * tmpvar_1) - tmpvar_2)\n  ).x)), vec3(0.015, 0.015, 0.015)) * tmpvar_3);\n  ret = tmpvar_4.xyz;\n }","comp":"vec2 xlat_mutabledenominator;\nvec2 xlat_mutablenumerator;\n shader_body { \n  vec2 uv_1;\n  vec2 spiral_2;\n  vec2 uvm_3;\n  vec3 ret_4;\n  uvm_3.x = (uv.x - (0.07 * texture (sampler_noise_hq, vec2((uv.x * 0.8))).x));\n  uvm_3.y = (uv.y - (0.07 * texture (sampler_noise_hq, vec2((uv.y * 0.8))).x));\n  uv_1 = (((uv - 0.5) * aspect.xy) * 2.0);\n  vec2 tmpvar_5;\n  tmpvar_5.x = ((uv_1.x * q21) - (uv_1.y * q22));\n  tmpvar_5.y = ((uv_1.x * q22) + (uv_1.y * q21));\n  vec2 tmpvar_6;\n  tmpvar_6.x = q23;\n  tmpvar_6.y = q24;\n  xlat_mutablenumerator = (tmpvar_5 + tmpvar_6);\n  vec2 tmpvar_7;\n  tmpvar_7.x = ((uv_1.x * q25) - (uv_1.y * q26));\n  tmpvar_7.y = ((uv_1.x * q26) + (uv_1.y * q25));\n  vec2 tmpvar_8;\n  tmpvar_8.x = q27;\n  tmpvar_8.y = q28;\n  xlat_mutabledenominator = (tmpvar_7 + tmpvar_8);\n  vec2 tmpvar_9;\n  tmpvar_9.x = ((xlat_mutablenumerator.x * xlat_mutabledenominator.x) + (xlat_mutablenumerator.y * xlat_mutabledenominator.y));\n  tmpvar_9.y = ((xlat_mutablenumerator.y * xlat_mutabledenominator.x) - (xlat_mutablenumerator.x * xlat_mutabledenominator.y));\n  uv_1 = ((tmpvar_9 / (\n    (xlat_mutabledenominator.x * xlat_mutabledenominator.x)\n   + \n    (xlat_mutabledenominator.y * xlat_mutabledenominator.y)\n  )) * 0.5);\n  float tmpvar_10;\n  tmpvar_10 = (0.33 * time);\n  vec2 tmpvar_11;\n  tmpvar_11 = ((uv_1 - 0.5) * aspect.wz);\n  float tmpvar_12;\n  float tmpvar_13;\n  tmpvar_13 = (min (abs(\n    (tmpvar_11.x / tmpvar_11.y)\n  ), 1.0) / max (abs(\n    (tmpvar_11.x / tmpvar_11.y)\n  ), 1.0));\n  float tmpvar_14;\n  tmpvar_14 = (tmpvar_13 * tmpvar_13);\n  tmpvar_14 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_14) + 0.05368138) * tmpvar_14) - 0.1173503)\n     * tmpvar_14) + 0.1938925) * tmpvar_14) - 0.3326756)\n   * tmpvar_14) + 0.9999793) * tmpvar_13);\n  tmpvar_14 = (tmpvar_14 + (float(\n    (abs((tmpvar_11.x / tmpvar_11.y)) > 1.0)\n  ) * (\n    (tmpvar_14 * -2.0)\n   + 1.570796)));\n  tmpvar_12 = (tmpvar_14 * sign((tmpvar_11.x / tmpvar_11.y)));\n  if ((abs(tmpvar_11.y) > (1e-08 * abs(tmpvar_11.x)))) {\n    if ((tmpvar_11.y < 0.0)) {\n      if ((tmpvar_11.x >= 0.0)) {\n        tmpvar_12 += 3.141593;\n      } else {\n        tmpvar_12 = (tmpvar_12 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_12 = (sign(tmpvar_11.x) * 1.570796);\n  };\n  vec2 tmpvar_15;\n  tmpvar_15.x = (((tmpvar_12 * q11) * 2.0) + tmpvar_10);\n  tmpvar_15.y = (((aspect.w * \n    log(sqrt(dot (tmpvar_11, tmpvar_11)))\n  ) + (tmpvar_12 * q11)) - tmpvar_10);\n  spiral_2 = (0.5 + ((0.5 - \n    abs(((fract(\n      (tmpvar_15 * 0.5)\n    ) * 2.0) - 1.0))\n  ) * 0.95));\n  uv_1 = spiral_2.yx;\n  uvm_3.x = (spiral_2.y - (0.05 * texture (sampler_noise_hq, vec2((spiral_2.y * 1.5))).x));\n  uvm_3.y = (spiral_2.x - (0.05 * texture (sampler_noise_hq, vec2((spiral_2.x * 1.5))).x));\n  vec4 tmpvar_16;\n  tmpvar_16 = texture (sampler_main, fract(uvm_3));\n  vec3 tmpvar_17;\n  tmpvar_17 = (((5.0 * tmpvar_16.xyz) - (\n    (texture (sampler_blur1, uvm_3).xyz * scale1)\n   + bias1)) * ((0.75 * tmpvar_16.xyz) + sin(\n    (time * 2.0)\n  )).x);\n  vec3 tmpvar_18;\n  tmpvar_18 = (0.48 - tmpvar_17);\n  vec2 tmpvar_19;\n  tmpvar_19.x = uv_1.x;\n  tmpvar_19.y = (spiral_2.x * 0.75);\n  vec2 tmpvar_20;\n  tmpvar_20.x = uv_1.x;\n  tmpvar_20.y = (spiral_2.x * 0.75);\n  ret_4 = ((texture (sampler_main, tmpvar_20).xyz * tmpvar_18) + (0.58 * tmpvar_17));\n  ret_4 = (ret_4 * max ((\n    ((texture (sampler_main, tmpvar_19).xyz * tmpvar_18) - (0.01 * tmpvar_17))\n   + ret_4), ret_4));\n  ret_4 = (ret_4 * 1.2);\n  vec4 tmpvar_21;\n  tmpvar_21.w = 1.0;\n  tmpvar_21.xyz = ret_4;\n  ret = tmpvar_21.xyz;\n }","warp_hlsl":"\nshader_body\n{\n    ret = tex2D( sampler_fw_main, uv ).xyz;\n\n    float2 stretch = float2(roam_cos.x, roam_sin.x)*1;\n    float2 move = float2(roam_sin.x*1.2, roam_cos.x*1.2);\n    float tex = tex2D(sampler_noise_hq, uv * stretch-move);\n\n    ret = lerp(ret, 8*tex, 0.015);    \n\n    ret *= float3(.918+.05*q2,.912+.05*q3,.905+.05*q1);\n\n}","comp_hlsl":"\nfloat2 factorA, factorB, product;\nfloat2 numerator, denominator, fraction;\n\nshader_body\n{\nfloat2 uvm=0;\n\nuvm.x=uv.x-.07*tex2D(sampler_noise_hq, uv.x*.8).x;\nuvm.y=uv.y-.07*tex2D(sampler_noise_hq, uv.y*.8).x;\n\nfloat2 uvo = uv;\n//*** Flexis Moebius transformation code\n\nuv = (uv-0.5)*aspect.xy*2;\nfactorA = uv;\nfactorB = float2(q21,q22);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y,   // the products real part\n                  factorA.x*factorB.y + factorA.y*factorB.x);  // the products imaginary part\n\nnumerator = product + float2(q23,q24);\n\nfactorA = uv;\nfactorB = float2(q25,q26);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y,   // the products real part\n                  factorA.x*factorB.y + factorA.y*factorB.x);  // the products imaginary part\n\n\ndenominator = product + float2(q27,q28);\n\nfraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,   // the fractions real part\n                   numerator.y*denominator.x - numerator.x*denominator.y)/  // the fractions imaginary part\n                   (denominator.x*denominator.x + denominator.y*denominator.y);\n\nuv = fraction*0.5;\n\n// ***\n\n\n// *** Flexis logarithmic spiral code\n\nfloat t = .33*time; // set velocity here\nfloat2 c = (uv-0.5)*aspect.wz;\nfloat1 ang_hq = atan2(c.x,c.y);\n//q11 = 1/asin(1); from the init section\nfloat2 spiral = float2(ang_hq*q11*2+t,aspect.w*log(length(c))+ang_hq*q11-t);\nspiral = 0.5 + (0.5 - abs( frac( spiral * 0.5 ) * 2.0 - 1.0 ))*0.95; // mirror\nuv = spiral.yx;\n\n// ***\n//float2 uvm=0;\n\nuvm.x=uv.x-.05*tex2D(sampler_noise_hq, uv.x*1.5).x;\nuvm.y=uv.y-.05*tex2D(sampler_noise_hq, uv.y*1.5).x;\n\nfloat3 blur = GetBlur1(uvm);\nfloat3 sharp = tex2D(sampler_main, uvm);\nfloat3 fix = GetPixel(frac(uvm));\n\nfloat lum = dot(blur, float3(.3,.5,.2));\nfloat mod = (.75*fix+sin(time*2));\n\nfloat3 fret = (5*fix-blur)*mod;\nfloat3 inv = .48-fret;\n\nfloat3 aret=tex2D(sampler_main, float2(uv.x, uv.y*.75))*inv-.01*fret;\nret=tex2D(sampler_main, float2(uv.x, uv.y*.75))*inv+.58*fret;\n\nret *= max(aret+ret, ret);\nret*=1.2;\n}"}