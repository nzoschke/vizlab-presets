{"version":2,"baseVals":{"rating":5,"gammaadj":1.9,"echo_zoom":1.169,"wave_mode":4,"additivewave":1,"wave_thick":1,"wave_a":0.001,"wave_scale":0.26,"wave_smoothing":0.9,"modwavealphastart":0.63,"modwavealphaend":0.87,"warpscale":3.138,"zoom":0.99703,"warp":0.01,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"wave_y":0.72,"ob_size":0,"ob_r":0.1,"ob_g":0.08,"ob_a":0.6,"ib_size":0,"ib_r":1,"ib_g":1,"ib_b":1,"ib_a":0.1,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.q25=0;a.q22=0;a.q21=0;a.q6=0;a.thresh=0;a.q1=0;a.q5=0;a.dy_r=0;a.q31=0;a.q23=0;a.q24=0;a.q11=0;a.q4=0;a.dx_r=0;a.q26=0;a.q2=0;a.q27=0;a.q3=0;a.q32=0;a.q7=0;a.q28=0;","frame_eqs_str":"a.q1=.11*Math.sin(1.1*a.time)+.1*Math.cos(.43*a.time);a.q2=.11*Math.sin(.92*a.time)+.1*Math.cos(1.1*a.time);a.q3=.11*Math.sin(.22*a.time)+.1*Math.cos(.33*a.time);a.q4=1.5+.2*Math.sin(.33*a.time)+.2*Math.cos(.33*a.time);a.q5=1.5+.2*Math.cos(.51*a.time)+.2*Math.sin(.21*a.time);a.q6=1+.5*Math.sin(.77*a.time)+.25*Math.cos(.33*a.time);a.q7=.025*Math.cos(.346*a.time)+.025*Math.sin(.662*a.time-a.q4);a.q31=.1*a.time+.25*Math.cos(1.64*a.time);a.q32=.12*a.time+.25*Math.cos(1.19*a.time);\na.q21=Math.cos(.2*-a.time);a.q22=Math.sin(.2*-a.time);a.q23=0;a.q24=.3;a.q25=.333*Math.cos(.2*a.time);a.q26=.333*Math.sin(.2*a.time);a.q27=-.25;a.q28=.2;a.q11=div(1,Math.asin(1));","pixel_eqs_str":"a.zoom=1+.05*Math.sin(9*a.ang-10*Math.sin(a.time)-10*a.rad*Math.cos(a.time)-a.time);a.thresh=2*above(a.bass_att,a.thresh)+(1-above(a.bass_att,a.thresh))*(.96*(a.thresh-1.3)+1.3);a.dx_r=.015*equal(a.thresh,2)*Math.sin(5*a.time)+(1-equal(a.thresh,2))*a.dx_r;a.dy_r=.015*equal(a.thresh,2)*Math.sin(6*a.time)+(1-equal(a.thresh,2))*a.dy_r;a.dx=a.dx_r+.005*Math.sin(1.463*a.time);a.dy=a.dy_r+.005*Math.sin(1.222*a.time);","init_eqs_eel":"","frame_eqs_eel":"q1=.11*sin(time*1.1)+.1*cos(time*.43);\nq2=.11*sin(time*.92)+.1*cos(time*1.1);\nq3=.11*sin(time*.22)+.1*cos(time*.33);\n\nq4=1.5+.2*sin(time*.33)+.2*cos(time*.33);\nq5=1.5+.2*cos(time*.51)+.2*sin(time*.21);\n\n//zoom\nq6=1+.5*sin(time*.77)+.25*cos(time*.33);\n\n//movement\nq7=.025*cos(time*.346)+.025*sin(time*.662-q4);\n\nq31=(time*.1)+.25*cos(time*1.64);\nq32=(time*.12)+.25*cos(time*1.19);\n// a\nq21 = 1*cos(-time*0.2); // the real part\nq22 = 1*sin(-time*0.2); // the imaginary part\n\n// b\nq23 = 0; // the real part\nq24 = 0.3; // the imaginary part\n\n// c\nq25 = 0.333*cos(time*0.2); // the real part\nq26 = 0.333*sin(time*0.2); // the imaginary part\n\n// d\nq27 = -0.25; // the real part\nq28 = 0.2; // the imaginary part\n\nq11 = 1/asin(1);","pixel_eqs_eel":"zoom=1.0+.05*sin(ang*9-10*sin(time)-rad*10*cos(time)-time);\n\nthresh = above(bass_att,thresh)*2+(1-above(bass_att,thresh))*((thresh-1.3)*0.96+1.3);\ndx_r = equal(thresh,2)*0.015*sin(5*time)+(1-equal(thresh,2))*dx_r;\ndy_r = equal(thresh,2)*0.015*sin(6*time)+(1-equal(thresh,2))*dy_r;\n\ndx=dx_r+.005*sin(time*1.463);\ndy=dy_r+.005*sin(time*1.222);","warp":" shader_body { \n  vec2 tmpvar_1;\n  tmpvar_1.x = roam_cos.x;\n  tmpvar_1.y = roam_sin.x;\n  vec2 tmpvar_2;\n  tmpvar_2.x = (roam_sin.x * 1.2);\n  tmpvar_2.y = (roam_cos.x * 1.2);\n  vec3 tmpvar_3;\n  tmpvar_3.x = (0.918 + (0.05 * q2));\n  tmpvar_3.y = (0.912 + (0.05 * q3));\n  tmpvar_3.z = (0.905 + (0.05 * q1));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = (mix (texture (sampler_fw_main, uv).xyz, vec3((8.0 * texture (sampler_noise_hq, \n    ((uv * tmpvar_1) - tmpvar_2)\n  ).x)), vec3(0.015, 0.015, 0.015)) * tmpvar_3);\n  ret = tmpvar_4.xyz;\n }","comp":"vec2 xlat_mutabledenominator;\nvec2 xlat_mutablenumerator;\n shader_body { \n  vec2 uv_1;\n  vec2 uvm_2;\n  vec2 spiral_3;\n  vec3 ret_4;\n  uv_1 = (((\n    ((uv - q7) * vec2(q6))\n   - 0.5) * aspect.xy) * 2.0);\n  vec2 tmpvar_5;\n  tmpvar_5.x = ((uv_1.x * q21) - (uv_1.y * q22));\n  tmpvar_5.y = ((uv_1.x * q22) + (uv_1.y * q21));\n  vec2 tmpvar_6;\n  tmpvar_6.x = q23;\n  tmpvar_6.y = q24;\n  xlat_mutablenumerator = (tmpvar_5 + tmpvar_6);\n  vec2 tmpvar_7;\n  tmpvar_7.x = ((uv_1.x * q25) - (uv_1.y * q26));\n  tmpvar_7.y = ((uv_1.x * q26) + (uv_1.y * q25));\n  vec2 tmpvar_8;\n  tmpvar_8.x = q27;\n  tmpvar_8.y = q28;\n  xlat_mutabledenominator = (tmpvar_7 + tmpvar_8);\n  vec2 tmpvar_9;\n  tmpvar_9.x = ((xlat_mutablenumerator.x * xlat_mutabledenominator.x) + (xlat_mutablenumerator.y * xlat_mutabledenominator.y));\n  tmpvar_9.y = ((xlat_mutablenumerator.y * xlat_mutabledenominator.x) - (xlat_mutablenumerator.x * xlat_mutabledenominator.y));\n  uv_1 = ((tmpvar_9 / (\n    (xlat_mutabledenominator.x * xlat_mutabledenominator.x)\n   + \n    (xlat_mutabledenominator.y * xlat_mutabledenominator.y)\n  )) * 0.5);\n  float tmpvar_10;\n  tmpvar_10 = (1.5 * time);\n  vec2 tmpvar_11;\n  tmpvar_11 = ((uv_1 - 0.5) * aspect.wz);\n  float tmpvar_12;\n  float tmpvar_13;\n  tmpvar_13 = (min (abs(\n    (tmpvar_11.x / tmpvar_11.y)\n  ), 1.0) / max (abs(\n    (tmpvar_11.x / tmpvar_11.y)\n  ), 1.0));\n  float tmpvar_14;\n  tmpvar_14 = (tmpvar_13 * tmpvar_13);\n  tmpvar_14 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_14) + 0.05368138) * tmpvar_14) - 0.1173503)\n     * tmpvar_14) + 0.1938925) * tmpvar_14) - 0.3326756)\n   * tmpvar_14) + 0.9999793) * tmpvar_13);\n  tmpvar_14 = (tmpvar_14 + (float(\n    (abs((tmpvar_11.x / tmpvar_11.y)) > 1.0)\n  ) * (\n    (tmpvar_14 * -2.0)\n   + 1.570796)));\n  tmpvar_12 = (tmpvar_14 * sign((tmpvar_11.x / tmpvar_11.y)));\n  if ((abs(tmpvar_11.y) > (1e-08 * abs(tmpvar_11.x)))) {\n    if ((tmpvar_11.y < 0.0)) {\n      if ((tmpvar_11.x >= 0.0)) {\n        tmpvar_12 += 3.141593;\n      } else {\n        tmpvar_12 = (tmpvar_12 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_12 = (sign(tmpvar_11.x) * 1.570796);\n  };\n  vec2 tmpvar_15;\n  tmpvar_15.x = (((tmpvar_12 * q11) * 7.0) + tmpvar_10);\n  tmpvar_15.y = (((aspect.w * \n    log(sqrt(dot (tmpvar_11, tmpvar_11)))\n  ) + (tmpvar_12 * q11)) - tmpvar_10);\n  spiral_3 = (0.5 + ((0.5 - \n    abs(((fract(\n      (tmpvar_15 * 0.5)\n    ) * 2.0) - 1.0))\n  ) * 0.5));\n  uv_1 = spiral_3.yx;\n  uvm_2.x = (spiral_3.y - (0.07 * texture (sampler_noise_hq, vec2((spiral_3.y * 0.8))).x));\n  uvm_2.y = (spiral_3.x - (0.07 * texture (sampler_noise_hq, vec2((spiral_3.x * 0.8))).x));\n  vec3 tmpvar_16;\n  tmpvar_16 = ((texture (sampler_blur1, uvm_2).xyz * scale1) + bias1);\n  vec4 tmpvar_17;\n  tmpvar_17 = texture (sampler_main, fract(uvm_2));\n  vec2 tmpvar_18;\n  float tmpvar_19;\n  tmpvar_19 = (roam_sin.y * 2.0);\n  float tmpvar_20;\n  tmpvar_20 = (2.0 * q31);\n  tmpvar_18.x = (tmpvar_17.x + cos((\n    (uvm_2.x - tmpvar_19)\n   - tmpvar_20)));\n  float tmpvar_21;\n  tmpvar_21 = (roam_cos.x * 2.0);\n  float tmpvar_22;\n  tmpvar_22 = (2.0 * q32);\n  tmpvar_18.y = (tmpvar_17.x - sin((\n    (uvm_2.y + tmpvar_21)\n   - tmpvar_22)));\n  vec3 tmpvar_23;\n  tmpvar_23 = (((2.0 * tmpvar_17.xyz) - (0.5 * tmpvar_16)) - (4.0 * tmpvar_18).xxx);\n  vec3 tmpvar_24;\n  tmpvar_24 = (1.0 - tmpvar_23);\n  ret_4 = ((texture (sampler_main, spiral_3.yx).xyz * tmpvar_24) + (0.55 * tmpvar_23));\n  vec3 tmpvar_25;\n  tmpvar_25 = mix (ret_4, tmpvar_24, vec3((1.5 * clamp (\n    dot (tmpvar_23, tmpvar_24)\n  , 0.0, 1.0))));\n  vec2 tmpvar_26;\n  tmpvar_26.x = (tmpvar_17.z + cos((\n    (uvm_2.x - tmpvar_19)\n   - tmpvar_20)));\n  tmpvar_26.y = (tmpvar_17.z - sin((\n    (uvm_2.y + tmpvar_21)\n   - tmpvar_22)));\n  vec3 tmpvar_27;\n  tmpvar_27 = (((\n    (2.0 * tmpvar_17.xyz)\n   - \n    (0.5 * ((texture (sampler_blur2, uvm_2).xyz * scale2) + bias2))\n  ) - tmpvar_16) - (4.0 * tmpvar_26).xxx);\n  vec3 tmpvar_28;\n  tmpvar_28 = (1.0 - tmpvar_27);\n  ret_4 = ((texture (sampler_main, spiral_3.yx).xyz + tmpvar_28) + (0.5 * tmpvar_27));\n  vec3 tmpvar_29;\n  tmpvar_29 = mix (sin(tmpvar_25), sin((tmpvar_25 * \n    mix (ret_4, tmpvar_28, vec3(clamp (dot (tmpvar_27, tmpvar_28), 0.0, 1.0)))\n  )), vec3(0.5, 0.5, 0.5));\n  ret_4 = tmpvar_29;\n  vec4 tmpvar_30;\n  tmpvar_30.w = 1.0;\n  tmpvar_30.xyz = tmpvar_29;\n  ret = tmpvar_30.xyz;\n }","warp_hlsl":"\nshader_body\n{\n    ret = tex2D( sampler_fw_main, uv ).xyz;\n\n    float2 stretch = float2(roam_cos.x, roam_sin.x)*1;\n    float2 move = float2(roam_sin.x*1.2, roam_cos.x*1.2);\n    float tex = tex2D(sampler_noise_hq, uv * stretch-move);\n\n    ret = lerp(ret, 8*tex, 0.015);    \n\n//ret.y*=.5-.2*cos(ang*10-q31);\n\n    ret *= float3(.918+.05*q2,.912+.05*q3,.905+.05*q1);\n\n}","comp_hlsl":"\nfloat2 factorA, factorB, product;\nfloat2 numerator, denominator, fraction;\n\nshader_body\n{\nfloat2 uvo = uv;\n\n//Roaming Zoom effect;\n\n//first create a value which moves uv, doesn't need to be too precise\nhalf2 zoom_mod=uv-q7;\n\n//then one to multiply by!\nhalf1 zoom=(q6);\nzoom_mod*=zoom.xx;\n\nuv=zoom_mod;\n\n//*** Flexis Moebius transformation code\n\nuv = (uv-0.5)*aspect.xy*2;\nfactorA = uv;\nfactorB = float2(q21,q22);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y,   // the products real part\n                  factorA.x*factorB.y + factorA.y*factorB.x);  // the products imaginary part\n\nnumerator = product + float2(q23,q24);\n\nfactorA = uv;\nfactorB = float2(q25,q26);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y,   // the products real part\n                  factorA.x*factorB.y + factorA.y*factorB.x);  // the products imaginary part\n\n\ndenominator = product + float2(q27,q28);\n\nfraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,   // the fractions real part\n                   numerator.y*denominator.x - numerator.x*denominator.y)/  // the fractions imaginary part\n                   (denominator.x*denominator.x + denominator.y*denominator.y);\n\nuv = fraction*.5;\n\n// ***\n\n\n// *** Flexis logarithmic spiral code\n\nfloat t = 1.5*time; // set velocity here\nfloat2 c = (uv-0.5)*aspect.wz;\nfloat1 ang_hq = atan2(c.x,c.y);\n// q11 = 1/asin(1); from the init section\nfloat2 spiral = float2(ang_hq*q11*7+t,aspect.w*log(length(c))+ang_hq*q11-t);\nspiral = 0.5 + (0.5 - abs( frac( spiral * 0.5 ) * 2.0 - 1 ))*0.5; // mirror\nuv = spiral.yx;\n\n// ***\n\nfloat2 uvm=0;\n\nuvm.x=uv.x-.07*tex2D(sampler_noise_hq, uv.x*.8).x;\nuvm.y=uv.y-.07*tex2D(sampler_noise_hq, uv.y*.8).x;\n\nfloat3 blur = GetBlur1(uvm);\nfloat3 sharp = tex2D(sampler_main, uvm);\nfloat3 fix = GetPixel(frac(uvm));\n\nfloat2 mod = 4*float2(1*(fix.x)+cos(uvm.x-roam_sin.y*2-2*q31), 1*(fix.x)-sin(uvm.y+roam_cos.x*2-2*q32));\n\nfloat3 fret = (2*fix-.5*blur)-mod.xxx;\nfloat3 inv = 1-fret;\n\nfloat melt = dot(fret, inv);\n\nret=tex2D(sampler_main, uv.xy)*inv+.55*fret;\nfloat3 modret=lerp(ret, inv, 1.5*saturate(melt));\n\n\nfloat3 blur1 = GetBlur2(uvm);\nfloat3 sharp1 = tex2D(sampler_main, uvm);\n//float3 fix1 = GetPixel(frac(uvm));\n\nfloat2 mod1 = 4*float2(1*(fix.z)+cos(uvm.x-roam_sin.y*2-2*q31), 1*(fix.z)-sin(uvm.y+roam_cos.x*2-2*q32));\n\nfloat3 fret1 = (2*fix-.5*blur1-blur)-mod1.xxx;\nfloat3 inv1 = 1-fret1;\n\nfloat melt1 = dot(fret1, inv1);\n\nret=tex2D(sampler_main, uv)+inv1+.5*fret1;\nfloat3 modret1=lerp(ret, inv1, saturate(melt1));\n\nret=lerp(sin(modret), sin(modret*modret1), .5);\n}"}