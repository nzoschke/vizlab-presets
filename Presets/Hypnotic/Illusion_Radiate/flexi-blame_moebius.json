{"version":2,"baseVals":{"rating":5,"gammaadj":1,"wave_mode":1,"wave_thick":1,"wave_brighten":0,"wave_a":0.004,"wave_scale":0.762,"wave_smoothing":0.9,"wave_mystery":-0.44,"modwavealphastart":1,"modwavealphaend":1,"warpanimspeed":0.408,"warpscale":0.905,"zoom":1.025,"warp":0.63735,"wave_y":0.04,"ob_size":0,"ob_r":1,"ob_g":1,"ob_b":1,"ob_a":1,"ib_r":1,"ib_g":1,"ib_b":1,"mv_x":64,"mv_y":48,"mv_l":5,"mv_g":0.91,"mv_b":0.71,"mv_a":0,"b1n":0.27,"b2n":0.78,"b3n":0.49,"b1x":0.84,"b2x":0.91,"b3x":0.52,"b1ed":0.9},"shapes":[{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"textured":1,"rad":0.01,"tex_zoom":1.85322,"r":0,"a":0.1,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"vx = 0","frame_eqs_str":"","init_eqs_eel":"vx = 0","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"textured":1,"x":0.7,"y":0.3,"rad":0.6623,"ang":2.45044,"tex_zoom":0.74934,"g":0.1,"b":0.1,"r2":1,"g2":0.1,"b2":0.1,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"xx = 0.5;\nyy = 0.4;","frame_eqs_str":"d = sqrt( sqr(xx-q4)+sqr(yy-q8));\n\nxx = if(below(d,0.15),0.4+rand(200)/1000,xx);\nyy = if(below(d,0.15),0.3+rand(400)/1000,yy);\naang = if(below(d,0.12),rand(1000)/1000,aang);\nang =aang*4*asin(1);\nx = xx;\ny = yy;","init_eqs_eel":"xx = 0.5;\nyy = 0.4;","frame_eqs_eel":"d = sqrt( sqr(xx-q4)+sqr(yy-q8));\n\nxx = if(below(d,0.15),0.4+rand(200)/1000,xx);\nyy = if(below(d,0.15),0.3+rand(400)/1000,yy);\naang = if(below(d,0.12),rand(1000)/1000,aang);\nang =aang*4*asin(1);\nx = xx;\ny = yy;"},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"textured":1,"x":0.43,"y":0.6,"rad":1.16781,"ang":5.96903,"tex_zoom":0.67165,"r2":1,"g2":0,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"xx = 0.5;\nyy = 0.4;","frame_eqs_str":"d = sqrt( sqr(xx-q4)+sqr(yy-q8));\n\nxx = if(below(d,0.15),0.4+rand(200)/1000,xx);\nyy = if(below(d,0.15),0.3+rand(400)/1000,yy);\naang = if(below(d,0.12),rand(1000)/1000,aang);\nang =aang*4*asin(1);\nx = xx;\ny = yy;","init_eqs_eel":"xx = 0.5;\nyy = 0.4;","frame_eqs_eel":"d = sqrt( sqr(xx-q4)+sqr(yy-q8));\n\nxx = if(below(d,0.15),0.4+rand(200)/1000,xx);\nyy = if(below(d,0.15),0.3+rand(400)/1000,yy);\naang = if(below(d,0.12),rand(1000)/1000,aang);\nang =aang*4*asin(1);\nx = xx;\ny = yy;"},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"y":0.75,"rad":0.07059,"tex_zoom":0.73458,"g":0.5,"b":0.5,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"vx = 0","frame_eqs_str":"x = q1;\ny = q5;","init_eqs_eel":"vx = 0","frame_eqs_eel":"x = q1;\ny = q5;"}],"waves":[{"baseVals":{"usedots":1,"scaling":2.44415,"smoothing":0,"a":0,"enabled":0},"init_eqs_str":"t2 = 0;\nt3 = 0;\nt4 = 0;\ncl = 0;","frame_eqs_str":"t1 = 0;\nv = 0.01;\nj = j + (bass)*0.01;\nj2 = j2 + (mid_att)*0.01;\nj3 = j3 + (treb_att)*0.01;\nt2 = j;\nt3 = j2;\nt4 = j3;\n//t5 = 0;\nk = k*0.99 + 10*mid/fps;\nt5 = -k;\n\ncl1 = cl1 + 0.002;\ncl1 = if(above(cl1,1),0,cl1);\ncl1 = if(below(cl1,0),1,cl1);\nt8 = cl1;\n\ncl2 = cl2 -1*q1;\ncl2 = if(above(cl2,1),0,cl2);\ncl2 = if(below(cl2,0),1,cl2);\nt7 = cl2;\n\ncl3 = cl3 +0.001;\ncl3 = if(above(cl3,1),0,cl3);\ncl3 = if(below(cl3,0),1,cl3);\nt6 = cl3;","point_eqs_str":"xx = ((sample*0983624912364)%10000000+100)/10000000;\nyy = ((xx*1896575575)%10000000+100)/10000000;\nzz = ((yy*58652340875)%10000000+100)/10000000;\n\n\nd = sqrt(sqr(xx)+sqr(yy)+sqr(zz));\n\nzz = zz + t8 - if(above(zz+t8,1),1,0) - 0.5;\nxx = xx + t7 - if(above(xx+t7,1),1,0) - 0.5;\nyy = yy + t6 - if(above(yy+t6,1),1,0) - 0.5;\n\nv = 0.001;\n\nw = 1;// (sample*sin(time*0.3)*0.01-1);\nbb = d*d*0.5;\nn= 0.3;\ns1 = sin(sin(t2*w+bb)*n);\ns2 = sin(sin(t3*w+bb)*n);\ns3 = sin(sin(t4*w+bb)*n);\nc1 = cos(sin(t2*w+bb)*n);\nc2 = cos(sin(t3*w+bb)*n);\nc3 = cos(sin(t4*w+bb)*n);\n\nz = (c3*s1*c2 + s3*s2)*xx - (c3*s1*s2-s3*c2)*yy + c3*c1*zz;\nx1 = (c1*c2*xx + c1*s2*yy - s1*zz);\ny1 = ((s3*s1*c2 - c3*s2)*xx + (s3*s1*s2+c3*c2)*yy + s3*c1*zz);\n\nzoom = .5*(1/(z+0.5));\nx = 0.5 + zoom*x1 + sin(time*0.1)*0.;;\ny = 0.5 + zoom*y1 + cos(time*0.16801)*0.;\n\npi3 = 3.1415*2*0.3333;\nt = z*2+t2*1;\nc=3;\n//r = sin(t)*c;\n\n//g = sin(t+pi3)*c;\n\n//b = sin(t-pi3)*c;\n\n\nr = if(above(r,1),1,r);\nr = if(below(r,0),0,r);\ng = if(above(g,1),1,g);\ng = if(below(g,0),0,g);\nb = if(above(b,1),1,b);\nb = if(below(b,0),0,b);\n\na = 0.4;","init_eqs_eel":"t2 = 0;\nt3 = 0;\nt4 = 0;\ncl = 0;","frame_eqs_eel":"t1 = 0;\nv = 0.01;\nj = j + (bass)*0.01;\nj2 = j2 + (mid_att)*0.01;\nj3 = j3 + (treb_att)*0.01;\nt2 = j;\nt3 = j2;\nt4 = j3;\n//t5 = 0;\nk = k*0.99 + 10*mid/fps;\nt5 = -k;\n\ncl1 = cl1 + 0.002;\ncl1 = if(above(cl1,1),0,cl1);\ncl1 = if(below(cl1,0),1,cl1);\nt8 = cl1;\n\ncl2 = cl2 -1*q1;\ncl2 = if(above(cl2,1),0,cl2);\ncl2 = if(below(cl2,0),1,cl2);\nt7 = cl2;\n\ncl3 = cl3 +0.001;\ncl3 = if(above(cl3,1),0,cl3);\ncl3 = if(below(cl3,0),1,cl3);\nt6 = cl3;","point_eqs_eel":"xx = ((sample*0983624912364)%10000000+100)/10000000;\nyy = ((xx*1896575575)%10000000+100)/10000000;\nzz = ((yy*58652340875)%10000000+100)/10000000;\n\n\nd = sqrt(sqr(xx)+sqr(yy)+sqr(zz));\n\nzz = zz + t8 - if(above(zz+t8,1),1,0) - 0.5;\nxx = xx + t7 - if(above(xx+t7,1),1,0) - 0.5;\nyy = yy + t6 - if(above(yy+t6,1),1,0) - 0.5;\n\nv = 0.001;\n\nw = 1;// (sample*sin(time*0.3)*0.01-1);\nbb = d*d*0.5;\nn= 0.3;\ns1 = sin(sin(t2*w+bb)*n);\ns2 = sin(sin(t3*w+bb)*n);\ns3 = sin(sin(t4*w+bb)*n);\nc1 = cos(sin(t2*w+bb)*n);\nc2 = cos(sin(t3*w+bb)*n);\nc3 = cos(sin(t4*w+bb)*n);\n\nz = (c3*s1*c2 + s3*s2)*xx - (c3*s1*s2-s3*c2)*yy + c3*c1*zz;\nx1 = (c1*c2*xx + c1*s2*yy - s1*zz);\ny1 = ((s3*s1*c2 - c3*s2)*xx + (s3*s1*s2+c3*c2)*yy + s3*c1*zz);\n\nzoom = .5*(1/(z+0.5));\nx = 0.5 + zoom*x1 + sin(time*0.1)*0.;;\ny = 0.5 + zoom*y1 + cos(time*0.16801)*0.;\n\npi3 = 3.1415*2*0.3333;\nt = z*2+t2*1;\nc=3;\n//r = sin(t)*c;\n\n//g = sin(t+pi3)*c;\n\n//b = sin(t-pi3)*c;\n\n\nr = if(above(r,1),1,r);\nr = if(below(r,0),0,r);\ng = if(above(g,1),1,g);\ng = if(below(g,0),0,g);\nb = if(above(b,1),1,b);\nb = if(below(b,0),0,b);\n\na = 0.4;"},{"baseVals":{"thick":1,"additive":1,"scaling":2.0231,"smoothing":0,"r":0,"b":0,"enabled":0},"init_eqs_str":"t2 = 0;\nt3 = 0;\nt4 = 0;\ncl = 0;","frame_eqs_str":"t8 = 1;","point_eqs_str":"//d3 = if(equal(t8,1),t4,d3);\n//d2 = if(equal(t8,1),t3,d2);\n//d1 = if(equal(t8,1),t2,d1);\n//d = if(equal(t8,1),t1,d);\nt3 = t3*0.6 + (value1)*1;\nt2 = t2*0.7 + t3*0.2;\nt1 = t1*0.8 + t2*0.1;\nd = d*0.9 + t1*0.2;\n\ny = 0.5 + d*sample*(1-sample);\nx =  -0.05 + sample*1.1;\nt8 = 0;","init_eqs_eel":"t2 = 0;\nt3 = 0;\nt4 = 0;\ncl = 0;","frame_eqs_eel":"t8 = 1;","point_eqs_eel":"//d3 = if(equal(t8,1),t4,d3);\n//d2 = if(equal(t8,1),t3,d2);\n//d1 = if(equal(t8,1),t2,d1);\n//d = if(equal(t8,1),t1,d);\nt3 = t3*0.6 + (value1)*1;\nt2 = t2*0.7 + t3*0.2;\nt1 = t1*0.8 + t2*0.1;\nd = d*0.9 + t1*0.2;\n\ny = 0.5 + d*sample*(1-sample);\nx =  -0.05 + sample*1.1;\nt8 = 0;"},{"baseVals":{"usedots":1,"thick":1,"scaling":5.92556,"smoothing":0,"g":0,"b":0,"a":0.66,"enabled":0},"init_eqs_str":"","frame_eqs_str":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_str":"sample = 1-sample;\nxxx = xx;\nyyy = yy;\nxx = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\nyy = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;\n\nd = 1/sqrt(sqr(xx-xxx)+sqr(yy-yyy));\ndd = dd*0.95 + (value1);\nddd = dd*sample*(1-sample)*d;\n\nx = xx + (yy-yyy)*ddd;\ny = yy - (xx-xxx)*ddd;","init_eqs_eel":"","frame_eqs_eel":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_eel":"sample = 1-sample;\nxxx = xx;\nyyy = yy;\nxx = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\nyy = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;\n\nd = 1/sqrt(sqr(xx-xxx)+sqr(yy-yyy));\ndd = dd*0.95 + (value1);\nddd = dd*sample*(1-sample)*d;\n\nx = xx + (yy-yyy)*ddd;\ny = yy - (xx-xxx)*ddd;"},{"baseVals":{"thick":1,"scaling":5.92556,"smoothing":0,"r":0.65,"g":0.45,"enabled":0},"init_eqs_str":"t2 = 0","frame_eqs_str":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_str":"sample = 1-sample;\nxxx = xx;\nyyy = yy;\nxx = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\nyy = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;\n\nd = 1/sqrt(sqr(xx-xxx)+sqr(yy-yyy));\ndd = dd*0.95 + (value1);\nddd = dd*sample*(1-sample)*d;\nddd = sample*(1-sample)*sin(sample*200)*d*0.05;\nx = xx + (yy-yyy)*ddd;\ny = yy - (xx-xxx)*ddd;","init_eqs_eel":"t2 = 0","frame_eqs_eel":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_eel":"sample = 1-sample;\nxxx = xx;\nyyy = yy;\nxx = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\nyy = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;\n\nd = 1/sqrt(sqr(xx-xxx)+sqr(yy-yyy));\ndd = dd*0.95 + (value1);\nddd = dd*sample*(1-sample)*d;\nddd = sample*(1-sample)*sin(sample*200)*d*0.05;\nx = xx + (yy-yyy)*ddd;\ny = yy - (xx-xxx)*ddd;"}],"init_eqs_str":"a.scale=0;a.q6=0;a.q1=0;a.q5=0;a.angle=0;a.q4=0;a.q2=0;a.q3=0;a.q7=0;a.q8=0;","frame_eqs_str":"a.zoom=1;a.warp=0;a.scale=6;a.angle=.2*-a.time;a.q1=a.scale*Math.cos(a.angle);a.q2=a.scale*Math.sin(a.angle);a.q3=0;a.q4=.3;a.scale=1.4;a.angle=.2*a.time;a.q5=a.scale*Math.cos(a.angle);a.q6=a.scale*Math.sin(a.angle);a.q7=-.25;a.q8=.2;","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"zoom = 1;\nwarp = 0;\n\n//getting into complex numbers and shaders\n\n// now the power lies in the composition of fractions of polynomes\n// there is this quite simple equation (a*Z + b)/(c*Z + d), a.k.a. the Moebius transformation\n// with the constraint: ac-bd != 0\n\n// a\nscale = 6;\nangle = -time*0.2;\n\nq1 = scale*cos(angle); // the real part\nq2 = scale*sin(angle); // the imaginary part\n\n// b\n\nq3 = 0; // the real part\nq4 = 0.3; // the imaginary part\n\n// c\nscale = 1.4;\nangle = time*0.2;\n\nq5 = scale*cos(angle); // the real part\nq6 = scale*sin(angle); // the imaginary part\n\n// d\nq7 = -0.25; // the real part\nq8 = 0.2; // the imaginary part","pixel_eqs_eel":"","warp":"vec2 xlat_mutabledenominator;\nvec2 xlat_mutablenumerator;\n shader_body { \n  vec2 uv_1;\n  float fnord_2;\n  uv_1 = ((uv_orig - 0.5) * aspect.xy);\n  vec2 tmpvar_3;\n  tmpvar_3.x = ((uv_1.x * q1) - (uv_1.y * q2));\n  tmpvar_3.y = ((uv_1.x * q2) + (uv_1.y * q1));\n  vec2 tmpvar_4;\n  tmpvar_4.x = q3;\n  tmpvar_4.y = q4;\n  xlat_mutablenumerator = (tmpvar_3 + tmpvar_4);\n  vec2 tmpvar_5;\n  tmpvar_5.x = ((uv_1.x * q5) - (uv_1.y * q6));\n  tmpvar_5.y = ((uv_1.x * q6) + (uv_1.y * q5));\n  vec2 tmpvar_6;\n  tmpvar_6.x = q7;\n  tmpvar_6.y = q8;\n  xlat_mutabledenominator = (tmpvar_5 + tmpvar_6);\n  vec2 tmpvar_7;\n  tmpvar_7.x = ((xlat_mutablenumerator.x * xlat_mutabledenominator.x) + (xlat_mutablenumerator.y * xlat_mutabledenominator.y));\n  tmpvar_7.y = ((xlat_mutablenumerator.y * xlat_mutabledenominator.x) - (xlat_mutablenumerator.x * xlat_mutabledenominator.y));\n  uv_1 = ((tmpvar_7 / (\n    (xlat_mutabledenominator.x * xlat_mutabledenominator.x)\n   + \n    (xlat_mutabledenominator.y * xlat_mutabledenominator.y)\n  )) * 0.2);\n  vec2 tmpvar_8;\n  tmpvar_8 = fract(uv_1);\n  uv_1 = tmpvar_8;\n  vec2 tmpvar_9;\n  tmpvar_9 = ((tmpvar_8 - 0.5) * texsize.xy);\n  float tmpvar_10;\n  float tmpvar_11;\n  tmpvar_11 = (time * 200.0);\n  tmpvar_10 = clamp (((float(mod (\n    ((abs(tmpvar_9.x) + abs(tmpvar_9.y)) + tmpvar_11)\n  , 128.0))) - 64.0), 0.0, 1.0);\n  float tmpvar_12;\n  tmpvar_12 = clamp (((float(mod (\n    ((-(abs(tmpvar_9.x)) - abs(tmpvar_9.y)) + tmpvar_11)\n  , 128.0))) - 64.0), 0.0, 1.0);\n  float tmpvar_13;\n  tmpvar_13 = sqrt(dot (tmpvar_9, tmpvar_9));\n  if ((tmpvar_13 > (0.25 * texsize.y))) {\n    fnord_2 = tmpvar_12;\n  } else {\n    fnord_2 = tmpvar_10;\n  };\n  vec4 tmpvar_14;\n  tmpvar_14.w = 1.0;\n  tmpvar_14.xyz = vec3(fnord_2);\n  ret = tmpvar_14.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = texture (sampler_main, uv).xyz;\n  ret = tmpvar_1.xyz;\n }","warp_hlsl":"sampler sampler_fc_wrenches;\nfloat2 factorA, factorB, product;\nfloat2 numerator, denominator, fraction;\n\nshader_body\n{\nuv = lerp(uv_orig,uv,0); // this is scaling the input motion from the per-vertex-calc\nuv = (uv-0.5)*aspect.xy;\n\nfactorA = uv;\nfactorB = float2(q1,q2);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y,   // the products real part\n                  factorA.x*factorB.y + factorA.y*factorB.x);  // the products imaginary part\n\nnumerator = product + float2(q3,q4);\n\nfactorA = uv;\nfactorB = float2(q5,q6);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y,   // the products real part\n                  factorA.x*factorB.y + factorA.y*factorB.x);  // the products imaginary part\n\n\ndenominator = product + float2(q7,q8);\n\nfraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,   // the fractions real part\n                   numerator.y*denominator.x - numerator.x*denominator.y)/  // the fractions imaginary part\n                   (denominator.x*denominator.x + denominator.y*denominator.y);\n\nuv = fraction*0.2;\n\n//uv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5)*0.99; // Eo.S. mirror code with cutted borders\nuv = frac(uv);\nret = tex2D( sampler_fc_wrenches, uv );\n\n float2 bg = (uv-0.5)*texsize.xy;\n float bg1 = saturate((abs(bg.x)+abs(bg.y)+time*200)%128-64);\n float bg2 = saturate((-abs(bg.x)-abs(bg.y)+time*200)%128-64);\n float fnord;\n if(length(bg)> 0.25*texsize.y){\n  fnord = bg2;\n }else{\n  fnord = bg1;\n }\nret = fnord;\n}","comp_hlsl":"shader_body\n{\n    ret = GetPixel(uv);\n}"}