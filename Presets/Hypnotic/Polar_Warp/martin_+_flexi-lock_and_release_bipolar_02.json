{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"wave_thick":1,"modwavealphabyvolume":1,"darken":1,"wave_a":0.001,"wave_scale":0.527,"wave_smoothing":0.45,"modwavealphastart":0,"modwavealphaend":1.4,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.8,"wave_g":0.49,"ob_size":0,"ob_g":0.1,"ob_a":0.3,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1x":0.5,"b2x":0.5,"b1ed":0},"shapes":[{"baseVals":{"sides":14,"num_inst":32,"rad":0.03632,"tex_ang":1.00531,"tex_zoom":1.53117,"b":1,"a":0,"g2":0,"a2":0.6,"border_b":0,"border_a":0.3,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":3,"additive":1,"num_inst":48,"x":0.26,"y":0.2,"rad":0.39317,"tex_zoom":0.9355,"g":1,"b":0.6,"g2":0,"border_a":0},"init_eqs_str":"a.frac=0;a.n=0;a.z=0;a.q12=0;a.y0=0;a.x0=0;a.k1=0;a.z0=0;a.copies=0;a.q2=0;a.q32=0;","frame_eqs_str":"a.sides=a.q12;a.copies=Math.floor(div(a.num_inst,16));a.n=8*Math.floor(div(a.instance,a.copies))+1E3;a.frac=div(mod(a.instance,a.copies),a.copies);a.k1=1;a.x0=a.gmegabuf[Math.floor(a.n)]*a.frac+a.megabuf[Math.floor(a.n)]*(1-a.frac)*a.k1;a.y0=a.gmegabuf[Math.floor(a.n+1)]*a.frac+a.megabuf[Math.floor(a.n+1)]*(1-a.frac)*a.k1;a.z0=a.gmegabuf[Math.floor(a.n+2)]*a.frac+a.megabuf[Math.floor(a.n+2)]*(1-a.frac);a.ang=3.14*a.frac+Math.atan2(a.x0,a.y0);a.megabuf[Math.floor(a.n)]=a.x0;\na.megabuf[Math.floor(a.n+1)]=a.y0;a.megabuf[Math.floor(a.n+2)]=a.z0;a.x=a.x0+.5;a.y=a.y0*a.q32+.5;a.z=a.z0;a.a=Math.min(div(.4,a.z),1)*(0<=a.z?1:0);a.a2=0;a.rad=div(.02-.0006*a.sides,a.z);a.r=div(a.instance,a.num_inst);a.b=1-a.r;a.g=4*pow(a.r-.5*a.q2,2);a.r2=0;a.b2=0;a.g2=0;a.border_a=.04*(6<=a.sides?1:0);","init_eqs_eel":"","frame_eqs_eel":"sides = q12;\ncopies = int(num_inst/16);\n\nn = int(instance/copies)*8+1000;\nfrac = (instance%copies)/(copies);\n\nk1 = 1;\nx0 = gmegabuf(n)*frac + megabuf(n)*(1-frac)*k1;\ny0 = gmegabuf(n+1)*frac+ megabuf(n+1)*(1-frac)*k1;\nz0 = gmegabuf(n+2)*frac+ megabuf(n+2)*(1-frac);\nang = frac*3.14 + atan2(x0,y0);\n\nmegabuf(n) = x0;\nmegabuf(n+1) = y0;\nmegabuf(n+2) = z0;\n\nx = x0 + .5;\ny = y0*q32 + .5;\nz = z0;\n\na =  min(.4/z,1) * (z >= 0) ;\na2 = 0;\n\nrad = (.02-.0006*sides)/z;\nr = instance/num_inst;\nb = 1-r;\ng = pow(r-.5*q2,2)*4;\nr2 = 0; b2 = 0; g2 = 0;\n\nborder_a = .04*(sides >= 6);"},{"baseVals":{"enabled":1,"sides":8,"additive":1,"num_inst":192,"x":0.65,"y":0.38,"rad":0.76893,"tex_zoom":0.73678,"a":0.7,"g2":0,"border_r":0.5,"border_g":0.5,"border_b":0,"border_a":0},"init_eqs_str":"a.frac=0;a.n=0;a.z=0;a.q22=0;a.tht=0;a.y0=0;a.x0=0;a.oz=0;a.q31=0;a.k1=0;a.pulse=0;a.q11=0;a.z0=0;a.copies=0;a.v0=0;a.oy=0;a.kt=0;a.dec=0;a.q32=0;a.phi=0;a.ox=0;","frame_eqs_str":"a.copies=Math.floor(div(a.num_inst,16));a.n=8*Math.floor(div(a.instance,a.copies))+1E3;a.frac=div(mod(a.instance,a.copies),a.copies);a.k1=1.1;a.x0=a.gmegabuf[Math.floor(a.n)]*a.frac+a.megabuf[Math.floor(a.n)]*(1-a.frac)*a.k1;a.y0=a.gmegabuf[Math.floor(a.n+1)]*a.frac+a.megabuf[Math.floor(a.n+1)]*(1-a.frac)*a.k1;a.z0=a.gmegabuf[Math.floor(a.n+2)]*a.frac+a.megabuf[Math.floor(a.n+2)]*(1-a.frac);a.ang=3.14*a.frac+Math.atan2(a.x0,a.y0);a.pulse=Math.min(a.q22+.2,1);a.tht=14.782*a.instance;\na.phi=32.523*a.instance;a.kt=6*a.time+div(a.instance,a.num_inst)*a.copies;a.v0=div(.015*a.pulse,a.z0)*(a.kt-Math.floor(a.kt));a.ox=a.x0+a.v0*Math.sin(a.tht)*Math.cos(a.phi);a.oy=a.y0+a.v0*Math.cos(a.tht);a.oz=a.z0+a.v0*Math.sin(a.tht)*Math.sin(a.phi);a.x=a.ox+.5;a.y=a.oy*a.q32+.5;a.z=a.oz;a.a=Math.min(div(.4,a.oz),1)*(0<=a.oz?1:0)*a.q11;a.a2=0;a.rad=div(.004,a.z)*(1-a.frac)*a.pulse;a.border_a=0;a.r=1;a.b=1;a.g=1;a.r2=1;a.b2=1;a.g2=1;a.dec=a.q31;a.megabuf[Math.floor(a.n)]=a.megabuf[Math.floor(a.n)]*\na.dec+(1-a.dec)*a.gmegabuf[Math.floor(a.n)];a.megabuf[Math.floor(a.n+1)]=a.megabuf[Math.floor(a.n+1)]*a.dec+(1-a.dec)*a.gmegabuf[Math.floor(a.n+1)];a.megabuf[Math.floor(a.n+2)]=a.megabuf[Math.floor(a.n+2)]*a.dec+(1-a.dec)*a.gmegabuf[Math.floor(a.n+2)];","init_eqs_eel":"","frame_eqs_eel":"copies = int(num_inst/16);\n\nn = int(instance/copies)*8+1000;\nfrac = (instance%copies)/(copies);\n\nk1 =  1.1; \nx0 = gmegabuf(n)*frac + megabuf(n)*(1-frac)*k1;\ny0 = gmegabuf(n+1)*frac+ megabuf(n+1)*(1-frac)*k1;\nz0 = gmegabuf(n+2)*frac+ megabuf(n+2)*(1-frac);\nang = frac*3.14 + atan2(x0,y0);\n\n//x0 = 0; y0 = 0; z0 = 1;\npulse = min(q22+.2,1);\n\nTht = instance*14.782;\nPhi = instance*32.523;\n\nkt = time*6+instance/num_inst*copies;\nv0 = pulse*.015/z0 * (kt-int(kt));\nox = x0+v0*sin(Tht) * cos(Phi);\noy = y0+v0*cos(Tht);\noz = z0+v0*sin(Tht)*sin(Phi); \n\n\nx = ox + .5;\ny = oy*q32 + .5;\nz = oz;\n\na = min(.4/oz,1)*(oz>=0) *q11;\na2 = 0;\n\nrad = .004/z*(1-frac)*pulse;\n\nborder_a = .00;\nr = 1; b = 1; g = 1;\nr2 = 1; b2 = 1; g2 = 1;\n\n\ndec = q31; //###!\nmegabuf(n) = megabuf(n)*dec + (1-dec)*gmegabuf(n);\nmegabuf(n+1) = megabuf(n+1)*dec + (1-dec)*gmegabuf(n+1);\nmegabuf(n+2) = megabuf(n+2)*dec + (1-dec)*gmegabuf(n+2);"},{"baseVals":{"sides":12,"additive":1,"thickoutline":1,"textured":1,"num_inst":32,"x":0.6,"y":0.55,"rad":0.97237,"ang":1.25664,"tex_zoom":0.34933,"g":0.6,"g2":0,"b2":1,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"samples":128,"sep":201,"spectrum":1,"additive":1,"scaling":2.15542,"smoothing":0,"r":0,"a":0.7},"init_eqs_str":"a.n=0;a.vol=0;a.dec=0;","frame_eqs_str":"","point_eqs_str":"a.x=a.sample;a.n=Math.floor(128*a.sample);a.vol=a.value1+a.value2;a.dec=.00001<Math.abs(a.vol>a.gmegabuf[Math.floor(a.n)]?1:0)?.2:.5;a.gmegabuf[Math.floor(a.n)]=a.gmegabuf[Math.floor(a.n)]*a.dec+(1-a.dec)*a.vol*(1+.01*(rand(100)-50));a.y=.15*a.gmegabuf[Math.floor(a.n)]+.2;a.a=0;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = sample;\n\nn = int(sample*128);\nvol = value1 + value2;\ndec = if (vol > gmegabuf(n), .2, .5);\ngmegabuf(n) = gmegabuf(n)*dec + (1-dec)* (vol) * (1+.01*(rand(100)-50));\n\n\ny = gmegabuf (n)*.15+.2;\na=0;"},{"baseVals":{"enabled":1,"scaling":0.89152,"smoothing":0,"a":0.9},"init_eqs_str":"a.sw=0;a.y0=0;a.x0=0;a.base=0;a.ind=0;a.z0=0;a.q10=0;a.p2=0;a.p1=0;a.dist=0;a.m=0;","frame_eqs_str":"","point_eqs_str":"a.m=Math.floor(512*a.sample);a.sw=mod(a.m,2);a.p1=mod(a.m+1,16);a.p2=Math.floor(div(a.m,32));a.base=1E3;a.x0=.00001<Math.abs(a.sw)?a.gmegabuf[Math.floor(8*a.p1+a.base)]:a.gmegabuf[Math.floor(8*a.p2+a.base)];a.y0=.00001<Math.abs(a.sw)?a.gmegabuf[Math.floor(8*a.p1+a.base+1)]:a.gmegabuf[Math.floor(8*a.p2+a.base+1)];a.z0=.00001<Math.abs(a.sw)?a.gmegabuf[Math.floor(8*a.p1+a.base+2)]:a.gmegabuf[Math.floor(8*a.p2+a.base+2)];a.x=a.x0+.5;a.y=a.y0+.5;a.ind=5E3+16*a.p2+a.p1;a.dist=a.z0;\na.a=Math.min(div(.008,a.dist),1)*(.001<=a.dist?1:0)*a.q10;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"m = int(sample*512+.0);\nsw = (m%2);\np1 = ((m+1)%16);\np2 = int(m/32);\n\n//p1 = 15; p2 = 0;\nbase = 1000;\nx0 = if(sw,gmegabuf(p1*8+base),gmegabuf(p2*8+base));\ny0 = if(sw,gmegabuf(p1*8+base+1),gmegabuf(p2*8+base+1));\nz0 = if(sw,gmegabuf(p1*8+base+2),gmegabuf(p2*8+base+2));\n\nx = x0+.5;\ny = y0+.5;\n\nind = 5000+ p2*16+p1;\ndist = z0;\na = min(.008/dist,1) * (dist >= .001) *q10;\n\n//a = .01/z0;"},{"baseVals":{"usedots":1,"scaling":2.41139,"smoothing":1,"a":0.4,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"a = treb_att*.5;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"a = treb_att*.5;"},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.n=0;a.z2=0;a.w=0;a.index2=0;a.q25=0;a.index=0;a.h3=0;a.q22=0;a.q13=0;a.q29=0;a.bt=0;a.flen=0;a.dec_s=0;a.v=0;a.mm=0;a.dec_xs=0;a.h2=0;a.tt=0;a.my=0;a.bm=0;a.beat_=0;a.is_beat=0;a.q31=0;a.q24=0;a.betr=0;a.ran2=0;a.value=0;a.dec_m=0;a.shapes=0;a.q26=0;a.mt=0;a.k=0;a.trig=0;a.mx=0;a.mn=0;a.beat=0;a.vol=0;a.peak=0;a.bb=0;a.bbase=0;a.q27=0;a.reduce=0;a.dist=0;a.h1=0;a.z1=0;a.t0=0;a.vol_=0;a.dec=0;a.m=0;a.ran1=0;a.q32=0;a.q28=0;a.q30=0;for(var b=a.index=0;1E4>b;b++)a.megabuf[Math.floor(a.index)]=\n.1,a.gmegabuf[Math.floor(a.index)]=0,a.index+=1;a.vol_=1;a.q10=30<=rand(100)?1:0;a.q11=30<=rand(100)?1:0;a.q12=9*(30<=rand(100)?1:0)+3;a.q13=Math.min(Math.max(div(rand(100),50)-.5,0),1);","frame_eqs_str":"a.dec_m=pow(.9,div(30,a.fps));a.dec_s=pow(.95,div(30,a.fps));a.dec_xs=pow(.985,div(30,a.fps));a.flen=128;a.shapes=16;a.beat=Math.max(Math.max(a.bass,a.treb),a.mid);a.beat_=a.beat_*a.dec_m+(1-a.dec_m)*a.beat;a.is_beat=above(a.beat,6*a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_m;a.index=mod(a.index+a.is_beat,32);a.index2=mod(.00001<Math.abs(a.is_beat&&.00001>Math.abs(mod(a.index,7)-0)?1:0)?a.index2+\n1:a.index2,64);a.q22=Math.max(a.peak,.02);a.ran1=.00001<Math.abs(a.is_beat)?div(rand(100),25):a.ran1;a.ran2=.00001<Math.abs(a.is_beat)?div(rand(100),25):a.ran2;a.q27=a.ran1;a.q28=a.ran2;a.n=0;a.vol=.1;a.bbase=5E3;for(var b=0;b<a.flen;b++)a.value=a.gmegabuf[Math.floor(a.n)]*(1+div(2,a.n+.5)),a.megabuf[Math.floor(a.bbase+a.n)]=(a.beat>=(1.1-div(div(a.n,a.flen),2))*a.beat_?1:0)*(a.time>=a.megabuf[Math.floor(a.bbase+1E3+a.n)]+.1?1:0),a.trig=a.megabuf[Math.floor(a.bbase+a.n)],a.megabuf[Math.floor(a.bbase+\n1E3+a.n)]=.00001<Math.abs(a.trig)?a.time:a.megabuf[Math.floor(a.bbase+1E3+a.n)],a.dec=.00001<Math.abs(a.trig)?.2:.9-div(.1*a.n,a.flen),a.dec=pow(a.dec,div(30,a.fps)),a.megabuf[Math.floor(a.n)]=a.megabuf[Math.floor(a.n)]*a.dec+(1-a.dec)*a.value,a.vol+=pow(a.megabuf[Math.floor(a.n)],2),a.n+=1;a.vol=sqrt(a.vol);a.vol_=a.dec_m*a.vol_+(1-a.dec_m)*a.vol;for(b=a.n=0;b<a.flen;b++)a.value=a.megabuf[Math.floor(a.n)],a.dec=.00001<Math.abs(a.megabuf[Math.floor(1E3+a.n)]<=a.value?1:0)?.7:.8-div(.1*a.n,a.flen),\na.dec=pow(a.dec,div(30,a.fps)),a.megabuf[Math.floor(a.n+1E3)]=a.megabuf[Math.floor(a.n+1E3)]*a.dec+div((1-a.dec)*a.value,a.vol_),a.n+=1;a.dist=2;a.reduce=div(a.flen,a.shapes);a.n=2E3;a.m=1E3+a.dist;for(b=a.k=0;b<a.shapes;b++)a.betr=div(a.megabuf[Math.floor(a.m)]+a.megabuf[Math.floor(a.m-a.dist)]+a.megabuf[Math.floor(a.m+a.dist)],3),a.megabuf[Math.floor(a.n)]=a.megabuf[Math.floor(a.m)]-a.megabuf[Math.floor(a.m+a.dist)],a.megabuf[Math.floor(a.n+1)]=a.megabuf[Math.floor(a.m)]-a.megabuf[Math.floor(a.m-\na.dist)],a.z1=Math.max(div(.03,a.betr),.05),a.z2=div(mod(a.k+a.time,a.shapes),a.shapes)+.06,a.megabuf[Math.floor(a.n+2)]=a.q13*a.z1+(1-a.q13)*a.z2,a.m+=a.reduce,a.n+=8,a.k+=1;a.n=1E3;a.m=2E3;for(b=0;b<a.shapes;b++)a.gmegabuf[Math.floor(a.n)]=div(a.megabuf[Math.floor(a.m)],a.megabuf[Math.floor(a.m+2)]),a.gmegabuf[Math.floor(a.n+1)]=div(a.megabuf[Math.floor(a.m+1)],a.megabuf[Math.floor(a.m+2)]),a.gmegabuf[Math.floor(a.n+2)]=a.megabuf[Math.floor(a.m+2)],a.mx+=div(div(a.gmegabuf[Math.floor(a.n)],a.shapes),\na.fps),a.my+=div(div(a.gmegabuf[Math.floor(a.n+1)],a.shapes),a.fps),a.n+=8,a.m+=8;a.q32=a.aspecty;a.q31=Math.min(.996,a.dec_xs);a.monitor=a.q22;a.bb=.99*a.bb+.02*a.bass;a.mm=.99*a.mm+.02*a.mid;a.tt=.99*a.tt+.02*a.treb;a.mx=Math.max(Math.max(a.bb,a.mm),a.tt);a.mn=Math.min(Math.min(a.bb,a.mm),a.tt);a.h1=div(a.bb-a.mn,a.mx-a.mn);a.h2=div(a.mm-a.mn,a.mx-a.mn);a.h3=div(a.tt-a.mn,a.mx-a.mn);a.v=div(.1333,a.fps);a.bm+=(a.h1-a.h2)*a.v;a.mt+=(a.h2-a.h3)*a.v;a.bt+=(a.h1-a.h3)*a.v;a.w=2*a.bm;a.q24=Math.sin(a.w);\na.q25=Math.cos(a.w);a.q26=a.bm;a.q29=a.mt;a.q30=a.bt;","pixel_eqs_str":"a.rot=0;a.zoom=.99;a.warp=0;a.dx=0;a.dy=0;","init_eqs_eel":"index = 0;\nloop (10000,\n  megabuf(index) = .1;\n  gmegabuf(index) = 0;\n  index = index + 1;\n);\n\nvol_=1;\n\nq10 = rand(100) >= 30;\nq11 = rand(100) >= 30;\nq12 = (rand(100) >= 30)*9+3;\nq13 = min(max((rand(100)/50-.5),0),1);","frame_eqs_eel":"dec_m = pow(.9, 30/fps);dec_s = pow(.95, 30/fps);dec_xs = pow(.985, 30/fps);\n\nflen = 128; shapes = 16;\n\nbeat = max(max(bass,treb),mid);\nbeat_ = beat_*dec_m + (1-dec_m)*beat; \nis_beat = above(beat, peak*6) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_m;\nindex = (index + is_beat) %32;\nindex2 = if (is_beat && (index%7==0), index2+1, index2)%64;\nq22 = max(peak,.02);\n\nran1 = if (is_beat, rand(100)/25, ran1);\nran2 = if (is_beat, rand(100)/25, ran2);\nq27 = ran1;\nq28 = ran2;\n\nn = 0; vol = .1; bbase = 5000;\nloop (flen,\n  value = gmegabuf(n) * (1+2/(n+.5));\n  megabuf(bbase+n) = (beat >= (1.1-n/flen/2)*beat_)*(time >= megabuf(bbase+1000+n)+.1);\n  trig = megabuf(bbase+n); ;\n  megabuf(bbase+1000+n) = if(trig,time, megabuf(bbase+1000+n));\n  dec = if(trig,0.2,.9-.1*n/flen);\n  dec = pow(dec,30/fps);\n  megabuf(n) = megabuf(n)*dec + (1-dec)*value;\n  vol = vol + pow(megabuf(n),2);\n  n = n+1;\n);\nvol = sqrt(vol);\nvol_ = dec_m*vol_ + (1-dec_m)*vol;\n\n// post smoothing\nn = 0;\nloop (flen,\n  value = megabuf(n);\n  dec = if (megabuf(1000+n)<=value,.7,.8-0.1*n/flen);\n  dec = pow(dec,30/fps);\n//  dec = 1; //#\n    megabuf(n+1000) = megabuf(n+1000)*dec+ (1-dec)*value/vol_;\n  n = n+1;\n);\n\n\n// Berechnung Ortskoordinaten aus Spektrum\ndist = 2; reduce = flen/shapes;\nn = 2000; m = 1000+dist; k=0;\nloop (shapes,\n  betr = (megabuf(m)+megabuf(m-dist)+megabuf(m+dist))/3;\n  megabuf(n)   = megabuf(m) - megabuf(m+dist);\n  megabuf(n+1) = megabuf(m) - megabuf(m-dist);\n  z1 = max(.03/betr,.05);\n  z2 = ((k+time)%shapes)/shapes+.06;\n  megabuf(n+2) = q13*z1+(1-q13)*z2;\n  m = m + reduce; n = n+8; k= k+1;\n);\n\n\n//Projektion\nn = 1000; m = 2000;\nloop (shapes,\n  gmegabuf(n) = megabuf(m)/megabuf(m+2);\n  gmegabuf(n+1) = megabuf(m+1)/megabuf(m+2);\n  gmegabuf(n+2) = megabuf(m+2);\n  mx = mx + gmegabuf(n)/shapes/fps;\n  my = my + gmegabuf(n+1)/shapes/fps;\n  n = n+8; m = m+8;\n);\n\n\n\nq32 = aspecty;\nq31 = min(.996,dec_xs);\nmonitor = q22;\n\nbb = bb*0.99 + bass*0.02;\nmm = mm*0.99 + mid*0.02;\ntt = tt*0.99 + treb*0.02;\n\nmx = max(max(bb,mm),tt);\nmn = min(min(bb,mm),tt);\n\nh1 = (bb-mn)/(mx-mn);\nh2 = (mm-mn)/(mx-mn);\nh3 = (tt-mn)/(mx-mn);\n\nv = 0.1333/fps;\nbm = bm + (h1-h2)*v;\nmt = mt + (h2-h3)*v;\nbt = bt + (h1-h3)*v;\n\nw = bm*2;\nq24 = sin(w);\nq25 = cos(w);\n\nq26 = bm;\nq29 = mt;\nq30 = bt;","pixel_eqs_eel":"rot = 0.0; zoom = .99 ; warp = 0; dx = 0.0; dy = 0.0;","warp":"vec3 xlat_mutableuv2;\n shader_body { \n  vec3 tmpvar_1;\n  tmpvar_1.z = -0.07;\n  tmpvar_1.x = q28;\n  tmpvar_1.y = q27;\n  vec3 tmpvar_2;\n  tmpvar_2.z = 0.0;\n  tmpvar_2.xy = (((uv - 0.5) * aspect.xy) * 0.1);\n  xlat_mutableuv2 = ((tmpvar_2 * mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) + tmpvar_1);\n  xlat_mutableuv2 = ((fract(\n    ((xlat_mutableuv2 / 8.0) + 0.5)\n  ) - 0.5) * 8.0);\n  vec3 zz_3;\n  zz_3 = ((2.0 * clamp (xlat_mutableuv2, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - xlat_mutableuv2);\n  zz_3 = (zz_3 * (clamp (\n    max ((0.25 / dot (zz_3, zz_3)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_3 = ((2.5 * zz_3) + xlat_mutableuv2);\n  zz_3 = ((2.0 * clamp (zz_3, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_3);\n  zz_3 = (zz_3 * (clamp (\n    max ((0.25 / dot (zz_3, zz_3)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_3 = ((2.5 * zz_3) + xlat_mutableuv2);\n  zz_3 = ((2.0 * clamp (zz_3, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_3);\n  zz_3 = (zz_3 * (clamp (\n    max ((0.25 / dot (zz_3, zz_3)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_3 = ((2.5 * zz_3) + xlat_mutableuv2);\n  zz_3 = ((2.0 * clamp (zz_3, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_3);\n  zz_3 = (zz_3 * (clamp (\n    max ((0.25 / dot (zz_3, zz_3)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_3 = ((2.5 * zz_3) + xlat_mutableuv2);\n  zz_3 = ((2.0 * clamp (zz_3, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_3);\n  zz_3 = (zz_3 * (clamp (\n    max ((0.25 / dot (zz_3, zz_3)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_3 = ((2.5 * zz_3) + xlat_mutableuv2);\n  zz_3 = ((2.0 * clamp (zz_3, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_3);\n  zz_3 = (zz_3 * (clamp (\n    max ((0.25 / dot (zz_3, zz_3)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_3 = ((2.5 * zz_3) + xlat_mutableuv2);\n  zz_3 = ((2.0 * clamp (zz_3, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_3);\n  zz_3 = (zz_3 * (clamp (\n    max ((0.25 / dot (zz_3, zz_3)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_3 = ((2.5 * zz_3) + xlat_mutableuv2);\n  zz_3 = ((2.0 * clamp (zz_3, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0))) - zz_3);\n  zz_3 = (zz_3 * (clamp (\n    max ((0.25 / dot (zz_3, zz_3)), 0.25)\n  , 0.0, 1.0) * 4.0));\n  zz_3 = ((2.5 * zz_3) + xlat_mutableuv2);\n  vec3 tmpvar_4;\n  tmpvar_4.yz = vec2(0.0, 0.0);\n  tmpvar_4.x = (1.0 - ((\n    sqrt(dot (zz_3.xy, zz_3.xy))\n   / 30.0) * 4.0));\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = max ((texture (sampler_main, uv).xyz * 0.93), min ((1.0 - \n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  ), tmpvar_4));\n  ret = tmpvar_5.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  uv_1 = uv;\n  vec2 rotate_uv_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = ((uv - 0.5) * aspect.xy);\n  vec2 tmpvar_4;\n  tmpvar_4.x = ((q25 * tmpvar_3.x) - (q24 * tmpvar_3.y));\n  tmpvar_4.y = ((q24 * tmpvar_3.x) + (q25 * tmpvar_3.y));\n  vec2 tmpvar_5;\n  tmpvar_5 = (0.5 - (tmpvar_4 * 2.0));\n  rotate_uv_2 = tmpvar_5;\n  vec2 numerator_6;\n  numerator_6 = (tmpvar_5 - vec2(0.0, 0.5));\n  vec2 denominator_7;\n  denominator_7 = (tmpvar_5 - vec2(1.0, 0.5));\n  vec2 tmpvar_8;\n  tmpvar_8.x = ((numerator_6.x * denominator_7.x) + (numerator_6.y * denominator_7.y));\n  tmpvar_8.y = ((numerator_6.y * denominator_7.x) - (numerator_6.x * denominator_7.y));\n  vec2 tmpvar_9;\n  tmpvar_9 = (((tmpvar_8 / \n    ((denominator_7.x * denominator_7.x) + (denominator_7.y * denominator_7.y))\n  ) + 0.5) - vec2(0.5, 0.5));\n  float tmpvar_10;\n  tmpvar_10 = sqrt(dot (tmpvar_9, tmpvar_9));\n  float tmpvar_11;\n  float tmpvar_12;\n  tmpvar_12 = (min (abs(\n    (tmpvar_9.x / tmpvar_9.y)\n  ), 1.0) / max (abs(\n    (tmpvar_9.x / tmpvar_9.y)\n  ), 1.0));\n  float tmpvar_13;\n  tmpvar_13 = (tmpvar_12 * tmpvar_12);\n  tmpvar_13 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_13) + 0.05368138) * tmpvar_13) - 0.1173503)\n     * tmpvar_13) + 0.1938925) * tmpvar_13) - 0.3326756)\n   * tmpvar_13) + 0.9999793) * tmpvar_12);\n  tmpvar_13 = (tmpvar_13 + (float(\n    (abs((tmpvar_9.x / tmpvar_9.y)) > 1.0)\n  ) * (\n    (tmpvar_13 * -2.0)\n   + 1.570796)));\n  tmpvar_11 = (tmpvar_13 * sign((tmpvar_9.x / tmpvar_9.y)));\n  if ((abs(tmpvar_9.y) > (1e-08 * abs(tmpvar_9.x)))) {\n    if ((tmpvar_9.y < 0.0)) {\n      if ((tmpvar_9.x >= 0.0)) {\n        tmpvar_11 += 3.141593;\n      } else {\n        tmpvar_11 = (tmpvar_11 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_11 = (sign(tmpvar_9.x) * 1.570796);\n  };\n  vec2 tmpvar_14;\n  tmpvar_14.x = (tmpvar_11 * 0.1591549);\n  tmpvar_14.y = tmpvar_10;\n  vec2 tmpvar_15;\n  tmpvar_15.x = ((tmpvar_14.x * 2.0) + q29);\n  tmpvar_15.y = ((0.3 * log(tmpvar_10)) + q30);\n  uv_1 = (0.5 + (0.5 - abs(\n    ((fract((tmpvar_15 * 0.5)) * 2.0) - 1.0)\n  )));\n  vec2 tmpvar_16;\n  tmpvar_16 = (uv_1 - 0.5);\n  vec2 tmpvar_17;\n  tmpvar_17.x = ((q25 * tmpvar_16.x) - (q24 * tmpvar_16.y));\n  tmpvar_17.y = ((q24 * tmpvar_16.x) + (q25 * tmpvar_16.y));\n  rotate_uv_2 = (0.5 - (tmpvar_17 * 2.0));\n  vec2 numerator_18;\n  numerator_18 = (rotate_uv_2 - vec2(0.0, 0.5));\n  vec2 denominator_19;\n  denominator_19 = (rotate_uv_2 - vec2(1.0, 0.5));\n  vec2 tmpvar_20;\n  tmpvar_20.x = ((numerator_18.x * denominator_19.x) + (numerator_18.y * denominator_19.y));\n  tmpvar_20.y = ((numerator_18.y * denominator_19.x) - (numerator_18.x * denominator_19.y));\n  vec2 tmpvar_21;\n  tmpvar_21 = (((tmpvar_20 / \n    ((denominator_19.x * denominator_19.x) + (denominator_19.y * denominator_19.y))\n  ) + 0.5) - vec2(0.5, 0.5));\n  float tmpvar_22;\n  tmpvar_22 = sqrt(dot (tmpvar_21, tmpvar_21));\n  float tmpvar_23;\n  float tmpvar_24;\n  tmpvar_24 = (min (abs(\n    (tmpvar_21.x / tmpvar_21.y)\n  ), 1.0) / max (abs(\n    (tmpvar_21.x / tmpvar_21.y)\n  ), 1.0));\n  float tmpvar_25;\n  tmpvar_25 = (tmpvar_24 * tmpvar_24);\n  tmpvar_25 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_25) + 0.05368138) * tmpvar_25) - 0.1173503)\n     * tmpvar_25) + 0.1938925) * tmpvar_25) - 0.3326756)\n   * tmpvar_25) + 0.9999793) * tmpvar_24);\n  tmpvar_25 = (tmpvar_25 + (float(\n    (abs((tmpvar_21.x / tmpvar_21.y)) > 1.0)\n  ) * (\n    (tmpvar_25 * -2.0)\n   + 1.570796)));\n  tmpvar_23 = (tmpvar_25 * sign((tmpvar_21.x / tmpvar_21.y)));\n  if ((abs(tmpvar_21.y) > (1e-08 * abs(tmpvar_21.x)))) {\n    if ((tmpvar_21.y < 0.0)) {\n      if ((tmpvar_21.x >= 0.0)) {\n        tmpvar_23 += 3.141593;\n      } else {\n        tmpvar_23 = (tmpvar_23 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_23 = (sign(tmpvar_21.x) * 1.570796);\n  };\n  vec2 tmpvar_26;\n  tmpvar_26.x = (tmpvar_23 * 0.1591549);\n  tmpvar_26.y = tmpvar_22;\n  vec2 tmpvar_27;\n  tmpvar_27.x = ((tmpvar_26.x * 2.0) + q27);\n  tmpvar_27.y = ((0.3 * log(tmpvar_22)) + q28);\n  uv_1 = (0.5 + (0.5 - abs(\n    ((fract((tmpvar_27 * 0.5)) * 2.0) - 1.0)\n  )));\n  vec2 tmpvar_28;\n  tmpvar_28.x = (abs((uv_1.x - 0.5)) + 0.5);\n  tmpvar_28.y = uv_1.y;\n  uv_1 = tmpvar_28;\n  float t_29;\n  t_29 = (abs((texture (sampler_main, tmpvar_28).xyz - \n    (((texture (sampler_blur1, tmpvar_28).xyz * scale1) + bias1) * 0.7)\n  )) * 2.0).x;\n  vec3 tmpvar_30;\n  tmpvar_30.x = (t_29 + 0.1);\n  tmpvar_30.y = ((t_29 * 1.1) - 0.3);\n  tmpvar_30.z = (t_29 - 0.5);\n  vec3 tmpvar_31;\n  tmpvar_31 = clamp (tmpvar_30, 0.0, 1.0);\n  vec4 tmpvar_32;\n  tmpvar_32.w = 1.0;\n  tmpvar_32.xyz = (tmpvar_31 * (tmpvar_31 * (3.0 - \n    (2.0 * tmpvar_31)\n  )));\n  ret = tmpvar_32.xyz;\n }","warp_hlsl":"float dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;\nstatic const float3x3 RotMat = float3x3(1,0,0,0,1,0,0,0,1);\n\nstatic const float3 CamPos = float3(q28,q27,-.07);\nstatic const float  ds = q22;\nstatic const float limit = 30;\n\n\nfloat4 mbox (float3 uvi) {float3 zz, zz0; float tmp, li;\n  zz = uvi; zz0 = zz; li=0;\n  for (int n = 0; n <= 7; n++) {\n    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);\n    zz *= clamp(max(.25/tmp, .25), 0.0, 1.0)*4;\n    zz = 2.5*zz + zz0;}\n  return float4(zz,0);}\n\nshader_body {\nuv1 = (uv-.5)*aspect.xy;\ndist = .1;\nuv2 = mul(float3(uv1*dist,0),RotMat)+CamPos;\nuv2 = (frac(uv2/8.0+.5)-.5)*8.0;\nbox = mbox (uv2);\nlen = (length(box.xyz))*2;\nstruc = length(box.xy)/limit*4;\n\n\nret = max(GetPixel(uv)*.93,min(1-GetBlur1(uv),float3(1-struc,0,0)));\n\n\n}","comp_hlsl":"float3 ret1, ret2, sky, lava, uv_vol;\nfloat2 rs0,rs,uv0, uv1, uv2;\n\nfloat3 lavcol (float t) {\n  return smoothstep(0,1,float3(t+.1,t*1.1-.3,t-.5));\n}\n\nfloat2 complex_div(float2 numerator, float2 denominator){\n   return float2( numerator.x*denominator.x + numerator.y*denominator.y,\n                  numerator.y*denominator.x - numerator.x*denominator.y)/\n          (denominator.x*denominator.x + denominator.y*denominator.y);\n}\n\nfloat2 uv_polar(float2 domain, float2 center){\n   float2 c = domain - center;\n   float rad_hq = length(c);\n   float ang_hq = atan2(c.x,c.y);\n   return float2(ang_hq*M_INV_PI_2, rad_hq);\n}\n\nfloat2 uv_polar_logarithmic(float2 domain, float2 center, int fins, float log_factor, float2 coord){\n   float2 polar = uv_polar(domain, center);\n   return float2(polar.x*fins+coord.x, log_factor*log(polar.y) + coord.y);\n}\n\nfloat2 uv_moebius_transformation(float2 domain, float2 zeroPoint, float2 infinityPoint,float zoom){\n   return complex_div((domain - zeroPoint)*zoom, domain - infinityPoint)+0.5;\n}\n\nfloat2 uv_bipolar(float2 domain, float2 northPole, float2 southPole, int fins, float log_factor, float2 coord){\n   float2 help_uv = uv_moebius_transformation(domain, northPole, southPole, 1);\n   return uv_polar_logarithmic(help_uv,0.5,fins,log_factor,coord);\n}\n\n\nfloat2 uv_rotate( float2 domain, float2 center, float sinw, float cosw, float scale){\n   float2 uv_r = (domain-center);\n   return center + float2( cosw*uv_r.x - sinw*uv_r.y, sinw*uv_r.x + cosw*uv_r.y)*scale;\n}\n\n\nshader_body\n{\nfloat2 uvo = uv;\n\nfloat2 rotate_uv = 0.5-uv_rotate(0 + (uv-0.5)*aspect.xy, 0, q24, q25, 2);\nfloat2 bipolar_uv = uv_bipolar(rotate_uv,float2(0,0.5),float2(1,0.5), 2, 0.3, float2(q29,q30));\nuv = 0.5 + (0.5 - abs( frac( bipolar_uv * 0.5 ) * 2.0 - 1.));\n\nrotate_uv = 0.5-uv_rotate(0 + (uv-0.5), 0, q24, q25, 2);\nbipolar_uv = uv_bipolar(rotate_uv,float2(0,0.5),float2(1,0.5), 2, 0.3, float2(q27,q28));\nuv = 0.5 + (0.5 - abs( frac( bipolar_uv * 0.5 ) * 2.0 - 1.));\n\nuv0 = uv;\nuv = float2(abs(uv.x-.5)+.5,uv.y);\nret = abs(GetPixel(uv)-GetBlur1(uv)*.7);\nret = lavcol (ret*2);\n\n\n}"}