{"version":2,"baseVals":{"rating":5,"decay":1,"echo_zoom":1,"echo_orient":3,"wave_thick":1,"wrap":0,"darken":1,"solarize":1,"wave_a":1,"wave_scale":0.05,"wave_smoothing":0,"wave_mystery":-0.3,"warpanimspeed":2.699,"warpscale":2.518,"zoomexp":13.66864,"zoom":1.00499,"warp":0.24952,"wave_r":0,"wave_g":0,"wave_b":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.q1=0;","frame_eqs_str":"a.q1=.0003*pow(1+1.2*a.bass+.4*a.bass_att+.1*a.treb+.1*a.treb_att+.1*a.mid+.1*a.mid_att,6);a.monitor=a.q1;a.wave_r+=.5*Math.sin(.565*a.time);a.wave_g+=.5*Math.sin(.615*a.time);a.wave_b+=.5*Math.sin(.665*a.time);","pixel_eqs_str":"a.zoom+=.025;","init_eqs_eel":"","frame_eqs_eel":"q1 = 0.0003*(pow(1+1.2*bass+0.4*bass_att+0.1*treb+0.1*treb_att+0.1*mid+0.1*mid_att,6));\nmonitor = q1;\nwave_r = wave_r + 0.5*sin(time*0.565);\nwave_g = wave_g + 0.5*sin(time*0.615);\nwave_b = wave_b + 0.5*sin(time*0.665);","pixel_eqs_eel":"zoom = zoom + 0.025;\n//rot = rot + 0.05*sin(fps*100)*q1;","warp":"vec2 xlat_mutabled;\nvec3 xlat_mutabledx;\nvec3 xlat_mutabledy;\n shader_body { \n  vec3 ret_1;\n  vec3 tmpvar_2;\n  tmpvar_2 = (texture (sampler_noise_lq, ((\n    (uv_orig * texsize.xy)\n   * texsize_noise_lq.zw) + rand_frame.xy)).xyz - 0.5);\n  xlat_mutabled = (texsize.zw * 16.0);\n  xlat_mutabledx = (((texture (sampler_blur2, \n    (uv_orig + (vec2(1.0, 0.0) * xlat_mutabled))\n  ).xyz * scale2) + bias2) - ((texture (sampler_blur2, \n    (uv_orig - (vec2(1.0, 0.0) * xlat_mutabled))\n  ).xyz * scale2) + bias2));\n  xlat_mutabledy = (((texture (sampler_blur2, \n    (uv_orig + (vec2(0.0, 1.0) * xlat_mutabled))\n  ).xyz * scale2) + bias2) - ((texture (sampler_blur2, \n    (uv_orig - (vec2(0.0, 1.0) * xlat_mutabled))\n  ).xyz * scale2) + bias2));\n  xlat_mutabled = uv;\n  vec2 tmpvar_3;\n  tmpvar_3.x = xlat_mutabledx.y;\n  tmpvar_3.y = xlat_mutabledy.y;\n  vec2 tmpvar_4;\n  tmpvar_4.x = xlat_mutabledx.z;\n  tmpvar_4.y = xlat_mutabledy.z;\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_main, uv_orig);\n  ret_1.y = ((texture (sampler_main, (uv - \n    ((tmpvar_3 * texsize.zw) * 16.0)\n  )).y - 0.006) + ((1.0 - tmpvar_5.x) * 0.018));\n  ret_1.z = ((texture (sampler_main, (uv - \n    ((tmpvar_4 * texsize.zw) * 16.0)\n  )).z - 0.006) + (tmpvar_5.x * 0.018));\n  ret_1.x = texture (sampler_fc_main, (uv + ((tmpvar_2.xy * texsize.zw) * 0.5))).x;\n  ret_1.x = (ret_1.x + ((\n    (ret_1.x - ((texture (sampler_blur3, uv).xyz * scale3) + bias3).x)\n   * 0.2) + (tmpvar_2 * 0.01)).x);\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_1;\n  ret = tmpvar_6.xyz;\n }","comp":"vec2 xlat_mutablefactorA;\n shader_body { \n  vec2 uv_1;\n  vec2 dz_2;\n  vec3 dy_3;\n  vec3 dx_4;\n  vec2 d_5;\n  vec3 ret_6;\n  xlat_mutablefactorA = (uv - vec2(0.5, 0.5));\n  vec2 tmpvar_7;\n  tmpvar_7.x = -((xlat_mutablefactorA.y * -1024.0));\n  tmpvar_7.y = (xlat_mutablefactorA.x * -1024.0);\n  vec2 tmpvar_8;\n  tmpvar_8.x = tmpvar_7.x;\n  tmpvar_8.y = -(tmpvar_7.y);\n  uv_1 = (vec2(-100.0, 100.0) * (tmpvar_8 / (\n    (tmpvar_7.x * tmpvar_7.x)\n   + \n    (tmpvar_7.y * tmpvar_7.y)\n  )).yx);\n  uv_1 = (0.5 + ((\n    (1.0 - abs(((\n      fract((mix ((0.5 + \n        (((0.5 + (\n          (uv - 0.5)\n         * vec2(1.1, 0.81))) - 0.5) * 2.0)\n      ), (uv_1 + 0.5), vec2(0.5, 0.5)) * 0.5))\n     * 2.0) - 1.0)))\n   - 0.5) * 0.98));\n  vec2 tmpvar_9;\n  vec2 tmpvar_10;\n  tmpvar_10 = (vec2(1.0, 0.0) * texsize.zw);\n  tmpvar_9.x = (texture (sampler_main, (uv_1 + tmpvar_10)).xyz - texture (sampler_main, (uv_1 - tmpvar_10)).xyz).y;\n  vec2 tmpvar_11;\n  tmpvar_11 = (vec2(0.0, 1.0) * texsize.zw);\n  tmpvar_9.y = (texture (sampler_main, (uv_1 + tmpvar_11)).xyz - texture (sampler_main, (uv_1 - tmpvar_11)).xyz).y;\n  d_5 = (texsize.zw * 2.0);\n  dx_4 = (((2.0 * \n    ((texture (sampler_blur1, (uv_1 + (vec2(1.0, 0.0) * d_5))).xyz * scale1) + bias1)\n  ) - (2.0 * \n    ((texture (sampler_blur1, (uv_1 - (vec2(1.0, 0.0) * d_5))).xyz * scale1) + bias1)\n  )) * 0.5);\n  dy_3 = (((2.0 * \n    ((texture (sampler_blur1, (uv_1 + (vec2(0.0, 1.0) * d_5))).xyz * scale1) + bias1)\n  ) - (2.0 * \n    ((texture (sampler_blur1, (uv_1 - (vec2(0.0, 1.0) * d_5))).xyz * scale1) + bias1)\n  )) * 0.5);\n  vec2 tmpvar_12;\n  tmpvar_12.x = dx_4.y;\n  tmpvar_12.y = dy_3.y;\n  dz_2 = ((tmpvar_9 * 3.0) + tmpvar_12);\n  ret_6 = (vec3(((\n    pow ((sqrt(dot (dz_2, dz_2)) * 0.8), 0.7)\n   + \n    (((texture (sampler_blur2, uv_1).xyz * scale2) + bias2).y * 0.4)\n  ) - 0.1)) * vec3(0.3, 0.5, 0.7));\n  vec2 tmpvar_13;\n  tmpvar_13.x = dx_4.x;\n  tmpvar_13.y = dy_3.x;\n  vec3 tmpvar_14;\n  tmpvar_14 = mix (mix (ret_6, vec3(0.2, 0.1, 0.0), vec3((texture (sampler_main, \n    (uv_1 + ((tmpvar_13 * texsize.zw) * 18.0))\n  ).x * 6.0))), vec3(1.0, 1.0, 1.0), texture (sampler_main, uv_1).zzz);\n  ret_6 = tmpvar_14;\n  vec4 tmpvar_15;\n  tmpvar_15.w = 1.0;\n  tmpvar_15.xyz = tmpvar_14;\n  ret = tmpvar_15.xyz;\n }","warp_hlsl":"float2 d, uv_y, uv_z;\nfloat3 dx, dy;\n\nshader_body\n{\n\n   float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\n   float3 rand = tex2D(sampler_noise_lq, dither_uv).xyz-0.5;\n\n   d = texsize.zw*16;\n   dx = GetBlur2(uv_orig + float2(1,0)*d) - GetBlur2(uv_orig - float2(1,0)*d);\n   dy = GetBlur2(uv_orig + float2(0,1)*d) - GetBlur2(uv_orig - float2(0,1)*d);\n   \n   d = lerp(uv_orig,uv,1);\n   uv_y = d - float2(dx.y,dy.y)*texsize.zw*16;\n   uv_z = d - float2(dx.z,dy.z)*texsize.zw*16;\n\n\n   ret.y = GetPixel(uv_y).y - 0.006 + (1-GetPixel(uv_orig).x)*0.018;\n   ret.z = GetPixel(uv_z).z - 0.006 + (0+GetPixel(uv_orig).x)*0.018;\n\n    ret.x = tex2D( sampler_fc_main, uv+rand*texsize.zw*.5 ).x;\n    ret.x += (ret.x - GetBlur3(uv).x)*0.2 + rand*0.01;\n}","comp_hlsl":"float2 uvo, factorA, factorB, product, numerator, denominator, fraction;\nshader_body\n{\nuvo = 0.5 + (uv-0.5)*float2(1.1,0.81);\nfactorA = uv-float2(1-0.5,0.5);\nfactorB = float2(0,-1024);\nproduct = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);\nnumerator = float2(1,0);\ndenominator = product;\nfraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,   // the fractions real part\n                   numerator.y*denominator.x - numerator.x*denominator.y)/  // the fractions imaginary part\n                   (denominator.x*denominator.x + denominator.y*denominator.y);\nuv = fraction.yx*float2(-1,1)*100;\nuv = lerp(0.5 + (uvo-0.5)*2,uv+0.5,0.5);\nuv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5)*0.98; // Eo.S. mirror code with cutted borders\n    float2 d = texsize.zw;\n    float3 dx = ( GetPixel(uv+float2(1,0)*d)-GetPixel(uv-float2(1,0)*d) );\n    float3 dy = ( GetPixel(uv+float2(0,1)*d)-GetPixel(uv-float2(0,1)*d) );\nfloat2 dz = float2(dx.y,dy.y)*3;\n\nd = texsize.zw*2;\ndx = ( 2*GetBlur1(uv+float2(1,0)*d)-2*GetBlur1(uv-float2(1,0)*d) )*0.5;\ndy = ( 2*GetBlur1(uv+float2(0,1)*d)-2*GetBlur1(uv-float2(0,1)*d) )*0.5;\n\ndz +=float2(dx.y,dy.y);\n\nfloat3 bg = pow(length(dz)*0.8+0,0.7) + GetBlur2(uv).y*0.4-0.1;\n\nret = bg*float3(0.3,0.5,0.7);\nret = lerp(ret,float3(0.2,0.1,0),GetPixel(uv + float2(dx.x,dy.x)*texsize.zw*18).x*6);\nret = lerp(ret,1,GetPixel(uv).z);\n\n}"}