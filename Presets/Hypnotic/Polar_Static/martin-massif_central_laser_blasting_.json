{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":6,"wave_thick":1,"wrap":0,"darken":1,"wave_a":0,"wave_scale":0,"wave_smoothing":0.5,"modwavealphastart":0.5,"modwavealphaend":1,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"ob_size":0,"ob_a":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_x":51.2,"mv_y":33.6,"mv_l":5,"mv_r":0.4,"mv_g":0.3,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"thickoutline":1,"x":0.7,"rad":0.04067,"tex_zoom":1.83492,"r":0,"g":0.99,"border_r":0.2,"border_g":0.14,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":16,"num_inst":800,"x":0.8,"rad":0.55692,"tex_ang":1.50796,"tex_zoom":4.72143,"g":1,"b":1,"a":0.5,"r2":1,"b2":1,"border_g":0.7,"border_b":0.4,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"thickoutline":1,"textured":1,"num_inst":4,"rad":0.57386,"tex_ang":1.5079,"tex_zoom":1.13805,"r":0.8,"g":1,"b":1,"a":0,"r2":0.8,"b2":1,"border_r":0.8,"border_g":0.4,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"rad":3.95513,"tex_zoom":1.54929,"r":0,"g2":0,"border_g":0.6,"border_b":0.1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"usedots":1,"scaling":60.80387,"smoothing":0.7,"a":0.05,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"scaling":67.1652,"smoothing":0.7,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"usedots":1,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"usedots":1,"r":0.7,"g":0.7,"a":0.6,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.st=0;a.ranx=0;a.q15=0;a.q6=0;a.posx=0;a.st_=0;a.q11=0;a.q10=0;a.posy=0;a.q4=0;a.rany=0;a.dir=0;a.q16=0;a.q2=0;a.q3=0;a.t0=0;a.dec=0;a.view=0;a.q7=0;a.test=0;a.q8=0;for(var b=a.n=0;1E5>b;b++)a.megabuf[Math.floor(a.n)]=0,a.gmegabuf[Math.floor(a.n)]=0,a.n+=1;a.posx=rand(10);a.posy=rand(10);a.ranx=rand(1);a.rany=rand(1);a.ranh=rand(10);a.t0=a.time;a.st=.5;a.st_=.5;","frame_eqs_str":"a.st=Math.max(0,a.st-div(.2,a.fps));a.dec=1-div(.5,a.fps);a.st_=a.st_*a.dec+(1-a.dec)*a.st;a.dir=.7*Math.sin(.0162*a.time+6*a.rany);a.q2=a.dir+.5;a.q3=Math.sin(a.dir);a.q4=Math.cos(a.dir);a.q7=.002;a.posx=.0003*a.time;a.posy=.004*a.time;a.q10=a.posx;a.q11=a.posy;a.q15=a.ranx;a.q16=a.rany;a.test=.047*(a.t0-a.time)-div(3.14,2);a.view=.7+.17*Math.min(1,Math.max(-1,2*Math.sin(a.test)));a.q8=4+3*Math.sin(a.test)+16*(a.view-.55);a.q6=a.view*(1-a.st_)+2*a.st_;a.monitor=a.view;","pixel_eqs_str":"","init_eqs_eel":"n = 0;\nloop (100000,megabuf(n)=0;gmegabuf(n)=0;n += 1;);\n\nposx = rand(10); posy = rand(10);\nranx = rand (1); rany = rand(1);\nranh = rand(10);\nt0 = time;\nst = 0.5; st_=0.5;","frame_eqs_eel":"st = max (0, st-0.2/fps);\ndec = 1-0.5/fps;\nst_ = st_* (dec) + (1-dec)*st;\n\n//dir\ndir = 0.7*sin(time*.0162+rany*6);\nq2 = dir+0.5; \nq3 = sin(dir);\nq4 = cos(dir);\n\n//scaling plane\nq7 = 0.002;\n\n//movement\nposx = time*0.0003;\nposy = time*0.004;\nq10 = posx;\nq11 = posy;\n\n//start ran for warp mod \nq15 = ranx;\nq16 = rany;\n\ntest = (t0-time)*0.047-3.14/2;\nview = 0.7 + min(1, max (-1, 2*sin(test)))*0.17;\n\n//Alti\nq8 = 4 + 3* sin(test) + (view-0.55)*16;\n\n//hory (Kippung)\nq6 = view * (1-st_) + st_*2;\n\n//q6  = 0.55;\nmonitor = view;","pixel_eqs_eel":"","warp":"float hory;\nfloat xyscale;\nfloat alti;\nvec2 modran;\nvec3 mov;\nvec2 xlat_mutabledz;\nfloat xlat_mutablei;\nfloat xlat_mutablelav_gnd;\nfloat xlat_mutablep;\nfloat xlat_mutableripple;\nvec3 xlat_mutablersl;\nvec3 xlat_mutablersl3;\nvec2 xlat_mutableuv1;\nvec3 xlat_mutablexlat_varmod;\n shader_body { \n  hory = q6;\n  xyscale = q7;\n  alti = q8;\n  vec2 tmpvar_1;\n  tmpvar_1.x = q3;\n  tmpvar_1.y = q4;\n  vec2 tmpvar_2;\n  tmpvar_2.x = q15;\n  tmpvar_2.y = q16;\n  modran = tmpvar_2;\n  vec3 tmpvar_3;\n  tmpvar_3.z = 0.0;\n  tmpvar_3.x = q10;\n  tmpvar_3.y = q11;\n  mov = tmpvar_3;\n  vec3 ret_5;\n  xlat_mutableuv1 = (uv - 0.5);\n  xlat_mutablelav_gnd = -(min (texture (sampler_fc_main, uv).z, texture (sampler_fc_main, (uv + \n    (texsize.zw * vec2(1.5, 0.0))\n  .yx)).z));\n  vec2 rs_6;\n  float z_7;\n  z_7 = ((1.0/((xlat_mutableuv1.y + q6))) * (q8 - (xlat_mutablelav_gnd * 16.0)));\n  rs_6.x = ((xlat_mutableuv1.x * 2.0) * z_7);\n  rs_6.y = z_7;\n  vec3 tmpvar_8;\n  tmpvar_8.xy = (rs_6 * q7);\n  tmpvar_8.z = z_7;\n  xlat_mutablersl = (tmpvar_8 + tmpvar_3);\n  vec4 tmpvar_9;\n  tmpvar_9 = texture (sampler_noise_mq, ((xlat_mutablersl.xy * 0.043) + tmpvar_2));\n  xlat_mutablexlat_varmod = tmpvar_9.xyz;\n  xlat_mutablei = 0.0;\n  xlat_mutablep = 0.0;\n  for (int n_4 = 1; float(n_4) <= 4.0; n_4++) {\n    vec3 uvi_10;\n    float s_11;\n    vec2 tmp_12;\n    uvi_10 = (xlat_mutablersl * 0.16);\n    uvi_10.xy = (uvi_10.xy + (modran * 3.0));\n    tmp_12 = clamp ((1.0 - (texture (sampler_noise_lq, uvi_10.xy) * \n      (0.8 + (xlat_mutablexlat_varmod.y / 2.0))\n    )), 0.0, 1.0).xy;\n    s_11 = (3.0 + ((tmp_12 * 0.002) * xlat_mutablexlat_varmod.z)).x;\n    tmp_12 = (tmp_12 * clamp ((1.0 - \n      ((texture (sampler_noise_lq, (uvi_10 * s_11).xy) * (0.8 + (xlat_mutablexlat_varmod.y / 2.0))) / s_11)\n    ), 0.0, 1.0).xy);\n    s_11 = (s_11 * (3.0 + (\n      (tmp_12 * 0.002)\n     * xlat_mutablexlat_varmod.z)).x);\n    tmp_12 = (tmp_12 * clamp ((1.0 - \n      ((texture (sampler_noise_lq, (uvi_10 * s_11).xy) * (0.8 + (xlat_mutablexlat_varmod.y / 2.0))) / s_11)\n    ), 0.0, 1.0).xy);\n    s_11 = (s_11 * 3.0);\n    tmp_12 = (tmp_12 * clamp ((1.0 - \n      ((texture (sampler_noise_lq, (uvi_10 * s_11).xy) * (0.8 + (xlat_mutablexlat_varmod.y / 2.0))) / s_11)\n    ), 0.0, 1.0).xy);\n    s_11 = (s_11 * 3.0);\n    tmp_12 = (tmp_12 * clamp ((1.0 - \n      ((texture (sampler_noise_lq, (uvi_10 * s_11).xy) * (0.8 + (xlat_mutablexlat_varmod.y / 2.0))) / s_11)\n    ), 0.0, 1.0).xy);\n    s_11 = (s_11 * 3.0);\n    tmp_12 = (tmp_12 - (clamp (\n      ((16.0 - (2.0 * uvi_10.z)) - (20000.0 * abs((tmp_12.x - 0.4))))\n    , 0.0, 1.0) * 0.009));\n    xlat_mutablep = ((xlat_mutablelav_gnd + (1.0 - \n      pow (tmp_12, vec2((0.8 + xlat_mutablexlat_varmod.x)))\n    )) / 4.0).x;\n    xlat_mutablei = (xlat_mutablei + xlat_mutablep);\n    xlat_mutablelav_gnd = (xlat_mutablelav_gnd - ((xlat_mutablep * 0.1) + (xlat_mutablei * 0.2)));\n    vec2 rs_13;\n    float z_14;\n    z_14 = ((1.0/((xlat_mutableuv1.y + hory))) * (alti - (xlat_mutablelav_gnd * 16.0)));\n    rs_13.x = ((xlat_mutableuv1.x * 2.0) * z_14);\n    rs_13.y = z_14;\n    vec3 tmpvar_15;\n    tmpvar_15.xy = (rs_13 * xyscale);\n    tmpvar_15.z = z_14;\n    xlat_mutablersl = (tmpvar_15 + mov);\n  };\n  float tmpvar_16;\n  tmpvar_16 = clamp (-(xlat_mutablelav_gnd), 0.0, 1.0);\n  xlat_mutabledz = (((\n    (-1.5 / xlat_mutablersl.z)\n   * q7) * 1.8) * tmpvar_1);\n  xlat_mutablersl3 = (xlat_mutablersl * 8.0);\n  vec2 uvi_17;\n  uvi_17 = (xlat_mutablersl3.xy - xlat_mutabledz);\n  vec2 tmp_18;\n  tmp_18 = (1.0 - texture (sampler_noise_lq, uvi_17)).xy;\n  tmp_18 = (tmp_18 * (1.0 - texture (sampler_noise_lq, (uvi_17 * 3.0))).xy);\n  vec2 uvi_19;\n  uvi_19 = (xlat_mutablersl3.xy + xlat_mutabledz);\n  vec2 tmp_20;\n  tmp_20 = (1.0 - texture (sampler_noise_lq, uvi_19)).xy;\n  tmp_20 = (tmp_20 * (1.0 - texture (sampler_noise_lq, (uvi_19 * 3.0))).xy);\n  xlat_mutableripple = (((tmp_18 - tmp_20) * (1.0 - tmpvar_16)) + 0.02).x;\n  vec3 tmpvar_21;\n  tmpvar_21.z = 0.0;\n  tmpvar_21.xy = xlat_mutabledz;\n  vec3 uvi_22;\n  uvi_22 = (xlat_mutablersl - tmpvar_21);\n  float s_23;\n  vec2 tmp_24;\n  uvi_22 = (uvi_22 * 0.16);\n  uvi_22.xy = (uvi_22.xy + (tmpvar_2 * 3.0));\n  tmp_24 = clamp ((1.0 - (texture (sampler_noise_lq, uvi_22.xy) * \n    (0.8 + (tmpvar_9.y / 2.0))\n  )), 0.0, 1.0).xy;\n  s_23 = (3.0 + ((tmp_24 * 0.002) * tmpvar_9.z)).x;\n  tmp_24 = (tmp_24 * clamp ((1.0 - \n    ((texture (sampler_noise_lq, (uvi_22 * s_23).xy) * (0.8 + (tmpvar_9.y / 2.0))) / s_23)\n  ), 0.0, 1.0).xy);\n  s_23 = (s_23 * (3.0 + (\n    (tmp_24 * 0.002)\n   * tmpvar_9.z)).x);\n  tmp_24 = (tmp_24 * clamp ((1.0 - \n    ((texture (sampler_noise_lq, (uvi_22 * s_23).xy) * (0.8 + (tmpvar_9.y / 2.0))) / s_23)\n  ), 0.0, 1.0).xy);\n  s_23 = (s_23 * 3.0);\n  tmp_24 = (tmp_24 * clamp ((1.0 - \n    ((texture (sampler_noise_lq, (uvi_22 * s_23).xy) * (0.8 + (tmpvar_9.y / 2.0))) / s_23)\n  ), 0.0, 1.0).xy);\n  s_23 = (s_23 * 3.0);\n  tmp_24 = (tmp_24 * clamp ((1.0 - \n    ((texture (sampler_noise_lq, (uvi_22 * s_23).xy) * (0.8 + (tmpvar_9.y / 2.0))) / s_23)\n  ), 0.0, 1.0).xy);\n  s_23 = (s_23 * 3.0);\n  tmp_24 = (tmp_24 - (clamp (\n    ((16.0 - (2.0 * uvi_22.z)) - (20000.0 * abs((tmp_24.x - 0.4))))\n  , 0.0, 1.0) * 0.009));\n  vec3 tmpvar_25;\n  tmpvar_25.z = 0.0;\n  tmpvar_25.xy = xlat_mutabledz;\n  vec3 uvi_26;\n  uvi_26 = (xlat_mutablersl + tmpvar_25);\n  float s_27;\n  vec2 tmp_28;\n  uvi_26 = (uvi_26 * 0.16);\n  uvi_26.xy = (uvi_26.xy + (tmpvar_2 * 3.0));\n  tmp_28 = clamp ((1.0 - (texture (sampler_noise_lq, uvi_26.xy) * \n    (0.8 + (tmpvar_9.y / 2.0))\n  )), 0.0, 1.0).xy;\n  s_27 = (3.0 + ((tmp_28 * 0.002) * tmpvar_9.z)).x;\n  tmp_28 = (tmp_28 * clamp ((1.0 - \n    ((texture (sampler_noise_lq, (uvi_26 * s_27).xy) * (0.8 + (tmpvar_9.y / 2.0))) / s_27)\n  ), 0.0, 1.0).xy);\n  s_27 = (s_27 * (3.0 + (\n    (tmp_28 * 0.002)\n   * tmpvar_9.z)).x);\n  tmp_28 = (tmp_28 * clamp ((1.0 - \n    ((texture (sampler_noise_lq, (uvi_26 * s_27).xy) * (0.8 + (tmpvar_9.y / 2.0))) / s_27)\n  ), 0.0, 1.0).xy);\n  s_27 = (s_27 * 3.0);\n  tmp_28 = (tmp_28 * clamp ((1.0 - \n    ((texture (sampler_noise_lq, (uvi_26 * s_27).xy) * (0.8 + (tmpvar_9.y / 2.0))) / s_27)\n  ), 0.0, 1.0).xy);\n  s_27 = (s_27 * 3.0);\n  tmp_28 = (tmp_28 * clamp ((1.0 - \n    ((texture (sampler_noise_lq, (uvi_26 * s_27).xy) * (0.8 + (tmpvar_9.y / 2.0))) / s_27)\n  ), 0.0, 1.0).xy);\n  s_27 = (s_27 * 3.0);\n  tmp_28 = (tmp_28 - (clamp (\n    ((16.0 - (2.0 * uvi_26.z)) - (20000.0 * abs((tmp_28.x - 0.4))))\n  , 0.0, 1.0) * 0.009));\n  xlat_mutableripple = (((\n    ((((\n      (1.0/(xlat_mutablersl.z))\n     * xlat_mutableripple) + (1.0 - \n      pow (tmp_24, vec2((0.8 + tmpvar_9.x)))\n    )) - (1.0 - pow (tmp_28, vec2(\n      (0.8 + tmpvar_9.x)\n    )))) * (1.0 - tmpvar_16))\n   / 1.8) / sqrt(\n    (50.0 + xlat_mutablersl.z)\n  )) * 2000.0).x;\n  xlat_mutableripple = (1.0 - exp(-(xlat_mutableripple)));\n  ret_5.x = xlat_mutableripple;\n  ret_5.z = tmpvar_16;\n  ret_5.xz = mix (ret_5, ((texture (sampler_blur1, uv).xyz * scale1) + bias1), vec3(0.1, 0.1, 0.1)).xz;\n  ret_5.y = ((xlat_mutablersl.z * q7) * 4.0);\n  vec4 tmpvar_29;\n  tmpvar_29.w = 1.0;\n  tmpvar_29.xyz = ret_5;\n  ret = tmpvar_29.xyz;\n }","comp":"float xlat_mutablelamp;\nvec2 xlat_mutablers0;\nvec2 xlat_mutablerss;\nvec2 xlat_mutableuv1;\n shader_body { \n  vec3 tmpvar_1;\n  tmpvar_1.x = q4;\n  tmpvar_1.y = q5;\n  tmpvar_1.z = q6;\n  mat3 tmpvar_2;\n  tmpvar_2[uint(0)].x = q20;\n  tmpvar_2[uint(0)].y = q23;\n  tmpvar_2[uint(0)].z = q26;\n  tmpvar_2[1u].x = q21;\n  tmpvar_2[1u].y = q24;\n  tmpvar_2[1u].z = q27;\n  tmpvar_2[2u].x = q22;\n  tmpvar_2[2u].y = q25;\n  tmpvar_2[2u].z = q28;\n  vec2 tmpvar_3;\n  tmpvar_3.x = q1;\n  tmpvar_3.y = q2;\n  vec2 uv_4;\n  vec3 dots_5;\n  vec3 ret_6;\n  vec2 tmpvar_7;\n  vec2 tmpvar_8;\n  tmpvar_8 = (uv - 0.5);\n  tmpvar_7 = (0.5 + (tmpvar_8 * vec2(1.1, 0.81)));\n  vec2 tmpvar_9;\n  tmpvar_9 = (uv - vec2(0.5, 0.5));\n  uv_4 = (tmpvar_8 * aspect.xy);\n  float tmpvar_10;\n  float tmpvar_11;\n  tmpvar_11 = (min (abs(\n    (uv_4.y / uv_4.x)\n  ), 1.0) / max (abs(\n    (uv_4.y / uv_4.x)\n  ), 1.0));\n  float tmpvar_12;\n  tmpvar_12 = (tmpvar_11 * tmpvar_11);\n  tmpvar_12 = (((\n    ((((\n      ((((-0.01213232 * tmpvar_12) + 0.05368138) * tmpvar_12) - 0.1173503)\n     * tmpvar_12) + 0.1938925) * tmpvar_12) - 0.3326756)\n   * tmpvar_12) + 0.9999793) * tmpvar_11);\n  tmpvar_12 = (tmpvar_12 + (float(\n    (abs((uv_4.y / uv_4.x)) > 1.0)\n  ) * (\n    (tmpvar_12 * -2.0)\n   + 1.570796)));\n  tmpvar_10 = (tmpvar_12 * sign((uv_4.y / uv_4.x)));\n  if ((abs(uv_4.x) > (1e-08 * abs(uv_4.y)))) {\n    if ((uv_4.x < 0.0)) {\n      if ((uv_4.y >= 0.0)) {\n        tmpvar_10 += 3.141593;\n      } else {\n        tmpvar_10 = (tmpvar_10 - 3.141593);\n      };\n    };\n  } else {\n    tmpvar_10 = (sign(uv_4.y) * 1.570796);\n  };\n  xlat_mutablers0.x = ((tmpvar_10 / 3.1416) * 2.0);\n  xlat_mutablers0.y = (0.02 / sqrt(dot (uv_4, uv_4)));\n  vec2 tmpvar_13;\n  tmpvar_13.x = xlat_mutablers0.x;\n  tmpvar_13.y = (xlat_mutablers0.y + time);\n  xlat_mutablerss = (tmpvar_13 * mat2(0.7, -0.7, 0.7, 0.7));\n  vec4 tmpvar_14;\n  tmpvar_14 = vec4(greaterThanEqual ((texture (sampler_pw_noise_lq, \n    (xlat_mutablerss / 32.0)\n  ) - 0.7), vec4(0.0, 0.0, 0.0, 0.0)));\n  vec2 tmpvar_15;\n  tmpvar_15 = abs((fract(\n    (xlat_mutablerss * 8.0)\n  ) - 0.5));\n  vec2 tmpvar_16;\n  tmpvar_16.x = (xlat_mutablers0.x * 2.0);\n  tmpvar_16.y = (xlat_mutablers0.y + (time / 2.0));\n  xlat_mutablerss = (tmpvar_16 * mat2(0.7, -0.7, 0.7, 0.7));\n  vec4 tmpvar_17;\n  tmpvar_17 = vec4(greaterThanEqual ((texture (sampler_pw_noise_lq, \n    (xlat_mutablerss / 32.0)\n  ) - 0.7), vec4(0.0, 0.0, 0.0, 0.0)));\n  vec2 tmpvar_18;\n  tmpvar_18 = abs((fract(\n    (xlat_mutablerss * 8.0)\n  ) - 0.5));\n  xlat_mutablerss = tmpvar_18;\n  dots_5 = (vec3((clamp (\n    (0.04 / sqrt(dot (tmpvar_15, tmpvar_15)))\n  , 0.0, 1.0) * tmpvar_14.x)) + (clamp (\n    (0.04 / sqrt(dot (tmpvar_18, tmpvar_18)))\n  , 0.0, 1.0) * tmpvar_17.x));\n  dots_5 = (dots_5 * clamp ((0.04 / \n    abs((0.01 / xlat_mutablers0.y))\n  ), 0.0, 1.0));\n  dots_5 = (dots_5 * (dots_5 * 2.0));\n  vec2 tmpvar_19;\n  tmpvar_19.x = -((tmpvar_9.y * -1024.0));\n  tmpvar_19.y = (tmpvar_9.x * -1024.0);\n  vec2 tmpvar_20;\n  tmpvar_20.x = tmpvar_19.x;\n  tmpvar_20.y = -(tmpvar_19.y);\n  uv_4 = (vec2(-100.0, 100.0) * (tmpvar_20 / (\n    (tmpvar_19.x * tmpvar_19.x)\n   + \n    (tmpvar_19.y * tmpvar_19.y)\n  )).yx);\n  uv_4 = (0.5 + ((\n    (1.0 - abs(((\n      fract((mix ((0.5 + \n        ((tmpvar_7 - 0.5) * 2.0)\n      ), (uv_4 + 0.5), vec2(0.5, 0.5)) * 0.5))\n     * 2.0) - 1.0)))\n   - 0.5) * 0.98));\n  uv_4 = (((uv_4 - 0.5) * 0.9) + 0.5);\n  xlat_mutableuv1 = ((uv_4 - tmpvar_3) * aspect.xy);\n  float tmpvar_21;\n  tmpvar_21 = min ((1.0 - texture (sampler_main, uv_4).z), (1.0 - (\n    (texture (sampler_blur2, uv_4).xyz * scale2)\n   + bias2).z));\n  vec3 tmpvar_22;\n  tmpvar_22.xy = ((uv_4 - 0.5) * min ((1.0 - texture (sampler_main, uv_4).z), (1.0 - \n    ((texture (sampler_blur2, uv_4).xyz * scale2) + bias2)\n  .z)));\n  tmpvar_22.z = min ((1.0 - texture (sampler_main, uv_4).z), (1.0 - (\n    (texture (sampler_blur2, uv_4).xyz * scale2)\n   + bias2).z));\n  float tmpvar_23;\n  tmpvar_23 = clamp ((abs(\n    ((1.0 - ((texture (sampler_blur2, uv_4).xyz * scale2) + bias2).z) - clamp ((1.0 - (\n      (texture (sampler_blur2, tmpvar_3).xyz * scale2)\n     + bias2).z), 0.1, 0.4))\n  ) + 0.2), 0.0, 1.0);\n  vec3 tmpvar_24;\n  tmpvar_24 = mix (texture (sampler_main, uv_4).xyz, ((texture (sampler_blur1, uv_4).xyz * scale1) + bias1), vec3(tmpvar_23));\n  float tmpvar_25;\n  tmpvar_25 = clamp (((1.0 - \n    exp(-(((texture (sampler_blur1, uv_4).xyz * scale1) + bias1).x))\n  ) - 0.2), 0.0, 1.0);\n  ret_6 = ((tmpvar_24.x * (0.2 + \n    ((1.0 - tmpvar_23) * (1.0 - tmpvar_21))\n  )) * (1.0 + (0.5 * \n    sin((((tmpvar_22 / q7) * tmpvar_2) + tmpvar_1))\n  )));\n  vec3 tmpvar_26;\n  tmpvar_26.xy = vec2(0.0, 1.0);\n  tmpvar_26.z = (tmpvar_25 * 3.0);\n  vec3 tmpvar_27;\n  tmpvar_27 = mix (ret_6, tmpvar_26, vec3(tmpvar_25));\n  xlat_mutablelamp = (((\n    clamp ((1.0 - (4.0 * sqrt(\n      dot (xlat_mutableuv1, xlat_mutableuv1)\n    ))), 0.0, 1.0)\n   * tmpvar_24.x) * clamp (\n    (1.0 - (2.0 * mix (tmpvar_21, (1.0 - \n      ((texture (sampler_blur1, uv_4).xyz * scale1) + bias1)\n    .z), 0.2)))\n  , 0.0, 1.0)) * 1.8);\n  ret_6 = (tmpvar_27 + ((1.0 - \n    dot (tmpvar_27, vec3(0.32, 0.49, 0.29))\n  ) * xlat_mutablelamp));\n  ret_6 = (1.0 - exp((-2.0 * ret_6)));\n  ret_6 = (ret_6 + (dots_5 * (1.0 + ret_6)));\n  vec4 tmpvar_28;\n  tmpvar_28.w = 1.0;\n  tmpvar_28.xyz = ret_6;\n  ret = tmpvar_28.xyz;\n }","warp_hlsl":"#define sat saturate\nsampler sampler_pw_noise_lq;\nstatic const float quality = 4;\nfloat3 rsl, rsl3, ret1, sky, mod;\nfloat2 dz, uv0, uv1, uv2, uv3, uv4, uvc, dz1;\nfloat  lav_gnd,lav_gnd2, smask, ripple, l,d,i,p;\nstatic const float hory = q6, xyscale = q7, alti = q8;\nstatic const float2 hor = texsize.zw*float2 (1.5,0), dir = float2 (q3, q4), modran = float2 (q15,q16);\nstatic const float3 mov = float3 (q10,q11,0);\nfloat comb (float2 uvi) {return dot (tex2D(sampler_noise_lq, uvi).yx, float2(1,1));}\n\nfloat2 noise2 (float2 uvi) {float2 tmp = 1; float s = 1;\n  for (int n = 1; n <= 2; n +=1 ) {tmp *= 1-tex2D(sampler_noise_lq,uvi*s); s*= 3;}\n  return tmp;}\n\n\nfloat2 noise3 (float3 uvi, float3 mod) {uvi *= 0.16; float2 tmp = 1; float s = 1; float diff = 0;\n  uvi.xy+= modran*3;\n  for (int n = 1; n <= 2; n +=1 ) {tmp *= sat(1-tex2D(sampler_noise_lq,uvi*s)*(0.8+mod.y/2)/s); s*= 3+tmp*0.002*mod.z;}\n  for (int n = 1; n <= 3; n +=1 ) {tmp *= sat(1-tex2D(sampler_noise_lq,uvi*s)*(0.8+mod.y/2)/s); s*= 3;}\n  diff = sat (16-2*uvi.z-20000* abs (tmp.x-0.4)) ;\n  tmp  -= diff*0.009 ;\n  return 1-pow (tmp,0.8+mod.x);}\n\nfloat2 enoise3 (float2 uvi, float3 mod) {uvi/=6; float2 tmp = 1; float s = 1;\n  for (int n = 1; n <= 6; n +=1 ) {tmp *= 1-tex2D(sampler_noise_lq,uvi*s)/(0.8+mod.y)/s; s*= 2.9;}\n  if ((tmp.x > 0.398) && (tmp.x < 0.402)) {tmp = 0.398;}\n  return 1-pow (tmp,.8+2*mod.x);}\n\nfloat3 rs_lav (float2 uvi, float berg) {  float z; float2 rs;\n  z = 1/(uvi.y+hory)*(alti-berg*16); //z = clamp(z,0,4/xyscale);\n  rs.x = uvi.x * 2*z ; rs.y = z; \n  return float3(rs*xyscale,z); }\n\n\nshader_body {\nuv1=uv-0.5;\nlav_gnd=  -min (tex2D(sampler_fc_main,uv).b, tex2D(sampler_fc_main,uv+hor.yx).b);\n\nrsl = rs_lav(uv1,lav_gnd)+mov; \nmod = tex2D(sampler_noise_mq,rsl.xy*.043+modran);\n\ni=0, p=0;\nfor (int n=1; n <= quality; n++) {\n  p =  ((lav_gnd+noise3 (rsl, mod))/quality);\n  i += p;\n  lav_gnd -= p*0.1+i*0.2; \n  rsl = rs_lav(uv1,lav_gnd)+mov; \n}\nl = saturate(-lav_gnd);\n\nd=1.8;\ndz = -1.5/rsl.z*xyscale*d*dir;\n\nrsl3 = rsl * 8 + l*0;\nripple = ((noise2 (rsl3-dz) - noise2 (rsl3+dz))* (1-l))*1+0.02;\n\nripple = (1/rsl.z*ripple+noise3 (rsl-float3 (dz,0),mod) - noise3 (rsl+float3 (dz,0),mod))*(1-l)/d/sqrt(50+rsl.z)*2000;\n\nripple = 1-exp(-ripple);\n\nret.r = ripple;\nret.b = l;\nret = lerp(ret,GetBlur1(uv),0.1);\nret.g = rsl.z*xyscale*4;\n}","comp_hlsl":"#define sat saturate\nstatic const float2 pix = texsize.zw;\nfloat glow, tmp, lamp, dist, bdist, b2dist, dist_c;\nfloat2 dz, uv1, uv3;\nstatic const float3 CamPos = float3(q4,q5,q6);\nstatic const float myzoom = q7;\nstatic const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);\nstatic const float3 col_struc =  float3(1,.7,.3) + .2*(rand_preset.xyz-.5);\nstatic float2 center = float2 (q1,q2);\n\nfloat3 GetBlurX (float2 uvi, float x) {return lerp (GetPixel(uvi), GetBlur1(uvi), x);}\nfloat GetDist(float2 uvi)   {return 1-GetPixel(uvi).b;}\nfloat GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}\nfloat GetDistB2(float2 uvi) {return 1-GetBlur2(uvi).b;}\n\nfloat MinDistB (float2 uvi) {float tmp; float4 nb; //##nicht ideal\n  tmp = GetDist(uvi);\n  tmp = min(tmp,GetDistB2(uvi)*1) ;\n  return tmp;}\n\nsampler sampler_pw_noise_lq;\n\nfloat3 neu, ret1;\nfloat2 rs2,rs0,rss,uv2;\nfloat ang2,c,s;\nfloat2x2 rota = float2x2(.7,.7,-.7,.7);\nshader_body\n{\nfloat2 uvo = 0.5 + (uv-0.5)*float2(1.1,0.81);\nfloat2 factorA = uv-float2(1-0.5,0.5);\n\nuv -= 0.5;\nuv *= aspect.xy;    \n\nrs0.x = atan2(uv.y, uv.x)/3.1416*2;\nrs0.y = .02/(length (uv));\nrss = float2 (rs0.x,rs0.y+time);\nrss = mul(rss,float2x2(.7,.7,-.7,.7));\nfloat noise = (tex2D(sampler_pw_noise_lq,rss/32)-.7 >= 0);\nrss = abs(frac(rss*8)-.5);\nfloat3 dots = saturate(.04/length(rss)) *noise;\n\nrss = float2 (rs0.x*2,rs0.y+time/2);\nrss = mul(rss,float2x2(.7,.7,-.7,.7));\nnoise = (tex2D(sampler_pw_noise_lq,rss/32)-.7 >= 0);\nrss = abs(frac(rss*8)-.5);\ndots += saturate(.04/length(rss)) * noise;\n\ndots *= saturate(.04/abs(.01/rs0.y-q6*0))+.0;\ndots *= dots*2;\n\nfloat3 ret1 = 0;\nint anz = 2;\nint n = 0;\nwhile (n <= anz) {\n    ang2 = 6.28*n/anz;\n    c = cos(ang2);\n    s = sin(ang2);\n    uv2.x =  uv.x*c - uv.y*s;\n    uv2.y =  uv.x*s + uv.y*c;\n\n    neu = GetPixel(uv2+.5) + GetBlur1(uv2+.5);\n    ret1 = max(ret1,neu);\nn++;\n}\nret = ret1 + dots*(1+ret1);\n\nfloat2 factorB = float2(0,-1024);\nfloat2 product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);\nfloat2 numerator = float2(1,0);\nfloat2 denominator = product;\nfloat2 fraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,   // the fractions real part\n                   numerator.y*denominator.x - numerator.x*denominator.y)/  // the fractions imaginary part\n                   (denominator.x*denominator.x + denominator.y*denominator.y);\nuv = fraction.yx*float2(-1,1)*100;\nuv = lerp(0.5 + (uvo-0.5)*2,uv+0.5,0.5);\nuv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5)*0.98; // Eo.S. mirror code with cutted borders\nuv = (uv-.5)*.9 + .5;\n\nuv1 = (uv-center)*aspect.xy;\n\ndist = MinDistB(uv);\nbdist = lerp(dist,GetDistB(uv),.2);\ndist_c = clamp(GetDistB2 (center),.1,.4); //center distance\n\nfloat3 uv2 = mul(float3((uv-.5)*MinDistB(uv),MinDistB(uv))/myzoom,RotMat)+CamPos;\nglow = pow (sat(tex2D (sampler_noise_hq,.02*uv2).r-.6)*2,2);\n//uv += .003*glow*(tex2D (sampler_noise_mq,uv*2+float2(0,time/4).xy-.5));\n\nfloat focus = sat(abs(GetDistB2(uv)-dist_c)*1+.2);\nfloat struc = GetBlurX(uv,focus).r;\n\nglow = sat(1-exp(-(GetBlur1(uv).r))-.2);\nq18 = 1;\nret = pow(struc,1) * (.2+(1-focus) *lerp(dist,1-dist,q18)) * (1+.5*sin(uv2));\nret = lerp(ret, float3(0,1,glow*3), glow);\n\n//distant light\n//ret += pow(1-GetBlurX(uv,.8).b,3)*(.5+.5*slow_roam_cos) *q19;\n\n//Lamp\nuv3 = uv1; \nlamp = saturate(1-4*length(uv3))*(struc)*saturate(1-2*bdist)*1.8;\nret += (1-lum(ret))*lamp;\nret = 1-exp((-2)*ret);\n//ret = GetPixel(uv).r;\n\n// laser\n\nret = ret + dots*(1+ret);\n}\n\n//-------------------------------------------\n//Written by martin\n"}