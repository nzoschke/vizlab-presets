{"version":2,"baseVals":{"rating":5,"echo_zoom":1,"wave_mode":7,"wave_a":0.001,"rot":5.3,"wave_r":0,"wave_g":0.4,"wave_b":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"textured":1,"x":0.49,"rad":2.66718,"tex_zoom":0.3696,"g":1,"b":1,"a":0.6,"r2":1,"b2":1,"a2":0.4},"init_eqs_str":"a.tex_capture=0;a.basstime=0;a.ob_r=0;a.ob_g=0;a.ob_b=0;","frame_eqs_str":"a.tex_capture=(.00001<Math.abs(equal(mod(a.frame,2),1))?1:0)-above(a.bass,1);a.x=.5+.1*Math.sin(a.basstime);a.y=.5+.1*Math.sin(1.457*a.basstime);a.ob_r=.5*Math.sin(1.12*a.basstime);a.ob_g=.5*Math.sin(1.5*a.basstime);a.ob_b=.5*Math.sin(2.12*a.basstime);","init_eqs_eel":"","frame_eqs_eel":"tex_capture = if(equal(frame%2,1),1,0) - above(bass,1);\n//ang = basstime;\n\nx = 0.5 + 0.1*sin(basstime);\ny = 0.5 + 0.1*sin(basstime*1.457);\n\n\n\nob_r = 0.5 * sin(basstime*1.12);\nob_g = 0.5 * sin(basstime*1.5);\nob_b = 0.5 * sin(basstime*2.12);"},{"baseVals":{"textured":1,"rad":2.66718,"ang":1.06814,"tex_zoom":0.3697,"g":1,"b":1,"a":0.1,"a2":0.2,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"tex_capture = above(bass,1);","init_eqs_eel":"","frame_eqs_eel":"tex_capture = above(bass,1);"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"spectrum":1,"smoothing":0,"a":0.5},"init_eqs_str":"a.z=0;a.basstime=0;a.xs=0;a.x_int=0;a.v=0;a.zs=0;a.ys=0;a.y_int=0;a.speed=0;","frame_eqs_str":"","point_eqs_str":"a.speed=sqrt(.01*a.bass_att);a.v=1E4*a.sample+a.value2*a.bass*.1;a.xs+=Math.sin(1*a.v)*a.speed*Math.atan(1.51*a.v);a.ys+=Math.sin(1*a.v)*a.speed;a.zs+=Math.cos(1.1*a.v)*a.speed;a.x=.5+.5*Math.sin(.1*a.xs)*Math.cos(2*a.time+a.xs)*Math.atan(a.basstime+.1*a.zs);a.y=.5+.5*Math.sin(.1*a.ys)*Math.cos(2.1*a.time+a.xs)*Math.sin(.4*a.basstime+.12*a.zs);a.z=.5+.5*Math.sin(.1*a.zs)*Math.cos(2.1*a.time+a.zs);a.z=Math.cos(a.z*a.sample)*a.sample*a.bass*1.2+2;a.x_int=.6*a.x+.2;a.y_int=a.y;\na.x=a.x_int*a.z*.25+.25;a.y=a.y_int*a.z*.25+.25;a.r=.5*Math.sin(6.22*a.time)*a.x_int+.6;a.g=.4+.4*Math.sin(5.307*a.time)*a.x_int;a.b=.4+.4*Math.sin(4.959*a.time)*a.y_int;a.xs=.00001<Math.abs(above(a.xs,1E3))?0:a.xs;a.ys=.00001<Math.abs(above(a.ys,1E3))?0:a.ys;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"speed = sqrt(bass_att*0.01);\nv = sample*10000 + value2*bass*0.1;\n\n//state 0 elipse\nxs = xs + sin(v*1)*speed*atan(v*1.51);\nys = ys + sin(v*1)*speed;\nzs = zs + cos(v*1.1)*speed;\n\nx = 0.5 + 0.5*sin(xs*0.1)*cos(time*2 + xs)*atan(basstime + zs*0.1);\ny = 0.5 + 0.5*sin(ys*0.1)*cos(time*2.1 + xs)*sin(basstime*0.4 + zs*0.12);\nz = 0.5 + 0.5*sin(zs*0.1)*cos(time*2.1 + zs);\n\n//x = x + sample*0.1;\n//y = y + sample*0.1;\n\n\nz = cos(z*sample)*sample*bass*1.2 + 2;\n\nx_int = x*0.6 + 0.2;\ny_int = y;\n\nx = x_int*z*0.25 + 0.25;\ny = y_int*z*0.25 + 0.25;\n\n\nr = 0.5 + 0.5*sin(time*6.22)*x_int + 0.1;\ng = 0.4 + 0.4*sin(time*5.307)*x_int;\nb = 0.4 + 0.4*sin(time*4.959)*y_int;\n\nxs = if(above(xs,1000),0 ,xs);\nys = if(above(ys,1000),0 ,ys);"},{"baseVals":{"enabled":1,"spectrum":1,"smoothing":0,"a":0.6},"init_eqs_str":"a.z=0;a.basstime=0;a.xs=0;a.x_int=0;a.v=0;a.zs=0;a.ys=0;a.y_int=0;a.speed=0;","frame_eqs_str":"","point_eqs_str":"a.speed=sqrt(.011*a.bass_att);a.v=1E4*a.sample+a.value2*a.bass*.1;a.xs+=Math.sin(1*a.v)*a.speed*Math.atan(1.51*a.v);a.ys+=Math.sin(1*a.v)*a.speed;a.zs+=Math.cos(1.1*a.v)*a.speed;a.x=.5+.5*Math.sin(.1*a.xs)*Math.cos(2*a.time+a.xs)*Math.atan(a.basstime+.1*a.zs);a.y=.5+.5*Math.sin(.1*a.ys)*Math.cos(2.1*a.time+a.xs)*Math.sin(.4*a.basstime+.12*a.zs);a.z=.5+.5*Math.sin(.1*a.zs)*Math.cos(2.1*a.time+a.zs);a.z=Math.cos(a.z*a.sample)*a.sample*a.bass+2;a.x_int=.6*a.x+.2;a.y_int=a.y;a.x=\n-a.x_int*a.z*.25+.75;a.y=a.y_int*a.z*.25+.25;a.r=.5*Math.sin(6.22*a.time)*a.x_int+.6;a.g=.4+.4*Math.sin(5.307*a.time)*a.x_int;a.b=.4+.4*Math.sin(4.959*a.time)*a.y_int;a.xs=.00001<Math.abs(above(a.xs,1E3))?0:a.xs;a.ys=.00001<Math.abs(above(a.ys,1E3))?0:a.ys;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"speed = sqrt(bass_att*0.011);\nv = sample*10000 + value2*bass*0.1;\n\n//state 0 elipse\nxs = xs + sin(v*1)*speed*atan(v*1.51);\nys = ys + sin(v*1)*speed;\nzs = zs + cos(v*1.1)*speed;\n\nx = 0.5 + 0.5*sin(xs*0.1)*cos(time*2 + xs)*atan(basstime + zs*0.1);\ny = 0.5 + 0.5*sin(ys*0.1)*cos(time*2.1 + xs)*sin(basstime*0.4 + zs*0.12);\nz = 0.5 + 0.5*sin(zs*0.1)*cos(time*2.1 + zs);\n\n//x = x + sample*0.1;\n//y = y + sample*0.1;\n\n\nz = cos(z*sample)*sample*bass + 2;\n\nx_int = x*0.6 + 0.2;\ny_int = y;\n\nx = -x_int*z*0.25 + 0.75;\ny = y_int*z*0.25 + 0.25;\n\n\nr = 0.5 + 0.5*sin(time*6.22)*x_int + 0.1;\ng = 0.4 + 0.4*sin(time*5.307)*x_int;\nb = 0.4 + 0.4*sin(time*4.959)*y_int;\n\nxs = if(above(xs,1000),0 ,xs);\nys = if(above(ys,1000),0 ,ys);"},{"baseVals":{"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"speed = bass_att*0.8;\nv = sample*10000 + value2*bass*0.1;\n\n//state 0 elipse\nxs = xs + (equal(0,q1))*sin(v*1)*speed*atan(v*1.51);\nys = ys + (equal(0,q1))*sin(v*1)*speed;\n\nx = 0.5 + 0.5*sin(xs*0.1)*cos(time*2 + xs);\ny = 0.5 + 0.5*sin(ys*0.1)*cos(time*2.1 + xs);\n\nx = x - sample*0.01;\n\nx = x*0.6 + 0.2;\ny = y + bass*0.1;\ny = y*0.8;\n\nr = 0.5 + 0.5*sin(time*6.22) + 0.1;\ng = 0.4 + 0.4*sin(time*5.307);\nb = 0.4 + 0.4*sin(time*4.959)*x;\n\nxs = if(above(xs,1000),0 ,xs);\nys = if(above(ys,1000),0 ,ys);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"speed = bass_att*0.8;\nv = sample*10000 + value2*bass*0.1;\n\n//state 0 elipse\nxs = xs + (equal(0,q1))*sin(v*1)*speed*atan(v*1.51);\nys = ys + (equal(0,q1))*sin(v*1)*speed;\n\nx = 0.5 + 0.5*sin(xs*0.1)*cos(time*2 + xs);\ny = 0.5 + 0.5*sin(ys*0.1)*cos(time*2.1 + xs);\n\nx = x - sample*0.01;\n\nx = x*0.6 + 0.2;\ny = y + bass*0.1;\ny = y*0.8;\n\nr = 0.5 + 0.5*sin(time*6.22) + 0.1;\ng = 0.4 + 0.4*sin(time*5.307);\nb = 0.4 + 0.4*sin(time*4.959)*x;\n\nxs = if(above(xs,1000),0 ,xs);\nys = if(above(ys,1000),0 ,ys);"},{"baseVals":{"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"speed = bass_att*0.8;\nv = sample*10000 + value2*bass*0.1;\n\n//state 0 elipse\nxs = xs + (equal(0,q1))*sin(v*1)*speed*atan(v*1.51);\nys = ys + (equal(0,q1))*sin(v*1)*speed;\n\nx = 0.5 + 0.5*sin(xs*0.1)*cos(time*2 + xs);\ny = 0.5 + 0.5*sin(ys*0.1)*cos(time*2.1 + xs);\n\ny = y - sample*0.01;\n\nx = x*0.6 + 0.2;\ny = y + bass*0.1;\ny = y*0.8;\n\nr = 0.5 + 0.5*sin(time*6.22) + 0.1;\ng = 0.4 + 0.4*sin(time*5.307);\nb = 0.4 + 0.4*sin(time*4.959)*x;\n\nxs = if(above(xs,1000),0 ,xs);\nys = if(above(ys,1000),0 ,ys);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"speed = bass_att*0.8;\nv = sample*10000 + value2*bass*0.1;\n\n//state 0 elipse\nxs = xs + (equal(0,q1))*sin(v*1)*speed*atan(v*1.51);\nys = ys + (equal(0,q1))*sin(v*1)*speed;\n\nx = 0.5 + 0.5*sin(xs*0.1)*cos(time*2 + xs);\ny = 0.5 + 0.5*sin(ys*0.1)*cos(time*2.1 + xs);\n\ny = y - sample*0.01;\n\nx = x*0.6 + 0.2;\ny = y + bass*0.1;\ny = y*0.8;\n\nr = 0.5 + 0.5*sin(time*6.22) + 0.1;\ng = 0.4 + 0.4*sin(time*5.307);\nb = 0.4 + 0.4*sin(time*4.959)*x;\n\nxs = if(above(xs,1000),0 ,xs);\nys = if(above(ys,1000),0 ,ys);"}],"init_eqs_str":"a.basstime=0;a.height=0;a.q6=0;a.q1=0;a.q5=0;a.q4=0;a.peak=0;a.q2=0;a.q3=0;","frame_eqs_str":"a.basstime+=.03*a.bass;a.q2=a.basstime;a.decay=.6;a.peak-=.05;a.peak=.00001<Math.abs(above(a.bass,a.peak))?2*a.bass:a.peak;a.monitor=a.peak;a.q1=a.peak;a.rot=0;a.q3=-100+100*Math.sin(.01*a.basstime);a.q4=-100+100*Math.sin(.011*a.basstime);a.q5=1+Math.sin(.01*a.basstime);a.height=.00001<Math.abs(above(.1*a.bass,a.height))?.1*a.bass:a.height-.01;a.q6=a.height;a.monitor=a.q3;","pixel_eqs_str":"a.warp=0;","init_eqs_eel":"","frame_eqs_eel":"basstime = basstime + 0.03*bass;\nq2 = basstime;\n\ndecay = 0.6;\n\npeak = peak -0.05;\npeak = if(above(bass,peak),bass*2, peak);\n\n\nmonitor = peak;\nq1 = peak;\nrot = 0;\n\nq3 = -100 +100*sin(basstime*0.01);\nq4 = -100 +100*sin(basstime*0.011);\nq5 = 1 + sin(basstime*0.01);\nheight = if(above(bass*0.1, height), bass*0.1, height-0.01);\nq6 = height;\n\nmonitor = q3;","pixel_eqs_eel":"warp =  0;","warp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (texture (sampler_main, uv).xyz * 0.99);\n  ret = tmpvar_1.xyz;\n }","comp":" shader_body { \n  float intensity_1;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  float tmpvar_4;\n  tmpvar_4 = (12.0 * uv.x);\n  float tmpvar_5;\n  tmpvar_5 = (q2 * 2.1);\n  tmpvar_3 = (uv + (sin(\n    (vec2(tmpvar_4) - vec2(tmpvar_5))\n  ) * vec2(q6)));\n  vec3 tmpvar_6;\n  tmpvar_6.xy = tmpvar_3;\n  tmpvar_6.z = ((2.0 + time) + uv.y);\n  vec3 tmpvar_7;\n  tmpvar_7 = (tmpvar_6 * 2.0);\n  vec4 tmpvar_8;\n  tmpvar_8 = texture (sampler_noisevol_lq, (tmpvar_7 * 0.1));\n  ret_2 = (((vec3(0.6, 0.1, 0.0) * \n    min (1.0, tmpvar_8.z)\n  ) + tmpvar_8.yyy) - (vec3(0.6, 0.8, 0.0) * sin(\n    (tmpvar_8.x * 4.0)\n  )));\n  vec4 tmpvar_9;\n  tmpvar_9 = texture (sampler_noisevol_hq, (tmpvar_7 * 0.1));\n  intensity_1 = (((\n    abs((tmpvar_9.x - 0.25))\n   + \n    abs((tmpvar_9.y - 0.125))\n  ) + abs(\n    (tmpvar_9.z - 0.0625)\n  )) + abs((tmpvar_9.w - 0.03125)));\n  float theta_10;\n  theta_10 = (intensity_1 * 4.0);\n  intensity_1 = ((sin(theta_10) / cos(theta_10)) + 0.5);\n  ret_2 = (ret_2 + ((\n    mix (vec3(1.0, 1.0, 1.0), vec3(0.2, 0.2, -1.0), vec3(intensity_1))\n   * 0.2) * (1.0 + \n    (bass_att * 0.5)\n  )));\n  vec3 tmpvar_11;\n  tmpvar_11.yz = vec2(1.0, 0.0);\n  tmpvar_11.x = (1.0 + (0.6 * cos(\n    (tmpvar_4 - tmpvar_5)\n  )));\n  vec3 tmpvar_12;\n  tmpvar_12.z = 0.0;\n  tmpvar_12.xy = tmpvar_3;\n  ret_2 = (ret_2 * (clamp (0.0, 1.0, \n    dot (normalize(tmpvar_11).xxx, normalize(tmpvar_12))\n  ) - 0.25));\n  ret_2 = ((dot (ret_2, vec3(0.32, 0.49, 0.29)) * ret_2) * 0.2);\n  ret_2 = (((\n    (texture (sampler_blur1, ret_2.xy).xyz * scale1)\n   + bias1) * 0.4) + ret_2);\n  vec4 tmpvar_13;\n  tmpvar_13.w = 1.0;\n  tmpvar_13.xyz = ret_2;\n  ret = tmpvar_13.xyz;\n }","warp_hlsl":"shader_body\n{\n    \n    // sample previous frame\n    ret = tex2D( sampler_main, uv).xyz;\n    \n    // darken (decay) over time\n    ret *= 0.99; //or try: ret -= 0.004;\n}","comp_hlsl":"sampler sampler_cells;\n\nshader_body\n{\n    float3 lightPosition = float3(0,0, 0);\n\n    float2 cords = float2(\n                          uv.x + sin(12*(uv.x) - q2*2.1)*q6, \n                          uv.y + sin(12*(uv.x) - q2*2.1 )*q6);\n\n    \n   float3 Color1= float3(0.6, 0.8, 0.0);\n   float3 Color2= float3(0.6, 0.1, 0);\n   float3 Color3= float3(1, 1, 1);\n   float3 Color4= float3(0.2, 0.2, -1);\n\n \n   float3 uvx = float3(cords, 2 + time + uv.y)*2;  \n\n\n  float4 noisevec = tex3D(sampler_noisevol_lq, uvx*0.1);\n  float intensity = abs(noisevec.x - 0.25) +\n                    abs(noisevec.y - 0.125) +\n                    abs(noisevec.z - 0.0625) +\n                    abs(noisevec.w - 0.03125);\n\n\n  intensity = min(1.0, noisevec.z * 1);\n  ret = Color2 * intensity + Color3*noisevec.y - Color1*sin(noisevec.x*4);\n\n  noisevec = tex3D(sampler_noisevol_hq, uvx*0.1);\n  intensity = abs(noisevec.x - 0.25) +\n                    abs(noisevec.y - 0.125) +\n                    abs(noisevec.z - 0.0625) +\n                    abs(noisevec.w - 0.03125);\n\n  intensity = tan(intensity * 4 ) + 0.5;\n  ret += lerp(Color3, Color4, intensity)*0.2*(1+bass_att*0.5);\n      \n\n   float normal =  normalize(float3(1 + 12*cos(12*uv.x - q2*2.1)*0.05, 1, 0));        \n   float3 light_direction = normalize(float3(cords.xy, 0) - lightPosition);\n   float atn = clamp(0,1,dot(normal, light_direction))-0.25;\n   \n\n   ret *= (atn);\n   ret = lum(ret)*ret*0.2;\n   //ret.g = GetBlur1(ret.r*atn*(bass*0.1 + 1));\n   ret = GetBlur1(ret)*0.4 + ret;\n }"}