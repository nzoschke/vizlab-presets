{"version":2,"baseVals":{"rating":5,"gammaadj":1.63,"decay":0.925,"echo_zoom":2.518,"echo_orient":3,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"fshader":0.7,"zoom":10.89688,"warp":0.01,"sx":0.99984,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0,"ob_a":1,"ib_size":0,"ib_r":1,"ib_g":1,"ib_b":1,"ib_a":1,"mv_a":0},"shapes":[{"baseVals":{"textured":1,"rad":5.4437,"tex_ang":1.19381,"tex_zoom":0.18923,"g":0.97,"b":1,"a":0.94,"r2":1,"b2":1,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"textured":1,"rad":3.99882,"tex_zoom":0.25005,"g":1,"b":1,"a":0.6,"r2":1,"b2":1,"a2":0.6,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":18,"textured":1,"num_inst":10,"x":0.463,"rad":1.60089,"tex_zoom":0.67634,"g":1,"b":1,"r2":0.7,"g2":0.8,"b2":0.8,"a2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":16,"num_inst":120,"x":0.503,"rad":0.0376,"tex_zoom":1.11234,"g":1,"b":1,"g2":0,"border_a":0.04},"init_eqs_str":"a.sample=0;a.t=0;a.p1=0;a.p2=0;","frame_eqs_str":"a.sample=div(a.instance,a.num_inst);a.rad=.03+.02*Math.sin(a.sample);a.t=.08*a.time;a.x=.4*(.4*Math.sin(3*a.t-14*a.sample)+.6*Math.sin(5*a.t-10*a.sample));a.y=.4*(.6*Math.sin(6*a.t-11*a.sample)+.4*Math.sin(4*a.t-15*a.sample));a.p1=3*Math.sin(50*a.sample+.2*a.time);a.p2=3*Math.sin(80*a.sample+.1*a.time);a.x=.5+a.x*a.p1;a.y=.5+a.y*a.p2;a.r=.4*Math.sin(80*a.sample);a.b=.8*Math.sin(66*a.sample);a.g=.6*Math.sin(120*a.sample);","init_eqs_eel":"","frame_eqs_eel":"sample=instance/num_inst;\nrad=.03+.02*sin(sample);\n\nt = time*.08;\nx = .4* (.4*sin(3*t- 14*sample) + .6*sin(5*t- 10*sample)  );\ny = .4* (.6*sin(6*t- 11*sample) + .4*sin(4*t- 15*sample) );\n\np1 = 3*sin(sample*50+.2*time);\np2 = 3*sin(sample*80+.1*time);\n\nx = .5+x*p1;\ny = .5+y*p2;\n\nr = .4*sin(sample*80);\nb = .8*sin(sample*66);\ng = .6*sin(sample*120);"}],"waves":[{"baseVals":{"spectrum":1,"additive":1,"smoothing":0,"r":0.4,"g":0.4,"b":0.4,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"smoothing":0,"r":0,"g":0,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"thick":1,"r":0,"g":0,"b":0,"a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.tic=0;a.st=0;a.vt=0;a.meanbass_att=0;a.q6=0;a.bt=0;a.q1=0;a.q5=0;a.mid_avg=0;a.tt=0;a.base=0;a.my=0;a.tin=0;a.lastbeat=0;a.beatrate=0;a.ti=0;a.bass_avg=0;a.peakbass_att=0;a.vav=0;a.q4=0;a.w1=0;a.mt=0;a.ra=0;a.mx=0;a.treb_avg=0;a.volume=0;a.beat=0;a.vol=0;a.q2=0;a.q3=0;a.q8=0;","frame_eqs_str":"a.volume=.3*(a.bass+a.mid);a.beatrate=equal(a.beatrate,0)+(1-equal(a.beatrate,0))*(below(a.volume,.01)+(1-below(a.volume,.01))*a.beatrate);a.lastbeat+=equal(a.lastbeat,0)*a.time;a.meanbass_att=.05*(19*a.meanbass_att+a.bass_att);a.peakbass_att=Math.max(a.bass_att,a.peakbass_att);a.beat=above(a.volume,.8)*below(a.peakbass_att-a.bass_att,.05*a.peakbass_att)*above(a.time-a.lastbeat,.1+.5*(a.beatrate-.1));a.beatrate=Math.max(.00001<Math.abs(a.beat)?.00001<Math.abs(below(a.time-a.lastbeat,\n2*a.beatrate))?.1*(9*a.beatrate+a.time-a.lastbeat):a.beatrate:a.beatrate,.1);a.peakbass_att=a.beat*a.bass_att+(1-a.beat)*a.peakbass_att*(.96*above(a.time-a.lastbeat,2*a.beatrate)+.996*(1-above(a.time-a.lastbeat,2*a.beatrate)));a.lastbeat=a.beat*a.time+(1-a.beat)*a.lastbeat;a.peakbass_att=Math.max(a.peakbass_att,1.1*a.meanbass_att);a.q8=a.beat;a.warp=0;a.tic=Math.min(a.time-a.tin,.1);a.tin=a.time;a.vol=.333333*(a.bass_att+a.treb_att+a.mid_att);a.ra=.25*div(1,a.tic);a.treb_avg=a.tic*(a.treb_avg*(div(1,\na.tic)-a.ra)+a.ra*a.treb);a.mid_avg=a.tic*(a.mid_avg*(div(1,a.tic)-a.ra)+a.ra*a.mid);a.bass_avg=a.tic*(a.bass_avg*(div(1,a.tic)-a.ra)+a.ra*a.bass);a.vav=a.tic*(a.vav*(div(1,a.tic)-a.ra)+a.ra*(a.bass+a.treb+a.mid)*.33333);a.tt+=a.tic*a.treb;a.mt+=a.tic*a.mid;a.bt+=a.tic*a.bass;a.vt+=a.tic*a.vav*a.vav;a.w1=.5*a.vt;a.q1=4*a.tt;a.q2=4*a.mt;a.q3=4*a.bt;a.st=.1;a.base=.05;a.q4=a.base+a.treb_avg*a.st;a.q5=a.base+a.mid_avg*a.st;a.q6=a.base+a.bass_avg*a.st;a.dy=1;","pixel_eqs_str":"a.ti=.5*a.time;a.mx=a.x-.5+.35*(Math.sin(1.1278*a.ti)+Math.sin(.7458*a.ti));a.my=a.y-.5+.35*(Math.sin(.9454*a.ti)+Math.sin(1.2378*a.ti));a.dx=a.mx*Math.cos(6*pow(a.mx*a.mx*1.5+a.my*a.my,.5)-a.q1)*a.q4;a.mx=a.x-.5+.25*(Math.sin(1.3185*a.ti)+Math.sin(.9105*a.ti));a.my=a.y-.5+.25*(Math.sin(.8113*a.ti)+Math.sin(1.0287*a.ti));a.dx+=a.mx*Math.cos(16*pow(a.mx*a.mx*1.5+a.my*a.my,.5)-a.q1)*a.q4;a.mx=a.x-.5+.35*(Math.sin(1.3488*a.ti)+Math.sin(.8552*a.ti));a.my=a.y-.5+.35*(Math.sin(.7366*\na.ti)+Math.sin(1.1447*a.ti));a.dx+=a.mx*Math.cos(6*pow(a.mx*a.mx*1.5+a.my*a.my,.5)-a.q1)*a.q4;a.mx=a.x-.5+.25*(Math.sin(1.1385*a.ti)+Math.sin(.9901*a.ti));a.my=a.y-.5+.25*(Math.sin(.7028*a.ti)+Math.sin(1.3548*a.ti));a.dx+=a.mx*Math.cos(16*pow(a.mx*a.mx*1.5+a.my*a.my,.5)-a.q1)*a.q4;a.mx=a.x-.5+.35*(Math.sin(1.3544*a.ti)+Math.sin(.8926*a.ti));a.my=a.y-.5+.35*(Math.sin(.9021*a.ti)+Math.sin(1.2468*a.ti));a.dx+=a.mx*Math.cos(6*pow(a.mx*a.mx*1.5+a.my*a.my,.5)-a.q1)*a.q4;a.mx=a.x-.5+.25*(Math.sin(1.5416*\na.ti)+Math.sin(.7852*a.ti));a.my=a.y-.5+.25*(Math.sin(.7436*a.ti)+Math.sin(1.3266*a.ti));a.dx+=a.mx*Math.cos(16*pow(a.mx*a.mx*1.5+a.my*a.my,.5)-a.q1)*a.q4;","init_eqs_eel":"","frame_eqs_eel":"//begin beat code\nvolume = 0.3*(bass+mid);\nbeatrate = equal(beatrate,0) + (1-equal(beatrate,0))*(below(volume,0.01) + (1-below(volume,0.01))*beatrate);\nlastbeat = lastbeat + equal(lastbeat,0)*time;\nmeanbass_att = 0.05*(meanbass_att*19 + bass_att);\npeakbass_att = max(bass_att,peakbass_att);\nbeat = above(volume,0.8)*below(peakbass_att - bass_att, 0.05*peakbass_att)*above(time - lastbeat, 0.1 + 0.5*(beatrate - 0.1));\nbeatrate = max(if(beat,if(below(time-lastbeat,2*beatrate),0.1*(beatrate*9 + time - lastbeat),beatrate),beatrate),0.1);\n//Adjust responsiveness: To increase responsiveness, set the \"0.96 and \"0.996\" on the next line to slightly lower values. Higher values decrease responsiveness.\npeakbass_att = beat*bass_att + (1-beat)*peakbass_att*(above(time - lastbeat, 2*beatrate)*0.96 + (1-above(time - lastbeat, 2*beatrate))*0.996);\nlastbeat = beat*time + (1-beat)*lastbeat;\npeakbass_att = max(peakbass_att,1.1*meanbass_att);\n//end beat code\n\nq8 = beat;\nwarp = 0;\n\ntic = min(time-tin,.1);\ntin = time;\n\nvol = (bass_att + treb_att + mid_att)*.333333;\n\nra = 1/tic*.25;\n\ntreb_avg = tic*(treb_avg*(1/tic - ra) + ra*treb);\nmid_avg = tic*(mid_avg*(1/tic - ra) + ra*mid);\nbass_avg = tic*(bass_avg*(1/tic - ra) + ra*bass);\nvav = tic*(vav*(1/tic - ra) + ra*(bass+treb+mid)*.33333);\n\ntt = tt + tic*treb;\nmt = mt + tic*mid;\nbt = bt + tic*bass;\nvt = vt + tic*vav*vav;\n\nw1 = vt*.5;\n\nq1 = tt*4;\nq2 = mt*4;\nq3 = bt*4;\n\nst = .1;\nbase = .05;\nq4 = base + treb_avg*st;\nq5 = base + mid_avg*st;\nq6 = base + bass_avg*st;\n\n\ndy = 1;","pixel_eqs_eel":"ti = time*.5;\n\nmx = x - .5 + .35*(sin(ti*1.1278) + sin(ti*.7458));\nmy = y - .5 + .35*(sin(ti*.9454) + sin(ti*1.2378));\ndx = mx*cos(pow(mx*mx*1.5 + my*my,.5)*6 - q1)*q4;\nmx = x - .5 + .25*(sin(ti*1.3185) + sin(ti*.9105));\nmy = y - .5 + .25*(sin(ti*.8113) + sin(ti*1.0287));\ndx = dx + mx*cos(pow(mx*mx*1.5 + my*my,.5)*16 - q1)*q4;\nmx = x - .5 + .35*(sin(ti*1.3488) + sin(ti*.8552));\nmy = y - .5 + .35*(sin(ti*.7366) + sin(ti*1.1447));\ndx = dx + mx*cos(pow(mx*mx*1.5 + my*my,.5)*6 - q1)*q4;\nmx = x - .5 + .25*(sin(ti*1.1385) + sin(ti*.9901));\nmy = y - .5 + .25*(sin(ti*.7028) + sin(ti*1.3548));\ndx = dx + mx*cos(pow(mx*mx*1.5 + my*my,.5)*16 - q1)*q4;\nmx = x - .5 + .35*(sin(ti*1.3544) + sin(ti*.8926));\nmy = y - .5 + .35*(sin(ti*.9021) + sin(ti*1.2468));\ndx = dx + mx*cos(pow(mx*mx*1.5 + my*my,.5)*6 - q1)*q4;\nmx = x - .5 + .25*(sin(ti*1.5416) + sin(ti*.7852));\nmy = y - .5 + .25*(sin(ti*.7436) + sin(ti*1.3266));\ndx = dx + mx*cos(pow(mx*mx*1.5 + my*my,.5)*16 - q1)*q4;","warp":" shader_body { \n  vec2 uv_z_1;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (1.0 - abs((\n    (fract((uv * 0.5)) * 2.0)\n   - 1.0)));\n  ret_2.x = texture (sampler_fc_main, tmpvar_3).z;\n  ret_2.y = mix (mix (texture (sampler_fc_main, tmpvar_3).x, ret_2.x, 0.5), texture (sampler_main, uv_orig).y, 0.75);\n  vec2 tmpvar_4;\n  tmpvar_4 = (texsize.zw * 6.0);\n  vec2 tmpvar_5;\n  vec2 tmpvar_6;\n  tmpvar_6 = (uv_orig - 0.5);\n  tmpvar_5 = ((tmpvar_6 * 0.998) + 0.5);\n  vec2 tmpvar_7;\n  tmpvar_7.x = (((texture (sampler_blur1, \n    (tmpvar_5 + (vec2(1.0, 0.0) * tmpvar_4))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (tmpvar_5 - (vec2(1.0, 0.0) * tmpvar_4))\n  ).xyz * scale1) + bias1)).z;\n  tmpvar_7.y = (((texture (sampler_blur1, \n    (tmpvar_5 + (vec2(0.0, 1.0) * tmpvar_4))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (tmpvar_5 - (vec2(0.0, 1.0) * tmpvar_4))\n  ).xyz * scale1) + bias1)).z;\n  uv_z_1 = (tmpvar_5 - ((tmpvar_7 * texsize.zw) * 2.0));\n  ret_2.z = max (((\n    (texture (sampler_fc_main, tmpvar_3).x - 0.5)\n   * 3.0) * clamp (\n    (1.0 - (sqrt(dot (tmpvar_6, tmpvar_6)) * 3.2))\n  , 0.0, 1.0)), texture (sampler_fc_main, uv_z_1).z);\n  ret_2.z = (ret_2.z + ((texture (sampler_fc_main, uv_z_1).z - \n    ((texture (sampler_blur1, clamp (uv_z_1, 0.0, 1.0)).xyz * scale1) + bias1)\n  .z) * 0.02));\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = ret_2;\n  ret = tmpvar_8.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2.y = 0.0;\n  tmpvar_2.x = texsize.z;\n  vec2 tmpvar_3;\n  tmpvar_3 = (tmpvar_2 * 2.0);\n  vec2 tmpvar_4;\n  tmpvar_4.x = 0.0;\n  tmpvar_4.y = texsize.w;\n  vec2 tmpvar_5;\n  tmpvar_5 = (tmpvar_4 * 2.0);\n  vec2 tmpvar_6;\n  tmpvar_6.x = (((texture (sampler_blur1, \n    (uv - tmpvar_3)\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv + tmpvar_3)\n  ).xyz * scale1) + bias1)).x;\n  tmpvar_6.y = (((texture (sampler_blur1, \n    (uv - tmpvar_5)\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv + tmpvar_5)\n  ).xyz * scale1) + bias1)).x;\n  vec2 tmpvar_7;\n  tmpvar_7 = (tmpvar_6 * 0.5);\n  vec3 tmpvar_8;\n  tmpvar_8 = ((texture (sampler_blur1, fract(\n    (uv + tmpvar_7)\n  )).xyz * scale1) + bias1);\n  vec2 tmpvar_9;\n  tmpvar_9 = (0.2 * cos((\n    (((uv - 0.5) + (tmpvar_7 / 4.0)) * 4.0)\n   + time)));\n  ret_1 = (((texture (sampler_main, \n    (uv + tmpvar_7)\n  ) * texture (sampler_main, \n    ((1.0 - uv) - tmpvar_7)\n  )).xyz + (tmpvar_8 * 2.0)) + ((q21 * vec3(\n    clamp ((0.01 / sqrt(dot (tmpvar_9, tmpvar_9))), 0.0, 1.0)\n  )) * (1.0 - tmpvar_8)));\n  ret_1 = (ret_1 * 0.7);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = ret_1;\n  ret = tmpvar_10.xyz;\n }","warp_hlsl":"shader_body\n{\nfloat2 uv_m = 1.0 - abs( frac( uv * 0.5 ) * 2.0 - 1.0 ); // Eo.S' mirror code\nret.x = tex2D( sampler_fc_main, uv_m ).z; // first julia fractal iteration\nret.y = lerp(lerp(tex2D( sampler_fc_main, uv_m ).x, ret.x,0.5), \n             GetPixel(uv_orig).y,\n             0.75); // 75% of motion blur to the green channel\n\n\nfloat2 d = texsize.zw*6;\nfloat2 uv_z = (uv_orig-0.5)*0.998 + 0.5; // a small dose of zoom-in\nfloat3 dx = ( GetBlur1(uv_z + float2(1,0)*d) - GetBlur1(uv_z-float2(1,0)*d) );\nfloat3 dy = ( GetBlur1(uv_z + float2(0,1)*d) - GetBlur1(uv_z-float2(0,1)*d) );\nuv_z -=float2(dx.z,dy.z)*texsize.zw*2; //shortening of the nebulous matter\nret.z = max((tex2d(sampler_fc_main,uv_m).x-0.5)*3*saturate(1-length(uv_orig-0.5)*3.2), // feeded by the inner of the red channel\n             tex2d(sampler_fc_main,uv_z).z);\nret.z += (tex2d(sampler_fc_main,uv_z).z - GetBlur1(saturate(uv_z)).z)*0.02; // sort of geiss' skin dot code\n}","comp_hlsl":"shader_body\n{\n\n//uv = (uv-.5) * aspect.xy + .5;\n\n\nfloat2 hor = float2 (texsize.z,0)*2;\nfloat2 ver = float2 (0,texsize.w)*2;\nfloat dx = GetBlur1 (uv-hor) - GetBlur1 (uv+hor);\nfloat dy = GetBlur1 (uv-ver) - GetBlur1 (uv+ver);\nfloat2 dz = float2 (dx,dy)*0.5;\n\n\n\nfloat3 crisp = tex2D(sampler_main, uv + dz) * \n               tex2D(sampler_main, 1-uv - dz);\nfloat3 blur = GetBlur1(frac(uv + dz));\n\nfloat2 uv1 = uv-.5 + dz/4;\nfloat2 uv2 = uv1*0+.2*float2 (cos(uv1*4+time));;\nfloat3 dots = saturate(.01/(length(uv2))) * float3 (1,1,1);\n\n\nret = (crisp + blur*2) + q21*dots * (1-blur);\nret *= .7 ;\n}"}