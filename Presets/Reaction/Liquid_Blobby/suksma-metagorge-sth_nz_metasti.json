{"version":2,"baseVals":{"rating":5,"decay":0.9,"echo_zoom":1.007,"echo_alpha":0.5,"echo_orient":1,"wave_mode":7,"additivewave":1,"wave_brighten":0,"brighten":1,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":30.965,"warpscale":2.572,"zoom":1.009,"warp":0.00054,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"mv_x":21.473,"mv_y":15.907,"mv_l":0.474,"mv_g":0.179,"mv_b":0.483,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":100,"x":0.8,"y":0.81,"rad":0.09327,"tex_zoom":0.49831,"g":1,"a":0.05,"r2":1,"border_a":0.06},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":34,"x":0.76,"y":0.75,"rad":0.19477,"g":1,"a":0.01,"r2":1,"border_a":0.05},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":100,"x":0.34,"y":0.34,"rad":0.89269,"g":1,"a":0.01,"r2":1,"border_a":0.02},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":1,"sides":3,"y":0,"rad":1.82742,"ang":0.1885,"g":1,"a":0,"r2":1,"a2":0.01,"border_a":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"thick":1,"r":0.4,"b":0.3},"init_eqs_str":"a.d=0;a.la=0;a.wx=0;a.branch=0;a.sc=0;a.wa=0;a.wy=0;a.ra=0;a.wainc=0;","frame_eqs_str":"","point_eqs_str":"a.la=.25+.09*a.treb_att+.2*Math.sin(a.time);a.ra=-.25-.09*a.treb+.2*Math.cos(a.time);a.branch=Math.floor(rand(2));a.wx=.00001<Math.abs(equal(a.sc,0))?.5:a.wx;a.wy=.00001<Math.abs(equal(a.sc,0))?.1:a.wy;a.wx=.00001<Math.abs(equal(a.sc,1))?.5:a.wx;a.wy=.00001<Math.abs(equal(a.sc,1))?.4:a.wy;a.d=.00001<Math.abs(below(a.sc,2))?.3:.7*a.d+.003*a.bass_att;a.wainc=.00001<Math.abs(equal(a.branch,1))?a.la:a.ra;a.wa=.00001<Math.abs(below(a.sc,2))?1.57079635:a.wa+a.wainc;a.wx=.00001<Math.abs(above(a.sc,\n2))?a.wx+Math.cos(a.wa)*a.d:a.wx;a.wy=.00001<Math.abs(above(a.sc,2))?a.wy+Math.sin(a.wa)*a.d:a.wy;a.sc=.00001<Math.abs(equal(a.sc,10))?0:a.sc+1;a.a=.00001<Math.abs(below(a.sc,2))?0:.1;a.x=a.wx;a.y=a.wy;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//left and right angles\nla=.25+(treb_att*.09)+(.2*sin(time));\nra=-.25-(treb*.09)+(.2*cos(time));\n\n//left or right?\nbranch=int(rand(2));\n\n//base\nwx=if(equal(sc,0),.5,wx);\nwy=if(equal(sc,0),.1,wy);\n\nwx=if(equal(sc,1),.5,wx);\nwy=if(equal(sc,1),.4,wy);\n\n//calculate previous branch length\nd=if(below(sc,2),.3,.7*d+(bass_att*.003));\n\n//angle\nwainc=if(equal(branch,1),la,ra);\n\nwa=if(below(sc,2),3.1415927*.5,wa+wainc);\n\n//branches\nwx=if(above(sc,2),wx+cos(wa)*d,wx);\nwy=if(above(sc,2),wy+sin(wa)*d,wy);\n\n//sample count\nsc=if(equal(sc,10),0,sc+1); //depth setting\n\na=if(below(sc,2),0,.1);\n\nx=wx;\ny=wy;"},{"baseVals":{"enabled":1,"a":0.02},"init_eqs_str":"a.q3=0;a.xs=0;a.ys=0;","frame_eqs_str":"","point_eqs_str":"a.q3=bnot(a.q3);a.xs=.8;a.ys=.81;a.x=a.xs+equal(a.q3,0)*(Math.floor(rand(50))-25)*.04;a.y=a.ys+equal(a.q3,0)*(Math.floor(rand(50))-25)*.04;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"q3=bnot(q3);\n\nxs=.8;\nys=.81;\n\nx=xs+(equal(q3,0)*(int(rand(50))-25)*.04);\ny=ys+(equal(q3,0)*(int(rand(50))-25)*.04);"},{"baseVals":{"enabled":1,"thick":1,"r":0.4,"b":0.3,"a":0.01},"init_eqs_str":"a.d=0;a.la=0;a.wx=0;a.branch=0;a.sc=0;a.wa=0;a.wy=0;a.ra=0;a.wainc=0;","frame_eqs_str":"","point_eqs_str":"a.la=.25+.09*a.treb_att+.2*Math.sin(a.time);a.ra=-.25-.09*a.treb+.2*Math.cos(a.time);a.branch=Math.floor(rand(2));a.wx=.00001<Math.abs(equal(a.sc,0))?.502:a.wx;a.wy=.00001<Math.abs(equal(a.sc,0))?.1:a.wy;a.wx=.00001<Math.abs(equal(a.sc,1))?.502:a.wx;a.wy=.00001<Math.abs(equal(a.sc,1))?.4:a.wy;a.d=.00001<Math.abs(below(a.sc,2))?.3:.7*a.d+.003*a.bass_att;a.wainc=.00001<Math.abs(equal(a.branch,1))?a.la:a.ra;a.wa=.00001<Math.abs(below(a.sc,2))?1.57079635:a.wa+a.wainc;a.wx=.00001<\nMath.abs(above(a.sc,2))?a.wx+Math.cos(a.wa)*a.d:a.wx;a.wy=.00001<Math.abs(above(a.sc,2))?a.wy+Math.sin(a.wa)*a.d:a.wy;a.sc=.00001<Math.abs(equal(a.sc,10))?0:a.sc+1;a.a=.00001<Math.abs(below(a.sc,2))?0:.1;a.x=a.wx;a.y=a.wy;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//left and right angles\nla=.25+(treb_att*.09)+(.2*sin(time));\nra=-.25-(treb*.09)+(.2*cos(time));\n\n//left or right?\nbranch=int(rand(2));\n\n//base\nwx=if(equal(sc,0),.502,wx);\nwy=if(equal(sc,0),.1,wy);\n\nwx=if(equal(sc,1),.502,wx);\nwy=if(equal(sc,1),.4,wy);\n\n//calculate previous branch length\nd=if(below(sc,2),.3,.7*d+(bass_att*.003));\n\n//angle\nwainc=if(equal(branch,1),la,ra);\n\nwa=if(below(sc,2),3.1415927*.5,wa+wainc);\n\n//branches\nwx=if(above(sc,2),wx+cos(wa)*d,wx);\nwy=if(above(sc,2),wy+sin(wa)*d,wy);\n\n//sample count\nsc=if(equal(sc,10),0,sc+1); //depth setting\n\na=if(below(sc,2),0,.1);\n\nx=wx;\ny=wy;"},{"baseVals":{"enabled":1,"thick":1,"r":0.4,"b":0.3},"init_eqs_str":"a.d=0;a.la=0;a.wx=0;a.branch=0;a.sc=0;a.wa=0;a.wy=0;a.ra=0;a.wainc=0;","frame_eqs_str":"","point_eqs_str":"a.la=.25+.09*a.treb_att+.2*Math.sin(a.time);a.ra=-.25-.09*a.treb+.2*Math.cos(a.time);a.branch=Math.floor(rand(2));a.wx=.00001<Math.abs(equal(a.sc,0))?.498:a.wx;a.wy=.00001<Math.abs(equal(a.sc,0))?.1:a.wy;a.wx=.00001<Math.abs(equal(a.sc,1))?.498:a.wx;a.wy=.00001<Math.abs(equal(a.sc,1))?.4:a.wy;a.d=.00001<Math.abs(below(a.sc,2))?.3:.7*a.d+.003*a.bass_att;a.wainc=.00001<Math.abs(equal(a.branch,1))?a.la:a.ra;a.wa=.00001<Math.abs(below(a.sc,2))?1.57079635:a.wa+a.wainc;a.wx=.00001<\nMath.abs(above(a.sc,2))?a.wx+Math.cos(a.wa)*a.d:a.wx;a.wy=.00001<Math.abs(above(a.sc,2))?a.wy+Math.sin(a.wa)*a.d:a.wy;a.sc=.00001<Math.abs(equal(a.sc,10))?0:a.sc+1;a.a=.00001<Math.abs(below(a.sc,2))?0:.1;a.x=a.wx;a.y=a.wy;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"//left and right angles\nla=.25+(treb_att*.09)+(.2*sin(time));\nra=-.25-(treb*.09)+(.2*cos(time));\n\n//left or right?\nbranch=int(rand(2));\n\n//base\nwx=if(equal(sc,0),.498,wx);\nwy=if(equal(sc,0),.1,wy);\n\nwx=if(equal(sc,1),.498,wx);\nwy=if(equal(sc,1),.4,wy);\n\n//calculate previous branch length\nd=if(below(sc,2),.3,.7*d+(bass_att*.003));\n\n//angle\nwainc=if(equal(branch,1),la,ra);\n\nwa=if(below(sc,2),3.1415927*.5,wa+wainc);\n\n//branches\nwx=if(above(sc,2),wx+cos(wa)*d,wx);\nwy=if(above(sc,2),wy+sin(wa)*d,wy);\n\n//sample count\nsc=if(equal(sc,10),0,sc+1); //depth setting\n\na=if(below(sc,2),0,.1);\n\nx=wx;\ny=wy;"}],"init_eqs_str":"a.dx_residual=0;a.dy_residual=0;a.bass_thresh=0;a.rg=0;a.q9=0;","frame_eqs_str":"a.wave_r=.85+.25*Math.sin(.437*a.time+1);a.wave_g=.85+.25*Math.sin(.544*a.time+2);a.wave_b=.85+.25*Math.sin(.751*a.time+3);a.rot+=.01*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*a.time));a.cx+=.21*(.6*Math.sin(.374*a.time)+.4*Math.sin(.294*a.time));a.cy+=.21*(.6*Math.sin(.393*a.time)+.4*Math.sin(.223*a.time));a.dx+=.003*(.6*Math.sin(.234*a.time)+.4*Math.sin(.277*a.time));a.dy+=.003*(.6*Math.sin(.284*a.time)+.4*Math.sin(.247*a.time));a.decay-=.01*equal(mod(a.frame,6),0);a.dx+=\na.dx_residual;a.dy+=a.dy_residual;a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*(.96*(a.bass_thresh-1.3)+1.3);a.dx_residual=.016*equal(a.bass_thresh,2.13)*Math.sin(7*a.time)+(1-equal(a.bass_thresh,2.13))*a.dx_residual;a.dy_residual=.012*equal(a.bass_thresh,2.13)*Math.sin(9*a.time)+(1-equal(a.bass_thresh,2.13))*a.dy_residual;a.wave_x-=7*a.dx_residual;a.wave_y-=7*a.dy_residual;a.wave_mystery=.03*a.time;a.rg=Math.max(.77*a.rg,.02+.5*Math.min(2,1.3*Math.max(0,a.mid_att-\n1)));a.q9=a.rg;a.zoom+=.1*a.q9;","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"wave_r = 0.85 + 0.25*sin(0.437*time+1);\nwave_g = 0.85 + 0.25*sin(0.544*time+2);\nwave_b = 0.85 + 0.25*sin(0.751*time+3);\nrot = rot + 0.010*( 0.60*sin(0.381*time) + 0.40*sin(0.579*time) );\ncx = cx + 0.210*( 0.60*sin(0.374*time) + 0.40*sin(0.294*time) );\ncy = cy + 0.210*( 0.60*sin(0.393*time) + 0.40*sin(0.223*time) );\ndx = dx + 0.003*( 0.60*sin(0.234*time) + 0.40*sin(0.277*time) );\ndy = dy + 0.003*( 0.60*sin(0.284*time) + 0.40*sin(0.247*time) );\ndecay = decay - 0.01*equal(frame%6,0);\ndx = dx + dx_residual;\ndy = dy + dy_residual;\nbass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.3)*0.96+1.3);\ndx_residual = equal(bass_thresh,2.13)*0.016*sin(time*7) + (1-equal(bass_thresh,2.13))*dx_residual;\ndy_residual = equal(bass_thresh,2.13)*0.012*sin(time*9) + (1-equal(bass_thresh,2.13))*dy_residual;\nwave_x = wave_x - dx_residual*7;\nwave_y = wave_y - dy_residual*7;\nwave_mystery = time*0.03;\n\n//zoom = zoom + 0.005*( 0.60*sin(0.1934*time+3) + 0.40*sin(0.307*time+9) );\n//zoom = zoom + max(0,bass_att-1.1)*0.2;\n//warp = warp + max(0,treb_att-1.1)*1.0;\n\n// this is a great way to respond to beats:\n// once you get one, let it decay at a constant rate!!\nrg = max(rg*0.77, 0.02 + 0.5*min(2,max(0,mid_att-1)*1.3));\nq9 = rg;\n\nzoom = zoom + q9*0.1;","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 ret_1;\n  vec3 tmpvar_2;\n  tmpvar_2 = (texture (sampler_noise_lq, ((\n    ((texsize.xy * texsize_noise_lq.zw).x * uv)\n   / 2.0) + q23)) + 1.0).xyz;\n  vec3 tmpvar_3;\n  tmpvar_3 = (((texture (sampler_blur1, uv).xyz * scale1) + bias1) - 0.3);\n  vec2 tmpvar_4;\n  tmpvar_4.x = (0.3 * tmpvar_3.x);\n  tmpvar_4.y = tmpvar_3.y;\n  ret_1 = ((-0.4 * (\n    ((texture (sampler_blur1, ((uv / 4.0) + (0.4 * tmpvar_4))).xyz * scale1) + bias1)\n   - \n    (tmpvar_2 * 0.1)\n  )) + (texture (sampler_main, (uv + \n    (tmpvar_3 * 0.01)\n  .xy)).xyz + (tmpvar_2 * 0.1)));\n  vec3 tmpvar_5;\n  tmpvar_5.z = 0.0;\n  tmpvar_5.xy = roam_sin.xy;\n  vec3 tmpvar_6;\n  tmpvar_6.z = 0.0;\n  tmpvar_6.xy = roam_cos.yx;\n  vec3 tmpvar_7;\n  tmpvar_7.z = 0.0;\n  tmpvar_7.x = dot (tmpvar_5, vec3(0.32, 0.49, 0.29));\n  tmpvar_7.y = dot (tmpvar_6, vec3(0.32, 0.49, 0.29));\n  ret_1 = (ret_1 * (texture (sampler_noisevol_hq, (\n    (vec3(0.05, 0.05, 0.0) * (((uv.xyy + \n      (tmpvar_7 * 0.5)\n    ) * texsize.xyy) * texsize_noisevol_hq.zww))\n   + \n    (vec3(0.0, 0.0, 0.2) * time)\n  )) * 2.0).xyz);\n  float tmpvar_8;\n  tmpvar_8 = (1.0 - ((0.01 * q28) * (q28 * rad)));\n  ret_1 = (ret_1 * (0.98 * (tmpvar_8 * tmpvar_8)));\n  ret_1 = (ret_1 - 0.04);\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ret_1;\n  ret = tmpvar_9.xyz;\n }","comp":"uniform sampler2D sampler_rand00;\n shader_body { \n  vec3 tmpvar_1;\n  tmpvar_1.z = 0.0;\n  tmpvar_1.xy = roam_sin.xy;\n  vec3 tmpvar_2;\n  tmpvar_2.z = 0.0;\n  tmpvar_2.xy = roam_cos.yx;\n  vec3 tmpvar_3;\n  tmpvar_3.z = 0.0;\n  tmpvar_3.x = dot (tmpvar_1, vec3(0.32, 0.49, 0.29));\n  tmpvar_3.y = dot (tmpvar_2, vec3(0.32, 0.49, 0.29));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = (((texture (sampler_rand00, \n    fract(((1.0 - (\n      ((texture (sampler_blur2, uv).xyz * scale2) + bias2)\n    .yx * 0.6)) + (time * vec2(0.057, 0.036))))\n  ) * \n    ((1.0 + texture (sampler_main, uv).x) + ((texture (sampler_blur1, uv).xyz * scale1) + bias1).y)\n  ) * 0.4).xyz - (texture (sampler_noisevol_hq, (\n    (vec3(0.05, 0.05, 0.0) * (((uv.xyy + \n      (tmpvar_3 * 0.5)\n    ) * texsize.xyy) * texsize_noisevol_hq.zww))\n   + \n    (vec3(0.0, 0.0, 0.2) * time)\n  )) * 0.2).xyz);\n  ret = tmpvar_4.xyz;\n }","warp_hlsl":"shader_body {\n\n//uv = uv_orig;\nfloat corr = texsize.xy*texsize_noise_lq.zw;\nfloat2 uv1 = float2(uv.x-0.5,uv.y-0.5)*aspect.xy;\n\nfloat2 tmp = uv1;\ntmp.x = ang*3; tmp.y = rad;\nuv1 = tmp;\n\nfloat3 noise = (tex2D(sampler_noise_lq,corr*uv/2+q23)+1);\n\nfloat3 ret1 = GetBlur1 (uv)-.3;\nfloat3 crisp = tex2D(sampler_main, uv+ret1*.01 ) + noise*0.1;\nfloat3 blur = GetBlur1 (uv/4+.4*float2(.3*ret1.x,ret1.y)) - noise*.1;\n\nret = -.4*blur + crisp;\nfloat4 noise2 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy+float3(lum(roam_sin.xy),\n                                           lum(roam_cos.yx),\n                                           0)*0.5\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*0.2 \n                     );\nret *= (noise2)*2; \n    \n ret *= 0.98 * pow(1-.01*q28*q28*rad,2); \n  ret -= 0.04;\n}","comp_hlsl":"sampler sampler_rand00;\nshader_body\n{\nret = tex2D(sampler_rand00, frac(1-GetBlur2(uv).yx*0.6 + time*float2(0.057,.036)))\n*(1+GetPixel(uv).x + GetBlur1(uv).y)*0.4;\n\nfloat4 noise2 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy+float3(lum(roam_sin.xy),\n                                           lum(roam_cos.yx),\n                                           0)*0.5\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*0.2 \n                     );\nret -= (noise2)*.2; \n}"}