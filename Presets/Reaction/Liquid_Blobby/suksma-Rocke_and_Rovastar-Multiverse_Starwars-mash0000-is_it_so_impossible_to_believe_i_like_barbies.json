{"version":2,"baseVals":{"rating":5,"decay":0.96,"wave_mode":5,"wave_thick":1,"wrap":0,"darken_center":1,"wave_a":1.704,"wave_scale":0.047,"wave_smoothing":0.63,"wave_mystery":-0.8,"fshader":1,"sx":0.9803,"wave_r":0,"wave_b":0,"wave_x":0.4,"wave_y":0.4,"mv_x":64,"mv_y":48,"mv_l":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.wbass=0;","frame_eqs_str":"a.warp=0;a.wave_mystery=2;a.wave_x+=.1*Math.sin(a.treb);a.wave_y+=.1*Math.sin(a.bass);a.zoom=1.4+.15*Math.cos(.42*a.time);a.rot=.01*Math.sin(1.34*a.time)-.03*a.wbass;a.dx=.005*Math.sin(.646*a.time);a.dy=.005*Math.sin(.314*a.time);a.cx=.5+.05*Math.sin(.497*a.time);a.cy=.5+.05*Math.sin(.413*a.time);","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"warp = 0;\nwave_mystery = 2;\nwave_x = wave_x + 0.1*sin(treb);\nwave_y = wave_y +0.1*sin(bass);\nzoom = 1.4 +0.15*cos(time*0.42);\nrot = 0.01*sin(1.34*time)-0.03*wbass;\ndx = 0.005*sin(time*0.646);\ndy=0.005*sin(time*0.314);\ncx = 0.5 + 0.05*sin(0.497*time);\ncy = 0.5 +0.05*sin(0.413*time);","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 uv_1;\n  uv_1.y = uv.y;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3.x = roam_cos.x;\n  tmpvar_3.y = roam_sin.x;\n  vec2 tmpvar_4;\n  tmpvar_4 = (texsize_noise_lq.zw * texsize.xy);\n  uv_1.x = (uv.x + ((0.02 * \n    ((texture (sampler_noise_lq, ((\n      (0.1 * tmpvar_4)\n     * uv) + (tmpvar_3 * 0.1))).y * 2.0) - 1.0)\n  ) * aspect.x));\n  vec2 tmpvar_5;\n  tmpvar_5.x = roam_sin.y;\n  tmpvar_5.y = -(roam_cos.y);\n  uv_1.x = (uv_1.x + ((0.04 * \n    ((texture (sampler_noise_lq, ((\n      (0.0125 * tmpvar_4)\n     * uv_1) + (tmpvar_5 * 0.03))).z * 2.0) - 1.0)\n  ) * aspect.x));\n  ret_2 = (texture (sampler_main, uv_1).xyz * vec3(0.99, 0.98, 0.97));\n  ret_2 = (ret_2 + ((\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)).x - 0.5)\n   / 256.0) * 2.0));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_2;\n  ret = tmpvar_6.xyz;\n }","comp":"","warp_hlsl":"// to access a texture on disk: make a sampler.  This example loads \"noise_lq.{tga/jpg/etc}\".\n\n     // auto-binds; .xy = (w,h); .zw = (1/w,1/h)\n\nshader_body \n{\n    uv.x += 0.02 * (tex2D( sampler_noise_lq, \n                         uv*0.050*texsize_noise_lq.zw*texsize.xy*2\n                         + float2(roam_cos.x,roam_sin.x)*0.1 ).y*2-1)*aspect.x;\n    uv.x += 0.04 * (tex2D( sampler_noise_lq, \n                         uv*0.025*texsize_noise_lq.zw*texsize.xy*0.5\n                         + float2(roam_sin.y,-roam_cos.y)*0.03  ).z*2-1)*aspect.x;\n\n    ret = tex2D( sampler_main, uv ).xyz;\n\n    // darken over time\n    // cool idea: different falloff rates for the 3 colors-\n    ret *= float3(0.99,0.98,0.97);\n\n    // ERROR DIFFUSION DITHER - looks great\n    float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;\n    ret.xyz += (tex2D(sampler_noise_lq, dither_uv).x-0.5)/256.0*2; \n}","comp_hlsl":""}