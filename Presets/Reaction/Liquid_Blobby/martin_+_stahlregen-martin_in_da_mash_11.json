{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.527,"wave_smoothing":0.45,"modwavealphastart":0,"modwavealphaend":1.32,"warpanimspeed":0.01,"warpscale":0.01,"zoom":1.00183,"dx":1,"warp":0.01,"wave_r":0.8,"wave_g":0.49,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"additive":1,"rad":0.04896,"tex_ang":1.00531,"tex_zoom":1.53117,"r":0,"g":1,"b":1,"r2":0.83,"g2":0.93,"b2":0.8,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"\ntrel = time/3;\n\nx = .5+sin(trel*2);\ny = .5+cos(trel*1.3);\n\n\n\n\nrad = .1;\na = .8;","init_eqs_eel":"","frame_eqs_eel":"\ntrel = time/3;\n\nx = .5+sin(trel*2);\ny = .5+cos(trel*1.3);\n\n\n\n\nrad = .1;\na = .8;"},{"baseVals":{"thickoutline":1,"textured":1,"x":0.26,"y":0.2,"rad":0.39317,"tex_zoom":0.9355,"r":0,"g":0.55,"b":0.5,"g2":0.4,"b2":0.4,"a2":0.07,"border_r":0.3,"border_g":0.7,"border_b":0.8,"border_a":0.4,"enabled":0},"init_eqs_str":"","frame_eqs_str":"tex_zoom = q27;","init_eqs_eel":"","frame_eqs_eel":"tex_zoom = q27;"},{"baseVals":{"sides":44,"x":0.503,"rad":0.03886,"tex_zoom":0.60986,"g":0.1,"a":0.9,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"x = rand(50)/50;\ny = .5;\n\nr = .4;\ng = .6;\nb = 1;\nr2 = r;\ng2 = g;\nb2 = b;\n\na2 = min(q21/2 ,1)/2;\n\na = 0;\n\nrad = a2 * (.1+abs(x-.5))/2 ;","init_eqs_eel":"","frame_eqs_eel":"x = rand(50)/50;\ny = .5;\n\nr = .4;\ng = .6;\nb = 1;\nr2 = r;\ng2 = g;\nb2 = b;\n\na2 = min(q21/2 ,1)/2;\n\na = 0;\n\nrad = a2 * (.1+abs(x-.5))/2 ;"},{"baseVals":{"thickoutline":1,"textured":1,"x":0.26,"y":0.76,"rad":0.39478,"tex_zoom":0.49981,"g":1,"b":1,"r2":1,"b2":1,"a2":0.8,"border_r":0.2,"border_g":0.7,"border_b":0.5,"border_a":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"tex_zoom = q27/2;","init_eqs_eel":"","frame_eqs_eel":"tex_zoom = q27/2;"}],"waves":[{"baseVals":{"samples":282,"sep":20,"thick":1,"additive":1,"scaling":7.858,"smoothing":0.1,"r":0.2,"g":0.3,"a":0.6,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"usedots":1,"thick":1,"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"xi = rand(100)/100;\nyi = rand(100)/100;\n\nx = xi; y = yi;\n\na = q21/15;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"xi = rand(100)/100;\nyi = rand(100)/100;\n\nx = xi; y = yi;\n\na = q21/15;"},{"baseVals":{"thick":1,"scaling":0.89152,"smoothing":0.82,"r":0,"g":0.2,"b":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.rad=0;a.ready=0;a.index2=0;a.index=0;a.q22=0;a.q21=0;a.movex=0;a.q1=0;a.dec_med=0;a.rott=0;a.ly=0;a.is_beat=0;a.q23=0;a.k1=0;a.q24=0;a.dec_slow=0;a.q11=0;a.q10=0;a.q4=0;a.is_beat2=0;a.alt=0;a.q26=0;a.p2=0;a.avg=0;a.q19=0;a.beat=0;a.p1=0;a.lx=0;a.peak=0;a.q2=0;a.q27=0;a.q3=0;a.t0=0;a.q28=0;a.q30=0;a.q20=0;a.step=0;a.shift=0;a.step=0;","frame_eqs_str":"a.dec_med=pow(.8,div(30,a.fps));a.dec_slow=pow(.99,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.4+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,4);a.index2=mod(a.index2+a.is_beat*bnot(a.index),4);a.q20=a.avg;a.q21=a.beat;a.q22=a.peak;a.q23=a.index;a.q24=a.is_beat;a.q26=a.bass_att+\na.mid_att+a.treb_att;a.ready=a.is_beat*bnot(a.ready)+bnot(a.is_beat2)*a.ready;a.is_beat2=a.ready*above(a.time,a.t0+.2);a.q19=a.is_beat2;a.k1=a.is_beat*equal(a.index,0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_med*a.p2+(1-a.dec_med)*a.p1;a.rott=div(3.14159265359*a.p2,2);a.q27=a.index+1;a.q28=a.index2+1;a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.q3=-a.q2;a.q4=a.q1;a.movex+=div(.06,a.fps);a.q30=a.movex;a.alt=a.alt*(1-a.dec_med)+a.q26*a.dec_med;a.q26-=a.alt;a.step=a.step+Math.max(a.q26,0)+a.q24-\nMath.floor(a.step);a.q30=a.step;a.q30=a.movex;a.lx+=div(.03,a.fps);a.ly+=div(.3,a.fps)*a.q2;a.q10=a.lx;a.q11=0;a.zoom=1+0*a.rad;a.dx=0;a.dy=0;a.rot=.1*a.q1;","pixel_eqs_str":"","init_eqs_eel":"shift = 0;\nstep = 0;","frame_eqs_eel":"dec_med = pow (0.8, 30/fps);\ndec_slow = pow (0.99, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .4+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %4;\nindex2 = (index2 + is_beat*bnot(index))%4;\n\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq23 = index;\nq24 = is_beat;\nq26 = bass_att + mid_att + treb_att;\n\nready = is_beat * bnot(ready) + bnot(is_beat2)*ready;\nis_beat2 = ready * above (time, t0+.2);\nq19 = is_beat2;\n\n//k1 =  is_beat*bnot(index)*bnot(index2);\n\nk1 =  is_beat*equal(index,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\nrott = p2 * 3.14159265359/2;\n\nq27 = index+1;\nq28 = index2+1;\n\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\nmovex = movex +.002*30/fps;\nq30 = movex;\n\nalt = alt * (1-dec_med) + q26*dec_med;\nq26 = q26 - alt;\nstep = step + 1*max(q26,0) + q24 -int(step);\nq30 = step;\nq30 = movex;\n\nlx = lx + .001*30/fps;\nly = ly + .01*30/fps*q2;\nq10 = lx;\nq11 = 0;\n\n\nzoom = (1.0  + .0*rad);\ndx = .0;\ndy = .00;\nrot = .1*q1;","pixel_eqs_eel":"","warp":"float xlat_mutabledx;\nfloat xlat_mutabledy;\nvec2 xlat_mutableuv2;\nvec2 xlat_mutablezz;\n shader_body { \n  vec2 uv_1;\n  vec3 crisp_2;\n  vec2 tmpvar_3;\n  tmpvar_3.y = 0.0;\n  tmpvar_3.x = texsize.w;\n  vec2 tmpvar_4;\n  tmpvar_4.x = 0.0;\n  tmpvar_4.y = texsize.z;\n  xlat_mutablezz = ((uv * texsize.xy) * 0.01);\n  vec2 tmpvar_5;\n  tmpvar_5.x = (cos((xlat_mutablezz.y * q1)) * sin(-(xlat_mutablezz.y)));\n  tmpvar_5.y = (sin(xlat_mutablezz.x) * cos((xlat_mutablezz.y * q2)));\n  uv_1 = (uv - ((tmpvar_5 * texsize.zw) * (8.0 + \n    (6.0 * q11)\n  )));\n  xlat_mutableuv2 = (((uv_1 / 2.0) * q27) / 4.0);\n  xlat_mutabledx = dot ((texture (sampler_main, (xlat_mutableuv2 + tmpvar_3)).xyz - texture (sampler_main, (xlat_mutableuv2 - tmpvar_3)).xyz), vec3(0.32, 0.49, 0.29));\n  xlat_mutabledy = dot ((texture (sampler_main, (xlat_mutableuv2 + tmpvar_4)).xyz - texture (sampler_main, (xlat_mutableuv2 - tmpvar_4)).xyz), vec3(0.32, 0.49, 0.29));\n  float tmpvar_6;\n  tmpvar_6 = (0.15 + (0.1 * q28));\n  vec2 tmpvar_7;\n  tmpvar_7 = (xlat_mutableuv2 + (time / 100.0));\n  xlat_mutabledx = (xlat_mutabledx + (tmpvar_6 * (texture (sampler_noise_hq, tmpvar_7).x - 0.5)));\n  xlat_mutabledy = (xlat_mutabledy + (tmpvar_6 * (texture (sampler_noise_hq, tmpvar_7).y - 0.5)));\n  vec2 tmpvar_8;\n  tmpvar_8.x = xlat_mutabledx;\n  tmpvar_8.y = xlat_mutabledy;\n  xlat_mutablezz = tmpvar_8;\n  crisp_2 = (texture (sampler_main, (uv_1 + (tmpvar_8 * 0.04))).xyz + texture (sampler_main, uv_1).xyz);\n  crisp_2 = (crisp_2 * 0.5);\n  crisp_2 = (crisp_2 + ((0.05 * \n    (0.9 + (0.1 * roam_cos))\n  .xyz) - (\n    sqrt(dot (tmpvar_8, tmpvar_8))\n   * 0.3)));\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ((crisp_2 * 0.97) - 0.015);\n  ret = tmpvar_9.xyz;\n }","comp":"vec2 xlat_mutabledz;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv3;\nvec2 xlat_mutableuv4;\n shader_body { \n  vec2 uv_1;\n  float inten_3;\n  float dist_4;\n  vec3 ret_5;\n  uv_1 = (uv - 0.5);\n  xlat_mutabledz = vec2(0.0, 0.0);\n  dist_4 = 1.0;\n  inten_3 = 1.0;\n  xlat_mutableret1 = vec3(0.0, 0.0, 0.0);\n  for (float n_2 = 0.0; n_2 <= 4.0; n_2 += 1.0) {\n    dist_4 = (1.0 - fract((\n      (0.2 * n_2)\n     + \n      (time / 4.0)\n    )));\n    inten_3 = ((sqrt(dist_4) * (1.0 - dist_4)) * 2.0);\n    vec2 tmpvar_6;\n    tmpvar_6.y = 0.0;\n    tmpvar_6.x = (time / 8.0);\n    xlat_mutableuv3 = (((\n      (2.0 * uv_1)\n     * dist_4) + 0.4) + tmpvar_6);\n    vec2 tmpvar_7;\n    tmpvar_7.y = 0.0;\n    tmpvar_7.x = texsize.z;\n    vec2 tmpvar_8;\n    tmpvar_8.y = 0.0;\n    tmpvar_8.x = texsize.z;\n    xlat_mutabledz.x = (xlat_mutabledz.x + (inten_3 * dot (\n      (texture (sampler_main, (xlat_mutableuv3 + tmpvar_7)).xyz - texture (sampler_main, (xlat_mutableuv3 - tmpvar_8)).xyz)\n    , vec3(0.32, 0.49, 0.29))));\n    vec2 tmpvar_9;\n    tmpvar_9.x = 0.0;\n    tmpvar_9.y = texsize.w;\n    vec2 tmpvar_10;\n    tmpvar_10.x = 0.0;\n    tmpvar_10.y = texsize.w;\n    xlat_mutabledz.y = (xlat_mutabledz.y + (inten_3 * dot (\n      (texture (sampler_main, (xlat_mutableuv3 + tmpvar_9)).xyz - texture (sampler_main, (xlat_mutableuv3 - tmpvar_10)).xyz)\n    , vec3(0.32, 0.49, 0.29))));\n    xlat_mutableret1 = max (xlat_mutableret1, (texture (sampler_main, xlat_mutableuv3).xyz * inten_3));\n  };\n  uv_1 = (uv_1 + (xlat_mutabledz * 14.0));\n  xlat_mutableuv4 = (uv_1 - vec2(0.2, -0.1));\n  float tmpvar_11;\n  tmpvar_11 = (0.5 * clamp ((1.0/(\n    (abs(uv_1.y) + 0.1)\n  )), 0.0, 12.0));\n  vec2 tmpvar_12;\n  tmpvar_12.x = (uv_1.x * tmpvar_11);\n  tmpvar_12.y = tmpvar_11;\n  vec3 tmpvar_13;\n  tmpvar_13.xy = vec2(0.0, 0.0);\n  tmpvar_13.z = clamp ((1.0 - (3.0 * uv_1.y)), 0.0, 1.0);\n  ret_5 = (vec3(0.0, 0.1, 0.1) + (0.1 * tmpvar_13));\n  ret_5 = (ret_5 + (vec3(dot (texture (sampler_noise_hq, \n    (tmpvar_12 + (0.04 * time))\n  ), vec4(0.32, 0.49, 0.29, 0.0))) * (\n    (clamp ((1.0 - (12.0 * uv_1.y)), 0.0, 1.0) * 0.1)\n   / \n    (0.03 + sqrt(dot (xlat_mutableuv4, xlat_mutableuv4)))\n  )));\n  ret_5 = (ret_5 + ((0.4 * xlat_mutableret1) + (\n    (0.25 * q22)\n   * xlat_mutableret1)));\n  vec4 tmpvar_14;\n  tmpvar_14.w = 1.0;\n  tmpvar_14.xyz = ret_5;\n  ret = tmpvar_14.xyz;\n }","warp_hlsl":"float3 color;\nfloat2 uv2, zz;\nfloat dx, dy;\nshader_body {\n\nfloat2 uv1 = (uv-.5)*aspect.xy;\n\nfloat2 hor = float2 (texsize.w,0);\nfloat2 ver = float2 (0,texsize.z);\n\n\nfloat2 k1 = float2((uv.x), (uv.y));\n\nfloat3 ret1 = GetBlur1(uv) ;\n\nzz = uv.xy * texsize.xy *(.01);\nfloat h1 = (cos(zz.y*q1) * sin(-zz.y));\nfloat h2 = (sin(zz.x) * cos(zz.y*q2));\nuv.xy -= float2(h1,h2)*texsize.zw * (8+6*q11);\n\nuv2 = uv/2*q27/4; //variieren\n\nfloat2 uv3 = uv2; //Krausen nur mit uv\n\ndx = lum(GetPixel(uv3+hor) - GetPixel(uv3-hor));\ndy = lum(GetPixel(uv3+ver) - GetPixel(uv3-ver));\n\n//dx = 0; dy = 0;\n\ndx *=1; dy *= 1;;\nfloat f1 = .15+.1*q28;\nfloat2 uv4 = uv2+time/100;\n\ndx += f1*(tex2D(sampler_noise_hq,uv4).x-.5); \ndy += f1*(tex2D(sampler_noise_hq,uv4).y-.5); \n\ncolor =  .9+.1*roam_cos;\n\nfloat2 dz = float2 (dx,dy);\n\nzz = dz;\n\nfloat3 crisp= tex2D(sampler_main,uv+zz*.04);\nfloat3 crisp2 = tex2D(sampler_main,uv);\ncrisp += crisp2;\ncrisp *= .5;\ncrisp +=.05*color - length(zz)*.3;\n\nret1 = crisp;\nret = ret1 * .97 -  .015 ;\n}","comp_hlsl":"float3 ret1, neu, dx, dy;\nfloat2 rs,rs2,uv1,uv2, uv3,uv4,dz;\nshader_body\n{\nfloat2 uv2;\nfloat ang2, c, s;\nuv -= 0.5;\n//uv *= aspect.xy;    \ndz = 0;\nfloat2 tmp = uv;\nfloat dist = 1;\nfloat inten = 1;\nfloat mask = 0;\nret1 = 0;\nint anz = 4;\nfloat n = 0;\nwhile (n <= anz) {\n    ang2 = 6.28*n/anz;\n    dist = 1-frac(.2*n+time/4); //evtl sqrt !;\n\n    inten =  sqrt(dist)*(1-dist)*2;\n\n    uv3 = 2*uv*dist + .4 + float2(time/8,0);\n    neu = GetPixel(uv3);\n    dz.x += inten*lum(GetPixel(uv3+float2(texsize.z,0)) \n          - GetPixel (uv3-float2(texsize.z,0)));\n    dz.y += inten*lum(GetPixel(uv3+float2(0,texsize.w)) \n          - GetPixel (uv3-float2(0,texsize.w)));\n    ret1 = max(ret1,neu*inten) ;\nn++;\n}\n\n\n//clouds\nuv += dz*14;\nuv4 = uv-float2 (0.2,-.1);\nfloat z = .5*clamp(1/(abs(uv.y)+.1),0,12);\nrs = float2(uv.x * z, z);\nfloat3 clouds = lum(tex2D (sampler_noise_hq,rs+.04*time));\nclouds *= saturate(1-12*uv.y) * 0.1/(.03+length(uv4));\n\nfloat3 sky = .1*float3 (0,0,saturate(1-3*uv.y));\nret = .1*float3(0,1,1)+ sky;\nret += clouds;\n\nret += .4*ret1+.25*q22*ret1;\n\n}"}