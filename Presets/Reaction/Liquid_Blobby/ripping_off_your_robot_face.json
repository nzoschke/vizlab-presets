{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.964,"echo_zoom":1.168,"wave_mode":6,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"wave_a":0.312,"wave_scale":1.229,"wave_smoothing":0,"wave_mystery":0.2,"modwavealphastart":0.71,"modwavealphaend":1.3,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0,"ob_b":0.2,"ob_a":0.5,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":64,"mv_y":48,"mv_l":0,"mv_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"sides":100,"textured":1,"rad":0.14392,"tex_zoom":4.57482,"g":1,"b":1,"a":0.9,"r2":0.84,"g2":0.93,"b2":1,"border_r":0.8,"border_g":0,"border_a":0.4},"init_eqs_str":"a.q24=0;","frame_eqs_str":"a.textured=bnot(a.q24);a.rad=.2*Math.max(Math.sin(div(a.time,9))-.6,0);a.x=.5+.01*Math.sin(div(a.time,2));a.border_r=.4*(1.5+Math.sin(div(a.time,18)));a.border_g=.4*(1.5+Math.sin(div(a.time,38)));a.border_b=.4*(1.5+Math.sin(div(a.time,28)));","init_eqs_eel":"","frame_eqs_eel":"textured = bnot(q24);\nrad = .2*max(sin(time/9)-.6,0);\nx = .5 + .01 * sin(time/2); //slightly off-center\n\nborder_r = .4 * (1.5+sin(time/18));\nborder_g = .4 * (1.5+sin(time/38));\nborder_b = .4 * (1.5+sin(time/28));"},{"baseVals":{"enabled":1,"sides":63,"additive":1,"rad":1.99863,"tex_zoom":0.49981,"g":1,"b":1,"a":0.1,"r2":1,"b2":1,"a2":0.6,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0},"init_eqs_str":"a.trel=0;a.q20=0;a.q28=0;a.q26=0;","frame_eqs_str":"a.trel=div(a.time,2)+a.q20;a.x=.5+Math.sin(a.trel);a.y=.5+Math.cos(1.3*a.trel+div(a.q28,3));a.rad=.03;a.a=div(a.q26,4)+.2;a.a2=0;a.a=1;","init_eqs_eel":"","frame_eqs_eel":" \ntrel = time/2+q20;\n\nx = .5+sin(trel);\ny = .5+cos(trel*1.3 +q28/3);\nrad = .03;\na = q26/4+.2;  a2 = 0;\na = 1;"},{"baseVals":{"sides":63,"textured":1,"x":0.123,"y":0,"rad":0.27319,"tex_zoom":0.49981,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":63,"textured":1,"y":1,"rad":0.54822,"tex_zoom":0.49981,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"scaling":0.89152,"smoothing":0.82,"a":0.6},"init_eqs_str":"a.xang=0;a.ampl=0;a.fov=0;a.winkel=0;a.t1=0;a.yang=0;a.t3=0;a.vol_m=0;a.my=0;a.oz=0;a.t_rel=0;a.pulse=0;a.exc=0;a.mz=0;a.q26=0;a.oy=0;a.mx=0;a.t2=0;a.vol=0;a.zang=0;a.monitor=0;a.t_abs=0;a.ox=0;","frame_eqs_str":"a.t1=Math.cos(div(a.time,3));a.t2=Math.sin(div(a.time,7));a.vol=a.mid_att+a.treb_att;a.vol_m=.999*a.vol_m+.001*a.vol;a.exc=above(a.vol,1.1*a.vol_m);a.pulse=.95*a.pulse+.05*a.exc;a.winkel+=div(a.pulse,3);a.t3=a.winkel;","point_eqs_str":"a.t_abs=a.sample;a.t_rel=a.sample-div(a.time,6);a.ampl=Math.sin(3*a.t_abs);a.ox=3*Math.sin(a.time)+a.ampl*Math.sin(267*a.t_rel);a.oy=3*Math.cos(a.time)+a.ampl*Math.cos(277*a.t_rel);a.oz=0*Math.cos(div(a.t_rel*a.time,23))+4*a.t_abs;a.r=sqr(Math.sin(3.4*a.t_rel));a.g=sqr(Math.sin(2.3*a.t_rel));a.b=sqr(Math.cos(.9*a.t_rel));a.a=.2*Math.cos(1*a.t_abs)+div(a.q26,16);a.xang=a.t2+div(a.t3,3);a.yang=a.t1*a.t2-div(a.t3,4);a.zang=a.t3;a.fov=.2;a.monitor=a.t2;a.mx=a.ox*Math.cos(a.zang)-\na.oy*Math.sin(a.zang);a.my=a.ox*Math.sin(a.zang)+a.oy*Math.cos(a.zang);a.ox=a.mx;a.oy=a.my;a.mx=a.ox*Math.cos(a.yang)+a.oz*Math.sin(a.yang);a.mz=-a.ox*Math.sin(a.yang)+a.oz*Math.cos(a.yang);a.ox=a.mx;a.oz=a.mz;a.my=a.oy*Math.cos(a.xang)-a.oz*Math.sin(a.xang);a.mz=a.oy*Math.sin(a.xang)+a.oz*Math.cos(a.xang);a.oy=a.my;a.oz=a.mz;a.oz-=6;a.x=div(a.ox*a.fov,a.oz)+.5;a.y=div(a.oy*a.fov,a.oz)+.5;","init_eqs_eel":"","frame_eqs_eel":"t1 = 1*cos(time/3);\nt2 = 1*sin(time/7);\n\nvol = mid_att + treb_att;\nvol_m = vol_m*0.999+vol*0.001;\nexc = above (vol, vol_m*1.1);\n\npulse = 0.95*pulse + 0.05*exc;\nwinkel = winkel + pulse/3;\nt3 = winkel;\n\n\n","point_eqs_eel":"  //Alle Funktionen muessen rel. zu t_rel sein\n\n\nt_abs = sample;\nt_rel = sample-time/6;\nampl = sin(t_abs*3)-0.0;\n\nox = 3*sin (time) + ampl*(sin (t_rel*267)) ;\noy = 3*cos (time) + ampl*(cos (t_rel*277)) ;\noz = 0*cos (t_rel*time/23)+t_abs*4 ;\n\n\nr = sqr(sin(t_rel*3.4));\ng = sqr(sin(t_rel*2.3));\nb = sqr (cos(t_rel*.9));\n\na= 0.2*(cos(t_abs*1 )) + q26/16 ;\n\nxang = t2+t3/3;\nyang = t1*t2-t3/4;\nzang = t3;\nfov = 0.2;\n\nmonitor = t2;\n\n// Rotation um x,y,z\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\n\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz =  mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 6;\nx = ox*fov/oz +0.5;\n//x = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n"},{"baseVals":{"enabled":1,"samples":232,"usedots":1,"additive":1,"scaling":0.89152,"smoothing":0.82,"a":0.1},"init_eqs_str":"a.xang=0;a.ampl=0;a.fov=0;a.t1=0;a.yang=0;a.my=0;a.oz=0;a.t_rel=0;a.mz=0;a.oy=0;a.mx=0;a.t2=0;a.zang=0;a.monitor=0;a.t_abs=0;a.ox=0;","frame_eqs_str":"a.t1=2*Math.sin(div(a.time,15));a.t2=2*Math.sin(div(a.time,11));a.monitor=a.time;","point_eqs_str":"a.t_abs=a.sample;a.t_rel=a.sample-div(a.time,5);a.ampl=a.time;a.ox=10*a.ampl*Math.sin(68*a.t_abs);a.oy=10*a.ampl*Math.cos(28*a.t_abs);a.oz=10*a.ampl*Math.cos(128*a.t_abs);a.r=Math.sin(1335*a.t_abs)+1;a.g=Math.sin(1783*a.t_abs)+1;a.b=div(Math.floor(rand(5)),5);a.a=.5+.25*Math.sin(15*a.t_rel);a.xang=a.t1;a.yang=a.t1;a.zang=a.t1;a.fov=.12;a.mx=a.ox*Math.cos(a.zang)-a.oy*Math.sin(a.zang);a.my=a.ox*Math.sin(a.zang)+a.oy*Math.cos(a.zang);a.ox=a.mx;a.oy=a.my;a.mx=a.ox*Math.cos(a.yang)+\na.oz*Math.sin(a.yang);a.mz=-a.ox*Math.sin(a.yang)+a.oz*Math.cos(a.yang);a.ox=a.mx;a.oz=a.mz;a.my=a.oy*Math.cos(a.xang)-a.oz*Math.sin(a.xang);a.mz=a.oy*Math.sin(a.xang)+a.oz*Math.cos(a.xang);a.oy=a.my;a.oz=a.mz;a.oz-=6;a.x=div(a.ox*a.fov,a.oz)+.5;a.y=div(a.oy*a.fov,a.oz)+.5;","init_eqs_eel":"","frame_eqs_eel":"t1 = 2*sin(time/15);\nt2 = 2*sin(time/11);\nmonitor = time;","point_eqs_eel":"\nt_abs = sample;\nt_rel = sample-time/5;\nampl = time;\n\nox = ampl*10*sin (t_abs*68);\noy = ampl*10*cos (t_abs*28);\noz = ampl*10*cos (t_abs*128);\n\n\nr = sin(t_abs*1335)+1;\ng = sin(t_abs*1783)+1 ;\nb = int(rand(5))/5 ;\n\na=0.5+0.25 * sin(t_rel*15);\nxang = t1 ;\nyang = t1;\nzang = t1;\nfov = 0.12;\n\n\n// Rotation um x,y,z\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\n\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 6;\nx = ox*fov/oz +0.5;\n//x = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;"},{"baseVals":{"scaling":0.89152,"smoothing":0.82,"a":0.1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"ampl = time - int(time);\naml = ampl/2;\nx = .5 + ampl * sin(sample*230);\ny = .5 + ampl * cos(sample*230);\na = .03;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"ampl = time - int(time);\naml = ampl/2;\nx = .5 + ampl * sin(sample*230);\ny = .5 + ampl * cos(sample*230);\na = .03;"},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.oldq4=0;a.runtreb=0;a.q25=0;a.q12=0;a.q18=0;a.q22=0;a.q21=0;a.vt=0;a.q13=0;a.q15=0;a.q29=0;a.q6=0;a.q1=0;a.q5=0;a.vb=0;a.q9=0;a.pi23=0;a.oldq8=0;a.q31=0;a.q23=0;a.q24=0;a.q11=0;a.q10=0;a.atime=0;a.q4=0;a.oldq6=0;a.q16=0;a.q26=0;a.runbass=0;a.q19=0;a.q17=0;a.runmids=0;a.q2=0;a.q27=0;a.q14=0;a.q3=0;a.vvm=0;a.q32=0;a.vvb=0;a.q7=0;a.q28=0;a.vm=0;a.q30=0;a.q20=0;a.vvt=0;a.q8=0;","frame_eqs_str":"a.vb=.95*a.vb+(1-a.vb)*pow(a.bass_att,2)*.02;a.vvb=.95*a.vvb+(1-a.vvb)*a.vb*.01;a.vm=.95*a.vm+(1-a.vm)*pow(a.mid_att,2)*.02;a.vvm=.95*a.vvm+(1-a.vvm)*a.vm*.01;a.vt=.95*a.vt+(1-a.vt)*pow(a.treb_att,2)*.02;a.vvt=.95*a.vvt+(1-a.vvt)*a.vt*.01;a.vvb=Math.min(1,Math.max(0,a.vvb));a.vvm=Math.min(1,Math.max(0,a.vvm));a.vvt=Math.min(1,Math.max(0,a.vvt));a.runbass+=a.vvb;a.runmids+=a.vvm;a.runtreb+=a.vvt;a.pi23=1.33333333333332*Math.asin(-1);a.atime=.05*(a.runtreb+a.runmids+a.runbass);\na.q8=.5*(Math.sin(a.atime-0*a.pi23)+1);a.q9=.5*(Math.sin(a.atime-1*a.pi23)+1);a.q10=.5*(Math.sin(a.atime-2*a.pi23)+1);a.vb=.95*a.vb+(1-a.vb)*pow(a.bass_att,2)*.02;a.vvb=.95*a.vvb+(1-a.vvb)*a.vb*.01;a.vm=.95*a.vm+(1-a.vm)*pow(a.mid_att,2)*.02;a.vvm=.95*a.vvm+(1-a.vvm)*a.vm*.01;a.vt=.95*a.vt+(1-a.vt)*pow(a.treb_att,2)*.02;a.vvt=.95*a.vvt+(1-a.vvt)*a.vt*.01;a.vvb=Math.min(1,Math.max(0,a.vvb));a.vvm=Math.min(1,Math.max(0,a.vvm));a.vvt=Math.min(1,Math.max(0,a.vvt));a.q1=10*(a.vvb+a.vvm+a.vvt);a.q2=10*\n(a.vvb+a.vvm+a.vvt);a.q3=10*(a.vvb+a.vvm+a.vvt);a.q4=10*(a.vvb+a.vvm+a.vvt);a.q5=10*(a.vvb+a.vvm+a.vvt);a.q6=10*(a.vvb+a.vvm+a.vvt);a.q7=10*(a.vvb+a.vvm+a.vvt);a.q11=10*(a.vvb+a.vvm+a.vvt);a.q12=10*(a.vvb+a.vvm+a.vvt);a.q13=10*(a.vvb+a.vvm+a.vvt);a.q14=10*(a.vvb+a.vvm+a.vvt);a.q15=10*(a.vvb+a.vvm+a.vvt);a.q16=10*(a.vvb+a.vvm+a.vvt);a.q17=10*(a.vvb+a.vvm+a.vvt);a.q18=10*(a.vvb+a.vvm+a.vvt);a.q19=10*(a.vvb+a.vvm+a.vvt);a.q20=10*(a.vvb+a.vvm+a.vvt);a.q21=10*(a.vvb+a.vvm+a.vvt);a.q22=10*(a.vvb+a.vvm+\na.vvt);a.q23=10*(a.vvb+a.vvm+a.vvt);a.q24=10*(a.vvb+a.vvm+a.vvt);a.q25=10*(a.vvb+a.vvm+a.vvt);a.q26=10*(a.vvb+a.vvm+a.vvt);a.q27=10*(a.vvb+a.vvm+a.vvt);a.q28=10*(a.vvb+a.vvm+a.vvt);a.q29=10*(a.vvb+a.vvm+a.vvt);a.q30=10*(a.vvb+a.vvm+a.vvt);a.q31=10*(a.vvb+a.vvm+a.vvt);a.q32=10*(a.vvb+a.vvm+a.vvt);a.warp=0;a.wave_a=0;a.decay=.976;a.decay=.99;a.q8=a.oldq8+.0002*div(pow(1+1.2*a.bass+.4*a.bass_att+.1*a.treb+.1*a.treb_att+.1*a.mid+.1*a.mid_att,6),a.fps);a.oldq8=a.q8;a.q7=.00004*div(pow(1+1.2*a.bass+.4*\na.bass_att+.1*a.treb+.1*a.treb_att+.1*a.mid+.1*a.mid_att,6),a.fps);a.q6=a.oldq6+.0002*div(pow(1+.1*a.bass+.1*a.bass_att+1.2*a.treb+.4*a.treb_att+.1*a.mid+.1*a.mid_att,6),a.fps);a.oldq6=a.q6;a.q4=a.oldq4+.0002*div(pow(1+.1*a.bass+.1*a.bass_att+.1*a.treb+.1*a.treb_att+1.2*a.mid+.4*a.mid_att,6),a.fps);a.oldq4=a.q4;a.q8=a.oldq8+.0002*div(pow(1+1.2*a.bass+.4*a.bass_att+.1*a.treb+.1*a.treb_att+.1*a.mid+.1*a.mid_att,6),a.fps);a.oldq8=a.q8;a.q8=a.oldq8+.0002*div(pow(1+1.2*a.bass+.4*a.bass_att+.1*a.treb+.1*\na.treb_att+.1*a.mid+.1*a.mid_att,6),a.fps);a.oldq8=a.q8;a.ob_size=Math.min(Math.max(0,a.q7-.3)+.005,.9);a.ob_b=Math.max(0,.2*Math.sin(.2542*a.q8)+.1);a.ob_r=Math.max(0,.4*Math.sin(.985*a.q8)+.2);a.ob_g=Math.max(0,.3*Math.sin(.8711*a.q8)+.1);a.ob_a=Math.max(0,.3*(a.q7-.2))+.1;a.ib_r=1-(.00001<Math.abs(a.ob_size-.005)?0:1);a.ib_g=.042*a.ib_r*Math.sin(.643*a.time);a.ib_b=.042*a.ib_r*Math.sin(.853*a.time);a.ib_a=1;a.monitor=a.ob_a;a.monitor=a.q6;","pixel_eqs_str":"a.dx=a.dx+.008*Math.sin((2*a.y-1)*a.meshx)+.008*Math.sin((2*a.y-1)*a.meshx*1.3333);a.dy=a.dy+.008*Math.cos((2*a.x-1)*a.meshx*1.3333)+.008*Math.cos((2*a.x-1)*a.meshx);","init_eqs_eel":"","frame_eqs_eel":"//martin no religion / my omniversal absence for changing the background light\nvb = vb*0.95 + (1-vb)*pow(bass_att,2)*0.02;\nvvb = vvb*0.95 + (1-vvb)*vb*0.01;\nvm = vm*0.95 + (1-vm)*pow(mid_att,2)*0.02;\nvvm = vvm*0.95 + (1-vvm)*vm*0.01;\nvt = vt*0.95 + (1-vt)*pow(treb_att,2)*0.02;\nvvt = vvt*0.95 + (1-vvt)*vt*0.01;\nvvb = min(1,max(0,vvb));\nvvm = min(1,max(0,vvm));\nvvt = min(1,max(0,vvt));\nrunbass=runbass+vvb;\nrunmids=runmids+vvm ;\nruntreb=runtreb+vvt;\npi23=4*asin(-1)*.33333333333333;\natime=(runtreb+runmids+runbass)*.05;\nq8= (sin(atime-0*pi23)+1)*.5;\nq9= (sin(atime-1*pi23)+1)*.5;\nq10=(sin(atime-2*pi23)+1)*.5;\n\n//per frame less reactive volume for all unused q vars, put before other q vars are set for cop out mashing\nvb = vb*0.95 + (1-vb)*pow(bass_att,2)*0.02;\nvvb = vvb*0.95 + (1-vvb)*vb*0.01;\nvm = vm*0.95 + (1-vm)*pow(mid_att,2)*0.02;\nvvm = vvm*0.95 + (1-vvm)*vm*0.01;\nvt = vt*0.95 + (1-vt)*pow(treb_att,2)*0.02;\nvvt = vvt*0.95 + (1-vvt)*vt*0.01;\nvvb = min(1,max(0,vvb));\nvvm = min(1,max(0,vvm));\nvvt = min(1,max(0,vvt));\nq1   = (vvb+vvm+vvt)*10;\nq2   = (vvb+vvm+vvt)*10;\nq3   = (vvb+vvm+vvt)*10;\nq4   = (vvb+vvm+vvt)*10;\nq5   = (vvb+vvm+vvt)*10;\nq6   = (vvb+vvm+vvt)*10;\nq7   = (vvb+vvm+vvt)*10;\nq11  = (vvb+vvm+vvt)*10;\nq12  = (vvb+vvm+vvt)*10;\nq13  = (vvb+vvm+vvt)*10;\nq14  = (vvb+vvm+vvt)*10;\nq15  = (vvb+vvm+vvt)*10;\nq16  = (vvb+vvm+vvt)*10;\nq17  = (vvb+vvm+vvt)*10;\nq18  = (vvb+vvm+vvt)*10;\nq19  = (vvb+vvm+vvt)*10;\nq20  = (vvb+vvm+vvt)*10;\nq21  = (vvb+vvm+vvt)*10;\nq22  = (vvb+vvm+vvt)*10;\nq23  = (vvb+vvm+vvt)*10;\nq24  = (vvb+vvm+vvt)*10;\nq25  = (vvb+vvm+vvt)*10;\nq26  = (vvb+vvm+vvt)*10;\nq27  = (vvb+vvm+vvt)*10;\nq28  = (vvb+vvm+vvt)*10;\nq29  = (vvb+vvm+vvt)*10;\nq30  = (vvb+vvm+vvt)*10;\nq31  = (vvb+vvm+vvt)*10;\nq32  = (vvb+vvm+vvt)*10;\n\nwarp=0;\nwave_a=0;\ndecay = 0.976;\ndecay=0.99;\n//q8 - bass tracking\nq8 =  oldq8+ 0.0002*(pow(1+1.2*bass+0.4*bass_att+0.1*treb+0.1*treb_att+0.1*mid+0.1*mid_att,6)/fps);\noldq8 = q8;\nq7 = 0.00004*(pow(1+1.2*bass+0.4*bass_att+0.1*treb+0.1*treb_att+0.1*mid+0.1*mid_att,6)/fps);\n//q6 = treble tracking\nq6 =  oldq6+ 0.0002*(pow(1+0.1*bass+0.1*bass_att+1.2*treb+0.4*treb_att+0.1*mid+0.1*mid_att,6)/fps);\noldq6 = q6;\n//q4 = midrage tracking\nq4 =  oldq4+ 0.0002*(pow(1+0.1*bass+0.1*bass_att+0.1*treb+0.1*treb_att+1.2*mid+0.4*mid_att,6)/fps);\noldq4 = q4;\n\nq8 =  oldq8+ 0.0002*(pow(1+1.2*bass+0.4*bass_att+0.1*treb+0.1*treb_att+0.1*mid+0.1*mid_att,6)/fps);\noldq8 = q8;\n\nq8 =  oldq8+ 0.0002*(pow(1+1.2*bass+0.4*bass_att+0.1*treb+0.1*treb_att+0.1*mid+0.1*mid_att,6)/fps);\noldq8 = q8;\n\nob_size = min(max(0,q7-0.3)+0.005,0.9);\nob_b = max(0,sin(q8*0.2542)*0.2 +0.1);\nob_r = max(0,sin(q8*0.985)*0.4 + 0.2);\nob_g = max(0,sin(q8*0.8711)*0.3 + 0.1);\nob_a =max(0,0.3*(q7-0.2))+0.1;\nib_r = 1-if(ob_size-0.005,0,1);\nib_g = ib_r*(0.21*0.2*sin(time*0.643));\nib_b = ib_r*(0.21*0.2*sin(time*0.853));\nib_a =1;\nmonitor = ob_a;\n//q6 = max(0.0005*(pow(1+1.2*bass+0.4*bass_att+0.1*treb+0.1*treb_att+0.1*mid+0.1*mid_att,6)/fps),1)-1;\n//oldq6 = q6;\nmonitor =q6;","pixel_eqs_eel":"dx=dx+0.008*sin((y*2-1)*meshx)+0.008*sin((y*2-1)*meshx*1.3333);\ndy=dy+0.008*cos((x*2-1)*meshx*1.3333)+0.008*cos((x*2-1)*meshx);","warp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1 = texture (sampler_main, uv);\n  vec3 tmpvar_2;\n  tmpvar_2.z = 0.0;\n  tmpvar_2.xy = abs((uv - uv_orig));\n  float tmpvar_3;\n  tmpvar_3 = ((dot (tmpvar_2, vec3(0.32, 0.49, 0.29)) * 0.6) + 0.003);\n  vec2 tmpvar_4;\n  tmpvar_4.x = (uv.x - tmpvar_3);\n  tmpvar_4.y = uv.y;\n  vec2 tmpvar_5;\n  tmpvar_5.x = (uv.x - tmpvar_3);\n  tmpvar_5.y = (uv.y + tmpvar_3);\n  vec2 tmpvar_6;\n  tmpvar_6.x = uv.x;\n  tmpvar_6.y = (uv.y - tmpvar_3);\n  vec2 tmpvar_7;\n  tmpvar_7.x = uv.x;\n  tmpvar_7.y = (uv.y + tmpvar_3);\n  vec2 tmpvar_8;\n  tmpvar_8.x = (uv.x + tmpvar_3);\n  tmpvar_8.y = (uv.y - tmpvar_3);\n  vec2 tmpvar_9;\n  tmpvar_9.x = (uv.x + tmpvar_3);\n  tmpvar_9.y = uv.y;\n  vec3 tmpvar_10;\n  tmpvar_10 = clamp (max (max (\n    max (abs((tmpvar_1.xyz - texture (sampler_main, (uv - vec2(tmpvar_3))).xyz)), abs((tmpvar_1.xyz - texture (sampler_main, tmpvar_4).xyz)))\n  , \n    max (abs((tmpvar_1.xyz - texture (sampler_main, tmpvar_5).xyz)), abs((tmpvar_1.xyz - texture (sampler_main, tmpvar_6).xyz)))\n  ), max (\n    max (max (abs((tmpvar_1.xyz - tmpvar_1.xyz)), abs((tmpvar_1.xyz - texture (sampler_main, tmpvar_7).xyz))), max (abs((tmpvar_1.xyz - texture (sampler_main, tmpvar_8).xyz)), abs((tmpvar_1.xyz - texture (sampler_main, tmpvar_9).xyz))))\n  , \n    abs((tmpvar_1.xyz - texture (sampler_main, (uv + vec2(tmpvar_3))).xyz))\n  )), 0.0, 1.0);\n  vec4 tmpvar_11;\n  tmpvar_11.w = 1.0;\n  tmpvar_11.xyz = ((tmpvar_10 + (texture (sampler_main, \n    (uv + (tmpvar_10.xy * 0.01))\n  ).xyz * 0.8)) / 1.4);\n  ret = tmpvar_11.xyz;\n }","comp":"vec3 xlat_mutableret1;\nvec3 xlat_mutableret2;\nvec2 xlat_mutablesam;\n shader_body { \n  vec2 uv_1;\n  xlat_mutablesam = (texture (sampler_main, (uv * 0.5)).xy * ((\n    (texture (sampler_blur1, uv).xyz * scale1)\n   + bias1) - (\n    (texture (sampler_blur3, uv).xyz * scale3)\n   + bias3)).xy);\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, (xlat_mutablesam + uv));\n  float tmpvar_3;\n  tmpvar_3 = (0.5 * bass_att);\n  xlat_mutableret1 = ((tmpvar_2.x * (\n    (tmpvar_3 * uv_orig.y)\n   + tmpvar_2.xyz)) + (tmpvar_2.x * texture (sampler_main, uv).xyz));\n  xlat_mutableret1 = (xlat_mutableret1 * ((xlat_mutableret1 + 1.0) / 2.0));\n  uv_1 = (((uv - 0.5) * 0.3) + 0.5);\n  xlat_mutablesam = (texture (sampler_main, (uv_1 * 0.5)).xy * ((\n    (texture (sampler_blur1, uv_1).xyz * scale1)\n   + bias1) - (\n    (texture (sampler_blur3, uv_1).xyz * scale3)\n   + bias3)).xy);\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_main, (xlat_mutablesam + uv_1));\n  xlat_mutableret2 = ((tmpvar_4.x * (\n    (tmpvar_3 * uv_orig.y)\n   + tmpvar_4.xyz)) + (tmpvar_4.x * texture (sampler_main, uv_1).xyz));\n  xlat_mutableret2 = (xlat_mutableret2 * (xlat_mutableret1 + 1.0));\n  vec3 tmpvar_5;\n  tmpvar_5 = max (xlat_mutableret1, xlat_mutableret2);\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = (tmpvar_5 * (0.5 + (0.5 * \n    dot (tmpvar_5, vec3(0.32, 0.49, 0.29))\n  )));\n  ret = tmpvar_6.xyz;\n }","warp_hlsl":"shader_body\n{ret=GetPixel(uv);\nfloat d=lum(abs(uv-uv_orig))*0.6+0.003;\nfloat3 one,two,three,four,five;\nfloat3 sex,drugs,rock,roll,bugs;\nfloat3 maxx;\none=max(\nabs(ret-GetPixel(float2(uv.x-d,uv.y-d))),\nabs(ret-GetPixel(float2(uv.x-d,uv.y)))\n);\ntwo=max(\nabs(ret-GetPixel(float2(uv.x-d,uv.y+d))),\nabs(ret-GetPixel(float2(uv.x,uv.y-d)))\n);\nthree=max(\nabs(ret-GetPixel(float2(uv.x,uv.y))),\nabs(ret-GetPixel(float2(uv.x,uv.y+d)))\n);\nfour=max(\nabs(ret-GetPixel(float2(uv.x+d,uv.y-d))),\nabs(ret-GetPixel(float2(uv.x+d,uv.y)))\n);\nfive=abs(ret-GetPixel(float2(uv.x+d,uv.y+d)));\nsex=abs(one-ret);\ndrugs=abs(two-ret);\nrock=abs(three-ret);\nroll=abs(four-ret);\nbugs=abs(five-ret);\nmaxx=max(one,max(two,max(three,max(four,five))));\nmaxx=saturate(maxx);\nret=maxx;\nret=(ret+GetPixel(uv+ret.xy*0.01)*0.8)/1.4;\n}","comp_hlsl":"float3 ret1, ret2, reta;\nfloat2 sam;\nshader_body\n{\n    sam = tex2D(sampler_main,uv*.5);\n    ret1 = tex2D(sampler_main, float2(uv.x, uv.y));\n    sam *= GetBlur1(uv)-GetBlur3(uv);       \n\n    reta = tex2D(sampler_main, sam+uv ).rgb;\n    ret1 = reta.r * (.5*bass_att*uv_orig.y+reta) + (reta.r)*ret1;\n    ret1 *= (ret1+1)/2; //gamma\n\nuv = (uv-.5)*.3+.5;\n    sam = tex2D(sampler_main,uv*.5);\n    ret2 = tex2D(sampler_main, float2(uv.x, uv.y));\n    sam *= GetBlur1(uv)-GetBlur3(uv);       \n\n    reta = tex2D(sampler_main, sam+uv ).rgb;\n    ret2 = reta.r * (.5*bass_att*uv_orig.y+reta) + (reta.r)*ret2;\n    ret2 *= (ret1+1); //gamma\n\n\n\nret = max(ret1, ret2);\nret *= .5+.5*lum(ret);\n//ret = (1+ret1)*ret2;\n\n}\n\n"}