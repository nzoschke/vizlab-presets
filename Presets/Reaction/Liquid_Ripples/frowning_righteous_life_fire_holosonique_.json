{"version":2,"baseVals":{"rating":5,"gammaadj":1.28,"decay":0.96,"echo_zoom":0.997,"echo_orient":1,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":0.107,"zoomexp":0.33077,"warp":0.01,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0.5,"ob_r":1,"ob_g":1,"ob_b":1,"ib_size":0,"ib_r":1,"ib_g":1,"ib_b":1,"ib_a":1,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"additive":1,"g2":0,"border_r":0.4,"border_g":0.5},"init_eqs_str":"a.frametest=0;a.monitor=0;","frame_eqs_str":"a.r=.00001<Math.abs(above(a.bass,1.2))?.5*Math.sin(1.234*a.time):.1*Math.sin(1.234*a.time);a.g=.00001<Math.abs(above(a.bass,1.2))?.5*Math.sin(1.345*a.time):.1*Math.sin(1.345*a.time);a.b=.00001<Math.abs(above(a.bass,1.2))?.5*Math.sin(1.456*a.time):.1*Math.sin(1.456*a.time);a.border_a=.25*Math.sin(a.time);a.ang+=.67*Math.sin(a.time);a.rad+=.1*a.bass;a.frametest=equal(mod(a.frame,2),0);a.x-=.1*Math.tan(3.14*a.time);a.y-=.1*Math.sin(3.14*a.time);a.x=.00001<Math.abs(a.frametest)?\na.x:1-a.x;a.y=.00001<Math.abs(a.frametest)?a.y:1-a.y;a.r=.00001<Math.abs(a.frametest)?a.r:a.b;a.b=.00001<Math.abs(a.frametest)?a.b:a.g;a.monitor=a.frametest;","init_eqs_eel":"","frame_eqs_eel":"r = if(above(bass, 1.2), .5*sin(time*1.234), .1*sin(time*1.234));\ng = if(above(bass, 1.2), .5*sin(time*1.345), .1*sin(time*1.345));\nb = if(above(bass, 1.2), .5*sin(time*1.456), .1*sin(time*1.456));\nborder_a = .25*sin(time);\n\nang = ang + .67*sin(time);\nrad = rad + bass*.1;\n\nframetest = equal(frame%2, 0);\n\n//x = if(frametest, x - .25*sin(time), x + .25*sin(time);\nx = x - .1*tan(time*3.14);\ny = y - .1*sin(time*3.14);\nx = if(frametest, x, 1-x);\ny = if(frametest, y, 1-y);\nr = if(frametest, r, b);\nb = if(frametest, b, g);\n\nmonitor = frametest;"},{"baseVals":{"enabled":1,"additive":1,"rad":2.41456,"g2":0,"border_r":0.4,"border_g":0.5},"init_eqs_str":"a.frametest=0;a.monitor=0;","frame_eqs_str":"a.r=.00001<Math.abs(above(a.bass,1.2))?.3*Math.sin(2.234*a.time)+.7*Math.sin(1.34*a.time):0;a.g=.00001<Math.abs(above(a.bass,1.2))?.3*Math.sin(2.345*a.time)+.7*Math.sin(1.57*a.time):0;a.b=.00001<Math.abs(above(a.bass,1.2))?.3*Math.sin(2.456*a.time)+.7*Math.sin(1.82*a.time):0;a.border_a=.25*Math.sin(a.time);a.ang+=.67*Math.sin(a.time);a.rad+=.1*a.bass;a.frametest=equal(mod(a.frame,2),0);a.x-=.2*Math.sin(2*a.time);a.y-=.2*Math.tan(2*a.time);a.x=.00001<Math.abs(a.frametest)?a.x:\n1-a.x;a.y=.00001<Math.abs(a.frametest)?a.y:1-a.y;a.r=.00001<Math.abs(a.frametest)?a.r:a.b;a.b=.00001<Math.abs(a.frametest)?a.b:a.g;a.monitor=a.frametest;","init_eqs_eel":"","frame_eqs_eel":"r = if(above(bass, 1.2), .3*sin(time*2.234)+.7*sin(time*1.34), 0);\ng = if(above(bass, 1.2), .3*sin(time*2.345)+.7*sin(time*1.57), 0);\nb = if(above(bass, 1.2), .3*sin(time*2.456)+.7*sin(time*1.82), 0);\nborder_a = .25*sin(time);\n\nang = ang + .67*sin(time);\nrad = rad + bass*.1;\n\nframetest = equal(frame%2, 0);\n\n//x = if(frametest, x - .25*sin(time), x + .25*sin(time);\nx = x - .2*sin(time*2);\ny = y - .2*tan(time*2);\nx = if(frametest, x, 1-x);\ny = if(frametest, y, 1-y);\nr = if(frametest, r, b);\nb = if(frametest, b, g);\n\nmonitor = frametest;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.d=0;a.vt=0;a.q6=0;a.q1=0;a.q5=0;a.vb=0;a.v=0;a.mm=0;a.tt=0;a.q4=0;a.bb=0;a.q2=0;a.q3=0;a.vvm=0;a.vvb=0;a.vm=0;a.vvt=0;a.x1=0;a.y1=0;","frame_eqs_str":"a.vvb=.00001<Math.abs(below(a.vvb,0))?0:a.vvb;a.vvm=.00001<Math.abs(below(a.vvm,0))?0:a.vvm;a.vvt=.00001<Math.abs(below(a.vvt,0))?0:a.vvt;a.vvb=.00001<Math.abs(above(a.vvb,1))?1:a.vvb;a.vvm=.00001<Math.abs(above(a.vvm,1))?1:a.vvm;a.vvt=.00001<Math.abs(above(a.vvt,1))?1:a.vvt;a.vb=.85*a.vb+(1-a.vb)*pow(a.bass,2)*.01;a.vvb=.95*a.vvb+(1-a.vvb)*a.vb*.2;a.vm=.85*a.vm+(1-a.vm)*pow(a.mid,2)*.01;a.vvm=.95*a.vvm+(1-a.vvm)*a.vm*.2;a.vt=.85*a.vt+(1-a.vt)*pow(a.treb,2)*.01;a.vvt=.95*a.vvt+\n(1-a.vvt)*a.vt*.2;a.q1=2*-a.vvb+.5;a.q2=2*-a.vvm+.5;a.q3=2*-a.vvt+.5;a.v=.75*div(60,a.fps);a.d=.25*a.v;a.bb=a.bb+a.vvb*a.v-a.d;a.mm=a.mm+a.vvm*a.v-a.d;a.tt=a.tt+a.vvt*a.v-a.d;a.q4=a.bb;a.q5=a.mm;a.q6=a.tt;a.zoom=1.05;","pixel_eqs_str":"","init_eqs_eel":"x1 = 0;\ny1 = 0;","frame_eqs_eel":"vvb = if(below(vvb,0),0,vvb);\nvvm = if(below(vvm,0),0,vvm);\nvvt = if(below(vvt,0),0,vvt);\nvvb = if(above(vvb,1),1,vvb);\nvvm = if(above(vvm,1),1,vvm);\nvvt = if(above(vvt,1),1,vvt);\nvb = vb*0.85 + (1-vb)*pow(bass,2)*0.01;\nvvb = vvb*0.95 + (1-vvb)*vb*0.2;\nvm = vm*0.85 + (1-vm)*pow(mid,2)*0.01;\nvvm = vvm*0.95 + (1-vvm)*vm*0.2;\nvt = vt*0.85 + (1-vt)*pow(treb,2)*0.01;\nvvt = vvt*0.95 + (1-vvt)*vt*0.2;\n\nq1 = -vvb*2 + 0.5;//0.5 + vb - vvb;\nq2 = -vvm*2 + 0.5;//0.5 + vm - vvm;\nq3 = -vvt*2 + 0.5;//0.5 + vt - vvt;\n\nv=0.75*(60/fps);\nd = v*0.25;\nbb = bb + vvb*v - d;\nmm = mm + vvm*v - d;\ntt = tt + vvt*v - d;\nq4 = bb;\nq5 = mm;\nq6 = tt;\nzoom = 1.05","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2.x = (((\n    ((texture (sampler_blur2, (uv + vec2(0.01, 0.0))).xyz * scale2) + bias2)\n   - \n    ((texture (sampler_blur2, (uv - vec2(0.01, 0.0))).xyz * scale2) + bias2)\n  ).y * 1280.0) * texsize.z);\n  tmpvar_2.y = (((\n    ((texture (sampler_blur2, (uv + vec2(0.0, 0.01))).xyz * scale2) + bias2)\n   - \n    ((texture (sampler_blur2, (uv - vec2(0.0, 0.01))).xyz * scale2) + bias2)\n  ).y * 1024.0) * texsize.w);\n  ret_1.y = texture (sampler_fw_main, (uv + (tmpvar_2 * 0.005))).y;\n  ret_1 = (ret_1 + ((\n    (ret_1 - ((texture (sampler_blur3, uv).xyz * scale3) + bias3))\n   * 0.3) - 0.05));\n  ret_1 = (ret_1 + ((texture (sampler_noise_lq, \n    (((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 0.25)) + rand_frame.xy)\n  ).xyz - 0.5) * 0.1));\n  ret_1 = mix (ret_1, vec3(dot (ret_1, vec3(0.32, 0.49, 0.29))), vec3(0.2, 0.2, 0.2));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  vec3 ret_2;\n  uv_1 = (uv * 2.0);\n  vec2 tmpvar_3;\n  tmpvar_3 = floor((fract(\n    (uv_1 * 0.5)\n  ) * 2.0));\n  uv_1 = ((fract(uv_1) * (1.0 - tmpvar_3)) + (tmpvar_3 * fract(\n    (1.0 - uv_1)\n  )));\n  uv_1 = (vec2(1.0, 1.0) - uv_1);\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_main, uv_1);\n  vec2 tmpvar_5;\n  tmpvar_5 = ((uv_1 - (0.1 * \n    sin((1.5 * tmpvar_4.xy))\n  )) + (0.1 * sin(\n    (1.33 * tmpvar_4.zy)\n  )));\n  ret_2 = (texture (sampler_main, tmpvar_5).xyz + ((texture (sampler_blur1, tmpvar_5).xyz * scale1) + bias1));\n  vec3 tmpvar_6;\n  tmpvar_6 = clamp (pow (vec3(dot (ret_2, vec3(0.32, 0.49, 0.29))), vec3(0.9, 0.7, 0.5)), 0.0, 1.0);\n  ret_2 = (tmpvar_6 * (1.25 * tmpvar_6));\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ret_2;\n  ret = tmpvar_7.xyz;\n }","warp_hlsl":"sampler sampler_cells;\n \nshader_body\n{\n\n    float1 d = 0.01;\n    float1 dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).y*1280*texsize.z;\n    float1 dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).y*1024*texsize.w;\n    float2 my_uv = uv + float2(dx,dy)*0.005;\n\n\n\n//    float1 v = 0.01;\n    ret.y = tex2D( sampler_fw_main, my_uv).y;\n\n    \n//ret = 0;\n//   ret = tex2D( sampler_cells, uv)/ lerp(ret,tex2D(sampler_main,uv_orig-my_uv+uv),0.3);\n      // take the difference between the crisp and blurred images,\n      // then add it back into the image.  Creates spots and stripes over time.\n      ret.xyz += (ret - GetBlur3(uv-floor(uv)*0))*0.3 - 0.05;\n      ret.xyz *= 1;\n\n      // add noise:\n      float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.25 + rand_frame.xy;\n      ret.xyz += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)*0.1;\n\n      // desaturate over time, to keep the globs white\n      ret.xyz = lerp(ret.xyz, lum(ret.xyz), 0.2);\n}","comp_hlsl":"shader_body\n{\n \nuv *=2 ;\nfloat2 m = floor(frac(uv*0.5)*2);\nuv = frac(uv)*(1-m) + (m)*frac(1-uv);\nuv.x=1-uv.x;\nuv.y=1-uv.y;\n   ret = tex2D(sampler_main, uv).xyz;\n//    ret += GetBlur1(uv)*0.4; \nfloat2 uv2 = uv-.1*sin(1.5*ret.xy)+.1*sin(1.33*ret.zy);\n   ret = tex2D(sampler_main,uv2);\n    ret += GetBlur1(uv2); \n    // palettize:\n    ret = pow(lum(ret), float3(0.9, 0.7, 0.5));\n\n    // invert\n    ret = saturate(ret);\n    ret *= 1.25*ret;\n    //ret.xyz *= 2; // a little bit of overbright\n}\n\n"}