{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_thick":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.401,"wave_scale":3.177,"wave_smoothing":0,"wave_mystery":-0.4,"modwavealphastart":1,"modwavealphaend":1,"warpanimspeed":2.289,"warpscale":5.472,"zoomexp":0.01,"zoom":0.9901,"warp":1.8566,"ob_size":0.005,"ob_a":1,"ib_size":0,"ib_r":1,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":64,"mv_y":48,"mv_l":0,"mv_b":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"additive":1,"num_inst":512,"y":0.55,"rad":0.06689,"tex_zoom":0.78748,"g":1,"b":1,"g2":0,"border_a":0},"init_eqs_str":"a.my_z=0;a.d=0;a.y3=0;a.z2=0;a.y1=0;a.w=0;a.w2=0;a.x1=0;a.zoom=0;a.p=0;a.q1=0;a.q5=0;a.z3=0;a.w3=0;a.my_x=0;a.x3=0;a.my_y=0;a.q4=0;a.w1=0;a.i=0;a.x2=0;a.l=0;a.y2=0;a.q2=0;a.z1=0;a.q3=0;","frame_eqs_str":"a.d=1.4;a.zoom=.7;a.w1=a.q3;a.w2=a.q4;a.w3=a.q5;a.i=a.instance;a.my_x=div(mod(a.i,8),8)-.5;a.my_y=div(mod(a.i,64)-mod(a.i,8),64)-.5;a.my_z=div(a.i-div(mod(a.i,64)-mod(a.i,8),64),512)-.5;a.x1=Math.cos(a.w1)*a.my_x+Math.sin(a.w1)*a.my_y;a.y1=-Math.sin(a.w1)*a.my_x+Math.cos(a.w1)*a.my_y;a.z1=a.my_z;a.x2=Math.cos(a.w2)*a.x1+Math.sin(a.w2)*a.z1;a.z2=-Math.sin(a.w2)*a.x1+Math.cos(a.w2)*a.z1;a.y2=a.y1;a.y3=Math.cos(a.w3)*a.y2+Math.sin(a.w3)*a.z2;a.z3=-Math.sin(a.w3)*a.y2+Math.cos(a.w3)*\na.z2;a.x3=a.x2;a.l=sqrt(a.x3*a.x3+a.y3*a.y3);a.w=Math.atan2(a.x3,a.y3);a.p=Math.tan(Math.asin(1)+Math.atan2(a.d+a.z3,a.l));a.d=sqrt(a.x3*a.x3+a.y3*a.y3+(a.z3+a.d)*(a.z3+a.d));a.rad=div(a.rad,a.d);a.my_x=a.zoom*Math.sin(a.w)*a.p;a.my_y=a.zoom*Math.cos(a.w)*a.p;a.x=.5+a.my_x;a.y=.5+a.my_y;a.x=.5+div(a.x-.5,a.q2);a.y=.5+div(a.y-.5,a.q1);","init_eqs_eel":"","frame_eqs_eel":"\n\nd = 1.4; // makes the perspective impact\nzoom = 0.7;\n\n\n// Kardan angles\n\nw1 = q3; // first rotation: clockwise in the desktop pane\nw2 = q4; // rotation around vertical axis\nw3 = q5; // rotation around horizontal axis\n\n\n// definition of the 3D shape\n\ni = instance;\n\nmy_x = (i % 8)/8 - 0.5;\nmy_y = (i % 64 - (i % 8))/64 - 0.5;\nmy_z = (i - (i % 64 - (i % 8))/64)/512 - 0.5;\n\n\n// 3D rotations\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nrad = rad/d;\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;\n\nx = 0.5 + (x-0.5)/q2;\ny = 0.5 + (y-0.5)/q1;"},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"textured":1,"x":0.52,"y":0.41,"rad":0.5216,"ang":0.1885,"tex_zoom":0.73458,"g":1,"b":1,"r2":1,"b2":1,"a2":0.75,"border_a":0,"enabled":0},"init_eqs_str":"vx = 0","frame_eqs_str":"","init_eqs_eel":"vx = 0","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"textured":1,"x":0.48,"y":0.41,"rad":0.61162,"ang":5.96903,"tex_zoom":0.73458,"g":1,"b":1,"r2":1,"b2":1,"a2":0.75,"border_a":0,"enabled":0},"init_eqs_str":"vx = 0","frame_eqs_str":"","init_eqs_eel":"vx = 0","frame_eqs_eel":""},{"baseVals":{"sides":100,"additive":1,"thickoutline":1,"y":0.75,"rad":0.07059,"tex_zoom":0.73458,"g2":0,"border_a":0,"enabled":0},"init_eqs_str":"vx = 0","frame_eqs_str":"x = q1;\ny = q5;","init_eqs_eel":"vx = 0","frame_eqs_eel":"x = q1;\ny = q5;"}],"waves":[{"baseVals":{"additive":1,"r":0.2,"g":0,"b":0,"a":0.3,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"n=sample*6.283;\nphs=-sample * 0.2;\ntm=time*0.4 + phs;\n\nflip=flip+1;\nflip=flip*below(flip,2);\n\nxp=0;\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\nzp=0;\n\n//wrist movement;\nang=sin(tm*2)*0.5 +0.5;\n\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\nyq=yp;\nzq=zp;\n\nang=tm*8;\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//forearm movement;\nzp=zp-0.3;\nang=3.14 + sin(tm*2 - 0.5)*1.5;\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\n\n//upper arm twist\nang=-1.0 + cos(tm*3 + 0.5);\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//upper arm outward;\nzp=zp-0.35;\nang=cos(tm*2)*0.75 - 1.05;\nxq=xp*sin(ang) + zp*cos(ang);\nyq=yp;\nzq=xp*cos(ang) - zp*sin(ang);\n\n//upper arm up down;\nang=cos(tm)*0.5 - 0.5;\nxp=xq;\nyp=yq*cos(ang) - zq*sin(ang);\nzp=yq*sin(ang) + zq*cos(ang);\n\n//xp=xq;yp=yq;zp=zq;\n\n\n//project into screenspace and draw on screen\nzp=zp+2;\nxs=xp/zp;\nys=yp/zp;\n\nx=xs+0.5;\ny=ys*1.3+0.5;\n\n\n//a=(1-sample)*flip;\n\n//b=b+pow(1-sample,2)*0.3;\n\nx = 0.5 + (x-0.5)/q1;\ny = 0.5 + (y-0.5)/q2 + 0.1;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n=sample*6.283;\nphs=-sample * 0.2;\ntm=time*0.4 + phs;\n\nflip=flip+1;\nflip=flip*below(flip,2);\n\nxp=0;\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\nzp=0;\n\n//wrist movement;\nang=sin(tm*2)*0.5 +0.5;\n\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\nyq=yp;\nzq=zp;\n\nang=tm*8;\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//forearm movement;\nzp=zp-0.3;\nang=3.14 + sin(tm*2 - 0.5)*1.5;\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\n\n//upper arm twist\nang=-1.0 + cos(tm*3 + 0.5);\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//upper arm outward;\nzp=zp-0.35;\nang=cos(tm*2)*0.75 - 1.05;\nxq=xp*sin(ang) + zp*cos(ang);\nyq=yp;\nzq=xp*cos(ang) - zp*sin(ang);\n\n//upper arm up down;\nang=cos(tm)*0.5 - 0.5;\nxp=xq;\nyp=yq*cos(ang) - zq*sin(ang);\nzp=yq*sin(ang) + zq*cos(ang);\n\n//xp=xq;yp=yq;zp=zq;\n\n\n//project into screenspace and draw on screen\nzp=zp+2;\nxs=xp/zp;\nys=yp/zp;\n\nx=xs+0.5;\ny=ys*1.3+0.5;\n\n\n//a=(1-sample)*flip;\n\n//b=b+pow(1-sample,2)*0.3;\n\nx = 0.5 + (x-0.5)/q1;\ny = 0.5 + (y-0.5)/q2 + 0.1;"},{"baseVals":{"additive":1,"r":0.2,"g":0,"b":0,"a":0.3,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"n=sample*6.283;\nphs=-sample * 0.2;\ntm=time*0.4 + phs;\n\nflip=flip+1;\nflip=flip*below(flip,2);\n\nxp=0;\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\nyp=-yp;\nzp=0;\n\n//wrist movement;\nang=sin(tm*2)*0.5 +0.5;\n\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\nyq=yp;\nzq=zp;\n\nang=tm*8;\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//forearm movement;\nzp=zp-0.3;\nang=3.14 + sin(tm*2 - 0.5)*1.5;\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\n\n//upper arm twist\nang=-1.0 + cos(tm*3 + 0.5);\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//upper arm outward;\nzp=zp-0.35;\nang=cos(tm*2)*0.75 - 1.05;\nxq=xp*sin(ang) + zp*cos(ang);\nyq=yp;\nzq=xp*cos(ang) - zp*sin(ang);\n\n//upper arm up down;\nang=cos(tm)*0.5 - 0.5;\nxp=xq;\nyp=yq*cos(ang) - zq*sin(ang);\nzp=yq*sin(ang) + zq*cos(ang);\n\n//xp=xq;yp=yq;zp=zq;\n\n\n//project into screenspace and draw on screen\nzp=zp+2;\nxs=xp/zp;\nys=yp/zp;\n\nx=xs+0.5;\ny=ys*1.3+0.5;\n\n\n//a=(1-sample)*flip;\n\n\n//b=b+pow(1-sample,2)*0.3;\n\n\nx = 0.5 + (x-0.5)/q1;\ny = 0.5 + (y-0.5)/q2 + 0.1;\n","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n=sample*6.283;\nphs=-sample * 0.2;\ntm=time*0.4 + phs;\n\nflip=flip+1;\nflip=flip*below(flip,2);\n\nxp=0;\nyp=flip*0.1 + (sin(tm)*0.5 + 0.5)*0.2;\nyp=-yp;\nzp=0;\n\n//wrist movement;\nang=sin(tm*2)*0.5 +0.5;\n\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\nyq=yp;\nzq=zp;\n\nang=tm*8;\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//forearm movement;\nzp=zp-0.3;\nang=3.14 + sin(tm*2 - 0.5)*1.5;\nxq=xp;\nyq=yp*sin(ang) + zp*cos(ang);\nzq=yp*cos(ang) - zp*sin(ang);\n\n//upper arm twist\nang=-1.0 + cos(tm*3 + 0.5);\nxp=xq*sin(ang) + yq*cos(ang);\nyp=xq*cos(ang) - yq*sin(ang);\nzp=zq;\n\n//upper arm outward;\nzp=zp-0.35;\nang=cos(tm*2)*0.75 - 1.05;\nxq=xp*sin(ang) + zp*cos(ang);\nyq=yp;\nzq=xp*cos(ang) - zp*sin(ang);\n\n//upper arm up down;\nang=cos(tm)*0.5 - 0.5;\nxp=xq;\nyp=yq*cos(ang) - zq*sin(ang);\nzp=yq*sin(ang) + zq*cos(ang);\n\n//xp=xq;yp=yq;zp=zq;\n\n\n//project into screenspace and draw on screen\nzp=zp+2;\nxs=xp/zp;\nys=yp/zp;\n\nx=xs+0.5;\ny=ys*1.3+0.5;\n\n\n//a=(1-sample)*flip;\n\n\n//b=b+pow(1-sample,2)*0.3;\n\n\nx = 0.5 + (x-0.5)/q1;\ny = 0.5 + (y-0.5)/q2 + 0.1;\n"},{"baseVals":{"samples":61,"thick":1,"scaling":2.44415,"smoothing":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_str":"x = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\ny = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;","init_eqs_eel":"","frame_eqs_eel":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_eel":"x = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\ny = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;"},{"baseVals":{"samples":61,"scaling":2.44415,"smoothing":0,"enabled":0},"init_eqs_str":"t2 = 0","frame_eqs_str":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_str":"x = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\ny = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;","init_eqs_eel":"t2 = 0","frame_eqs_eel":"t1 = q1;\nt2 = q2;\nt3 = q3;\nt4 = q4;\nt5 = q5;\nt6 = q6;\nt7 = q7;\nt8 = q8;","point_eqs_eel":"x = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2\n+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;\n\ny = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6\n+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;"}],"init_eqs_str":"a.q1=0;a.q5=0;a.q4=0;a.t=0;a.b=0;a.q2=0;a.q3=0;a.m=0;a.q20=0;","frame_eqs_str":"a.wave_a=0;a.q1=a.aspectx;a.q2=a.aspecty;a.b+=a.bass*a.bass*.5;a.m+=a.mid*a.mid*.5;a.t+=a.treb*a.treb*.5;a.q3=.012*a.b;a.q4=.012*a.m;a.q5=.012*a.t;a.q20=a.bass+a.treb+a.mid;","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"wave_a = 0;\nq1 =aspectx;\nq2 = aspecty;\n\n\nb = b + bass*bass*0.5;\nm = m + mid*mid*0.5;\nt = t + treb*treb*0.5;\n\nq3 = b*0.012;\nq4 = m*0.012;\nq5 = t*0.012;\nq20=bass+treb+mid;","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + (0.5 - rand_frame.xy)));\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_main, uv);\n  ret_1.z = tmpvar_3.z;\n  ret_1.x = ((tmpvar_3.x - (1.4 * q6)) * (1.0 - (q6 * 2.5)));\n  vec4 tmpvar_4;\n  tmpvar_4 = clamp (((\n    (texture (sampler_blur1, ((uv_orig + (0.005 * tmpvar_2).xy) - texsize.zw)).xyz * scale1)\n   + bias1).x - (\n    (tmpvar_2 - 0.5)\n   * 0.15)), 0.0, 1.0);\n  float tmpvar_5;\n  tmpvar_5 = (tmpvar_3.z + ((\n    (texture (sampler_blur1, uv).xyz * scale1)\n   + bias1).z * 0.2));\n  ret_1.y = 0.0;\n  if ((tmpvar_4.x > 0.1)) {\n    ret_1.x = ((tmpvar_5 * q6) * 160.0);\n    ret_1.z = (tmpvar_3.z - ((tmpvar_3.z * q6) * 120.0));\n  } else {\n    ret_1.z = (ret_1.z + (1.3 * q6));\n  };\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_1;\n  ret = tmpvar_6.xyz;\n }","comp":" shader_body { \n  vec3 tmpvar_1;\n  tmpvar_1 = texture (sampler_main, uv).xxx;\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ((pow (\n    mix (vec3((((texture (sampler_blur1, uv).xyz * scale1) + bias1).x + ((texture (sampler_blur3, uv).xyz * scale3) + bias3).x)), tmpvar_1, tmpvar_1)\n  , vec3(0.3, 0.9, 8.0)) * 1.25) - 0.25);\n  ret = tmpvar_2.xyz;\n }","warp_hlsl":"shader_body\n{\n    float2 noise_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + (0.5-rand_frame.xy);\n    float4 noiseVal = (tex2D(sampler_noise_lq, noise_uv));\n\nfloat2 adj = texsize.zw;\n//float2 adj = 0;\n\nfloat2 uvn = uv_orig + .005*noiseVal + float2(-1,-1)*adj;\n\n// sample previous frame\n    ret = tex2D( sampler_main, uv ).xyz;\n// darken (decay) over time\n    ret.x = (ret.x-1.4*q6)*(1-q6*2.5); //or try: ret -= 0.004;\n\n\nfloat burn = saturate(GetBlur1(uvn).x - (noiseVal-0.5)*.15);\nfloat fuel = pow(ret.z*1 + GetBlur1(uv).z*.2,1);\n\nret.y = 0;\n\nif (burn > 0.1)\n{\nret.x = fuel*q6*160;\nret.z -= ret.z*q6*120;\n}\n\nelse {ret.z += 1.3*q6;\n//ret.x = 0;\n}\n\n}","comp_hlsl":"shader_body\n{\n\nret = tex2D(sampler_main, uv).x,\n\nret = lerp (\nGetBlur1(uv).x + GetBlur3(uv).x,\nret,\npow(ret,1));\n  \n//  ret = tex2D(sampler_main, uv).x - GetBlur1(uv).x;\n    ret = pow(ret,float3(.3,.9,8))*1.25 - .25;\n    ret *= 1.0; //gamma\n//ret = tex2D(sampler_main, uv);\n \n}"}