{"version":2,"baseVals":{"rating":5,"gammaadj":2.4,"decay":0.5,"echo_zoom":0.172,"echo_orient":1,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"darken":1,"solarize":1,"wave_a":4.1,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"zoom":0.99951,"warp":0.01,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0.5,"ob_r":0.01,"ib_size":0.26,"mv_a":0},"shapes":[{"baseVals":{"thickoutline":1,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"rad=q1*.33;\ny=.5;\nx=.2;","init_eqs_eel":"","frame_eqs_eel":"rad=q1*.33;\ny=.5;\nx=.2;"},{"baseVals":{"g":1,"b":1,"r2":1,"b2":1,"a2":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"rad=q3*.33;\nx=.2;\ny=.25;","init_eqs_eel":"","frame_eqs_eel":"rad=q3*.33;\nx=.2;\ny=.25;"},{"baseVals":{"additive":1,"thickoutline":1,"rad":0.43606,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"rad=q5*.33;\ny=.75;\nx=.2;","init_eqs_eel":"","frame_eqs_eel":"rad=q5*.33;\ny=.75;\nx=.2;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"sep":256,"usedots":1,"thick":1},"init_eqs_str":"a.xx=0;a.pt=0;a.f2=0;a.t1=0;a.vb=0;a.dx=0;a.q4=0;a.pp=0;a.dy=0;a.t2=0;a.q2=0;a.va=0;a.yy=0;a.f2=0;a.pp=100;a.pt=100;","frame_eqs_str":"a.t1=above(a.bass,1.3*a.bass_att);a.pt+=.001*a.q4;a.t2=a.pt;","point_eqs_str":"a.pp+=1;a.va=.99*a.va+.01*a.value1;a.vb=above(a.value1,a.va);a.dx=a.value1*a.q2*a.treb*.01;a.dy=a.value2*a.q2*a.bass*.01;a.xx+=a.dx;a.yy+=a.dy;a.xx=.00001<Math.abs(above(a.xx,1))?0:.00001<Math.abs(below(a.xx,0))?1:a.xx;a.yy=.00001<Math.abs(above(a.yy,1))?0:.00001<Math.abs(below(a.yy,0))?1:a.yy;a.y=a.yy+.01*a.value1;a.x=a.xx;a.f2=equal(mod(a.pp,2),0);a.r=(.5*Math.sin(a.t2*a.mid)+.5)*a.f2+(1-a.f2)*a.bass_att*.45;a.g=(.5*Math.tan(a.t2*a.treb)+.5)*a.f2+(1-a.f2)*a.treb_att*.4;a.b=\n(.5*Math.cos(a.t2*a.bass)+.5)*a.f2+(1-a.f2)*a.mid_att*.5;a.a=a.value1*a.bass;","init_eqs_eel":"f2=0;\npp=100;\npt=100;","frame_eqs_eel":"t1=above(bass,bass_att*1.3);\n\npt=pt+q4*.001;\nt2=pt;","point_eqs_eel":"pp=pp+1;\n\n\n\nva=va*.99+value1*.01;\nvb=above(value1,va);\n\n\ndx=(value1*q2*treb)*.01;\ndy=(value2*q2*bass)*.01;\n\nxx=xx+dx;\nyy=yy+dy;\n\nxx=if(above(xx,1),0,if(below(xx,0),1,xx));\nyy=if(above(yy,1),0,if(below(yy,0),1,yy));\n\ny=yy+value1*.01;\nx=xx;\n\n\nf2=equal((pp)%2,0);\n//f2=1;\n\n\n\nr=(sin(t2*mid)*.5+.5)*f2+(1-f2)*bass_att*.45;\ng=(tan(t2*treb)*.5+.5)*f2+(1-f2)*treb_att*.4;\nb=(cos(t2*bass)*.5+.5)*f2+(1-f2)*mid_att*.5;\n\na=value1*bass;"},{"baseVals":{"enabled":1,"usedots":1,"thick":1,"r":0,"g":0,"b":0,"a":0.5},"init_eqs_str":"a.xx=0;a.t1=0;a.dt=0;a.q1=0;a.vb=0;a.dx=0;a.t3=0;a.dy=0;a.t2=0;a.bc=0;a.ltreb=0;a.va=0;a.yy=0;","frame_eqs_str":"a.dt=a.treb-a.ltreb;a.ltreb=a.treb;a.t2=a.dt;a.t1=above(a.bass,1.3*a.bass_att);a.bc+=a.q1;a.t3=equal(mod(a.bc,4),0);","point_eqs_str":"a.va=.99*a.va+.01*a.value1;a.vb=above(a.value1,a.va);a.dx=a.value1*a.t2*a.mid*.01;a.dy=a.value2*a.t2*a.bass_att*.01;a.xx+=a.dx;a.yy+=a.dy;a.xx=.00001<Math.abs(above(a.xx,1))?0:.00001<Math.abs(below(a.xx,0))?1:a.xx;a.yy=.00001<Math.abs(above(a.yy,1))?0:.00001<Math.abs(below(a.yy,0))?1:a.yy;a.y=a.yy+.01*a.value1;a.x=a.xx;a.r=a.q1*a.bass;a.g=a.t3*a.q1;a.b=a.q1*a.treb;","init_eqs_eel":"","frame_eqs_eel":"dt=treb-ltreb;\nltreb=treb;\nt2=dt;\n\n\nt1=above(bass,bass_att*1.3);\n\nbc=bc+q1;\nt3=equal(bc%4,0);","point_eqs_eel":"\n\nva=va*.99+value1*.01;\nvb=above(value1,va);\n\n\ndx=(value1*t2*mid)*.01;\ndy=(value2*t2*bass_att)*.01;\n\nxx=xx+dx;\nyy=yy+dy;\n\nxx=if(above(xx,1),0,if(below(xx,0),1,xx));\nyy=if(above(yy,1),0,if(below(yy,0),1,yy));\n\ny=yy+value1*.01;\nx=xx;\n\n\nr=q1*bass;\ng=t3*q1;\nb=q1*treb;"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.mq29=0;a.cthr=0;a.mq1=0;a.q25=0;a.q12=0;a.q22=0;a.q21=0;a.q13=0;a.q29=0;a.mq31=0;a.mq21=0;a.mq24=0;a.chng=0;a.mq28=0;a.mq23=0;a.q31=0;a.q23=0;a.q24=0;a.q11=0;a.atime=0;a.q26=0;a.mq27=0;a.mq25=0;a.mq22=0;a.vol=0;a.mq26=0;a.q27=0;a.q28=0;","frame_eqs_str":"a.chng=Math.sin(.5*a.time);a.cthr=.9999;a.mq21=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq21;a.mq22=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq22;a.mq23=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq23;a.mq24=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq24;a.mq25=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq25;a.mq26=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq26;a.mq27=.00001<Math.abs(above(a.chng,a.cthr))?rand(1):a.mq27;a.mq28=.00001<Math.abs(above(a.chng,\na.cthr))?rand(1):a.mq28;a.mq29=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq29;a.mq31=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq31;a.monitor=a.chng;a.q21=a.mq21;a.q22=a.mq22;a.q23=a.mq23;a.q24=a.mq24;a.q25=a.mq25;a.q26=a.mq26;a.q27=a.mq27;a.q28=a.mq28;a.q29=a.mq29;a.q31=a.mq31;a.monitor=a.mq1;a.vol=a.bass+a.treb+a.mid;a.atime+=a.vol;a.q11=.4+.4*Math.sin(.006*a.atime);a.q12=.4+.4*Math.cos(.00613828348*a.atime);a.q13=.4+.4*Math.sin(.00598593455*a.atime);a.monitor=a.q13;","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"chng=sin(time*.5);\ncthr=.9999;\nmq21=if(above(chng,cthr),rand(3),mq21);\nmq22=if(above(chng,cthr),rand(3),mq22);\nmq23=if(above(chng,cthr),rand(3),mq23);\nmq24=if(above(chng,cthr),rand(2),mq24);\nmq25=if(above(chng,cthr),rand(2),mq25);\nmq26=if(above(chng,cthr),rand(2),mq26);\nmq27=if(above(chng,cthr),rand(1),mq27);\nmq28=if(above(chng,cthr),rand(1),mq28);\nmq29=if(above(chng,cthr),rand(1)*.3,mq29);\nmq31=if(above(chng,cthr),rand(1)*.3,mq31);\nmonitor=chng;\nq21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;\nq27=mq27;q28=mq28;q29=mq29;q31=mq31;\n\nmonitor=mq1;\nvol=bass+treb+mid;\natime=atime+vol;\nq11=.4+sin(atime*.006        )*.4;\nq12=.4+cos(atime*.00613828348)*.4;\nq13=.4+sin(atime*.00598593455)*.4;\nmonitor=q13;","pixel_eqs_eel":"","warp":" shader_body { \n  vec2 my_uv_1;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3 = (vec2(1280.0, 1024.0) * texsize.zw);\n  float tmpvar_4;\n  vec2 tmpvar_5;\n  tmpvar_5 = (uv + vec2(0.005, 0.0));\n  vec2 tmpvar_6;\n  tmpvar_6 = (uv - vec2(0.005, 0.0));\n  tmpvar_4 = (((\n    (texture (sampler_blur2, tmpvar_5).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, tmpvar_6).xyz * scale2)\n   + bias2)).x * tmpvar_3.x);\n  float tmpvar_7;\n  vec2 tmpvar_8;\n  tmpvar_8 = (uv + vec2(0.0, 0.005));\n  vec2 tmpvar_9;\n  tmpvar_9 = (uv - vec2(0.0, 0.005));\n  tmpvar_7 = (((\n    (texture (sampler_blur2, tmpvar_8).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, tmpvar_9).xyz * scale2)\n   + bias2)).x * tmpvar_3.y);\n  vec2 tmpvar_10;\n  tmpvar_10.x = tmpvar_4;\n  tmpvar_10.y = tmpvar_7;\n  vec2 tmpvar_11;\n  tmpvar_11.x = (((\n    (texture (sampler_blur2, tmpvar_5).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, tmpvar_6).xyz * scale2)\n   + bias2)).x * tmpvar_3.x);\n  tmpvar_11.y = (((\n    (texture (sampler_blur2, tmpvar_8).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, tmpvar_9).xyz * scale2)\n   + bias2)).x * tmpvar_3.y);\n  ret_2.x = texture (sampler_fw_main, ((uv - (tmpvar_10 * 0.01)) + (tmpvar_11 * 0.003))).x;\n  vec4 tmpvar_12;\n  tmpvar_12 = texture (sampler_blur3, uv);\n  ret_2.x = (ret_2.x + ((ret_2.x - \n    ((tmpvar_12.xyz * scale3) + bias3)\n  .x) * 0.1));\n  ret_2.x = (ret_2.x + 0.004);\n  vec2 tmpvar_13;\n  tmpvar_13.x = tmpvar_7;\n  tmpvar_13.y = -(tmpvar_4);\n  my_uv_1 = (uv + ((tmpvar_13 * 0.05) * (1.2 - \n    ((tmpvar_12.xyz * scale3) + bias3)\n  .y)));\n  ret_2.z = texture (sampler_fw_main, my_uv_1).z;\n  vec2 x_14;\n  x_14 = (my_uv_1 - uv);\n  ret_2.z = (ret_2.z + ((\n    ((ret_2.z - ((texture (sampler_blur1, uv).xyz * scale1) + bias1).z) * sqrt(dot (x_14, x_14)))\n   * 180.0) / sqrt(\n    dot (tmpvar_3, tmpvar_3)\n  )));\n  ret_2.z = (ret_2.z * 0.8);\n  ret_2.z = (ret_2.z + 0.004);\n  vec2 tmpvar_15;\n  tmpvar_15.x = -(tmpvar_7);\n  tmpvar_15.y = tmpvar_4;\n  my_uv_1 = (tmpvar_15 * 0.045);\n  vec2 tmpvar_16;\n  tmpvar_16.x = (((\n    (texture (sampler_blur2, (uv + vec2(0.01, 0.0))).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, (uv - vec2(0.01, 0.0))).xyz * scale2)\n   + bias2)).y * tmpvar_3.x);\n  tmpvar_16.y = (((\n    (texture (sampler_blur2, (uv + vec2(0.0, 0.01))).xyz * scale2)\n   + bias2) - (\n    (texture (sampler_blur2, (uv - vec2(0.0, 0.01))).xyz * scale2)\n   + bias2)).y * tmpvar_3.y);\n  my_uv_1 = (my_uv_1 + (uv - (tmpvar_16 * 0.03)));\n  ret_2.y = texture (sampler_fw_main, my_uv_1).y;\n  ret_2.y = (ret_2.y + ((\n    (ret_2.y - ((texture (sampler_blur3, my_uv_1).xyz * scale3) + bias3).y)\n   * 0.1) + 0.01));\n  vec4 tmpvar_17;\n  tmpvar_17 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * my_uv_1.xyy) * (\n    (q27 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q29)));\n  if (((ret_2.x > (q21 * q13)) && (ret_2.x <= (q24 * q11)))) {\n    ret_2.y = (ret_2.y - (tmpvar_17.x * 0.5));\n  };\n  if (((ret_2.y > (q22 * q11)) && (ret_2.y <= (q25 * q12)))) {\n    ret_2.z = (ret_2.z - (tmpvar_17.y * 0.5));\n  };\n  if (((ret_2.z > (q23 * q12)) && (ret_2.z <= (q26 * q13)))) {\n    ret_2.x = (ret_2.x - (tmpvar_17.z * 0.5));\n  };\n  vec4 tmpvar_18;\n  tmpvar_18.w = 1.0;\n  tmpvar_18.xyz = ret_2;\n  ret = tmpvar_18.xyz;\n }","comp":"vec3 xlat_mutableblur;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv2;\nvec2 xlat_mutableuv3;\n shader_body { \n  vec2 uv_1;\n  float t_rel_2;\n  float inten_4;\n  float dist_5;\n  float ang2_6;\n  vec3 ret_7;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  dist_5 = 1.0;\n  inten_4 = 1.0;\n  xlat_mutableret1 = vec3(0.0, 0.0, 0.0);\n  t_rel_2 = q29;\n  for (float n_3 = 0.0; n_3 <= 12.0; n_3 += 1.0) {\n    ang2_6 = (((6.28 * n_3) / 12.0) + q29);\n    float tmpvar_8;\n    tmpvar_8 = cos(ang2_6);\n    float tmpvar_9;\n    tmpvar_9 = sin(ang2_6);\n    xlat_mutableuv2.x = ((uv_1.x * tmpvar_8) - (uv_1.y * tmpvar_9));\n    xlat_mutableuv2.y = ((uv_1.x * tmpvar_9) + (uv_1.y * tmpvar_8));\n    xlat_mutableuv2 = (xlat_mutableuv2 * aspect.yx);\n    dist_5 = (1.0 - fract((\n      (n_3 / 12.0)\n     + t_rel_2)));\n    inten_4 = ((4.0 * dist_5) * (1.0 - (dist_5 * dist_5)));\n    vec2 tmpvar_10;\n    tmpvar_10.x = q1;\n    tmpvar_10.y = q2;\n    xlat_mutableuv3 = (((\n      (3.0 * xlat_mutableuv2)\n     * dist_5) + 0.5) + (0.1 * tmpvar_10));\n    xlat_mutableblur = (((texture (sampler_blur1, \n      fract(xlat_mutableuv3)\n    ).xyz * scale1) + bias1) * vec3(0.8, 0.9, 1.0));\n    xlat_mutableret1 = max (xlat_mutableret1, ((texture (sampler_main, xlat_mutableuv3).xyz + xlat_mutableblur) * inten_4));\n  };\n  ret_7 = (xlat_mutableret1 - 0.1);\n  vec4 tmpvar_11;\n  tmpvar_11 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv_1.xyy) * (\n    (q28 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q31)));\n  if (((ret_7.x > (q26 * q13)) && (ret_7.x <= (q23 * q11)))) {\n    ret_7.z = (ret_7.z - (tmpvar_11.x * 0.5));\n  };\n  if (((ret_7.y > (q25 * q11)) && (ret_7.y <= (q22 * q12)))) {\n    ret_7.x = (ret_7.x - (tmpvar_11.y * 0.5));\n  };\n  if (((ret_7.z > (q24 * q12)) && (ret_7.z <= (q21 * q13)))) {\n    ret_7.y = (ret_7.y - (tmpvar_11.z * 0.5));\n  };\n  ret_7 = (1.0 - ret_7);\n  vec4 tmpvar_12;\n  tmpvar_12.w = 1.0;\n  tmpvar_12.xyz = ret_7;\n  ret = tmpvar_12.xyz;\n }","warp_hlsl":"shader_body\n{\n    float2 scale = float2(1280,1024)*texsize.zw; // 1280x1024 : the resolution i modelled this shader with\n    float1 d = 0.005;\n    float1 dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).x*scale.x;\n    float1 dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).x*scale.y;\n    float1 dxb = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).x*scale.x;\n    float1 dyb = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).x*scale.y;\n    float2 my_uv = uv - float2(dx,dy)*0.01 + float2(dxb,dyb)*0.003;\n\n\n\n    float2 v = 0.01;\n    ret.x = tex2D( sampler_fw_main, my_uv -floor(my_uv)*0).x;\n\n    \n    ret.x += (ret.x - GetBlur3(uv).x)*.1;\n    ret.x += 0.004;\n\n\n//--------------------------------\n\n    my_uv = uv + float2(dy,-dx)*0.05*(1.2-GetBlur3(uv).y);\n\n\n\n    v = 0.01;\n    ret.z = tex2D( sampler_fw_main, my_uv).z;\n    \n    ret.z += (ret.z - GetBlur1(uv).z)*length(my_uv-uv)*180/length(scale);\n    ret.z *= 0.8;\n    ret.z += 0.004;\n\n\n\n//--------------------------------\n\n    d = 0.01;\n    my_uv = float2(-dy,dx)*0.045;\n\n    dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).y*scale.x;\n    dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).y*scale.y;\n    my_uv += uv - float2(dx,dy)*0.03;\n\n\n\n    v = 0.01;\n    ret.y =tex2D( sampler_fw_main, my_uv).y;\n\n    \n    ret.y += (ret.y - GetBlur3(my_uv).y)*0.1 + 0.01;\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((my_uv.xyy*q27\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q29\n                     );\nif(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y -= (noise9).x*.5; \nif(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z -= (noise9).y*.5; \nif(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x -= (noise9).z*.5; \n}","comp_hlsl":"float3 ret1, neu, crisp, blur;\nfloat2 uv2, uv3;\n\nshader_body\n{\nfloat ang2, c, s;\nuv -= 0.5;\nuv *= aspect.xy;    \n\nfloat2 tmp = uv;\nfloat dist = 1;\nfloat inten = 1;\nfloat mask = 0;\nret1 = 0;\nint anz = 12;\nfloat n = 0;\nfloat t_rel = q29;\nwhile (n <= anz) {\n    ang2 = 6.28*n/anz+q29;\n    c = cos(ang2);\n    s = sin(ang2);\n    uv2.x =  uv.x*c - uv.y*s;\n    uv2.y =  uv.x*s + uv.y*c;\n    uv2*= aspect.yx;\n\n    dist = 1-frac(n/anz+t_rel); //evtl sqrt !\n\n    inten =  4*dist*(1-dist*dist);\n    uv3 = 3*uv2*dist + 0.5+.1*float2(q1,q2);\n    crisp = GetPixel(uv3);\n    blur = GetBlur1(frac(uv3)) * float3 (.8,.9,1);\n    ret1 = max(ret1,(crisp+blur)*inten);\nn++;\n}\n\n\nfloat3 ret1 = ret1 ;\n//ret1 = GetPixel(.5+uv_orig*aspect.yx*1.2);\n\n\nret = ret1-.1;\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy*q28\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q31\n                     );\nif(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; \nif(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; \nif(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; \nret=1-ret;\n}"}