{"version":2,"baseVals":{"rating":5,"decay":0.993,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":0.001,"wave_scale":0.573,"wave_smoothing":0,"modwavealphastart":0.24,"modwavealphaend":1.3,"warpscale":1.331,"zoom":0.99951,"warp":0.01,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0.5,"ob_r":0.01,"ib_size":0.26,"mv_x":28,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"usedots":1,"thick":1,"scaling":2.27969,"smoothing":0.7,"b":0},"init_eqs_str":"a.d4=0;a.dx=0;a.d1=0;a.tt=0;a.d3=0;a.d2=0;a.ddy=0;a.t=0;a.dy=0;a.t8=a.time;","frame_eqs_str":"","point_eqs_str":"a.d1=95.13*a.sample;a.d2=111.52*a.sample*a.value1;a.d3=84.45*a.sample;a.d4=143.23*a.sample;a.x=a.sample;a.y=.5+a.value1;a.dx=1.2*Math.cos(27.43*a.sample+1+6.28*(a.d1-Math.floor(a.d1)));a.dy=.4+Math.cos(73.92*a.sample+4+6.28*(a.d2-Math.floor(a.d2)));a.ddy=.85;a.t=.3*a.time+.25*Math.sin(64.21*a.sample+5)+.25*Math.sin(123.56*a.sample+3)+a.d4-Math.floor(a.d4);a.t-=Math.floor(a.t);a.t=.4;a.tt=a.t;a.x=.5+a.dx*a.t;a.y=.2+a.dy*a.t+a.ddy*a.t*a.t;a.a=1;a.g=.5*Math.sin(513.32*a.sample)+\n.4*Math.sin(3*a.time);a.b=.5*Math.sin(53.32*a.sample)+.3*Math.sin(5*a.time);a.r=.5*Math.sin(23.32*a.sample)+.2*Math.sin(2*a.time);","init_eqs_eel":"t8 = time;","frame_eqs_eel":"","point_eqs_eel":"d1 = sample*95.13;\nd2 = sample*111.52*value1;\nd3 = sample*84.45;\nd4 = sample*143.23;\nx = sample;\ny = 0.5 + value1;\ndx = 1.2*cos(sample*27.43 + 1 + 6.28*(d1-int(d1)));\ndy = .4 + 1*cos(sample*73.92 + 4 + 6.28*(d2-int(d2)));\nddy = .85;     // acceleration downward\nt = time*0.3 + 0.25*sin(sample*64.21+5) + 0.25*sin(sample*123.56+3) + d4-int(d4);\nt = t - int(t);\nt=.3+1*.1;\ntt=t;\n// simple particle physics: x = x0 + dx*t and y = y0 + dy*t + ddy*t*t\nx = 0.5 + dx*t;\ny = .2 + dy*t + ddy*t*t;\na = 1;//1-t*t;\n// for some easy audio sync:\n//a = min(1,a * bass);\ng = 0 + 0.5*sin(sample*513.32)+.4*sin(time*3);\nb = 0 + 0.5*sin(sample*53.32)+.3*sin(time*5);\nr = 0 + 0.5*sin(sample*23.32)+.2*sin(time*2);"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"","frame_eqs_str":"","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","pixel_eqs_eel":"","warp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  float tmpvar_2;\n  tmpvar_2 = dot (texsize.zw, texsize.zw);\n  vec2 tmpvar_3;\n  tmpvar_3 = (uv - 0.5);\n  tmpvar_1.xyz = (max (max (texture (sampler_main, uv).xyz, texture (sampler_main, \n    ((tmpvar_3 * (1.0 - (3.0 * \n      sqrt(tmpvar_2)\n    ))) + 0.5)\n  ).xyz), texture (sampler_main, (\n    (tmpvar_3 * (1.0 + (3.0 * sqrt(tmpvar_2))))\n   + 0.5)).xyz) - 0.02);\n  ret = tmpvar_1.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  ret_1 = mix ((texture (sampler_main, uv).xyz * 50.0), (texture (sampler_main, (\n    ((uv - 0.5) * vec2(-1.0, 1.0))\n   + 0.5)).xyz * 50.0), vec3(0.5, 0.5, 0.5));\n  ret_1 = ((ret_1 * (1.0 - ret_1)) * 12.0);\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ret_1;\n  ret = tmpvar_2.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_main, uv ).xyz;\n\n    // feather pen\n    ret = max(ret, tex2D( sampler_main, (uv-0.5)*(1-3*length(texsize.zw)) + 0.5 ).xyz);\n    ret = max(ret, tex2D( sampler_main, (uv-0.5)*(1+3*length(texsize.zw)) + 0.5 ).xyz);\n\n    // darken over time\n    ret -= 0.02;\n\n    // add noise\n    //float2 uv_noise = uv*texsize_noise_lq.zw*texsize.xy + rand_frame.xy;\n    //ret += (tex2D(sampler_noise_lq, uv_noise)*2-1)*0.02;\n}","comp_hlsl":"shader_body\n{\n    float2 uv_echo = (uv - .5)*1*float2(-1,1) + .5;\n    ret = lerp( tex2D(sampler_main, uv).xyz*50, \n                tex2D(sampler_main, uv_echo).xyz*50, \n                .5 \n              ); //video echo\n    ret *= 1.0; //gamma\n    ret = ret*(1-ret)*12; //solarize\n    ;\n}"}