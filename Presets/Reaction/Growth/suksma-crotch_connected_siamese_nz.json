{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"echo_zoom":1.002,"echo_orient":1,"wave_mode":7,"wrap":0,"brighten":1,"wave_a":35.318,"wave_scale":0.01,"wave_smoothing":0.792,"wave_mystery":-1,"modwavealphaend":0.97,"warpscale":1.331,"fshader":1,"zoom":0.98962,"warp":0.0101,"wave_r":0.25,"wave_g":0.26,"wave_b":0.27,"ob_size":0.005,"ob_a":0.1,"ib_size":0,"mv_x":64,"mv_y":1},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.q25=0;a.q12=0;a.ocog=0;a.q18=0;a.q22=0;a.q21=0;a.vt=0;a.q13=0;a.q15=0;a.q29=0;a.q6=0;a.thresh=0;a.q1=0;a.q5=0;a.vb=0;a.cog=0;a.q9=0;a.dy_r=0;a.q31=0;a.q23=0;a.q24=0;a.q11=0;a.q10=0;a.q4=0;a.dx_r=0;a.q16=0;a.q26=0;a.q19=0;a.q17=0;a.q2=0;a.q27=0;a.q14=0;a.q3=0;a.vvm=0;a.q32=0;a.vvb=0;a.q7=0;a.q28=0;a.vm=0;a.q30=0;a.q20=0;a.vvt=0;a.q8=0;","frame_eqs_str":"a.vb=.95*a.vb+(1-a.vb)*pow(a.bass_att,2)*.02;a.vvb=.95*a.vvb+(1-a.vvb)*a.vb*.01;a.vm=.95*a.vm+(1-a.vm)*pow(a.mid_att,2)*.02;a.vvm=.95*a.vvm+(1-a.vvm)*a.vm*.01;a.vt=.95*a.vt+(1-a.vt)*pow(a.treb_att,2)*.02;a.vvt=.95*a.vvt+(1-a.vvt)*a.vt*.01;a.vvb=Math.min(1,Math.max(0,a.vvb));a.vvm=Math.min(1,Math.max(0,a.vvm));a.vvt=Math.min(1,Math.max(0,a.vvt));a.q1=2*a.vvb;a.q2=2*a.vvm;a.q3=2*a.vvt;a.q4=5*(a.q1+a.q2+a.q3);a.q5=5*(a.q1+a.q2+a.q3);a.q6=5*(a.q1+a.q2+a.q3);a.q7=5*(a.q1+a.q2+a.q3);\na.q8=5*(a.q1+a.q2+a.q3);a.q9=5*(a.q1+a.q2+a.q3);a.q10=5*(a.q1+a.q2+a.q3);a.q11=5*(a.q1+a.q2+a.q3);a.q12=5*(a.q1+a.q2+a.q3);a.q13=5*(a.q1+a.q2+a.q3);a.q14=5*(a.q1+a.q2+a.q3);a.q15=5*(a.q1+a.q2+a.q3);a.q16=5*(a.q1+a.q2+a.q3);a.q17=5*(a.q1+a.q2+a.q3);a.q18=5*(a.q1+a.q2+a.q3);a.q19=5*(a.q1+a.q2+a.q3);a.q20=5*(a.q1+a.q2+a.q3);a.q21=5*(a.q1+a.q2+a.q3);a.q22=5*(a.q1+a.q2+a.q3);a.q23=5*(a.q1+a.q2+a.q3);a.q24=5*(a.q1+a.q2+a.q3);a.q25=5*(a.q1+a.q2+a.q3);a.q26=5*(a.q1+a.q2+a.q3);a.q27=5*(a.q1+a.q2+a.q3);a.q28=\n5*(a.q1+a.q2+a.q3);a.q29=5*(a.q1+a.q2+a.q3);a.q30=5*(a.q1+a.q2+a.q3);a.q31=5*(a.q1+a.q2+a.q3);a.q32=5*(a.q1+a.q2+a.q3);a.wave_r+=.5*Math.sin(1.13*a.time);a.wave_g+=.5*Math.sin(1.23*a.time);a.wave_b+=.5*Math.sin(1.33*a.time);a.wave_x+=.2*Math.sin(.32*a.time);a.wave_y+=.2*Math.cos(.32*a.time);a.ob_r=a.wave_r;a.ob_g=a.wave_g;a.ob_b=a.wave_b;a.q1=a.ob_r;a.q2=a.ob_g;a.q3=a.ob_b;a.cog=a.ocog+.005*(a.bass+a.bass_att+a.bass*a.bass_att-2);a.ocog=below(a.cog,3E4)*a.cog;a.q4=a.cog;","pixel_eqs_str":"a.thresh=2*above(a.bass_att,a.thresh)+(1-above(a.bass_att,a.thresh))*(.96*(a.thresh-1.3)+1.3);a.dx_r=.015*equal(a.thresh,2)*Math.sin(5*a.q4)+(1-equal(a.thresh,2))*a.dx_r;a.dy_r=.015*equal(a.thresh,2)*Math.sin(6*a.q4)+(1-equal(a.thresh,2))*a.dy_r;a.zoom+=.0095*(Math.sin(10*a.ang)+.3*Math.sin(Math.sin(2*a.q4*Math.sin(a.q4)*a.rad))-.1*Math.cos(a.rad));a.rot+=.08*Math.abs(.746-a.rad)*Math.sin(2.2*(.5-a.rad)+5.7*Math.sin(.1*a.q4));a.sx+=.01*(.99-a.rad)*Math.sin(.733*a.q4)*below(Math.sin(a.q4),\n0);a.sy+=.01*(.99-a.rad)*Math.cos(.953*a.q4)*above(Math.sin(a.q4),0);a.zoom-=.015*(1.5-a.rad)*below(a.rad,1.5);","init_eqs_eel":"","frame_eqs_eel":"//per frame less reactive volume for all unused q vars, put before other q vars are set for cop out mashing\nvb = vb*0.95 + (1-vb)*pow(bass_att,2)*0.02;\nvvb = vvb*0.95 + (1-vvb)*vb*0.01;\nvm = vm*0.95 + (1-vm)*pow(mid_att,2)*0.02;\nvvm = vvm*0.95 + (1-vvm)*vm*0.01;\nvt = vt*0.95 + (1-vt)*pow(treb_att,2)*0.02;\nvvt = vvt*0.95 + (1-vvt)*vt*0.01;\nvvb = min(1,max(0,vvb));\nvvm = min(1,max(0,vvm));\nvvt = min(1,max(0,vvt));\nq1 = vvb*2;//0.5 + vb - vvb;\nq2 = vvm*2;//0.5 + vm - vvm;\nq3 = vvt*2;//0.5 + vt - vvt;\nq4=(q1+q2+q3)*5;\nq5=(q1+q2+q3)*5;\nq6=(q1+q2+q3)*5;\nq7=(q1+q2+q3)*5;\nq8=(q1+q2+q3)*5;\nq9=(q1+q2+q3)*5;\nq10=(q1+q2+q3)*5;\nq11=(q1+q2+q3)*5;\nq12=(q1+q2+q3)*5;\nq13=(q1+q2+q3)*5;\nq14=(q1+q2+q3)*5;\nq15=(q1+q2+q3)*5;\nq16=(q1+q2+q3)*5;\nq17=(q1+q2+q3)*5;\nq18=(q1+q2+q3)*5;\nq19=(q1+q2+q3)*5;\nq20=(q1+q2+q3)*5;\nq21=(q1+q2+q3)*5;\nq22=(q1+q2+q3)*5;\nq23=(q1+q2+q3)*5;\nq24=(q1+q2+q3)*5;\nq25=(q1+q2+q3)*5;\nq26=(q1+q2+q3)*5;\nq27=(q1+q2+q3)*5;\nq28=(q1+q2+q3)*5;\nq29=(q1+q2+q3)*5;\nq30=(q1+q2+q3)*5;\nq31=(q1+q2+q3)*5;\nq32=(q1+q2+q3)*5;\n\nwave_r = wave_r + 0.5*sin(time*1.13);\nwave_g = wave_g + 0.5*sin(time*1.23);\nwave_b = wave_b + 0.5*sin(time*1.33);\n\nwave_x = wave_x + 0.2*sin(0.32*time);\nwave_y = wave_y + 0.2*cos(0.32*time);\n\nob_r = wave_r;\nob_g = wave_g;\nob_b = wave_b;\n\nq1 = ob_r;\nq2 = ob_g;\nq3 = ob_b;\ncog = ocog+0.005*(bass+bass_att+(bass*bass_att)-2);\nocog = below(cog,30000)*cog;\nq4 = cog;","pixel_eqs_eel":"thresh = above(bass_att,thresh)*2+(1-above(bass_att,thresh))*((thresh-1.3)*0.96+1.3);\ndx_r = equal(thresh,2)*0.015*sin(5*q4)+(1-equal(thresh,2))*dx_r;\ndy_r = equal(thresh,2)*0.015*sin(6*q4)+(1-equal(thresh,2))*dy_r;\nzoom = zoom + 0.0095*(sin(10*ang) + sin(sin(q4*2*sin(q4)*rad))*0.3 - cos(rad)*0.1);\nrot = rot + 0.08*abs(0.746-rad)*sin(2.2*(0.5-rad)+5.7*sin(0.1*q4));\nsx = sx + 0.01*(0.99*1-rad)*sin(0.733*q4)*below(sin(q4),0);\nsy = sy + 0.01*(0.99*1-rad)*cos(0.953*q4)*above(sin(q4),0);\nzoom = zoom - 0.015*(0.5*abs(3)-rad)*below(rad,1.5);","warp":" shader_body { \n  float n_1;\n  vec3 ret_2;\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_pw_main, uv);\n  ret_2 = tmpvar_3.xyz;\n  n_1 = (clamp ((texture (sampler_pw_main, \n    (uv + texsize.zw)\n  ).x * 999.0), 0.0, 1.0) + clamp ((texture (sampler_pw_main, \n    (uv + (texsize.zw * vec2(1.0, 0.0)))\n  ).x * 999.0), 0.0, 1.0));\n  n_1 = (n_1 + clamp ((texture (sampler_pw_main, \n    (uv + (texsize.zw * vec2(1.0, -1.0)))\n  ).x * 999.0), 0.0, 1.0));\n  n_1 = (n_1 + clamp ((texture (sampler_pw_main, \n    (uv + (texsize.zw * vec2(0.0, 1.0)))\n  ).x * 999.0), 0.0, 1.0));\n  n_1 = (n_1 + clamp ((texture (sampler_pw_main, \n    (uv + (texsize.zw * vec2(0.0, -1.0)))\n  ).x * 999.0), 0.0, 1.0));\n  n_1 = (n_1 + clamp ((texture (sampler_pw_main, \n    (uv + (texsize.zw * vec2(-1.0, 1.0)))\n  ).x * 999.0), 0.0, 1.0));\n  n_1 = (n_1 + clamp ((texture (sampler_pw_main, \n    (uv + (texsize.zw * vec2(-1.0, 0.0)))\n  ).x * 999.0), 0.0, 1.0));\n  n_1 = (n_1 + clamp ((texture (sampler_pw_main, \n    (uv - texsize.zw)\n  ).x * 999.0), 0.0, 1.0));\n  if ((n_1 < 1.9)) {\n    ret_2 = (tmpvar_3.xyz - 0.4);\n  };\n  if ((n_1 > 3.1)) {\n    ret_2 = (ret_2 - 0.4);\n  };\n  bool tmpvar_4;\n  if ((ret_2.x < 0.1)) {\n    tmpvar_4 = (abs((n_1 - 3.0)) < 0.5);\n  } else {\n    tmpvar_4 = bool(0);\n  };\n  if (tmpvar_4) {\n    ret_2 = (ret_2 + 0.4);\n  };\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv.xyy) * (texsize.xyy * texsize_noisevol_hq.zww)) + (vec3(0.0, 0.0, 0.4) * time)));\n  if ((((ret_2.x + ret_2.y) + ret_2.z) > 0.5)) {\n    ret_2 = (ret_2 * (tmpvar_5 * 1.5).xyz);\n  };\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_2;\n  ret = tmpvar_6.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  float ang2_2;\n  vec3 ret_3;\n  ang2_2 = (fract((0.3183098 * ang)) / 2.0);\n  ang2_2 = (abs((ang2_2 - 0.25)) * 6.283185);\n  vec2 tmpvar_4;\n  tmpvar_4.x = cos(ang2_2);\n  tmpvar_4.y = sin(ang2_2);\n  uv_1 = (0.5 + ((\n    (0.4 * (rad * sqrt(dot (texsize.xy, texsize.xy))))\n   * tmpvar_4) * texsize.zw));\n  ret_3 = (1.4 * pow ((\n    clamp (((texture (sampler_blur1, uv_1).xyz * scale1) + bias1), 0.0, 1.0)\n   * \n    (texture (sampler_pc_main, uv_1).xyz - ((texture (sampler_blur3, uv_1).xyz * scale3) + bias3))\n  ), vec3(0.5, 0.5, 0.5)));\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv_1.xyy) * (texsize.xyy * texsize_noisevol_hq.zww)) + (vec3(0.0, 0.0, 0.4) * time)));\n  if ((((ret_3.x + ret_3.y) + ret_3.z) < 0.04)) {\n    ret_3 = (ret_3 + (tmpvar_5 * 0.6).xyz);\n  };\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_3;\n  ret = tmpvar_6.xyz;\n }","warp_hlsl":"shader_body\n{\n  // sample previous frame\n  ret = tex2D( sampler_pw_main, uv ).xyz;\n\n  float n;\n  float2 d = texsize.zw*1;\n  n  = saturate(tex2D(sampler_pw_main, uv+d*float2( 1, 1)).x*999);\n  n += saturate(tex2D(sampler_pw_main, uv+d*float2( 1, 0)).x*999);\n  n += saturate(tex2D(sampler_pw_main, uv+d*float2( 1,-1)).x*999);\n  n += saturate(tex2D(sampler_pw_main, uv+d*float2( 0, 1)).x*999);\n  n += saturate(tex2D(sampler_pw_main, uv+d*float2( 0,-1)).x*999);\n  n += saturate(tex2D(sampler_pw_main, uv+d*float2(-1, 1)).x*999);\n  n += saturate(tex2D(sampler_pw_main, uv+d*float2(-1, 0)).x*999);\n  n += saturate(tex2D(sampler_pw_main, uv+d*float2(-1,-1)).x*999);\n  \nfloat t = 0.4;\n  if (n < 1.9)\n    ret -= t;\n  if (n > 3.1)\n    ret -= t;\n  if (ret.x < 0.1 && abs(n-3) < 0.5)\n    ret += t;\n\nfloat4 noise2 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*0.4 \n                     );\nif(ret.x+ret.y+ret.z>.5)ret *= (noise2)*1.5; \n\n}","comp_hlsl":"shader_body\n{\n    float rad_lq = rad * length(texsize.xy)*0.5;\n    float ang_lq = ang;\n    float2 uv_temp1 = (uv - 0.5) * texsize.xy;\n    float rad_hq = length(uv_temp1);\n    float ang_hq = atan2(-uv_temp1.y, uv_temp1.x);\n\n    float2 uv2 = (uv - 0.5);\n    float rad2 = rad_lq*0.8;\n    float ang2 = ang_lq * M_INV_PI_2 + rad_lq*0.000 + time*0.00;\n\n\n        // FIN TYPE\n        float fins = 2;\n        ang2 = frac(ang2*fins)/fins;\n              // ENABLE THIS TO MAKE THE FINS ALTERNATE: (seamless!)\n              ang2 = abs(ang2 - 0.5/fins);\n\n\n    ang2 *= M_PI_2;\n    uv = 0.5 + rad2*float2(cos(ang2),sin(ang2))*texsize.zw;\n\n    ret = 1.4*pow(saturate(GetBlur1(uv))*((tex2D(sampler_pc_main,uv)-GetBlur3(uv))),0.5); //invert\nfloat4 noise2 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*0.4 \n                     );\nif(ret.x+ret.y+ret.z<.04)ret += (noise2)*.6; \n\n}"}