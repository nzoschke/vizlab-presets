{"version":2,"baseVals":{"rating":5,"gammaadj":1.8,"wave_mode":5,"wave_dots":1,"wave_thick":1,"wave_a":0.3,"wave_scale":3.355,"wave_smoothing":0.9,"warpscale":2.853,"zoom":1.04,"dx":0.03,"warp":0.47402,"wave_r":0.9,"wave_g":0.77,"wave_b":0.6,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.mq29=0;a.cthr=0;a.mq1=0;a.q25=0;a.q22=0;a.q21=0;a.q29=0;a.mq21=0;a.mq24=0;a.chng=0;a.mq28=0;a.mq23=0;a.q23=0;a.q24=0;a.mq30=0;a.q26=0;a.mq27=0;a.mq25=0;a.mq22=0;a.mq26=0;a.q27=0;a.q28=0;a.q30=0;","frame_eqs_str":"a.chng=Math.sin(.5*a.time);a.cthr=.9999;a.mq21=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq21;a.mq22=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq22;a.mq23=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq23;a.mq24=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq24;a.mq25=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq25;a.mq26=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq26;a.mq27=.00001<Math.abs(above(a.chng,a.cthr))?rand(1):a.mq27;a.mq28=.00001<Math.abs(above(a.chng,\na.cthr))?rand(1):a.mq28;a.mq29=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq29;a.mq30=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq30;a.monitor=a.chng;a.q21=a.mq21;a.q22=a.mq22;a.q23=a.mq23;a.q24=a.mq24;a.q25=a.mq25;a.q26=a.mq26;a.q27=a.mq27;a.q28=a.mq28;a.q29=a.mq29;a.q30=a.mq30;a.monitor=a.mq1;a.wave_r+=.7*(.2*Math.sin(.933*a.time)+.3*Math.sin(1.045*a.time));a.wave_g+=.7*(.2*Math.sin(.9*a.time)+.3*Math.sin(.956*a.time));a.wave_b+=.2*(.2*Math.sin(.91*a.time)+.3*Math.sin(.92*a.time));\na.zoom+=.02*Math.cos(1.713*a.time+2);a.zoom+=.02*Math.cos(2.319*a.time+4);a.zoom+=.02*Math.cos(1.522*a.time+1);a.wave_mystery=.05*Math.sin(a.time);","pixel_eqs_str":"a.dx=.002*Math.cos(a.ang+1.57);a.dy=-.002*Math.sin(a.ang+1.57);","init_eqs_eel":"","frame_eqs_eel":"chng=sin(time*.5);\ncthr=.9999;\nmq21=if(above(chng,cthr),rand(3),mq21);\nmq22=if(above(chng,cthr),rand(3),mq22);\nmq23=if(above(chng,cthr),rand(3),mq23);\nmq24=if(above(chng,cthr),rand(2),mq24);\nmq25=if(above(chng,cthr),rand(2),mq25);\nmq26=if(above(chng,cthr),rand(2),mq26);\nmq27=if(above(chng,cthr),rand(1),mq27);\nmq28=if(above(chng,cthr),rand(1),mq28);\nmq29=if(above(chng,cthr),rand(1)*.3,mq29);\nmq30=if(above(chng,cthr),rand(1)*.3,mq30);\nmonitor=chng;\nq21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;\nq27=mq27;q28=mq28;q29=mq29;q30=mq30;\n\nmonitor=mq1;\nwave_r = wave_r + 0.700*( 0.20*sin(0.933*time) + 0.30*sin(1.045*time) );\nwave_g = wave_g + 0.700*( 0.20*sin(0.900*time) + 0.30*sin(0.956*time) );\nwave_b = wave_b + 0.200*( 0.20*sin(0.910*time) + 0.30*sin(0.920*time) );\n\nzoom = zoom + 0.02*cos(time*1.713+2);\nzoom = zoom + 0.02*cos(time*2.319+4);\nzoom = zoom + 0.02*cos(time*1.522+1);\n\nwave_mystery = 0.05*sin(time)","pixel_eqs_eel":"dx= 0.002*cos(ang+1.57);\ndy=-0.002*sin(ang+1.57);","warp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, (uv + ((texture (sampler_noise_hq, \n    (rand_frame.xy + ((uv * 3.3) * (texsize.xy * texsize_noise_hq.zw)))\n  ).xy * texsize.zw) * 2.0)));\n  ret_1 = tmpvar_2.xyz;\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv.xyy) * (\n    (q27 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q29)));\n  if (((tmpvar_2.x > (q21 * roam_cos.y)) && (tmpvar_2.x <= (q24 * roam_sin.x)))) {\n    ret_1.y = (tmpvar_2.y + (tmpvar_3.x * 0.5));\n  };\n  if (((ret_1.y > (q22 * roam_sin.x)) && (ret_1.y <= (q25 * roam_cos.x)))) {\n    ret_1.z = (tmpvar_2.z + (tmpvar_3.y * 0.5));\n  };\n  if (((ret_1.z > (q23 * roam_cos.x)) && (ret_1.z <= (q26 * roam_sin.y)))) {\n    ret_1.x = (tmpvar_2.x + (tmpvar_3.z * 0.5));\n  };\n  ret_1 = (ret_1 - 0.004);\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_1;\n  ret = tmpvar_4.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  vec3 ret_2;\n  uv_1 = (0.05 + (0.9 * uv));\n  vec4 tmpvar_3;\n  tmpvar_3 = texture (sampler_main, uv_1);\n  vec2 theta_4;\n  theta_4 = (3.0 * (tmpvar_3.zz + tmpvar_3.yx));\n  uv_1 = (uv_1 + (-0.05 * (\n    sin(theta_4)\n   / \n    cos(theta_4)\n  )));\n  ret_2 = (texture (sampler_main, uv_1).xyz * 4.0);\n  ret_2 = (ret_2 - ((\n    (texture (sampler_blur1, uv_1).xyz * scale1)\n   + bias1) * 3.0));\n  ret_2 = (ret_2 * (1.0 + (0.12 * \n    ((texture (sampler_noise_lq, (rand_frame.xy + (\n      (uv_1 * texsize.xy)\n     * texsize_noise_lq.zw))).xxx * 2.0) - 1.0)\n  )));\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv_1.xyy) * (\n    (q28 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q30)));\n  if (((ret_2.x > (q26 * roam_cos.y)) && (ret_2.x <= (q23 * roam_sin.x)))) {\n    ret_2.z = (ret_2.z - (tmpvar_5.x * 0.5));\n  };\n  if (((ret_2.y > (q25 * roam_sin.x)) && (ret_2.y <= (q22 * roam_cos.x)))) {\n    ret_2.x = (ret_2.x - (tmpvar_5.y * 0.5));\n  };\n  if (((ret_2.z > (q24 * roam_cos.x)) && (ret_2.z <= (q21 * roam_sin.y)))) {\n    ret_2.y = (ret_2.y - (tmpvar_5.z * 0.5));\n  };\n  ret_2 = ((ret_2 - 0.1) * 1.1);\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_2;\n  ret = tmpvar_6.xyz;\n }","warp_hlsl":"shader_body\n{\n    // add noise to UV's:\n    float2 uv2 = uv;\n    uv2.xy += tex2D(sampler_noise_hq, rand_frame.xy + uv*3.3*texsize.xy*texsize_noise_hq.zw)*texsize.zw*2;\n\n    // sample previous frame\n    ret = tex2D( sampler_main, uv2 ).xyz;\n\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy*q27\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q29\n                     );\nif(ret.x> q21*roam_cos.y && ret.x<= q24*roam_sin.x)ret.y += (noise9).x*.5; \nif(ret.y> q22*roam_sin.x && ret.y<= q25*roam_cos.x)ret.z += (noise9).y*.5; \nif(ret.z> q23*roam_cos.x && ret.z<= q26*roam_sin.y)ret.x += (noise9).z*.5; \n\n    // darken over time\n    ret -= 0.004;\n}","comp_hlsl":"shader_body\n{\n    uv = 0.05 + 0.9*uv;\n\nret = GetPixel(uv);\n    uv += -.05*tan(3*(ret.zz+ret.yx));\n    \n\n    // equivalent of a laplacian: [center*4 - each of the 4 neighbors*1]\n    ret = 0;\n    ret += tex2D(sampler_main, uv ).xyz*4;\n    ret -= GetBlur1(uv)*3;\n\n    // little bit of noise:\n    ret *= 1 + 0.12*(tex2D(sampler_noise_lq, rand_frame.xy \n           + uv*texsize.xy*texsize_noise_lq.zw).xxx*2-1);\n \nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy*q28\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q30 \n                     );\nif(ret.x> q26*roam_cos.y && ret.x<= q23*roam_sin.x)ret.z -= (noise9).x*.5; \nif(ret.y> q25*roam_sin.x && ret.y<= q22*roam_cos.x)ret.x -= (noise9).y*.5; \nif(ret.z> q24*roam_cos.x && ret.z<= q21*roam_sin.y)ret.y -= (noise9).z*.5; \n    // palettize:\n    //ret = pow(ret, float3(0.5, 0.5, 0.7));\n\n    ret = (ret-0.1)*1.1;\n   \n    //ret.xyz *= 2; // a little bit of overbright\n}\n\n"}