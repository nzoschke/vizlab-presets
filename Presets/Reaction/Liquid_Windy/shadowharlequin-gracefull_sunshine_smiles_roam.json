{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.925,"echo_zoom":0.987,"echo_alpha":0.5,"wave_mode":3,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"invert":1,"wave_a":4.1,"wave_scale":15.473,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"zoom":0.99951,"warp":0.01,"ob_size":0.5,"ob_r":0.01,"ib_size":0.26,"mv_x":64,"mv_y":30.048,"mv_l":0,"mv_b":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.sinbeat=0;a.trebresp=0;a.decay_rate=0;a.res=0;a.vol_now=0;a.ismid=0;a.q18=0;a.trebres=0;a.q6=0;a.q1=0;a.slowtime=0;a.isbass=0;a.pick=0;a.max_bpm=0;a.istreb=0;a.count=0;a.prev_beat=0;a.is_beat=0;a.sync=0;a.ez=0;a.q4=0;a.q16=0;a.decayrate=0;a.min_att=0;a.midres=0;a.effect=0;a.mx=0;a.mn=0;a.beat=0;a.q17=0;a.decay_to=0;a.q2=0;a.cdecay=0;a.q3=0;a.beat_level=0;a.q7=0;a.bassres=0;a.vol_mean=0;a.q20=0;a.q8=0;","frame_eqs_str":"a.decayrate=.9;a.trebresp=2;a.cdecay=pow(a.decayrate,div(30,a.fps));a.count=1*above(a.treb,a.trebresp)+(1-above(a.treb,3))*a.count;a.count-=above(a.count,a.cdecay)*a.cdecay;a.q20=a.count;a.vol_now=.4*a.bass+.1*(a.bass_att+a.treb+a.mid);a.vol_mean=.00001<Math.abs(equal(mod(a.frame,50),0))?a.vol_mean-.5*(a.vol_mean-a.vol_now):.1*(9*a.vol_mean+a.vol_now);a.beat=.00001<Math.abs(above(a.vol_now,1.15*a.vol_mean))?1:0;a.sinbeat=Math.sin(a.beat*(a.vol_now-a.vol_mean));a.slowtime+=a.beat*\na.time;a.q4=a.slowtime;a.wave_b=Math.cos(a.slowtime)+Math.abs(Math.cos(a.slowtime));a.wave_g=Math.abs(Math.sin(a.slowtime));a.wave_r=-1*Math.cos(a.slowtime)+Math.abs(-1*Math.cos(a.slowtime))+.2*(Math.cos(Math.sin(a.slowtime))+(Math.abs(Math.cos(Math.sin(a.slowtime)))+Math.cos(Math.sin(a.slowtime))));a.wave_r=1-(.00001<Math.abs(above(a.wave_r,1))?1:.00001<Math.abs(above(a.wave_r,0))?Math.abs(a.wave_r):0);a.wave_g=1-(.00001<Math.abs(above(a.wave_g,1))?1:.00001<Math.abs(above(a.wave_g,0))?Math.abs(a.wave_g):\n0);a.wave_b=1-(.00001<Math.abs(above(a.wave_b,1))?1:.00001<Math.abs(above(a.wave_b,0))?Math.abs(a.wave_b):0);a.ez=Math.sin(a.wave_g)*Math.cos(a.wave_r-a.wave_b)+.3*Math.sin(.00001<Math.abs(below(a.ez,.7))?a.ez:a.ez+.2);a.echo_zoom=a.ez;a.q1=1+a.vol_now;a.q2=1+a.sinbeat;a.q3=1+Math.sin(a.slowtime);a.mv_b=Math.cos(a.slowtime)+Math.abs(Math.cos(a.slowtime));a.mv_g=Math.abs(Math.sin(a.slowtime));a.mv_r=-1*Math.cos(a.slowtime)+Math.abs(-1*Math.cos(a.slowtime))+.2*(Math.cos(Math.sin(a.slowtime))+(Math.abs(Math.cos(Math.sin(a.slowtime)))+\nMath.cos(Math.sin(a.slowtime))));a.mv_r=1-(.00001<Math.abs(above(a.mv_r,1))?1:.00001<Math.abs(above(a.mv_r,0))?Math.abs(a.mv_r):0);a.mv_g=1-(.00001<Math.abs(above(a.mv_g,1))?1:.00001<Math.abs(above(a.mv_g,0))?Math.abs(a.mv_g):0);a.mv_b=1-(.00001<Math.abs(above(a.mv_b,1))?1:.00001<Math.abs(above(a.mv_b,0))?Math.abs(a.mv_b):0);a.mv_a=Math.sin(a.q20);a.warp=0;a.zoom=1;a.q1=a.aspectx;a.q2=a.aspecty;a.decay_rate=pow(.993,a.fps);a.min_att=2.5;a.decay_to=1;a.beat=div(a.bass,Math.max(a.min_att,a.bass_att));\na.beat=Math.max(a.beat,div(a.mid,Math.max(a.min_att,a.mid_att)));a.beat=Math.max(a.beat,div(a.treb,Math.max(a.min_att,a.treb_att)));a.beat=Math.max(a.beat,(a.prev_beat-a.decay_to)*a.decay_rate+a.decay_to);a.beat_level=24*(a.beat-a.prev_beat);a.is_beat=above(a.beat_level,.5);a.prev_beat=a.beat;a.max_bpm=145;a.sync=1;a.mx=Math.max(a.bass_att,Math.max(a.treb_att,a.mid_att));a.mn=Math.min(a.bass_att,Math.min(a.treb_att,a.mid_att));a.isbass=equal(div(a.bass_att-a.mn,a.mx-a.mn),1);a.ismid=equal(div(a.mid_att-\na.mn,a.mx-a.mn),1);a.istreb=equal(div(a.treb_att-a.mn,a.mx-a.mn),1);a.res=Math.max(0,Math.min(1,Math.max(a.res,a.is_beat*below(a.res,0))));a.bassres=Math.max(0,Math.min(.00001<Math.abs(a.sync)?a.res:1,Math.max(a.bassres,a.isbass*a.is_beat*below(a.bassres,0))));a.midres=Math.max(0,Math.min(.00001<Math.abs(a.sync)?a.res:1,Math.max(a.midres,a.ismid*a.is_beat*below(a.midres,0))));a.trebres=Math.max(0,Math.min(.00001<Math.abs(a.sync)?a.res:1,Math.max(a.trebres,a.istreb*a.is_beat*below(a.trebres,0))));\na.q8=equal(a.bassres,1)*a.isbass;a.q7=equal(a.midres,1)*a.ismid;a.q6=equal(a.trebres,1)*a.istreb;a.q3=equal(a.res,1);a.res-=div(a.max_bpm,60*a.fps);a.bassres-=div(a.max_bpm,60*a.fps);a.midres-=div(a.max_bpm,60*a.fps);a.trebres-=div(a.max_bpm,60*a.fps);a.monitor=a.q8;a.wave_r=.5+.5*Math.sin(2.5*a.frame);a.wave_b=.5+.5*Math.sin(.5*a.frame+2.094);a.wave_g=.5+.5*Math.sin(.5*a.frame+1.188);a.mv_l=Math.sin(a.q20);","pixel_eqs_str":"a.zoom=a.zoom+.01*Math.sin(3.14*a.rad-a.q20)+.03*Math.sin(a.q20);a.rot=a.rot-.01*Math.sin(3.14*a.rad)+.02*Math.sin(above(a.q20,a.q20));a.effect=above(pow(a.rad-.03*Math.cos(3.14*a.ang-a.rad),a.ang-.03*Math.sin(a.ang-3.14*a.rad)),bitand(a.x,a.y-.03*Math.sin(a.x-3.14*a.ang-a.rad*a.ang*a.x+.1+.2+.3*Math.sin(a.q20))*Math.sin(a.q20)));a.pick=.00001<Math.abs(above(a.q20,a.q20))?a.rad:a.ang;a.zoom+=.05*Math.sin(3.14*a.rad-a.effect*Math.sin(3.14*a.q20));a.dx+=.05*Math.sin(5*a.rad)*\nMath.sin(.54*a.q20-a.q3);a.zoom=a.zoom+(2*a.x-1)*(.08+.15*Math.sin(.321*a.time))+(2*a.y-1)*(.08+.15*Math.cos(.321*a.time));a.sx-=.1*(a.zoom-1)*a.treb_att;a.sy-=.1*(a.zoom-1)*a.mid_att;a.mv_l=0+(a.mid_att+a.treb_att);a.zoom=a.zoom+a.q16+a.q17+a.q18;","init_eqs_eel":"","frame_eqs_eel":"//Variables controling the glitch effect////////////////////////////////////////\ndecayrate = 0.9;   //How fast the glitch effect decays back to original image\ntrebresp = 2;    //Level of treb needed for effect to take place\n////////////////////////////////////////////////////////////////////////////////\n\n\ncdecay = pow(decayrate, 30/fps);\ncount = above(treb, trebresp)*1 + (1-above(treb, 3))*count;\ncount = count - above(count, cdecay)*cdecay;\nq20=count;\n\n\nvol_now =  .4 * bass + 0.1 * (bass_att + treb + mid);\nvol_mean =  if(equal(frame%50,0),vol_mean - 0.5 * (vol_mean-vol_now),0.1 * (vol_mean * 9 + vol_now));\nbeat = if(above(vol_now,1.15 * vol_mean),1,0);\nsinbeat =sin(beat * (vol_now-vol_mean));\nslowtime = slowtime+beat*time;\nq4=slowtime;\nwave_b = cos(slowtime)  + abs(cos(slowtime));\nwave_g = abs(sin(slowtime)) ;\nwave_r = (-1 * cos(slowtime))  + abs(-1 * cos(slowtime)) + 0.2 * (cos(sin(slowtime))+(abs(cos(sin(slowtime)))+cos(sin(slowtime))));\nwave_r = 1 - if(above(wave_r,1),1,if(above(wave_r,0), abs(wave_r),0));\nwave_g = 1 - if(above(wave_g,1),1,if(above(wave_g,0), abs(wave_g),0));\nwave_b = 1 - if(above(wave_b,1),1,if(above(wave_b,0), abs(wave_b),0));\nez=sin(wave_g)*cos(wave_R-wave_b)+.3*Sin(if(below(ez,.7),ez,ez+.2));\necho_zoom=ez;\nq1 = 1+vol_now;\nq2 = 1+sinbeat;\nq3 = 1+sin(slowtime);\n\n\nmv_b = cos(slowtime)  + abs(cos(slowtime));\nmv_g = abs(sin(slowtime)) ;\nmv_r = (-1 * cos(slowtime))  + abs(-1 * cos(slowtime)) + 0.2 * (cos(sin(slowtime))+(abs(cos(sin(slowtime)))+cos(sin(slowtime))));\nmv_r = 1 - if(above(mv_r,1),1,if(above(mv_r,0), abs(mv_r),0));\nmv_g = 1 - if(above(mv_g,1),1,if(above(mv_g,0), abs(mv_g),0));\nmv_b = 1 - if(above(mv_b,1),1,if(above(mv_b,0), abs(mv_b),0));\nmv_a = sin(q20);\n\n\n\n\n\n\n\nwarp = 0;\nzoom = 1;\nq1 = aspectx;\nq2 = aspecty;\n\n// Geiss' custom beat detection code: (fps-independent; quiet songs don't freak out)\ndecay_rate = pow(0.993, fps);  // lower # = more hasty to declare a beat\nmin_att    = 2.5;               // lower # = quieter songs can declare beats\ndecay_to   = 1.0;               // lower # = more hasty to declare a beat\nbeat =           bass/max(min_att,bass_att);\nbeat = max(beat, mid /max(min_att,mid_att ));\nbeat = max(beat, treb/max(min_att,treb_att));\nbeat = max( beat, (prev_beat-decay_to)*decay_rate + decay_to );\nbeat_level     = (beat - prev_beat - 0.0)*24;\nis_beat = above(beat_level, 0.5);\nprev_beat = beat;\n\n// Flexis separation and limitation code\n\nmax_bpm = 145; \nsync = 1; // 1 - enable; 0 - disable\n\nmx = max(bass_att,max(treb_att,mid_att));\nmn = min(bass_att,min(treb_att,mid_att));\nisbass = equal((bass_att-mn)/(mx-mn),1);\nismid = equal((mid_att-mn)/(mx-mn),1);\nistreb = equal((treb_att-mn)/(mx-mn),1);\n\nres = max(0, min(1,max(res,is_beat*below(res,0))));\nbassres = max(0, min(if(sync,res,1),max(bassres,isbass*is_beat*below(bassres,0))));\nmidres = max(0, min(if(sync,res,1),max(midres,ismid*is_beat*below(midres,0))));\ntrebres = max(0, min(if(sync,res,1),max(trebres,istreb*is_beat*below(trebres,0))));\n\nq8 = equal(bassres,1)*isbass;\nq7 = equal(midres,1)*ismid;\nq6 = equal(trebres,1)*istreb;\nq3 = equal(res,1);\n\nres = res - max_bpm/(60*fps);\nbassres = bassres - max_bpm/(60*fps);\nmidres = midres - max_bpm/(60*fps);\ntrebres = trebres - max_bpm/(60*fps);\n\n\n//wave_mode = if(above(q8,0),4,6);\n//wave_mode = if(above(q7,0),4,6);\n//wave_mode = if(above(q6,0),4,6);\nmonitor =  q8;\nwave_r = 0.5 + 0.5*sin(frame*2.5);\nwave_b = 0.5 + 0.5*sin(frame*0.5 + 2.094);\nwave_g = 0.5 + 0.5*sin(frame*0.5 + 1.188);\n//wave_a = wave_a + (mid_att+bass_att);\n//wave_mode = if(above(treb_att,1),6,0);\n\n//dy = 0 + (sin(time));\n//sy = 0 + (sin(time));\nmv_l = sin(q20);","pixel_eqs_eel":"zoom=zoom+.01*Sin(Rad*3.14-q20)+.03*sin(q20);\nrot=rot-.01*sin(rad*3.14)+.02*sin(Above(q20,q20));\neffect=above(pow(rad-.03*cos(ang*3.14-rad),ang-.03*sin(ang-rad*3.14)),x&y-.03*Sin(x-3.14*ang-rad*ang*x+.1+.2+.3*Sin(q20))*sin(q20));\npick=if(Above(q20,q20),rad,ang);\nzoom=zoom+.05*sin(Rad*3.14-effect*sin(q20*3.14));\ndx=dx+.05*Sin(rad*5)*sin(q20*.54-q3);\n\n//zoom = zoom + (treb_att * .15);\nzoom = zoom + (x*2-1)*(0.08+0.15*sin(time*0.321)) + (y*2-1)*(0.08+0.15*cos(time*0.321));\nsx=sx-(zoom-1)*(treb_att * 0.1);\nsy=sy-(zoom-1)*(mid_att * 0.1);\nmv_l = 0 + (mid_att + treb_att);\nzoom = zoom + q16+q17+q18;","warp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (texture (sampler_main, uv).xyz * 0.93);\n  ret = tmpvar_1.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  vec3 ret_3;\n  uv_1 = (0.5 + ((uv - 0.5) * 0.98));\n  vec2 tmpvar_4;\n  tmpvar_4 = (texsize.zw * 4.0);\n  vec3 tmpvar_5;\n  tmpvar_5 = (((texture (sampler_blur1, \n    (uv_1 + (vec2(1.0, 0.0) * tmpvar_4))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv_1 - (vec2(1.0, 0.0) * tmpvar_4))\n  ).xyz * scale1) + bias1));\n  vec3 tmpvar_6;\n  tmpvar_6 = (((texture (sampler_blur1, \n    (uv_1 + (vec2(0.0, 1.0) * tmpvar_4))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv_1 - (vec2(0.0, 1.0) * tmpvar_4))\n  ).xyz * scale1) + bias1));\n  vec3 tmpvar_7;\n  tmpvar_7.z = 0.0;\n  tmpvar_7.x = dot (tmpvar_5, vec3(0.32, 0.49, 0.29));\n  tmpvar_7.y = dot (tmpvar_6, vec3(0.32, 0.49, 0.29));\n  vec4 tmpvar_8;\n  tmpvar_8 = texture (sampler_noisevol_hq, ((vec3(0.05, 0.05, 0.0) * (\n    ((uv_1.xyy + (tmpvar_7 * 0.5)) * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + (vec3(0.0, 0.0, 0.2) * time)));\n  vec2 tmpvar_9;\n  tmpvar_9.x = dot (tmpvar_5, vec3(0.32, 0.49, 0.29));\n  tmpvar_9.y = dot (tmpvar_6, vec3(0.32, 0.49, 0.29));\n  uv_1 = (uv_1 - (tmpvar_9 * 0.04));\n  ret_3 = (abs((\n    ((texture (sampler_main, uv_1).xyz + ((texture (sampler_blur1, uv_1).xyz * scale1) + bias1)) - ((texture (sampler_blur2, uv_1).xyz * scale2) + bias2))\n   - \n    ((texture (sampler_blur3, uv_1).xyz * scale3) + bias3)\n  )) * (dot (tmpvar_8, vec4(0.32, 0.49, 0.29, 0.0)) * 3.0));\n  vec3 tmpvar_10;\n  tmpvar_10 = pow (ret_3, vec3(0.5, 0.5, 0.5));\n  ret_3 = tmpvar_10;\n  for (int i_2 = 0; i_2 < 16; i_2++) {\n  };\n  vec3 tmpvar_11;\n  tmpvar_11.z = 0.04;\n  vec2 tmpvar_12;\n  tmpvar_12 = (vec2(1.0, 0.0) * texsize.zw);\n  tmpvar_11.x = (texture (sampler_main, (uv_1 + tmpvar_12)).xyz - texture (sampler_main, (uv_1 - tmpvar_12)).xyz).x;\n  vec2 tmpvar_13;\n  tmpvar_13 = (vec2(0.0, 1.0) * texsize.zw);\n  tmpvar_11.y = (texture (sampler_main, (uv_1 + tmpvar_13)).xyz - texture (sampler_main, (uv_1 - tmpvar_13)).xyz).x;\n  vec3 tmpvar_14;\n  tmpvar_14 = normalize(tmpvar_11);\n  vec3 tmpvar_15;\n  tmpvar_15.z = 0.6;\n  tmpvar_15.xy = (fract(uv_1) - 0.5);\n  vec3 tmpvar_16;\n  tmpvar_16.z = 0.6;\n  tmpvar_16.xy = (fract(uv_1) - 0.5);\n  vec3 tmpvar_17;\n  tmpvar_17 = mix (tmpvar_10, mix (tmpvar_10, vec3(1.1, 0.8, 0.5), vec3((\n    ((dot (tmpvar_14, tmpvar_15) * 0.5) + 0.5)\n   * texture (sampler_main, \n    fract(uv_1)\n  ).x))), vec3(q20));\n  ret_3 = (1.0 - mix (tmpvar_17, mix (tmpvar_17, \n    mix (tmpvar_10, vec3(1.1, 0.8, 0.5), vec3((((\n      dot (tmpvar_14, tmpvar_16)\n     * 0.5) + 0.5) * texture (sampler_main, fract(uv_1)).x)))\n  , vec3(\n    (sin(time) * 100.0)\n  )), vec3(q20)));\n  ret_3 = (ret_3 * (treb_att * 0.5));\n  ret_3 = (ret_3 - (roam_sin.xyz * roam_cos.zxy));\n  vec4 tmpvar_18;\n  tmpvar_18.w = 1.0;\n  tmpvar_18.xyz = ret_3;\n  ret = tmpvar_18.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_main, uv ).xyz;\n    \n    // darken (decay) over time\n    ret *= 0.93; //or try: ret -= 0.004;\n}","comp_hlsl":"float3 reta;\nfloat3 retb;\nfloat3 retc;\n\nshader_body\n{\n\n\n\nuv = 0.5 + (uv-0.5)*0.98;\n    float2 d = texsize.zw*4;\n    float3 dx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );\n    float3 dy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );\n\nfloat4 noise = tex3D(sampler_noisevol_hq, ((uv.xyy+float3(lum(dx),lum(dy),0)*0.5)*texsize.xyy*texsize_noisevol_hq.zww).xyz*float3(1,1,0)*0.05\n                                        + time*float3(0,0,1)*0.2 );\nuv -= float2(lum(dx),lum(dy))*0.04;\nret = abs(GetPixel(uv)+GetBlur1(uv)-GetBlur2(uv)-GetBlur3(uv));\nret *= lum(noise)*3; \nret = pow(ret,0.5);\n\n\n\nfloat2 uv2 = uv*0.25;\nfloat3 col = 0;\nfloat2 uv3 = uv2;\nfor(int i = 0; i<16; i++){\n    uv3 += i*float2(0.25,0) - (0==(i)%4)*float2(0,0.25);\n    col = lerp(col,i/16.0,saturate(-GetPixel(uv3).y+tex2d(sampler_pw_main,frac(uv3)).y));\n\n\n}\n\n\nreta = lerp(GetPixel(uv).z*float3(0.6,0.2,1),float3(1,1,1),col*saturate(1-GetBlur1(uv).x*2));\nretb = lerp(GetPixel(uv).z*float3(0.6,0.2,1),float3(1,1,1),col*saturate(1-GetBlur1(uv).x*2));\n    float gx = GetPixel(uv+float2(1,0)*texsize.zw) - GetPixel(uv-float2(1,0)*texsize.zw);\n    float gy = GetPixel(uv+float2(0,1)*texsize.zw) - GetPixel(uv-float2(0,1)*texsize.zw);\n    float3 g = normalize(float3(gx, gy, .04));\n\n    reta = lerp(ret,float3(1.1,0.8,0.5),(dot(g.xyz,float3(frac(uv)-0.5,0.6))*0.5+0.5)*GetPixel(frac(uv)).x);\n    retb = lerp(ret,float3(1.1,0.8,0.5),(dot(g.xyz,float3(frac(uv)-0.5,0.6))*0.5+0.5)*GetPixel(frac(uv)).x);\n\n//retc = lerp(ret,retb,(sin(time)*100));\nret = lerp(ret,reta,q20);\nretc = lerp(ret,retb,(sin(time)*100));\nret = lerp(ret,retc,q20);\n\nret = 1 - ret;\nret *= treb_att * .5;\nret-=roam_sin*roam_cos.zxy;\n\n}"}