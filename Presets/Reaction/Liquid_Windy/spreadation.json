{"version":2,"baseVals":{"rating":5,"decay":0.96,"echo_zoom":1.007,"echo_alpha":0.5,"echo_orient":1,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":0.01,"warpscale":100,"zoomexp":0.92178,"zoom":0.9901,"rot":-0.04,"warp":0.01,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0.205,"ob_g":1,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_a":0},"shapes":[{"baseVals":{"sides":50,"rad":0.54278,"r":0,"a":0,"r2":1,"b2":1,"a2":0.02,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"\n//r = .5 + .5*sin(time*1.123);\n//g = .5 + .5*sin(time*1.456);\n//b = .5 + .5*sin(time*1.789);\n\n\n//r = .5 - .5*sin(q2);\n//g = .5 - .5*sin(q2 + 2.0944);\n//b = .5 - .5*sin(q2 + 4.1888);","init_eqs_eel":"","frame_eqs_eel":"\n//r = .5 + .5*sin(time*1.123);\n//g = .5 + .5*sin(time*1.456);\n//b = .5 + .5*sin(time*1.789);\n\n\n//r = .5 - .5*sin(q2);\n//g = .5 - .5*sin(q2 + 2.0944);\n//b = .5 - .5*sin(q2 + 4.1888);"},{"baseVals":{"enabled":1,"sides":100,"thickoutline":1,"textured":1,"rad":0.6623,"tex_zoom":1.50373,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":1},"init_eqs_str":"","frame_eqs_str":"a.tex_ang=.001;","init_eqs_eel":"","frame_eqs_eel":"//tex_zoom = 1/rad;\n\ntex_ang=0.001;"},{"baseVals":{"sides":50,"textured":1,"rad":0.59958,"tex_zoom":1.66107,"g":1,"b":1,"g2":0,"b2":1,"a2":1,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":50,"textured":1,"rad":0.4629,"tex_ang":0.06283,"tex_zoom":2.15151,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_a":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"spectrum":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"t3 = q7;\n\nt1 = .5;\nt2 = .5;\n\n//r = .5 + .5*sin(q2);\n//g = .5 + .5*sin(q2 + 2.0944);\n//b = .5 + .5*sin(q2 + 4.1888);","point_eqs_str":"sp = sample*6.2832;\nti = time*20;\nraa = sin(ti*12.87 - sp*15.87)*2.5 - cos(ti*7.98 + sp*9.5)*6 + sin(ti*8.9 + sp*48)*7.4;\nraa = abs(raa - int(raa));\nrab = sin(ti*6.74 - sp*18.52)*5.7 + cos(ti*3.94 + sp*27.55)*1.7 + sin(ti*14.8 + sp*3.5)*4;\nrab = abs(rab - int(rab));\n\ncou = 30;\n\nseg = seg*above(sample,0);\nit = (it + 1)*above(sample,0);\nseg = seg + equal(ita,0);\nita = (ita + 1)*above(sample,0)*below(ita,cou);\ncop = equal(ita,cou);\n\ntoll = toll*above(sample,0);\ntoll = toll + value1 + value2;\ntav = toll/cou*.1;\nmod = raa*bass*.5 - rab*(mid+treb)*.125;\nmod = if(q1,bass*.5*(.5 + .5*sin(sp)) - (mid+treb)*.25*(.5 + .5*cos(sp)),mod);\n\ntoll = toll*(1-cop);\n//toll = 15;\n\n\nla = if((1-t3)*cop*equal(seg,1),tav,la);\nlb = if((1-t3)*cop*equal(seg,2),tav,lb);\nlc = if((1-t3)*cop*equal(seg,3),tav,lc);\nld = if((1-t3)*cop*equal(seg,4),tav,ld);\nle = if((1-t3)*cop*equal(seg,5),tav,le);\nlf = if((1-t3)*cop*equal(seg,6),tav,lf);\nlg = if((1-t3)*cop*equal(seg,7),tav,lg);\nli = if((1-t3)*cop*equal(seg,8),tav,li);\nlj = if((1-t3)*cop*equal(seg,9),tav,lj);\nlk = if((1-t3)*cop*equal(seg,10),tav,lk);\n\naa = if((1-t3)*cop*equal(seg,1),mod,aa);\nab = if((1-t3)*cop*equal(seg,2),mod,ab);\nac = if((1-t3)*cop*equal(seg,3),mod,ac);\nad = if((1-t3)*cop*equal(seg,4),mod,ad);\nae = if((1-t3)*cop*equal(seg,5),mod,ae);\naf = if((1-t3)*cop*equal(seg,6),mod,af);\nag = if((1-t3)*cop*equal(seg,7),mod,ag);\nai = if((1-t3)*cop*equal(seg,8),mod,ai);\naj = if((1-t3)*cop*equal(seg,9),mod,aj);\nak = if((1-t3)*cop*equal(seg,10),mod,ak)*0;\n\n\nlev = lev*above(sample,0); ud = ud*above(sample,0); rep = rep*above(sample,0); lev = if(ud,lev-1,lev+1); rep = (rep + equal(lev,0)); ud = if(equal(lev,0),0,if(equal(lev,10),1,ud));\n\nmx = above(lev,0)*la*sin(aa) + above(lev,1)*lb*sin(ab) + above(lev,2)*lc*sin(ac) + above(lev,3)*ld*sin(ad);\nmy = above(lev,0)*la*cos(aa) + above(lev,1)*lb*cos(ab) + above(lev,2)*lc*cos(ac) + above(lev,3)*ld*cos(ad);\nmx = mx + above(lev,4)*le*sin(ae) + above(lev,5)*lf*sin(af) + above(lev,6)*lg*sin(ag);\nmy = my + above(lev,4)*le*cos(ae) + above(lev,5)*lf*cos(af) + above(lev,6)*lg*cos(ag);\nmx = mx + above(lev,7)*li*sin(ai) + above(lev,8)*lj*sin(aj);// + above(lev,9)*lk*sin(ak);\nmy = my + above(lev,7)*li*cos(ai) + above(lev,8)*lj*cos(aj) + above(lev,9)*lk*cos(ak);\nmx = (1-2*equal(ud,1))*mx*(1-equal(lev,10));\n\nmy = min(my,.25);\n\n// add branches via rotation\npoi = q3;\nmodx = if(equal(lev,poi)*ud,mx,modx);\nmody = if(equal(lev,poi)*ud,my,mody);\nmang = (above(rep,7)*below(rep,14) - above(rep,15)*below(rep,22))*above(lev,poi);\nmodx = 0;\nmx = mx - modx;\nmy = my - mody;\nox = mx*cos(mang) - my*sin(mang);\noy = mx*sin(mang) + my*cos(mang);\nmx = ox + modx;\nmy = oy + mody;\n\n\nmang = above(rep,1)*rep*1.0472;\nox = mx*cos(mang) - my*sin(mang);\noy = mx*sin(mang) + my*cos(mang);\nmx = ox;\nmy = oy;\n\n\nsz = .5;\nx = mx*.75*sz + t1;\ny = my*sz + t2;\n\n\n\na = t3; // drawn every 2nd frame, gets values in other one","init_eqs_eel":"","frame_eqs_eel":"t3 = q7;\n\nt1 = .5;\nt2 = .5;\n\n//r = .5 + .5*sin(q2);\n//g = .5 + .5*sin(q2 + 2.0944);\n//b = .5 + .5*sin(q2 + 4.1888);","point_eqs_eel":"sp = sample*6.2832;\nti = time*20;\nraa = sin(ti*12.87 - sp*15.87)*2.5 - cos(ti*7.98 + sp*9.5)*6 + sin(ti*8.9 + sp*48)*7.4;\nraa = abs(raa - int(raa));\nrab = sin(ti*6.74 - sp*18.52)*5.7 + cos(ti*3.94 + sp*27.55)*1.7 + sin(ti*14.8 + sp*3.5)*4;\nrab = abs(rab - int(rab));\n\ncou = 30;\n\nseg = seg*above(sample,0);\nit = (it + 1)*above(sample,0);\nseg = seg + equal(ita,0);\nita = (ita + 1)*above(sample,0)*below(ita,cou);\ncop = equal(ita,cou);\n\ntoll = toll*above(sample,0);\ntoll = toll + value1 + value2;\ntav = toll/cou*.1;\nmod = raa*bass*.5 - rab*(mid+treb)*.125;\nmod = if(q1,bass*.5*(.5 + .5*sin(sp)) - (mid+treb)*.25*(.5 + .5*cos(sp)),mod);\n\ntoll = toll*(1-cop);\n//toll = 15;\n\n\nla = if((1-t3)*cop*equal(seg,1),tav,la);\nlb = if((1-t3)*cop*equal(seg,2),tav,lb);\nlc = if((1-t3)*cop*equal(seg,3),tav,lc);\nld = if((1-t3)*cop*equal(seg,4),tav,ld);\nle = if((1-t3)*cop*equal(seg,5),tav,le);\nlf = if((1-t3)*cop*equal(seg,6),tav,lf);\nlg = if((1-t3)*cop*equal(seg,7),tav,lg);\nli = if((1-t3)*cop*equal(seg,8),tav,li);\nlj = if((1-t3)*cop*equal(seg,9),tav,lj);\nlk = if((1-t3)*cop*equal(seg,10),tav,lk);\n\naa = if((1-t3)*cop*equal(seg,1),mod,aa);\nab = if((1-t3)*cop*equal(seg,2),mod,ab);\nac = if((1-t3)*cop*equal(seg,3),mod,ac);\nad = if((1-t3)*cop*equal(seg,4),mod,ad);\nae = if((1-t3)*cop*equal(seg,5),mod,ae);\naf = if((1-t3)*cop*equal(seg,6),mod,af);\nag = if((1-t3)*cop*equal(seg,7),mod,ag);\nai = if((1-t3)*cop*equal(seg,8),mod,ai);\naj = if((1-t3)*cop*equal(seg,9),mod,aj);\nak = if((1-t3)*cop*equal(seg,10),mod,ak)*0;\n\n\nlev = lev*above(sample,0); ud = ud*above(sample,0); rep = rep*above(sample,0); lev = if(ud,lev-1,lev+1); rep = (rep + equal(lev,0)); ud = if(equal(lev,0),0,if(equal(lev,10),1,ud));\n\nmx = above(lev,0)*la*sin(aa) + above(lev,1)*lb*sin(ab) + above(lev,2)*lc*sin(ac) + above(lev,3)*ld*sin(ad);\nmy = above(lev,0)*la*cos(aa) + above(lev,1)*lb*cos(ab) + above(lev,2)*lc*cos(ac) + above(lev,3)*ld*cos(ad);\nmx = mx + above(lev,4)*le*sin(ae) + above(lev,5)*lf*sin(af) + above(lev,6)*lg*sin(ag);\nmy = my + above(lev,4)*le*cos(ae) + above(lev,5)*lf*cos(af) + above(lev,6)*lg*cos(ag);\nmx = mx + above(lev,7)*li*sin(ai) + above(lev,8)*lj*sin(aj);// + above(lev,9)*lk*sin(ak);\nmy = my + above(lev,7)*li*cos(ai) + above(lev,8)*lj*cos(aj) + above(lev,9)*lk*cos(ak);\nmx = (1-2*equal(ud,1))*mx*(1-equal(lev,10));\n\nmy = min(my,.25);\n\n// add branches via rotation\npoi = q3;\nmodx = if(equal(lev,poi)*ud,mx,modx);\nmody = if(equal(lev,poi)*ud,my,mody);\nmang = (above(rep,7)*below(rep,14) - above(rep,15)*below(rep,22))*above(lev,poi);\nmodx = 0;\nmx = mx - modx;\nmy = my - mody;\nox = mx*cos(mang) - my*sin(mang);\noy = mx*sin(mang) + my*cos(mang);\nmx = ox + modx;\nmy = oy + mody;\n\n\nmang = above(rep,1)*rep*1.0472;\nox = mx*cos(mang) - my*sin(mang);\noy = mx*sin(mang) + my*cos(mang);\nmx = ox;\nmy = oy;\n\n\nsz = .5;\nx = mx*.75*sz + t1;\ny = my*sz + t2;\n\n\n\na = t3; // drawn every 2nd frame, gets values in other one"},{"baseVals":{"spectrum":1,"usedots":1,"thick":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"t3 = q7;\n\nt1 = .5;\nt2 = .5;","point_eqs_str":"sp = sample*6.2832;\nti = time*20;\nraa = sin(ti*12.87 - sp*15.87)*2.5 - cos(ti*7.98 + sp*9.5)*6 + sin(ti*8.9 + sp*48)*7.4;\nraa = abs(raa - int(raa));\nrab = sin(ti*6.74 - sp*18.52)*5.7 + cos(ti*3.94 + sp*27.55)*1.7 + sin(ti*14.8 + sp*3.5)*4;\nrab = abs(rab - int(rab));\n\ncou = 30;\n\nseg = seg*above(sample,0);\nit = (it + 1)*above(sample,0);\nseg = seg + equal(ita,0);\nita = (ita + 1)*above(sample,0)*below(ita,cou);\ncop = equal(ita,cou);\n\ntoll = toll*above(sample,0);\ntoll = toll + value1 + value2;\ntav = toll/cou*.1;\nmod = raa*bass*.5 - rab*(mid+treb)*.125;\nmod = if(q1,bass*.5*(.5 + .5*sin(sp)) - (mid+treb)*.25*(.5 + .5*cos(sp)),mod);\n\ntoll = toll*(1-cop);\n//toll = 15;\n\n\nla = if((1-t3)*cop*equal(seg,1),tav,la);\nlb = if((1-t3)*cop*equal(seg,2),tav,lb);\nlc = if((1-t3)*cop*equal(seg,3),tav,lc);\nld = if((1-t3)*cop*equal(seg,4),tav,ld);\nle = if((1-t3)*cop*equal(seg,5),tav,le);\nlf = if((1-t3)*cop*equal(seg,6),tav,lf);\nlg = if((1-t3)*cop*equal(seg,7),tav,lg);\nli = if((1-t3)*cop*equal(seg,8),tav,li);\nlj = if((1-t3)*cop*equal(seg,9),tav,lj);\nlk = if((1-t3)*cop*equal(seg,10),tav,lk);\n\naa = if((1-t3)*cop*equal(seg,1),mod,aa);\nab = if((1-t3)*cop*equal(seg,2),mod,ab);\nac = if((1-t3)*cop*equal(seg,3),mod,ac);\nad = if((1-t3)*cop*equal(seg,4),mod,ad);\nae = if((1-t3)*cop*equal(seg,5),mod,ae);\naf = if((1-t3)*cop*equal(seg,6),mod,af);\nag = if((1-t3)*cop*equal(seg,7),mod,ag);\nai = if((1-t3)*cop*equal(seg,8),mod,ai);\naj = if((1-t3)*cop*equal(seg,9),mod,aj);\nak = if((1-t3)*cop*equal(seg,10),mod,ak)*0;\n\n\nlev = lev*above(sample,0); ud = ud*above(sample,0); rep = rep*above(sample,0); lev = if(ud,lev-1,lev+1); rep = (rep + equal(lev,0)); ud = if(equal(lev,0),0,if(equal(lev,10),1,ud));\n\nmx = above(lev,0)*la*sin(aa) + above(lev,1)*lb*sin(ab) + above(lev,2)*lc*sin(ac) + above(lev,3)*ld*sin(ad);\nmy = above(lev,0)*la*cos(aa) + above(lev,1)*lb*cos(ab) + above(lev,2)*lc*cos(ac) + above(lev,3)*ld*cos(ad);\nmx = mx + above(lev,4)*le*sin(ae) + above(lev,5)*lf*sin(af) + above(lev,6)*lg*sin(ag);\nmy = my + above(lev,4)*le*cos(ae) + above(lev,5)*lf*cos(af) + above(lev,6)*lg*cos(ag);\nmx = mx + above(lev,7)*li*sin(ai) + above(lev,8)*lj*sin(aj);// + above(lev,9)*lk*sin(ak);\nmy = my + above(lev,7)*li*cos(ai) + above(lev,8)*lj*cos(aj) + above(lev,9)*lk*cos(ak);\nmx = (1-2*equal(ud,1))*mx*(1-equal(lev,10));\n\nmy = min(my,.25);\n\n// add branches via rotation\npoi = q3;\nmodx = if(equal(lev,poi)*ud,mx,modx);\nmody = if(equal(lev,poi)*ud,my,mody);\nmang = (above(rep,7)*below(rep,14) - above(rep,15)*below(rep,22))*above(lev,poi);\nmodx = 0;\nmx = mx - modx;\nmy = my - mody;\nox = mx*cos(mang) - my*sin(mang);\noy = mx*sin(mang) + my*cos(mang);\nmx = ox + modx;\nmy = oy + mody;\n\n\nmang = above(rep,1)*rep*1.0472;\nox = mx*cos(mang) - my*sin(mang);\noy = mx*sin(mang) + my*cos(mang);\nmx = ox;\nmy = oy;\n\n\n\nsz = .5;\nx = mx*.75*sz + t1;\ny = my*sz + t2;\n\na = t3; // drawn every 2nd frame, gets values in other one\n\n//r = .5 - .5*sin(q2);\n//g = .5 - .5*sin(q2 + 2.0944);\n//b = .5 - .5*sin(q2 + 4.1888);","init_eqs_eel":"","frame_eqs_eel":"t3 = q7;\n\nt1 = .5;\nt2 = .5;","point_eqs_eel":"sp = sample*6.2832;\nti = time*20;\nraa = sin(ti*12.87 - sp*15.87)*2.5 - cos(ti*7.98 + sp*9.5)*6 + sin(ti*8.9 + sp*48)*7.4;\nraa = abs(raa - int(raa));\nrab = sin(ti*6.74 - sp*18.52)*5.7 + cos(ti*3.94 + sp*27.55)*1.7 + sin(ti*14.8 + sp*3.5)*4;\nrab = abs(rab - int(rab));\n\ncou = 30;\n\nseg = seg*above(sample,0);\nit = (it + 1)*above(sample,0);\nseg = seg + equal(ita,0);\nita = (ita + 1)*above(sample,0)*below(ita,cou);\ncop = equal(ita,cou);\n\ntoll = toll*above(sample,0);\ntoll = toll + value1 + value2;\ntav = toll/cou*.1;\nmod = raa*bass*.5 - rab*(mid+treb)*.125;\nmod = if(q1,bass*.5*(.5 + .5*sin(sp)) - (mid+treb)*.25*(.5 + .5*cos(sp)),mod);\n\ntoll = toll*(1-cop);\n//toll = 15;\n\n\nla = if((1-t3)*cop*equal(seg,1),tav,la);\nlb = if((1-t3)*cop*equal(seg,2),tav,lb);\nlc = if((1-t3)*cop*equal(seg,3),tav,lc);\nld = if((1-t3)*cop*equal(seg,4),tav,ld);\nle = if((1-t3)*cop*equal(seg,5),tav,le);\nlf = if((1-t3)*cop*equal(seg,6),tav,lf);\nlg = if((1-t3)*cop*equal(seg,7),tav,lg);\nli = if((1-t3)*cop*equal(seg,8),tav,li);\nlj = if((1-t3)*cop*equal(seg,9),tav,lj);\nlk = if((1-t3)*cop*equal(seg,10),tav,lk);\n\naa = if((1-t3)*cop*equal(seg,1),mod,aa);\nab = if((1-t3)*cop*equal(seg,2),mod,ab);\nac = if((1-t3)*cop*equal(seg,3),mod,ac);\nad = if((1-t3)*cop*equal(seg,4),mod,ad);\nae = if((1-t3)*cop*equal(seg,5),mod,ae);\naf = if((1-t3)*cop*equal(seg,6),mod,af);\nag = if((1-t3)*cop*equal(seg,7),mod,ag);\nai = if((1-t3)*cop*equal(seg,8),mod,ai);\naj = if((1-t3)*cop*equal(seg,9),mod,aj);\nak = if((1-t3)*cop*equal(seg,10),mod,ak)*0;\n\n\nlev = lev*above(sample,0); ud = ud*above(sample,0); rep = rep*above(sample,0); lev = if(ud,lev-1,lev+1); rep = (rep + equal(lev,0)); ud = if(equal(lev,0),0,if(equal(lev,10),1,ud));\n\nmx = above(lev,0)*la*sin(aa) + above(lev,1)*lb*sin(ab) + above(lev,2)*lc*sin(ac) + above(lev,3)*ld*sin(ad);\nmy = above(lev,0)*la*cos(aa) + above(lev,1)*lb*cos(ab) + above(lev,2)*lc*cos(ac) + above(lev,3)*ld*cos(ad);\nmx = mx + above(lev,4)*le*sin(ae) + above(lev,5)*lf*sin(af) + above(lev,6)*lg*sin(ag);\nmy = my + above(lev,4)*le*cos(ae) + above(lev,5)*lf*cos(af) + above(lev,6)*lg*cos(ag);\nmx = mx + above(lev,7)*li*sin(ai) + above(lev,8)*lj*sin(aj);// + above(lev,9)*lk*sin(ak);\nmy = my + above(lev,7)*li*cos(ai) + above(lev,8)*lj*cos(aj) + above(lev,9)*lk*cos(ak);\nmx = (1-2*equal(ud,1))*mx*(1-equal(lev,10));\n\nmy = min(my,.25);\n\n// add branches via rotation\npoi = q3;\nmodx = if(equal(lev,poi)*ud,mx,modx);\nmody = if(equal(lev,poi)*ud,my,mody);\nmang = (above(rep,7)*below(rep,14) - above(rep,15)*below(rep,22))*above(lev,poi);\nmodx = 0;\nmx = mx - modx;\nmy = my - mody;\nox = mx*cos(mang) - my*sin(mang);\noy = mx*sin(mang) + my*cos(mang);\nmx = ox + modx;\nmy = oy + mody;\n\n\nmang = above(rep,1)*rep*1.0472;\nox = mx*cos(mang) - my*sin(mang);\noy = mx*sin(mang) + my*cos(mang);\nmx = ox;\nmy = oy;\n\n\n\nsz = .5;\nx = mx*.75*sz + t1;\ny = my*sz + t2;\n\na = t3; // drawn every 2nd frame, gets values in other one\n\n//r = .5 - .5*sin(q2);\n//g = .5 - .5*sin(q2 + 2.0944);\n//b = .5 - .5*sin(q2 + 4.1888);"},{"baseVals":{"spectrum":1,"thick":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"sw = 1-sw;\nsp = sample*6.2832 - time;\n\nsz = sp - q1 - .7854*.5;\nsz = .5 + .5*sin(sz*4) + value1 + value2;\n\ncv = sz*6.2832*4;\n\nsz = pow(sz,.5)*.05*sw;\n\nx = .5 + sz*sin(sp)*.75;\ny = .5 + sz*cos(sp);\n\nr = .5 + .5*sin(.5*(time - cv));\nr = min(1,(value1+value2)*1);\ng = r; b = r;\n\n//g = .5 + .5*sin(.5*(time - cv + 2.094));\n//b = .5 + .5*sin(.5*(time - cv + 4.188));","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"sw = 1-sw;\nsp = sample*6.2832 - time;\n\nsz = sp - q1 - .7854*.5;\nsz = .5 + .5*sin(sz*4) + value1 + value2;\n\ncv = sz*6.2832*4;\n\nsz = pow(sz,.5)*.05*sw;\n\nx = .5 + sz*sin(sp)*.75;\ny = .5 + sz*cos(sp);\n\nr = .5 + .5*sin(.5*(time - cv));\nr = min(1,(value1+value2)*1);\ng = r; b = r;\n\n//g = .5 + .5*sin(.5*(time - cv + 2.094));\n//b = .5 + .5*sin(.5*(time - cv + 4.188));"},{"baseVals":{"enabled":1,"spectrum":1,"thick":1,"r":0,"b":0},"init_eqs_str":"a.n=0;a.size=0;a.flux=0;","frame_eqs_str":"","point_eqs_str":"a.n=6.283*a.sample;a.size=.165;a.x=Math.sin(a.n)*a.size+.5;a.y=Math.cos(a.n)*a.size*1.3333+.5;a.flux=.5*Math.sin(2*a.n-a.time)+.5;a.r=.5*Math.sin(a.n)+.5;a.g=.5*Math.sin(a.n+2.1)+.5;a.b=.5*Math.sin(a.n+4.2)+.5;a.r*=a.flux;a.g*=a.flux;a.b*=a.flux;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"n=sample*6.283;\nsize=0.165;\n\nx=sin(n)*size + 0.5;\ny=cos(n)*size*1.3333 + 0.5;\n\nflux=sin(n*2-time)*0.5+0.5;\nr=sin(n)*0.5 + 0.5;\ng=sin(n+2.1)*0.5+0.5;\nb=sin(n+4.2)*0.5 + 0.5;\nr=r*flux;\ng=g*flux;\nb=b*flux;\n//a=above(sin(time*10),0);"}],"init_eqs_str":"a.x1=.9;a.y1=.5;a.x2=.5;a.y2=.5;a.x3=.5;a.y3=.5;a.x4=.5;a.y4=.5;","frame_eqs_str":"a.zoom=.99;a.warp=0;","pixel_eqs_str":"","init_eqs_eel":"x1 = 0.9;\ny1 = 0.5;\n\nx2 = 0.5; y2 = 0.5;\nx3 = 0.5; y3 = 0.5;\nx4 = 0.5; y4 = 0.5;","frame_eqs_eel":"zoom = 0.99;\nwarp = 0;","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 ret_1;\n  ret_1 = texture (sampler_main, uv).xyz;\n  ret_1.xz = (ret_1.xz + ((\n    (ret_1.xz - mix (((texture (sampler_blur2, uv).xyz * scale2) + bias2), ((texture (sampler_blur1, uv).xyz * scale1) + bias1), uv_orig.xxx).xz)\n   * 0.3) - (0.00666 * \n    (((bass + treb) + mid) - 0.5)\n  )));\n  ret_1.xz = (ret_1.xz * 0.95);\n  ret_1.xz = (ret_1.xz + ((\n    ((texture (sampler_noise_lq, ((\n      (uv_orig * texsize.xy)\n     * \n      (texsize_noise_lq.zw * 0.4)\n    ) + rand_frame.xy)).xz - 0.5) / 256.0)\n   * 122.0) * clamp (\n    (treb_att - 1.0)\n  , 0.0, 1.0)));\n  ret_1.x = mix (ret_1.x, dot (ret_1.xxx, vec3(0.32, 0.49, 0.29)), 0.2);\n  vec2 tmpvar_2;\n  tmpvar_2 = (texsize.zw * 12.0);\n  vec3 tmpvar_3;\n  tmpvar_3 = (((texture (sampler_blur2, \n    (uv_orig + (vec2(1.0, 0.0) * tmpvar_2))\n  ).xyz * scale2) + bias2) - ((texture (sampler_blur2, \n    (uv_orig - (vec2(1.0, 0.0) * tmpvar_2))\n  ).xyz * scale2) + bias2));\n  vec3 tmpvar_4;\n  tmpvar_4 = (((texture (sampler_blur2, \n    (uv_orig + (vec2(0.0, 1.0) * tmpvar_2))\n  ).xyz * scale2) + bias2) - ((texture (sampler_blur2, \n    (uv_orig - (vec2(0.0, 1.0) * tmpvar_2))\n  ).xyz * scale2) + bias2));\n  vec2 tmpvar_5;\n  tmpvar_5.x = tmpvar_3.x;\n  tmpvar_5.y = tmpvar_4.x;\n  vec2 tmpvar_6;\n  tmpvar_6.x = tmpvar_3.y;\n  tmpvar_6.y = tmpvar_4.y;\n  vec2 tmpvar_7;\n  tmpvar_7.x = tmpvar_3.z;\n  tmpvar_7.y = tmpvar_4.z;\n  vec2 tmpvar_8;\n  tmpvar_8 = (((uv_orig + \n    (tmpvar_5 * 0.05)\n  ) + (tmpvar_6 * 0.02)) - (tmpvar_7 * 0.05));\n  ret_1.y = (texture (sampler_main, tmpvar_8).y - 0.04);\n  ret_1.y = (ret_1.y + ((\n    (ret_1.y - (((texture (sampler_blur1, tmpvar_8).xyz * scale1) + bias1).y * 1.2))\n   + 0.2) * 0.2));\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ret_1;\n  ret = tmpvar_9.xyz;\n }","comp":" shader_body { \n  vec2 uv_1;\n  vec3 ret_2;\n  uv_1 = (0.5 + ((uv - 0.5) * 0.98));\n  vec2 tmpvar_3;\n  tmpvar_3 = (texsize.zw * 4.0);\n  vec3 tmpvar_4;\n  tmpvar_4 = (((texture (sampler_blur1, \n    (uv_1 + (vec2(1.0, 0.0) * tmpvar_3))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv_1 - (vec2(1.0, 0.0) * tmpvar_3))\n  ).xyz * scale1) + bias1));\n  vec3 tmpvar_5;\n  tmpvar_5 = (((texture (sampler_blur1, \n    (uv_1 + (vec2(0.0, 1.0) * tmpvar_3))\n  ).xyz * scale1) + bias1) - ((texture (sampler_blur1, \n    (uv_1 - (vec2(0.0, 1.0) * tmpvar_3))\n  ).xyz * scale1) + bias1));\n  vec3 tmpvar_6;\n  tmpvar_6.z = 0.0;\n  tmpvar_6.x = dot (tmpvar_4, vec3(0.32, 0.49, 0.29));\n  tmpvar_6.y = dot (tmpvar_5, vec3(0.32, 0.49, 0.29));\n  vec4 tmpvar_7;\n  tmpvar_7 = texture (sampler_noisevol_hq, ((vec3(0.05, 0.05, 0.0) * (\n    ((uv_1.xyy + (tmpvar_6 * 0.5)) * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + (vec3(0.0, 0.0, 0.2) * time)));\n  vec2 tmpvar_8;\n  tmpvar_8.x = dot (tmpvar_4, vec3(0.32, 0.49, 0.29));\n  tmpvar_8.y = dot (tmpvar_5, vec3(0.32, 0.49, 0.29));\n  uv_1 = (uv_1 - (tmpvar_8 * 0.04));\n  ret_2 = (abs((\n    ((texture (sampler_main, uv_1).xyz + ((texture (sampler_blur1, uv_1).xyz * scale1) + bias1)) - ((texture (sampler_blur2, uv_1).xyz * scale2) + bias2))\n   - \n    ((texture (sampler_blur3, uv_1).xyz * scale3) + bias3)\n  )) * (dot (tmpvar_7, vec4(0.32, 0.49, 0.29, 0.0)) * 3.0));\n  ret_2 = (1.0 - pow (ret_2, vec3(0.5, 0.5, 0.5)));\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ret_2;\n  ret = tmpvar_9.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret.xyz = tex2D( sampler_main, uv ).xyz;\n\n      // take the difference between the crisp and blurred images,\n      // then add it back into the image.  Creates spots and stripes over time.\n      float2 b = lerp(GetBlur2(uv),GetBlur1(uv),uv_orig.x).xz;//GetBlur2(uv);\n      ret.xz += (ret.xz - b)*0.3 - (((bass+treb+mid-0.5)*.333)*.02);\n      ret.xz *= 0.95;\n\n      // add noise:\n      float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.4 + rand_frame.xy;\n      ret.xz += (tex2D(sampler_noise_lq, dither_uv).xz-0.5)/256.0 * 122 * saturate(treb_att-1);\n\n      // desaturate over time, to keep the globs white\n      ret.x = lerp(ret.x, lum(ret.x), 0.2);\n\n      float2 pix = texsize.zw*12;\n      float3 dx = (GetBlur2(uv_orig + float2(1,0)*pix) - GetBlur2(uv_orig - float2(1,0)*pix));\n      float3 dy = (GetBlur2(uv_orig + float2(0,1)*pix) - GetBlur2(uv_orig - float2(0,1)*pix));\n      float2 my_uv = uv_orig + float2(dx.x,dy.x)*0.05 + float2(dx.y,dy.y)*0.02 - float2(dx.z,dy.z)*0.05;\n\n      ret.y = tex2D(sampler_main, my_uv).y - 0.04;\n      ret.y += (ret.y - GetBlur1(my_uv).y*1.2 + 0.2)*0.2;\n}","comp_hlsl":"shader_body\n{\n\nuv = 0.5 + (uv-0.5)*0.98;\n    float2 d = texsize.zw*4;\n    float3 dx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );\n    float3 dy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );\n\nfloat4 noise = tex3D(sampler_noisevol_hq, ((uv.xyy+float3(lum(dx),lum(dy),0)*0.5)*texsize.xyy*texsize_noisevol_hq.zww).xyz*float3(1,1,0)*0.05\n                                        + time*float3(0,0,1)*0.2 );\nuv -= float2(lum(dx),lum(dy))*0.04;\nret = abs(GetPixel(uv)+GetBlur1(uv)-GetBlur2(uv)-GetBlur3(uv));\nret *= lum(noise)*3; \nret = pow(ret,0.5);\nret=1-ret;\n}"}