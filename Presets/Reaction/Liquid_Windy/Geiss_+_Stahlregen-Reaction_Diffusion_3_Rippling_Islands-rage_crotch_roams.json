{"version":2,"baseVals":{"rating":5,"gammaadj":1.9,"echo_zoom":1.169,"wave_mode":7,"modwavealphabyvolume":1,"wave_a":0,"wave_scale":1.015,"wave_smoothing":0.522,"modwavealphastart":0.83,"modwavealphaend":1.31,"warpanimspeed":30.965,"warpscale":2.572,"zoom":1.00901,"warp":0.00054,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.dx_residual=0;a.dy_residual=0;a.bass_thresh=0;a.rg=0;a.q9=0;a.vol=0;a.atime=0;a.q28=0;","frame_eqs_str":"a.wave_r=.85+.25*Math.sin(.437*a.time+1);a.wave_g=.85+.25*Math.sin(.544*a.time+2);a.wave_b=.85+.25*Math.sin(.751*a.time+3);a.rot+=.01*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*a.time));a.cx+=.21*(.6*Math.sin(.374*a.time)+.4*Math.sin(.294*a.time));a.cy+=.21*(.6*Math.sin(.393*a.time)+.4*Math.sin(.223*a.time));a.dx+=.003*(.6*Math.sin(.234*a.time)+.4*Math.sin(.277*a.time));a.dy+=.003*(.6*Math.sin(.284*a.time)+.4*Math.sin(.247*a.time));a.decay-=.01*equal(mod(a.frame,6),0);a.dx+=\na.dx_residual;a.dy+=a.dy_residual;a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*(.96*(a.bass_thresh-1.3)+1.3);a.dx_residual=.016*equal(a.bass_thresh,2.13)*Math.sin(7*a.time)+(1-equal(a.bass_thresh,2.13))*a.dx_residual;a.dy_residual=.012*equal(a.bass_thresh,2.13)*Math.sin(9*a.time)+(1-equal(a.bass_thresh,2.13))*a.dy_residual;a.wave_x-=7*a.dx_residual;a.wave_y-=7*a.dy_residual;a.wave_mystery=.03*a.time;a.rg=Math.max(.77*a.rg,.02+.5*Math.min(2,1.3*Math.max(0,a.mid_att-\n1)));a.q9=a.rg;a.zoom+=.1*a.q9;a.vol=a.bass+a.treb+a.mid;a.atime+=a.vol;a.q28=Math.sin(a.atime);","pixel_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"wave_r = 0.85 + 0.25*sin(0.437*time+1);\nwave_g = 0.85 + 0.25*sin(0.544*time+2);\nwave_b = 0.85 + 0.25*sin(0.751*time+3);\nrot = rot + 0.010*( 0.60*sin(0.381*time) + 0.40*sin(0.579*time) );\ncx = cx + 0.210*( 0.60*sin(0.374*time) + 0.40*sin(0.294*time) );\ncy = cy + 0.210*( 0.60*sin(0.393*time) + 0.40*sin(0.223*time) );\ndx = dx + 0.003*( 0.60*sin(0.234*time) + 0.40*sin(0.277*time) );\ndy = dy + 0.003*( 0.60*sin(0.284*time) + 0.40*sin(0.247*time) );\ndecay = decay - 0.01*equal(frame%6,0);\ndx = dx + dx_residual;\ndy = dy + dy_residual;\nbass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.3)*0.96+1.3);\ndx_residual = equal(bass_thresh,2.13)*0.016*sin(time*7) + (1-equal(bass_thresh,2.13))*dx_residual;\ndy_residual = equal(bass_thresh,2.13)*0.012*sin(time*9) + (1-equal(bass_thresh,2.13))*dy_residual;\nwave_x = wave_x - dx_residual*7;\nwave_y = wave_y - dy_residual*7;\nwave_mystery = time*0.03;\n\n//zoom = zoom + 0.005*( 0.60*sin(0.1934*time+3) + 0.40*sin(0.307*time+9) );\n//zoom = zoom + max(0,bass_att-1.1)*0.2;\n//warp = warp + max(0,treb_att-1.1)*1.0;\n\n// this is a great way to respond to beats:\n// once you get one, let it decay at a constant rate!!\nrg = max(rg*0.77, 0.02 + 0.5*min(2,max(0,mid_att-1)*1.3));\nq9 = rg;\n\nzoom = zoom + q9*0.1;\nvol=bass+treb+mid;\natime=atime+vol;\nq28=sin(atime);","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 noise_1;\n  vec3 ret_2;\n  noise_1 = ((texture (sampler_noise_lq, (\n    (((texsize.xy * texsize_noise_lq.zw).x * uv) / 2.0)\n   + q23)) + 1.0).xyz - (roam_sin.xyz * roam_cos.wzy));\n  vec3 tmpvar_3;\n  tmpvar_3 = (((texture (sampler_blur1, uv).xyz * scale1) + bias1) - 0.3);\n  vec2 tmpvar_4;\n  tmpvar_4.x = (0.3 * tmpvar_3.x);\n  tmpvar_4.y = tmpvar_3.y;\n  ret_2 = ((-0.4 * (\n    ((texture (sampler_blur1, ((uv / 4.0) + (0.4 * tmpvar_4))).xyz * scale1) + bias1)\n   - \n    (noise_1 * 0.1)\n  )) + (texture (sampler_main, (uv + \n    (tmpvar_3 * 0.01)\n  .xy)).xyz + (noise_1 * 0.1)));\n  float tmpvar_5;\n  tmpvar_5 = (1.0 - ((0.01 * q28) * (q28 * rad)));\n  ret_2 = (ret_2 * (0.98 * (tmpvar_5 * tmpvar_5)));\n  ret_2 = (ret_2 - 0.04);\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_2;\n  ret = tmpvar_6.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  ret_1 = ((texture (sampler_blur3, uv).xyz * scale3) + bias3);\n  vec2 tmpvar_2;\n  tmpvar_2 = mix (uv, ((uv * \n    ((1.0 - (0.2 * (\n      (texture (sampler_blur3, clamp (ret_1.xy, 0.0, 1.0)).xyz * scale3)\n     + bias3))) - (0.05 * ((texture (sampler_blur1, \n      clamp (ret_1.xy, 0.0, 1.0)\n    ).xyz * scale1) + bias1)))\n  .xy) + (\n    (0.1 * ((texture (sampler_blur3, clamp (ret_1.xy, 0.0, 1.0)).xyz * scale3) + bias3))\n   + \n    (0.025 * ((texture (sampler_blur1, clamp (ret_1.xy, 0.0, 1.0)).xyz * scale1) + bias1))\n  ).xy), vec2(0.75, 0.75));\n  ret_1 = (mix (vec3(1.0, 1.0, 0.65), vec3(1.0, 0.25, 1.0), (texture (sampler_main, tmpvar_2).xyz - \n    (0.5 * ((texture (sampler_blur1, tmpvar_2).xyz * scale1) + bias1))\n  )) - (roam_sin.wzy * roam_cos.xyz));\n  ret_1 = (1.0 - clamp (mix (\n    mix (ret_1, vec3(0.4, 0.4, 0.9), ((1.5 * (\n      (texture (sampler_blur2, tmpvar_2).xyz * scale2)\n     + bias2)) - (1.2 * texture (sampler_main, tmpvar_2).xyz)))\n  , vec3(0.4, 0.4, 0.0), \n    ((1.25 * ((texture (sampler_blur3, tmpvar_2).xyz * scale3) + bias3)) - (1.2 * ((texture (sampler_blur2, tmpvar_2).xyz * scale2) + bias2)))\n  ), 0.0, 1.0));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }","warp_hlsl":"shader_body {\n\n//uv = uv_orig;\nfloat corr = texsize.xy*texsize_noise_lq.zw;\nfloat2 uv1 = float2(uv.x-0.5,uv.y-0.5)*aspect.xy;\n\nfloat2 tmp = uv1;\ntmp.x = ang*3; tmp.y = rad;\nuv1 = tmp;\n\nfloat3 noise = (tex2D(sampler_noise_lq,corr*uv/2+q23)+1);\nnoise-=roam_sin*roam_cos.wzy;\n\nfloat3 ret1 = GetBlur1 (uv)-.3;\nfloat3 crisp = tex2D(sampler_main, uv+ret1*.01 ) + noise*0.1;\nfloat3 blur = GetBlur1 (uv/4+.4*float2(.3*ret1.x,ret1.y)) - noise*.1;\n\nret = -.4*blur + crisp;\n    \n ret *= 0.98 * pow(1-.01*q28*q28*rad,2); \n  ret -= 0.04;\n}","comp_hlsl":"shader_body\n{\n \nret = GetBlur3(uv);\n\nfloat2 uv2 = uv*(1-.2*GetBlur3(saturate(ret.xy))-.05*GetBlur1(saturate(ret.xy)));\nuv2 += .1*GetBlur3(saturate(ret.xy))+.025*GetBlur1(saturate(ret.xy));\n\nuv = lerp(uv,uv2,.75);\n\nret = lerp(float3(1,1,.65),float3(1,.25,1),GetPixel(uv)-.5*GetBlur1(uv));\nret-=roam_sin.wzy*roam_cos;\nret = lerp(ret,float3(.4,.4,.9),1.5*GetBlur2(uv)-1.2*GetPixel(uv));\nret = lerp(ret,float3(.4,.4,0),1.25*GetBlur3(uv)-1.2*GetBlur2(uv));\n\nret = 1-saturate(ret);\n\n//ret *= pow(hue_shader,3);\n//    ret = pow(ret,float3(.3,.55,1.8)); //gamma\n//    ret *= ret; //darken\n}"}