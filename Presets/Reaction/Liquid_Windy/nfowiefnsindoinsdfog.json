{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":0.97,"echo_zoom":1,"echo_orient":1,"wave_mode":3,"additivewave":1,"wrap":0,"wave_a":0.001,"wave_scale":0.01,"dx":0.00001,"dy":0.00001,"warp":0.01,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0,"ob_r":1,"ob_g":0.8,"ob_a":0.2,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"mv_a":0},"shapes":[{"baseVals":{"sides":3,"num_inst":500,"rad":0.03646,"tex_zoom":1.00183,"r":0,"a":0.11,"g2":0,"b2":0.6,"border_a":0.25,"enabled":0},"init_eqs_str":"","frame_eqs_str":"sample=.002*instance;\n\n\n///// Sphere\nr1=1;\nq10= -1+2*sample;\nq11=200*sample;\n\nmy_x = sqrt(r1*r1-q10*q10)*cos(q11);\nmy_y = sqrt(r1*r1-q10*q10)*sin(q11);\nmy_z = q10;\n\n/////// rotations... by flexi\n\nd = 6;\nzoom = 10;\n\nw3 = q1;\nw2 = q2;\nw1 = q3;\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\nx = 0.5 + my_x/q6;\ny = 0.5 + my_y/q5;\n\n\nrad=.1*sample;\nang=sample*time*15;\n\nb=sample;\ng=b;\nr=b;","init_eqs_eel":"","frame_eqs_eel":"sample=.002*instance;\n\n\n///// Sphere\nr1=1;\nq10= -1+2*sample;\nq11=200*sample;\n\nmy_x = sqrt(r1*r1-q10*q10)*cos(q11);\nmy_y = sqrt(r1*r1-q10*q10)*sin(q11);\nmy_z = q10;\n\n/////// rotations... by flexi\n\nd = 6;\nzoom = 10;\n\nw3 = q1;\nw2 = q2;\nw1 = q3;\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\nx = 0.5 + my_x/q6;\ny = 0.5 + my_y/q5;\n\n\nrad=.1*sample;\nang=sample*time*15;\n\nb=sample;\ng=b;\nr=b;"},{"baseVals":{"enabled":1,"sides":20,"num_inst":1024,"rad":0.15806,"r":0,"g":0.5,"g2":0.5,"b2":0.49,"a2":0.5,"border_r":0,"border_a":0.53},"init_eqs_str":"a.my_z=0;a.d=0;a.y3=0;a.z2=0;a.y1=0;a.w=0;a.w2=0;a.t1=0;a.x1=0;a.q6=0;a.zoom=0;a.p=0;a.q1=0;a.r1=0;a.q5=0;a.z3=0;a.w3=0;a.my_x=0;a.x3=0;a.my_y=0;a.q11=0;a.q10=0;a.w1=0;a.x2=0;a.l=0;a.y2=0;a.q2=0;a.z1=0;a.q3=0;a.sample=0;","frame_eqs_str":"a.sample=div(a.instance,a.num_inst);a.r1=1;a.q10=-1+2*a.sample;a.q11=200*a.sample;a.my_x=sqrt(a.r1*a.r1-a.q10*a.q10)*Math.cos(a.q11);a.my_y=sqrt(a.r1*a.r1-a.q10*a.q10)*Math.sin(a.q11);a.my_z=a.q10+3*Math.sin(2*a.q1+a.time)*Math.sin(.5*a.sample)*a.my_x*a.my_y;a.t1=10*a.sample+.1*a.time;a.x1=.5*(.6*Math.sin(7*a.t1)+.4*Math.sin(4.3*a.t1));a.y1=.5*(.6*Math.cos(3.3*a.t1)+.4*Math.cos(6.9*a.t1))*Math.sin(-100+200*a.sample);a.z1=.5*(.6*Math.cos(4.1*a.t1)+.4*Math.cos(6.9*a.t1))*Math.cos(-50+\n100*a.sample);a.my_x=.00001<Math.abs(above(a.sample,.45)*below(a.sample,.55))?a.x1:a.my_x;a.my_y=.00001<Math.abs(above(a.sample,.45)*below(a.sample,.55))?a.y1:a.my_y;a.my_z=.00001<Math.abs(above(a.sample,.45)*below(a.sample,.55))?a.z1:a.my_z;a.d=2;a.zoom=1;a.w3=.6*Math.sin(a.q1);a.w2=.6*Math.sin(a.q3);a.w1=a.q2;a.x1=Math.cos(a.w1)*a.my_x+Math.sin(a.w1)*a.my_y;a.y1=-Math.sin(a.w1)*a.my_x+Math.cos(a.w1)*a.my_y;a.z1=a.my_z;a.x2=Math.cos(a.w2)*a.x1+Math.sin(a.w2)*a.z1;a.z2=-Math.sin(a.w2)*a.x1+Math.cos(a.w2)*\na.z1;a.y2=a.y1;a.y3=Math.cos(a.w3)*a.y2+Math.sin(a.w3)*a.z2;a.z3=-Math.sin(a.w3)*a.y2+Math.cos(a.w3)*a.z2;a.x3=a.x2;a.l=sqrt(a.x3*a.x3+a.y3*a.y3);a.w=Math.atan2(a.x3,a.y3);a.p=Math.tan(Math.asin(1)+Math.atan2(a.d+a.z3,a.l));a.d=sqrt(a.x3*a.x3+a.y3*a.y3+(a.z3+a.d)*(a.z3+a.d));a.my_x=a.zoom*Math.sin(a.w)*a.p;a.my_y=a.zoom*Math.cos(a.w)*a.p;a.x=.5+div(a.my_x,a.q6);a.y=.5+div(a.my_y,a.q5);a.rad=div(a.rad,a.d);a.b=Math.sin(3.14*a.sample+.3*a.time);a.r=.9*a.b;a.g=.9*a.b;a.b2=.9*a.b;a.r2=.9*a.b2;a.g2=.9*\na.b2;a.border_r=a.r;a.border_g=a.g;a.border_b=a.b;a.rad=.00001<Math.abs(above(a.sample,.45)*below(a.sample,.55))?.02*a.rad+12*a.rad*(a.sample-.45):a.rad;a.ang=.00001<Math.abs(above(a.sample,.45)*below(a.sample,.55))?300*(a.sample-.55)*a.time:0;a.sides=.00001<Math.abs(above(a.sample,.45)*below(a.sample,.55))?14*(1-10*(a.sample-.45)):20;a.r=.00001<Math.abs(above(a.sample,.45)*below(a.sample,.55))?a.sample:a.r;a.g=.00001<Math.abs(above(a.sample,.45)*below(a.sample,.55))?a.sample:a.g;a.b=.00001<Math.abs(above(a.sample,\n.45)*below(a.sample,.55))?a.sample:a.b;a.r2=.00001<Math.abs(above(a.sample,.45)*below(a.sample,.55))?.1:a.r2;a.g2=.00001<Math.abs(above(a.sample,.45)*below(a.sample,.55))?.1:a.g2;a.b2=.00001<Math.abs(above(a.sample,.45)*below(a.sample,.55))?.1:a.b2;a.a2=.00001<Math.abs(above(a.sample,.45)*below(a.sample,.55))?.6:a.a2;a.border_a=.00001<Math.abs(above(a.sample,.45)*below(a.sample,.55))?0:.5;","init_eqs_eel":"","frame_eqs_eel":"sample=instance/num_inst;\n\n///// Sphere\nr1=1;\nq10= -1+2*sample;\nq11=200*sample;\n\nmy_x = sqrt(r1*r1-q10*q10)*cos(q11);\nmy_y = sqrt(r1*r1-q10*q10)*sin(q11);\nmy_z = q10+3*sin(2*q1+time)*sin(.5*sample)*my_x*my_y;\n\n\n///// drago\nt1 = 10*sample+time*.1;\nx1 = .5*(.6*sin (7*t1)+.4*sin (4.3*t1)) ;\ny1 = .5*(.6*cos (3.3*t1)+.4*cos (6.9*t1))* sin (-100+200*sample) ;\nz1 = .5*(.6*cos (4.1*t1)+.4*cos (6.9*t1)) * cos (-50+100*sample) ;\n\n\nmy_x = if(above(sample,.45)*below(sample,.55),x1,my_x);\nmy_y = if(above(sample,.45)*below(sample,.55),y1,my_y);\nmy_z = if(above(sample,.45)*below(sample,.55),z1,my_z);\n \n\n/////// rotations... by flexi\n\nd = 2; \nzoom = 1;\n\nw3 = .6*sin(q1);\nw2 = .6*sin(q3);\nw1 = q2;\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\nx = 0.5 + my_x/q6;\ny = 0.5 + my_y/q5;\n\n\n////////// sphere\nrad=rad/d;\nb=sin(3.14*sample+.3*time);\nr=.9*b;\ng=.9*b;\nb2=.9*b;\nr2=.9*b2;\ng2=.9*b2;\nborder_r=r;\nborder_g=g;\nborder_b=b;\n\n\n////// drago\n\nrad= if(above(sample,.45)*below(sample,.55), .02*rad+12*rad*(sample-.45), rad);\nang= if(above(sample,.45)*below(sample,.55), 300*(sample-.55)*time,0);\nsides= if(above(sample,.45)*below(sample,.55), 14*(1-10*(sample-.45)),20);\n\nr= if(above(sample,.45)*below(sample,.55),sample,r);\ng= if(above(sample,.45)*below(sample,.55),sample,g);\nb= if(above(sample,.45)*below(sample,.55),sample,b);\nr2= if(above(sample,.45)*below(sample,.55),.1,r2);\ng2= if(above(sample,.45)*below(sample,.55),.1,g2);\nb2= if(above(sample,.45)*below(sample,.55),.1,b2);\n\na2= if(above(sample,.45)*below(sample,.55),.6,a2);\nborder_a= if(above(sample,.45)*below(sample,.55),0,.5);"},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"usedots":1,"r":0.8,"g":0.8,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"///// Cone\n\nr1=1;\nr2=.3;\nq10=sample;\nq11=80*sample;\n\nmy_x = ((r1-q10)/r1)*r2*cos(q11);\nmy_y = ((r1-q10)/r1)*r2*sin(q11);\nmy_z = -q10;\n\n/////// rotations... by flexi\n\nd = 4; //// distance\nzoom = 1;\n\nw3 = q1;\nw2 = q2;\nw1 = q3;\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;\n","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"///// Cone\n\nr1=1;\nr2=.3;\nq10=sample;\nq11=80*sample;\n\nmy_x = ((r1-q10)/r1)*r2*cos(q11);\nmy_y = ((r1-q10)/r1)*r2*sin(q11);\nmy_z = -q10;\n\n/////// rotations... by flexi\n\nd = 4; //// distance\nzoom = 1;\n\nw3 = q1;\nw2 = q2;\nw1 = q3;\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;\n"},{"baseVals":{"scaling":0.20929,"smoothing":0,"r":0.8,"g":0.8,"a":0.47,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"///// Sphere\nr1=1;\nq10= -1+2*sample;\nq11=200*sample;\n\nmy_x = sqrt(r1*r1-q10*q10)*cos(q11);\nmy_y = sqrt(r1*r1-q10*q10)*sin(q11);\nmy_z = q10;\n\n/////// rotations... by flexi\n\nd = 6; //// distance\nzoom = 1;\n\nw3 = q1;\nw2 = q2;\nw1 = q3;\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;\n","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"///// Sphere\nr1=1;\nq10= -1+2*sample;\nq11=200*sample;\n\nmy_x = sqrt(r1*r1-q10*q10)*cos(q11);\nmy_y = sqrt(r1*r1-q10*q10)*sin(q11);\nmy_z = q10;\n\n/////// rotations... by flexi\n\nd = 6; //// distance\nzoom = 1;\n\nw3 = q1;\nw2 = q2;\nw1 = q3;\n\nx1 = cos(w1)*my_x + sin(w1)*my_y;\ny1 = -sin(w1)*my_x + cos(w1)*my_y;\nz1 = my_z;\n\nx2 = cos(w2)*x1 + sin(w2)*z1;\nz2 = -sin(w2)*x1 + cos(w2)*z1;\ny2 = y1;\n\ny3 = cos(w3)*y2 + sin(w3)*z2;\nz3 = -sin(w3)*y2 + cos(w3)*z2;\nx3 = x2;\n\n// perspective calculation\n\nl = sqrt(x3*x3 + y3*y3);\nw = atan2(x3,y3);\np = tan(asin(1) + atan2(d+z3,l));\nd = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));\n\nmy_x = zoom*sin(w)*p;\nmy_y = zoom*cos(w)*p;\n\nx = 0.5 + my_x;\ny = 0.5 + my_y;\n"},{"baseVals":{"a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"r":0.8,"g":0.7,"a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.volt=0;a.rots=0;","frame_eqs_str":"a.wave_r=a.wave_r+.25*Math.sin(1.2*a.time)+.12*Math.sin(1.93*a.time);a.wave_b=a.wave_b+.256*Math.sin(1.6*a.time)+.2*Math.sin(1.33*a.time);a.wave_g=a.wave_g+.19*Math.sin(2*a.time)+3.1*Math.sin(1.78*a.time);","pixel_eqs_str":"a.volt=.3333*(a.bass+a.treb+a.mid);a.rots=.1*(.6-a.rad)*1.1*a.volt*Math.sin(1.024*a.time);a.zoom+=.00001<Math.abs(above(3*a.volt,88*Math.cos(2*a.bass)))?-Math.sin(.7*a.volt*a.rots*1.1):0;a.rot+=(.00001<Math.abs(above(3*a.volt,8*Math.cos(3*a.bass)))?-Math.sin(.7*a.volt*a.rots*1.1):0)*Math.sin(1.3*a.time);","init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.25*sin(1.2*time) + 0.12*sin(1.93*time);\nwave_b = wave_b + 0.256*sin(1.6*time) + 0.2*sin(1.33*time);\nwave_g = wave_g + 0.19*sin(2*time) + 3.1*sin(1.78*time);","pixel_eqs_eel":"//thresh = above(bass_att,thresh)*2+(1-above(bass_att,thresh))*((thresh-1.3)*0.96+1.3);\n//dx_r = equal(thresh,2)*0.015*sin(5*time)+(1-equal(thresh,2))*dx_r;\n//dy_r = equal(thresh,2)*0.015*sin(6*time)+(1-equal(thresh,2))*dy_r;\nvolt = (bass+treb+mid)*0.3333;\nrots = 0.1*(0.6-rad)*1.1 * volt*sin(1.024*time);\nzoom = zoom + if (above(3*volt,88*cos(2*bass)), - sin(0.7*volt* rots*1.1), + 0.0);\nrot = rot + if (above(3*volt,8*cos(3*bass)), - sin(0.7*volt*rots*1.1), + 0.0) * sin(1.3*time);","warp":" shader_body { \n  vec3 ret_1;\n  vec3 tmpvar_2;\n  tmpvar_2 = (texture (sampler_noise_lq, ((\n    ((texsize.xy * texsize_noise_lq.zw).x * uv)\n   / 2.0) + q23)) + 1.0).xyz;\n  vec3 tmpvar_3;\n  tmpvar_3 = (((texture (sampler_blur1, uv).xyz * scale1) + bias1) - 0.3);\n  vec2 tmpvar_4;\n  tmpvar_4.x = (0.3 * tmpvar_3.x);\n  tmpvar_4.y = tmpvar_3.y;\n  ret_1 = ((-0.4 * (\n    ((texture (sampler_blur1, ((uv / 4.0) + (0.4 * tmpvar_4))).xyz * scale1) + bias1)\n   - \n    (tmpvar_2 * 0.1)\n  )) + (texture (sampler_main, (uv + \n    (tmpvar_3 * 0.01)\n  .xy)).xyz + (tmpvar_2 * 0.1)));\n  float tmpvar_5;\n  tmpvar_5 = (1.0 - ((0.01 * q28) * (q28 * rad)));\n  ret_1 = (ret_1 * (0.98 * (tmpvar_5 * tmpvar_5)));\n  ret_1 = (ret_1 - 0.04);\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_1;\n  ret = tmpvar_6.xyz;\n }","comp":"vec3 xlat_mutableneu;\nvec3 xlat_mutableret1;\n shader_body { \n  vec2 uv_1;\n  float inten_3;\n  float dist_4;\n  float s_5;\n  float ang2_6;\n  vec2 uv2_7;\n  vec3 ret_8;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  dist_4 = 1.0;\n  inten_3 = 1.0;\n  xlat_mutableret1 = vec3(0.0, 0.0, 0.0);\n  for (int n_2 = 1; n_2 <= 3; n_2++) {\n    ang2_6 = float((n_2 / 3));\n    s_5 = (1.0 - ang2_6);\n    uv2_7.x = ((uv_1.x * ang2_6) - (uv_1.y * s_5));\n    uv2_7.y = ((uv_1.x * s_5) + (uv_1.y * ang2_6));\n    uv2_7 = (uv2_7 * aspect.yx);\n    dist_4 = (1.0 - fract((\n      (0.25 * float(n_2))\n     + q29)));\n    inten_3 = ((pow (dist_4, 0.5) * (1.0 - \n      (dist_4 * dist_4)\n    )) * 2.0);\n    vec2 tmpvar_9;\n    tmpvar_9 = fract(((\n      ((3.0 * uv2_7) * dist_4)\n     + 0.5) + q31));\n    xlat_mutableneu = (texture (sampler_main, tmpvar_9).xyz + (2.0 * (\n      (texture (sampler_blur1, tmpvar_9).xyz * scale1)\n     + bias1)));\n    vec3 tmpvar_10;\n    tmpvar_10 = max ((xlat_mutableret1 * 0.9), (xlat_mutableneu * inten_3));\n    xlat_mutableret1 = tmpvar_10;\n    vec4 tmpvar_11;\n    tmpvar_11 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv2_7.xyy) * (\n      (q28 * texsize.xyy)\n     * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q31)));\n    if (((tmpvar_10.x > (q26 * q13)) && (tmpvar_10.x <= (q23 * q11)))) {\n      xlat_mutableret1.z = (tmpvar_10.z - (tmpvar_11.x * 0.5));\n    };\n    if (((tmpvar_10.y > (q25 * q11)) && (tmpvar_10.y <= (q22 * q12)))) {\n      xlat_mutableret1.x = (tmpvar_10.x - (tmpvar_11.y * 0.5));\n    };\n    if (((xlat_mutableret1.z > (q24 * q12)) && (xlat_mutableret1.z <= (q21 * q13)))) {\n      xlat_mutableret1.y = (tmpvar_10.y - (tmpvar_11.z * 0.5));\n    };\n  };\n  ret_8 = ((0.5 * xlat_mutableret1) + (vec3(0.0, 0.0, 0.15) * (0.5 + uv_1.y)));\n  ret_8 = (1.0 - ret_8);\n  vec4 tmpvar_12;\n  tmpvar_12.w = 1.0;\n  tmpvar_12.xyz = ret_8;\n  ret = tmpvar_12.xyz;\n }","warp_hlsl":"shader_body {\n\n//uv = uv_orig;\nfloat corr = texsize.xy*texsize_noise_lq.zw;\nfloat2 uv1 = float2(uv.x-0.5,uv.y-0.5)*aspect.xy;\n\nfloat2 tmp = uv1;\ntmp.x = ang*3; tmp.y = rad;\nuv1 = tmp;\n\nfloat3 noise = (tex2D(sampler_noise_lq,corr*uv/2+q23)+1);\n\nfloat3 ret1 = GetBlur1 (uv)-.3;\nfloat3 crisp = tex2D(sampler_main, uv+ret1*.01 ) + noise*0.1;\nfloat3 blur = GetBlur1 (uv/4+.4*float2(.3*ret1.x,ret1.y)) - noise*.1;\n\nret = -.4*blur + crisp;\n    \n ret *= 0.98 * pow(1-.01*q28*q28*rad,2); \n  ret -= 0.04;\n}","comp_hlsl":"float3 ret1, neu, blur;\n\nshader_body\n{\nfloat2 uv2;\nfloat ang2, c, s;\nuv -= 0.5;\nuv *= aspect.xy;    \n\nfloat dist = 1;\nfloat inten = 1;\nret1 = 0;\nint anz = 3;\nint n = 1;\nwhile (n <= anz) {\n    ang2 = n/anz;\n    c = (ang2);\n    s = 1-(ang2);\n    uv2.x =  uv.x*c - uv.y*s;\n    uv2.y =  uv.x*s + uv.y*c;\n    uv2 *= aspect.yx;\n    dist = 1-frac(.25*n+q29); //evtl sqrt !\n    inten =  pow(dist,.5)*(1-dist*dist)*2;\n    float2 uv3 = frac(3*uv2*dist + .5 + q31);;\n    neu =  GetPixel (uv3) + 2*GetBlur1(uv3);\n\n    ret1 = max(ret1*.9,neu*inten);\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv2.xyy*q28\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q31\n                     );\nif(ret1.x> q26*q13         && ret1.x<= q23*q11        )ret1.z -= (noise9).x*.5; \nif(ret1.y> q25*q11         && ret1.y<= q22*q12        )ret1.x -= (noise9).y*.5; \nif(ret1.z> q24*q12         && ret1.z<= q21*q13        )ret1.y -= (noise9).z*.5; \nn++;\n}\n\nret = .5*ret1 + 0.5*float3(0,0,.3)*(.5+uv.y) ;\nret=1-ret;\n}"}