{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"wave_brighten":0,"wave_a":0.001,"wave_scale":0.535,"wave_smoothing":0,"wave_mystery":-0.48,"modwavealphastart":1,"modwavealphaend":1.1,"warpanimspeed":0.942,"warpscale":2.001,"zoomexp":0.9996,"zoom":1.0065,"warp":0.1555,"sx":0.9996,"sy":0.9999,"wave_g":0.65,"wave_b":0,"ob_r":0.25,"ob_g":0.65,"ob_b":0.25,"ib_r":0.65,"mv_x":6.4,"mv_y":48,"mv_dx":0.5,"mv_dy":0.5,"mv_l":5,"mv_r":0.014,"mv_g":0.872,"mv_b":0.522,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":100,"thickoutline":1,"textured":1,"rad":0.7463,"tex_zoom":0.94204,"g":1,"b":1,"a":0.8,"r2":1,"b2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"a.val=0;","frame_eqs_str":"a.ang=.5*Math.sin(a.time)+.5;a.val=3;a.a=.33*a.val;a.rad=.4*Math.cos(.3*a.time)+.65;a.x=.25*Math.sin(.25*a.time)+.5;a.y=.25*Math.cos(.45*a.time)+.5;","init_eqs_eel":"","frame_eqs_eel":"ang=sin(time)*.5+.5;\nval=3;\n//a2=val*.33;\na=val*.33;\nrad=cos(time*.3)*.4+0.65;\nx=sin(time*.25)*.25+.5;\ny=cos(time*.45)*.25+.5;\n\n\n"},{"baseVals":{"enabled":1,"sides":100,"thickoutline":1,"textured":1,"rad":0.7463,"tex_zoom":0.94204,"g":1,"b":1,"a":0.8,"r2":1,"b2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"a.val=0;","frame_eqs_str":"a.ang=.5*Math.cos(.3*a.time)+.5;a.val=3;a.a=.33*a.val;a.rad=.4*Math.sin(.3*a.time)+.65;a.x=.25*Math.cos(.25*a.time)+.5;a.y=.25*Math.sin(.45*a.time)+.5;","init_eqs_eel":"","frame_eqs_eel":"ang=cos(time*.3)*.5+.5;\nval=3;\n//a2=val*.33;\na=val*.33;\nrad=sin(time*.3)*.4+0.65;\nx=cos(time*.25)*.25+.5;\ny=sin(time*.45)*.25+.5;\n\n\n"},{"baseVals":{"sides":100,"thickoutline":1,"rad":0.36456,"r":0,"g2":0,"a2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"\nh2=h2+(above(treb,1.32)*0.8)*.9;\nvr=sin(h2*.8)*.5+.5;\nvg=sin(h2*.5)*.5+.5;\nvb=sin(h2*.1)*.5+.5;\n\ng=vg;\nr=vr;\nb=vb;\ng2=g;\nr2=r;\nb2=b;\ndist=(frame%100)*.01;\nmaat=maat+(above(bass_att,1.5));\nmaat=below(maat,16)*maat;\nx=if(below(maat,8),if(below(maat,4),dist,1-dist),x);\ny=if(above(maat,8),if(above(maat,4),dist,1-dist),y);","init_eqs_eel":"","frame_eqs_eel":"\nh2=h2+(above(treb,1.32)*0.8)*.9;\nvr=sin(h2*.8)*.5+.5;\nvg=sin(h2*.5)*.5+.5;\nvb=sin(h2*.1)*.5+.5;\n\ng=vg;\nr=vr;\nb=vb;\ng2=g;\nr2=r;\nb2=b;\ndist=(frame%100)*.01;\nmaat=maat+(above(bass_att,1.5));\nmaat=below(maat,16)*maat;\nx=if(below(maat,8),if(below(maat,4),dist,1-dist),x);\ny=if(above(maat,8),if(above(maat,4),dist,1-dist),y);"},{"baseVals":{"thickoutline":1,"textured":1,"rad":0.36456,"r":0,"g2":0,"a2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"\nh2=h2+(above(treb,1.32)*0.8)*.9;\nvr=sin(h2*.8)*.5+.5;\nvg=sin(h2*.5)*.5+.5;\nvb=sin(h2*.1)*.5+.5;\n\ng=vg;\nr=vr;\nb=vb;\ng2=g;\nr2=r;\nb2=b;\ndist=(frame%100)*.01;\nmaat=maat+(above(bass_att,1.5));\nmaat=below(maat,16)*maat;\ny=if(below(maat,8),if(below(maat,4),dist,1-dist),y);\nx=if(above(maat,8),if(above(maat,4),dist,1-dist),x);","init_eqs_eel":"","frame_eqs_eel":"\nh2=h2+(above(treb,1.32)*0.8)*.9;\nvr=sin(h2*.8)*.5+.5;\nvg=sin(h2*.5)*.5+.5;\nvb=sin(h2*.1)*.5+.5;\n\ng=vg;\nr=vr;\nb=vb;\ng2=g;\nr2=r;\nb2=b;\ndist=(frame%100)*.01;\nmaat=maat+(above(bass_att,1.5));\nmaat=below(maat,16)*maat;\ny=if(below(maat,8),if(below(maat,4),dist,1-dist),y);\nx=if(above(maat,8),if(above(maat,4),dist,1-dist),x);"}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.mq29=0;a.cthr=0;a.mq1=0;a.lastingbass=0;a.q25=0;a.q12=0;a.q22=0;a.q21=0;a.q13=0;a.q29=0;a.madtreb=0;a.mq31=0;a.mq21=0;a.mq24=0;a.chng=0;a.mq28=0;a.mq23=0;a.q31=0;a.q23=0;a.q24=0;a.q11=0;a.atime=0;a.q26=0;a.mq27=0;a.mq25=0;a.mq22=0;a.vol=0;a.imp=0;a.mq26=0;a.ff=0;a.def=0;a.q27=0;a.q7=0;a.q28=0;","frame_eqs_str":"a.chng=Math.sin(.5*a.time);a.cthr=.9999;a.mq21=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq21;a.mq22=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq22;a.mq23=.00001<Math.abs(above(a.chng,a.cthr))?rand(3):a.mq23;a.mq24=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq24;a.mq25=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq25;a.mq26=.00001<Math.abs(above(a.chng,a.cthr))?rand(2):a.mq26;a.mq27=.00001<Math.abs(above(a.chng,a.cthr))?rand(1):a.mq27;a.mq28=.00001<Math.abs(above(a.chng,\na.cthr))?rand(1):a.mq28;a.mq29=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq29;a.mq31=.00001<Math.abs(above(a.chng,a.cthr))?.3*rand(1):a.mq31;a.monitor=a.chng;a.q21=a.mq21;a.q22=a.mq22;a.q23=a.mq23;a.q24=a.mq24;a.q25=a.mq25;a.q26=a.mq26;a.q27=a.mq27;a.q28=a.mq28;a.q29=a.mq29;a.q31=a.mq31;a.monitor=a.mq1;a.vol=a.bass+a.treb+a.mid;a.atime+=a.vol;a.q11=.4+.4*Math.sin(.006*a.atime);a.q12=.4+.4*Math.cos(.00613828348*a.atime);a.q13=.4+.4*Math.sin(.00598593455*a.atime);a.monitor=a.q13;a.wave_r=div(Math.sin(div(5*\na.ff,a.bass)),2)+.5;a.wave_g=div(Math.cos(div(a.ff,a.mid)),2)+.5;a.wave_b=div(Math.cos(div(3*a.ff,a.treb)),2)+.5;a.ib_r-=.3*Math.sin(.5413*a.time);a.ib_g-=.3*Math.sin(.6459*a.time);a.ib_b-=.3*Math.sin(.4354*a.time);a.ob_r=a.wave_r;a.ob_g=a.wave_g;a.ob_b=a.wave_b;a.mv_x=30*a.lastingbass+24;a.mv_y=48*a.madtreb+8;a.mv_r=.7-a.bass_att;a.mv_b=.6-a.treb_att;a.mv_g=.5-a.mid_att;a.ff=div(a.frame,100);a.rot=.01*(1*sign(.6*Math.sin(.381*a.time))+.5*Math.sin(.579*a.time))*above(a.bass,1.33);a.warp=0;a.q7=Math.floor(4*\nMath.sin(.1*above(a.treb_att,1.35)+a.q7));","pixel_eqs_str":"a.imp=.1*sqr(.75+(.00001<Math.abs(below(Math.tan(a.x*a.frame*.5-a.frame*a.y*.5+a.rad),a.def))?0:2*a.rad+1));a.zoom=1+above(a.treb,1.32)*Math.exp(a.treb+2)*(.00001<Math.abs(above(Math.sin(2*a.time),sqr(.5+div(Math.sin(a.time+Math.exp(a.rad+1)),4))))?0:.1+.2*a.rad);","init_eqs_eel":"","frame_eqs_eel":"chng=sin(time*.5);\ncthr=.9999;\nmq21=if(above(chng,cthr),rand(3),mq21);\nmq22=if(above(chng,cthr),rand(3),mq22);\nmq23=if(above(chng,cthr),rand(3),mq23);\nmq24=if(above(chng,cthr),rand(2),mq24);\nmq25=if(above(chng,cthr),rand(2),mq25);\nmq26=if(above(chng,cthr),rand(2),mq26);\nmq27=if(above(chng,cthr),rand(1),mq27);\nmq28=if(above(chng,cthr),rand(1),mq28);\nmq29=if(above(chng,cthr),rand(1)*.3,mq29);\nmq31=if(above(chng,cthr),rand(1)*.3,mq31);\nmonitor=chng;\nq21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;\nq27=mq27;q28=mq28;q29=mq29;q31=mq31;\n\nmonitor=mq1;\nvol=bass+treb+mid;\natime=atime+vol;\nq11=.4+sin(atime*.006        )*.4;\nq12=.4+cos(atime*.00613828348)*.4;\nq13=.4+sin(atime*.00598593455)*.4;\nmonitor=q13;\n\nwave_r = sin(5*ff/bass)/2+0.5;\nwave_g = cos(ff/mid)/2+0.5;\nwave_b = cos(3*ff/treb)/2+0.5;\n\n\nib_r = ib_r - 0.3*sin(time*0.5413);\nib_g = ib_g - 0.3*sin(time*0.6459);\nib_b = ib_b - 0.3*sin(time*0.4354);\nob_r=wave_r;\nob_g=wave_g;\nob_b=wave_b;\nmv_x = lastingbass*30+24;\nmv_y= madtreb*48+8;\nmv_r = 0.7-bass_att;\nmv_b = 0.6-treb_att;\nmv_g = 0.5-mid_att;\nff = frame/100;\nrot =  0.010*( sign(0.60*sin(0.381*time))*1 + 0.50*sin(0.579*time) )*above(bass,1.33);\nwarp=0;\nQ7=INT(4*SIN(ABOVE(TREB_ATT,1.35)*0.1+Q7));","pixel_eqs_eel":"//thresh = above(bass_att,thresh)*2+(1-above(bass_att,thresh))*((thresh-1.3)*0.96+1.3);\n//dx = above(treb,1.3)*0.01*(equal(thresh,2)*0.315*sin(5*time)+(1-equal(thresh,2))*dx);\n//dy =  above(mid,1.3)*0.01*(equal(thresh,2)*0.315*sin(6*time)+(1-equal(thresh,2))*dy);\n\n//zoomr = 1+if(above(rad,counter),0,if(below(rad,0.12),0,exp(4*abs(sin(counter))-RAD*4)))*above(treb,treb_att+0.03)*pow(bass+bass_att/2,treb*4+mid*4)/13;\nimp=0.1*sqr(0.75+if(below(tan(x*frame*0.5-frame*y*0.5+rad),def),0,rad*2+1));\nzoom  = 1+above(treb, 1.32)*exp(treb+2)*if(above(sin(time*2),sqr(0.5+sin(time+exp(rad+1))/4)),0,0.1+rad*0.2);","warp":"vec3 xlat_mutablecol;\nvec2 xlat_mutabled;\n shader_body { \n  vec3 ret_1;\n  xlat_mutabled = (2.0 * texsize.zw);\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  xlat_mutablecol.xy = (vec3(((\n    ((((texture (sampler_main, \n      (uv + (xlat_mutabled * vec2(-1.0, 0.0)))\n    ).y + texture (sampler_main, \n      (uv + (xlat_mutabled * vec2(1.0, 0.0)))\n    ).z) + texture (sampler_main, (uv + \n      (xlat_mutabled * vec2(0.0, -1.0))\n    )).x) + texture (sampler_main, (uv + (xlat_mutabled * vec2(0.0, 1.0)))).y) * 0.5)\n   - tmpvar_2.x) + (texture (sampler_pw_main, uv).z * 0.005))) * 0.998).xy;\n  xlat_mutablecol.z = (((\n    (texture (sampler_main, (uv + (xlat_mutabled * vec2(-1.0, 0.0)))).z + texture (sampler_main, (uv + (xlat_mutabled * vec2(1.0, 0.0)))).z)\n   + texture (sampler_main, \n    (uv + (xlat_mutabled * vec2(0.0, -1.0)))\n  ).x) + texture (sampler_main, (uv + \n    (xlat_mutabled * vec2(0.0, 1.0))\n  )).z) + tmpvar_2.y);\n  if ((xlat_mutablecol.z > 1.0)) {\n    xlat_mutablecol.z = 0.0;\n  };\n  vec3 tmpvar_3;\n  tmpvar_3.x = (tmpvar_2.y / xlat_mutablecol.x);\n  tmpvar_3.y = (xlat_mutablecol.x - tmpvar_2.z);\n  tmpvar_3.z = (tmpvar_2.y + xlat_mutablecol.z);\n  ret_1 = tmpvar_3;\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv.xyy) * (\n    (q27 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q29)));\n  if (((tmpvar_3.x > (q21 * q13)) && (tmpvar_3.x <= (q24 * q11)))) {\n    ret_1.y = (tmpvar_3.y + (tmpvar_4.x * 0.5));\n  };\n  if (((ret_1.y > (q22 * q11)) && (ret_1.y <= (q25 * q12)))) {\n    ret_1.z = (tmpvar_3.z + (tmpvar_4.y * 0.5));\n  };\n  if (((ret_1.z > (q23 * q12)) && (ret_1.z <= (q26 * q13)))) {\n    ret_1.x = (tmpvar_3.x + (tmpvar_4.z * 0.5));\n  };\n  if ((rad > (aspect.y * 0.95))) {\n    ret_1 = vec3(1.0, 1.0, 1.0);\n  };\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = ret_1;\n  ret = tmpvar_5.xyz;\n }","comp":" shader_body { \n  float ang2_1;\n  vec2 uv2_2;\n  vec3 ret_3;\n  ang2_1 = ((ang * 0.1591549) + (time * 0.025));\n  float tmpvar_4;\n  tmpvar_4 = (3.0 + floor((rand_preset.z * 5.95)));\n  ang2_1 = (fract((ang2_1 * tmpvar_4)) / tmpvar_4);\n  ang2_1 = (abs((ang2_1 - \n    (0.5 / tmpvar_4)\n  )) * 6.283185);\n  vec2 tmpvar_5;\n  tmpvar_5.x = cos(ang2_1);\n  tmpvar_5.y = sin(ang2_1);\n  uv2_2 = (0.5 + ((\n    (0.4 * (rad * sqrt(dot (texsize.xy, texsize.xy))))\n   * tmpvar_5) * texsize.zw));\n  vec4 tmpvar_6;\n  tmpvar_6 = texture (sampler_main, uv2_2);\n  ret_3 = tmpvar_6.xyz;\n  vec4 tmpvar_7;\n  tmpvar_7 = texture (sampler_noisevol_hq, (((vec3(0.05, 0.05, 0.0) * uv2_2.xyy) * (\n    (q28 * texsize.xyy)\n   * texsize_noisevol_hq.zww)) + ((time * vec3(0.0, 0.0, 1.0)) * q31)));\n  if (((tmpvar_6.x > (q26 * q13)) && (tmpvar_6.x <= (q23 * q11)))) {\n    ret_3.z = (tmpvar_6.z - (tmpvar_7.x * 0.5));\n  };\n  if (((tmpvar_6.y > (q25 * q11)) && (tmpvar_6.y <= (q22 * q12)))) {\n    ret_3.x = (tmpvar_6.x - (tmpvar_7.y * 0.5));\n  };\n  if (((ret_3.z > (q24 * q12)) && (ret_3.z <= (q21 * q13)))) {\n    ret_3.y = (tmpvar_6.y - (tmpvar_7.z * 0.5));\n  };\n  ret_3 = (ret_3 * 1.333);\n  ret_3 = (0.6 - ret_3);\n  vec4 tmpvar_8;\n  tmpvar_8.w = 1.0;\n  tmpvar_8.xyz = ret_3;\n  ret = tmpvar_8.xyz;\n }","warp_hlsl":" float x, y;\n float2 d;\n float3 col_old, col;\n\n shader_body{\n  d=2*texsize.zw; x=uv.x, y=uv.y;\n  \n  col_old=GetPixel(uv);\n  col=\n  (GetPixel(uv+d*float2(-1,0)).y\n  +GetPixel(uv+d*float2(1,0)).z\n  +GetPixel(uv+d*float2(0,-1)).x\n  +GetPixel(uv+d*float2(0,1)).y)*.5-col_old.x\n  +tex2D(sampler_pw_main,uv).z*.005; // remove this line to see the old method, controls the length of the waves\n col*=.998;\n col.z=\n  (GetPixel(uv+d*float2(-1,0)).z\n  +GetPixel(uv+d*float2(1,0)).z\n  +GetPixel(uv+d*float2(0,-1)).x\n  +GetPixel(uv+d*float2(0,1)).z\n  +GetPixel(uv).y);\n \n if(col.z>1)col.z=0;\n ret=float3(col_old.y/col.x,col.x-col_old.z,col_old.y+col.z);\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv.xyy*q27\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q29\n                     );\nif(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y += (noise9).x*.5; \nif(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z += (noise9).y*.5; \nif(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x += (noise9).z*.5; \n \n if(rad>aspect.y*.95)ret=1;\n}","comp_hlsl":"shader_body\n{\n    float rad_lq = rad * length(texsize.xy)*0.5;\n    float ang_lq = ang;\n    float2 uv_temp1 = (uv - 0.5) * texsize.xy;\n    float rad_hq = length(uv_temp1);\n    float ang_hq = atan2(-uv_temp1.y, uv_temp1.x);\n\n    float2 uv2 = (uv - 0.5);\n    float rad2 = rad_lq*0.8;\n    float ang2 = ang_lq * M_INV_PI_2;\n\n        // ROTATION OVER TIME\n        #if 1\n          ang2 += time*0.025;   //rotate over time\n        #endif\n\n        // FIN TYPE\n        float fins = 3 + floor(rand_preset.z*5.95);\n        #if 1     // SHARP FINS\n          ang2 = frac(ang2*fins)/fins;\n              // ENABLE THIS TO MAKE THE FINS ALTERNATE: (seamless!)\n              ang2 = abs(ang2 - 0.5/fins);\n        #else     // COSINE FINS - a bit slow\n          ang2 = cos(ang2*M_PI_2*fins) * 0.023;\n        #endif\n\n        // RADIAL KALEIDOSCOPING?\n        #if 0\n          rad2 *= g_fTexSize.z;\n            // choose one:\n            //rad2 = lerp(rad2, frac(rad2*3)/3.0, 0.5);\n            rad2 = cos(rad2*5);\n            //rad2 = sqrt(rad2)*0.5;\n            //rad2 += abs(frac(rad2*7)-0.5)/7.0 * 1.15;  // stepifier\n            //rad2 += cos(rad2*61)*0.02;\n          rad2 *= g_fTexSize.x;\n        #endif\n\n    ang2 *= M_PI_2;\n    uv2 = 0.5 + rad2*float2(cos(ang2),sin(ang2))*texsize.zw;\n\n    ret = tex2D(sampler_main, uv2).xyz;\nfloat4 noise9 = tex3D(sampler_noisevol_hq, \n                      ((uv2.xyy*q28\n                       )*texsize.xyy*texsize_noisevol_hq.zww\n                      ).xyz*\n                      float3(1,1,0)*0.05 + \n                      time*float3(0,0,1)*q31\n                     );\nif(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; \nif(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; \nif(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; \n    ret *= 1.333; // a little bit of overbright\nret=.6-ret;\n}"}