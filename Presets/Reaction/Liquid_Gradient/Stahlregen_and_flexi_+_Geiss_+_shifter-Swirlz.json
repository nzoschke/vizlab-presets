{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"wave_mode":6,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":0,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":0.107,"zoomexp":0.1584,"warp":0.01743,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0,"ib_size":0.005,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_a":0},"shapes":[{"baseVals":{"sides":34,"textured":1,"x":0,"y":0,"rad":1.3291,"tex_ang":1.5708,"g":1,"b":1,"r2":1,"b2":1,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":1,"spectrum":1,"additive":1,"r":0,"g":0,"b":0,"a":0.03},"init_eqs_str":"a.sw=0;a.mx=0;a.q2=0;a.my=0;","frame_eqs_str":"","point_eqs_str":"a.r=.6+.4*Math.sin(a.time);a.g=.4+.4*Math.sin(a.time+2.094);a.b=.4+.4*Math.sin(a.time+4.188);a.sw=1-a.sw;a.mx=equal(mod(Math.floor(a.q2),2),0);a.mx=Math.abs(a.mx-(a.q2-Math.floor(a.q2)));a.my=.5+(.5-a.mx);a.x=a.mx+a.value1*(1-2*a.sw);a.y=a.my+a.value2*(1-2*a.sw);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"r = .6 + .4*sin(time);\ng = .4 + .4*sin(time + 2.094);\nb = .4 + .4*sin(time + 4.188);\n\nsw = 1-sw;\n\nmx = equal(int(q2)%2,0);\nmx = abs(mx - (q2 - int(q2)));\nmy = .5 + (.5 - mx);\n\n\nx = mx + value1*(1-2*sw);\ny = my + value2*(1-2*sw);\n"},{"baseVals":{"enabled":1,"spectrum":1,"additive":1,"r":0,"g":0,"b":0,"a":0.03},"init_eqs_str":"a.sw=0;a.mx=0;a.q3=0;a.my=0;","frame_eqs_str":"","point_eqs_str":"a.g=.6+.4*Math.sin(a.time);a.b=.4+.4*Math.sin(a.time+2.094);a.r=.4+.4*Math.sin(a.time+4.188);a.sw=1-a.sw;a.mx=equal(mod(Math.floor(a.q3),2),0);a.mx=Math.abs(a.mx-(a.q3-Math.floor(a.q3)));a.my=.5+(.5-a.mx);a.x=a.mx+a.value1*(1-2*a.sw);a.y=a.my+a.value2*(1-2*a.sw);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"g = .6 + .4*sin(time);\nb = .4 + .4*sin(time + 2.094);\nr = .4 + .4*sin(time + 4.188);\n\nsw = 1-sw;\n\nmx = equal(int(q3)%2,0);\nmx = abs(mx - (q3 - int(q3)));\nmy = .5 + (.5 - mx);\n\n\nx = mx + value1*(1-2*sw);\ny = my + value2*(1-2*sw);\n"},{"baseVals":{"enabled":1,"spectrum":1,"additive":1,"r":0,"g":0,"b":0,"a":0.03},"init_eqs_str":"a.sw=0;a.mx=0;a.q4=0;a.my=0;","frame_eqs_str":"","point_eqs_str":"a.b=.6+.4*Math.sin(a.time);a.r=.4+.4*Math.sin(a.time+2.094);a.g=.4+.4*Math.sin(a.time+4.188);a.sw=1-a.sw;a.mx=equal(mod(Math.floor(a.q4),2),0);a.mx=Math.abs(a.mx-(a.q4-Math.floor(a.q4)));a.my=.5+(.5-a.mx);a.x=a.mx+a.value1*(1-2*a.sw);a.y=a.my+a.value2*(1-2*a.sw);","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"b = .6 + .4*sin(time);\nr = .4 + .4*sin(time + 2.094);\ng = .4 + .4*sin(time + 4.188);\n\nsw = 1-sw;\n\nmx = equal(int(q4)%2,0);\nmx = abs(mx - (q4 - int(q4)));\nmy = .5 + (.5 - mx);\n\n\nx = mx + value1*(1-2*sw);\ny = my + value2*(1-2*sw);\n"},{"baseVals":{"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"x = int(rand(1001))*.001;\ny = int(rand(1001))*.001;","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":"x = int(rand(1001))*.001;\ny = int(rand(1001))*.001;"}],"init_eqs_str":"a.n=0;a.frame3=0;a.q1=0;a.d1=0;a.d3=0;a.d2=0;a.t=0;a.q2=0;a.q3=0;","frame_eqs_str":"a.frame3=mod(a.frame,3);a.d1=a.treb-a.q1;a.d2=a.mid-a.q2;a.d3=a.bass-a.q3;a.q1=a.treb;a.q2=a.mid;a.q3=a.treb;a.ib_r=.00001<Math.abs(above(a.d1,1))?1:0;a.ib_g=.00001<Math.abs(above(a.d2,1))?1:0;a.ib_b=.00001<Math.abs(above(a.d3,1))?1:0;","pixel_eqs_str":"a.n=30-20*Math.abs(a.y-.5)-20*Math.abs(a.x-.5)-2*a.bass;a.t=2*a.time;a.x-=.04;a.dx=.01*(Math.cos((-a.x+a.y)*a.n+a.t)+Math.sin((a.x+a.y-1)*a.n+a.t));a.dy=.01*(Math.cos((a.x-a.y)*a.n-a.t)+Math.sin((-a.x-a.y+1)*a.n-a.t));","init_eqs_eel":"","frame_eqs_eel":"frame3 = frame%3;\n\n//wave_x = if(equal(frame3,0),0.25,if(equal(frame3,1),0.5,0.75));\n//wave_y = if(equal(frame3,0),0.1,if(equal(frame3,1),0.11,0.12));\n\n//wave_r = if(equal(frame3,0),0,if(equal(frame3,1),1,0));\n//wave_g = if(equal(frame3,0),1,if(equal(frame3,1),0,1));\n//wave_b = if(equal(frame3,0),0,if(equal(frame3,1),0,0));\n\nd1 = treb-q1;\nd2 = mid-q2;\nd3 = bass-q3;\n\nq1 = treb;\nq2 = mid;\nq3 = treb;\n\nib_r = if(above(d1,1),1,0);\nib_g = if(above(d2,1),1,0);\nib_b = if(above(d3,1),1,0);\n\n//mis = if(equal(frame3,0),treb,if(equal(frame3,1),mid,bass));\n//wave_mystery = -0.18 - 0.1*mis;\n\n//brighten = if(frame3,1,0);","pixel_eqs_eel":"n=30-abs(y-0.5)*20 -abs(x-0.5)*20-bass*2;\nt=time*2;\nx=x-0.04;\ndx = 0.01*(cos((-x+y)*n+t) + sin((x+y-1)*n+t));\ndy = 0.01*(cos((x-y)*n-t) + sin((-x-y+1)*n-t));","warp":" shader_body { \n  vec3 ret_1;\n  ret_1 = texture (sampler_main, uv).xyz;\n  vec2 tmpvar_2;\n  tmpvar_2 = (normalize((uv - uv_orig)) * texsize.zw);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 0.0;\n  tmpvar_3.xyz = ret_1;\n  vec4 tmpvar_4;\n  tmpvar_4.w = 0.0;\n  tmpvar_4.xyz = max (tmpvar_3, (texture (sampler_main, (uv + tmpvar_2)) * 0.98)).xyz;\n  vec4 tmpvar_5;\n  tmpvar_5.w = 0.0;\n  tmpvar_5.xyz = max (tmpvar_4, (texture (sampler_main, (uv - tmpvar_2)) * 0.98)).xyz;\n  vec4 tmpvar_6;\n  tmpvar_6.w = 0.0;\n  tmpvar_6.xyz = max (tmpvar_5, (texture (sampler_main, (uv + \n    (tmpvar_2 * 2.0)\n  )) * 0.95)).xyz;\n  ret_1 = (max (tmpvar_6, (texture (sampler_main, \n    (uv - (tmpvar_2 * 2.0))\n  ) * 0.95)).xyz * 0.95);\n  vec4 tmpvar_7;\n  tmpvar_7.w = 1.0;\n  tmpvar_7.xyz = ret_1;\n  ret = tmpvar_7.xyz;\n }","comp":" shader_body { \n  vec3 tmpvar_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = (uv - 0.5);\n  tmpvar_1 = max (max (texture (sampler_main, uv).xxx, texture (sampler_main, (\n    (tmpvar_2 * 0.8)\n   + 0.5)).yyy), texture (sampler_main, ((tmpvar_2 * 0.6) + 0.5)).zzz);\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = mix (tmpvar_1, pow (vec3(dot (tmpvar_1, vec3(0.32, 0.49, 0.29))), (0.4 + \n    (1.6 * rand_preset.xyz)\n  )), vec3(0.7, 0.7, 0.7));\n  ret = tmpvar_3.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_main, uv ).xyz;\n\n    // this vector points exactly one pixel, in the direction of motion\n    float2 v = normalize(uv-uv_orig)*texsize.zw;\n\n    float3 s;\n    ret = max(ret, tex2D(sampler_main, uv+v)*0.98);\n    ret = max(ret, tex2D(sampler_main, uv-v)*0.98);\n    ret = max(ret, tex2D(sampler_main, uv+v*2)*0.95);\n    ret = max(ret, tex2D(sampler_main, uv-v*2)*0.95);\n\n    // darken over time\n    ret *= 0.95;\n\n    // add noise\n    //float2 uv_noise = uv*texsize_noise_lq.zw*texsize.xy + rand_frame.xy;\n    //ret += (tex2D(sampler_noise_lq, uv_noise)*2-1)*0.02;\n}","comp_hlsl":"shader_body\n{\n    ret = tex2D(sampler_main, uv).xxx;\n    ret = max(ret, tex2D(sampler_main, (uv-0.5)*0.8+0.5).yyy);\n    ret = max(ret, tex2D(sampler_main, (uv-0.5)*0.6+0.5).zzz); \n       float lum = lum(ret);\n    ret = lerp(ret, pow( lum, 0.4 + 1.6*rand_preset.xyz ), 0.7);\n\n}"}