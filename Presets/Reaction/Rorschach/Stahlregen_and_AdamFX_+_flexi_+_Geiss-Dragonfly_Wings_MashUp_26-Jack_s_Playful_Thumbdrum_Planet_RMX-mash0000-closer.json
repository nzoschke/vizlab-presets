{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"wave_mode":2,"wrap":0,"wave_a":0.327,"wave_scale":1.605,"wave_smoothing":0.6,"warpscale":2.853,"zoom":1.064,"warp":0,"wave_r":0.6,"wave_g":0.6,"wave_b":0.6,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"","frame_eqs_str":"a.wave_r+=.4*(.6*Math.sin(.933*a.time)+.4*Math.sin(1.045*a.time));a.wave_g+=.4*(.6*Math.sin(.9*a.time)+.4*Math.sin(.956*a.time));a.wave_b+=.4*(.6*Math.sin(.91*a.time)+.4*Math.sin(.92*a.time));a.zoom+=.013*(.6*Math.sin(.339*a.time)+.4*Math.sin(.276*a.time));a.rot+=.04*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*a.time));","pixel_eqs_str":"a.zoom=a.zoom+(2*a.x-1)*(.08+.15*Math.sin(.321*a.time))+(2*a.y-1)*(.08+.15*Math.cos(.321*a.time));a.sx-=.1*(a.zoom-1);a.sy-=.1*(a.zoom-1);","init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.400*( 0.60*sin(0.933*time) + 0.40*sin(1.045*time) );\nwave_g = wave_g + 0.400*( 0.60*sin(0.900*time) + 0.40*sin(0.956*time) );\nwave_b = wave_b + 0.400*( 0.60*sin(0.910*time) + 0.40*sin(0.920*time) );\nzoom = zoom + 0.013*( 0.60*sin(0.339*time) + 0.40*sin(0.276*time) );\nrot = rot + 0.040*( 0.60*sin(0.381*time) + 0.40*sin(0.579*time) );","pixel_eqs_eel":"zoom = zoom + (x*2-1)*(0.08+0.15*sin(time*0.321)) + (y*2-1)*(0.08+0.15*cos(time*0.321));\nsx=sx-(zoom-1)*0.1;\nsy=sy-(zoom-1)*0.1;","warp":" shader_body { \n  vec3 ret_1;\n  ret_1 = texture (sampler_main, uv).xyz;\n  ret_1 = (ret_1 + ((\n    (ret_1 - mix (((texture (sampler_blur2, uv).xyz * scale2) + bias2), ((texture (sampler_blur1, uv).xyz * scale1) + bias1), uv_orig.xxx))\n   * 0.3) - (0.00666 * \n    (((bass + treb) + mid) - 0.5)\n  )));\n  ret_1 = (ret_1 * 0.95);\n  ret_1 = (ret_1 + ((\n    ((texture (sampler_noise_lq, ((\n      (uv_orig * texsize.xy)\n     * \n      (texsize_noise_lq.zw * 0.4)\n    ) + rand_frame.xy)).xyz - 0.5) / 256.0)\n   * 122.0) * clamp (\n    (treb_att - 1.0)\n  , 0.0, 1.0)));\n  ret_1 = mix (ret_1, vec3(dot (ret_1, vec3(0.32, 0.49, 0.29))), vec3(0.2, 0.2, 0.2));\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ret_1;\n  ret = tmpvar_2.xyz;\n }","comp":"float xlat_mutablea;\nfloat xlat_mutableb;\nfloat xlat_mutablec;\n shader_body { \n  vec2 uv_1;\n  vec3 ret_2;\n  uv_1 = ((0.5 + (\n    (uv - 0.5)\n   * vec2(0.75, -0.9))) - vec2(0.0, 0.05));\n  vec3 tmpvar_3;\n  tmpvar_3 = (((\n    (((texture (sampler_blur3, uv_1).xyz * scale3) + bias3) + ((texture (sampler_blur2, uv_1).xyz * scale2) + bias2))\n   + \n    ((texture (sampler_blur1, uv_1).xyz * scale1) + bias1)\n  ) + (texture (sampler_main, uv_1) * 0.8).xyz) - 0.4);\n  xlat_mutablea = (tmpvar_3.x / 4.0);\n  xlat_mutableb = (tmpvar_3.y / 4.0);\n  xlat_mutablec = (tmpvar_3.z / 4.0);\n  xlat_mutablec = ((xlat_mutablec + xlat_mutableb) - (xlat_mutablec * xlat_mutableb));\n  xlat_mutablea = ((xlat_mutablea + xlat_mutablec) - (xlat_mutablea * xlat_mutablec));\n  vec3 tmpvar_4;\n  tmpvar_4 = vec3((1.4 * xlat_mutablea));\n  ret_2 = ((vec3(2.8, 4.0, 0.0) * (\n    (tmpvar_4 * (1.0 - tmpvar_4))\n   * \n    (1.0 - tmpvar_4)\n  )) + ((tmpvar_4 * tmpvar_4) * vec3(-0.1, 0.1, 0.5)));\n  ret_2 = (0.6 - ret_2);\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = ret_2;\n  ret = tmpvar_5.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret.xyz = tex2D( sampler_main, uv ).xyz;\n\n      // take the difference between the crisp and blurred images,\n      // then add it back into the image.  Creates spots and stripes over time.\n      float3 b = lerp(GetBlur2(uv),GetBlur1(uv),uv_orig.x);//GetBlur2(uv);\n      ret.xyz += (ret.xyz - b)*0.3 - (((bass+treb+mid-0.5)*.333)*.02);\n      ret.xyz *= 0.95;\n\n      // add noise:\n      float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.4 + rand_frame.xy;\n      ret.xyz += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0 * 122 * saturate(treb_att-1);\n\n      // desaturate over time, to keep the globs white\n      ret.xyz = lerp(ret.xyz, lum(ret.xyz), 0.2);\n}","comp_hlsl":"float a,b,c;\nshader_body\n{\nuv = 0.5 + (uv-0.5)*float2(0.75,-0.9) - float2(0,0.05);\n    float3 base = GetBlur3(uv) + GetBlur2(uv) + GetBlur1(uv) + tex2D(sampler_main, uv)*0.8 - 0.4 ;\na =base.x/4;b = base.y/4; c = base.z/4;\nc = c + b - c*b;\na = a + c - a*c;\nbase = 1.4*a;\nret = base*(1-base)*(1-base)*4*float3(0.7,1,0) + pow(base,2)*float3(-0.1,0.1,0.5);\nret = 0.6 - ret;\n//ret.xy = ret.yx;\n}"}