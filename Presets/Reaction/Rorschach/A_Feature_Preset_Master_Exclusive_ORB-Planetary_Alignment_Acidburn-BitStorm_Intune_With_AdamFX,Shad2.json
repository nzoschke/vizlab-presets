{"version":2,"baseVals":{"rating":5,"decay":0.9,"echo_zoom":1.007,"echo_alpha":0.5,"echo_orient":1,"wave_mode":4,"additivewave":1,"wave_dots":1,"wave_thick":1,"modwavealphabyvolume":1,"brighten":1,"wave_a":0.001,"wave_scale":2.233,"wave_smoothing":0.81,"wave_mystery":0.28,"modwavealphastart":0.47,"modwavealphaend":1.32,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0.9,"wave_b":0.9,"ob_size":0.015,"ob_b":1,"ib_size":0.26,"mv_x":64,"mv_y":48,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"additive":1,"x":0.65,"y":0.9,"rad":0.22056,"ang":1.5708,"tex_zoom":0.33105,"g":1,"b":1,"a":0.1,"g2":0,"b2":0.2,"border_b":0,"border_a":0},"init_eqs_str":"a.q22=0;","frame_eqs_str":"a.x=.6;a.y=.3;a.b=0;a.r=1;a.g=0;a.a=Math.min(div(a.q22,18),1);a.a2=0;","init_eqs_eel":"","frame_eqs_eel":"x = .6; y = .3;\nb = 0;\nr = 1;\ng = 0;\na = min(q22/18,1); \na2 = 0;"},{"baseVals":{"enabled":1,"textured":1,"rad":0.52676,"tex_ang":0.37699,"tex_zoom":2.24557,"r":0.96,"r2":1,"b2":1,"a2":0.7,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0},"init_eqs_str":"a.q28=0;","frame_eqs_str":"a.tex_zoom=1.4+Math.sin(div(a.time,3.67));a.a=a.q28;a.a2=div(a.q28,8);","init_eqs_eel":"","frame_eqs_eel":"tex_zoom = 1.4 + sin(time/3.67);\na = q28; a2 = q28/8;"},{"baseVals":{"sides":63,"textured":1,"x":0.123,"y":0,"rad":0.27319,"tex_zoom":0.49981,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"sides":63,"textured":1,"y":1,"rad":0.54822,"tex_zoom":0.49981,"g":1,"b":1,"r2":1,"b2":1,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"thick":1,"additive":1,"scaling":0.89152,"smoothing":0.82,"a":0.9,"enabled":0},"init_eqs_str":"","frame_eqs_str":"t2 = t2 + bass_att;","point_eqs_str":" //Alle Funktionen muessen rel. zu t_rel sein\n\nk1 = cos(time/3);\nk2 = sin(time/2);\n\nt_abs = sample;\nt_rel = sample-time/2.12;\nampl =  cos(t_rel)*12; \n//ampl = 3;\n\nox = sin (t_rel*18) + ampl*sin (t_rel*12) ;\noy = cos (t_rel*13) + ampl*cos (t_rel*11);\noz =  ampl/3;\noz = 0;\n\n\n//r = sqr(sin(t_rel*3.4));\n//g = sqr(sin(t_rel*2.3));\n//b = sqr (cos(t_rel*1.9));\n\nr = 1;\ng = 0.5;\nb = 0;\n\na=0.25*(cos(t_abs*3.14/2)) + 0.2 *below (abs(1-t_abs- t1),0.0);\n//a=0.25*(sin(t_abs*3.14)) + 0.4 *below (abs(1-t_abs-t1), bass_att/1);\na=0.25*(cos(t_abs*1.5)) + 0.7 *below (abs(t_abs),0.0);\n\nxang = k1*3;\nyang = 1;\nzang = 3*k1;\nfov = 0.22;\n\n\n// Rotation um x,y,z\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\n\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 6;\nx = ox*fov/oz +0.5;\n//x = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n","init_eqs_eel":"","frame_eqs_eel":"t2 = t2 + bass_att;","point_eqs_eel":" //Alle Funktionen muessen rel. zu t_rel sein\n\nk1 = cos(time/3);\nk2 = sin(time/2);\n\nt_abs = sample;\nt_rel = sample-time/2.12;\nampl =  cos(t_rel)*12; \n//ampl = 3;\n\nox = sin (t_rel*18) + ampl*sin (t_rel*12) ;\noy = cos (t_rel*13) + ampl*cos (t_rel*11);\noz =  ampl/3;\noz = 0;\n\n\n//r = sqr(sin(t_rel*3.4));\n//g = sqr(sin(t_rel*2.3));\n//b = sqr (cos(t_rel*1.9));\n\nr = 1;\ng = 0.5;\nb = 0;\n\na=0.25*(cos(t_abs*3.14/2)) + 0.2 *below (abs(1-t_abs- t1),0.0);\n//a=0.25*(sin(t_abs*3.14)) + 0.4 *below (abs(1-t_abs-t1), bass_att/1);\na=0.25*(cos(t_abs*1.5)) + 0.7 *below (abs(t_abs),0.0);\n\nxang = k1*3;\nyang = 1;\nzang = 3*k1;\nfov = 0.22;\n\n\n// Rotation um x,y,z\n\nmx = ox*cos(zang) - oy*sin(zang);\nmy = ox*sin(zang) + oy*cos(zang);\n\nox = mx;\noy = my;\nmx = ox*cos(yang) + oz*sin(yang);\nmz = - ox*sin(yang) + oz*cos(yang);\nox = mx;\noz = mz;\nmy = oy*cos(xang) - oz*sin(xang);\nmz = oy*sin(xang) + oz*cos(xang);\noy = my;\noz = mz;\n\noz = oz - 6;\nx = ox*fov/oz +0.5;\n//x = (x-.5)*0.75 + 0.5;\ny = oy*fov/oz + 0.5;\n"},{"baseVals":{"enabled":1,"usedots":1,"thick":1,"scaling":0.89152,"smoothing":0.82},"init_eqs_str":"a.t1=0;a.t2=0;a.q21=0;a.t_rel=0;","frame_eqs_str":"a.t_rel=2*a.time;a.t1=Math.floor(a.t_rel);a.t2=Math.floor(a.t_rel)+1;","point_eqs_str":"a.t1=mod(65*a.t1+37,4096);a.t2=mod(65*a.t2+37,4096);a.x=div(a.t1,4096);a.y=div(a.t2,4096);a.a=div(a.q21,8);","init_eqs_eel":"","frame_eqs_eel":"t_rel = time *2;\n\nt1 = int (t_rel);\nt2 = int (t_rel) + 1;","point_eqs_eel":"t1 = (t1*65 + 37) % 4096;\nt2 = (t2*65 + 37) % 4096;\n\nx =  (t1/4096);\ny =  (t2/4096);\n\na = q21/8;"},{"baseVals":{"enabled":1,"samples":128,"scaling":0.89152,"smoothing":0.82,"a":0.1},"init_eqs_str":"a.t1=0;a.q24=0;","frame_eqs_str":"a.t1=.51;a.t1=div(a.time,2)-Math.floor(div(a.time,2));","point_eqs_str":"a.x=div(a.sample,3)+a.t1;a.y=a.sample;a.a=div(a.q24,2);a.a=.6;","init_eqs_eel":"","frame_eqs_eel":"t1 = .51;\nt1 = time/2 - int(time/2);","point_eqs_eel":"x = sample/3 + t1;\n//y = sample/3 + t1;\ny = sample;\n\n//x = sample;\n//y = sample;\n\na = q24/2;\n//a = 1;\na = .6;"},{"baseVals":{"spectrum":1,"usedots":1,"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.index2=0;a.index=0;a.q12=0;a.q22=0;a.q21=0;a.q1=0;a.dec_med=0;a.rott=0;a.is_beat=0;a.q31=0;a.k1=0;a.q24=0;a.dec_slow=0;a.q4=0;a.q26=0;a.p2=0;a.avg=0;a.beat=0;a.p1=0;a.peak=0;a.q2=0;a.q27=0;a.p3=0;a.q3=0;a.t0=0;a.q28=0;a.q30=0;a.q20=0;a.p4=0;a.step=0;a.step=0;","frame_eqs_str":"a.dec_med=pow(.7,div(30,a.fps));a.dec_slow=pow(.99,div(30,a.fps));a.beat=Math.max(Math.max(a.bass,a.mid),a.treb);a.avg=a.avg*a.dec_slow+a.beat*(1-a.dec_slow);a.is_beat=above(a.beat,.3+a.avg+a.peak)*above(a.time,a.t0+.2);a.t0=a.is_beat*a.time+(1-a.is_beat)*a.t0;a.peak=a.is_beat*a.beat+(1-a.is_beat)*a.peak*a.dec_med;a.index=mod(a.index+a.is_beat,16);a.index2=mod(a.index2+a.is_beat*bnot(a.index),2);a.q20=a.avg;a.q21=a.beat;a.q22=a.peak;a.q24=a.is_beat;a.q26=a.bass_att+a.mid_att+\na.treb_att;a.q27=a.index+1;a.q28=a.index2;a.k1=a.is_beat*equal(mod(a.index,2),0);a.p1=a.k1*(a.p1+1)+(1-a.k1)*a.p1;a.p2=a.dec_med*a.p2+(1-a.dec_med)*a.p1;a.rott=div(3.1416*a.p2,8);a.q1=Math.cos(a.rott);a.q2=Math.sin(a.rott);a.q3=-a.q2;a.q4=a.q1;a.step+=a.q24;a.p3=a.p3*a.dec_slow+(1-a.dec_slow)*a.step;a.q30=a.step;a.p4=a.dec_slow*a.p4+(1-a.dec_slow)*a.q27;a.q31=a.p4;a.q12=a.time-a.t0;a.monitor=a.q12;a.zoom=1.2+.2*a.q1;a.rot=-0;a.dx=0;","pixel_eqs_str":"","init_eqs_eel":"step = 0;","frame_eqs_eel":"dec_med = pow (0.7, 30/fps);\ndec_slow = pow (0.99, 30/fps);\nbeat = max (max (bass, mid), treb); \navg = avg*dec_slow + beat*(1-dec_slow);\nis_beat = above(beat, .3+avg+peak) * above (time, t0+.2);\nt0 = is_beat*time + (1-is_beat)*t0;\npeak = is_beat * beat + (1-is_beat)*peak*dec_med;\nindex = (index + is_beat) %16;\nindex2 = (index2 + is_beat*bnot(index))%2;\n\nq20 = avg;\nq21 = beat;\nq22 = peak;\nq24 = is_beat;\nq26 = bass_att + mid_att + treb_att;\nq27 = index + 1;\nq28 = index2;\n\nk1 =  is_beat*equal(index%2,0);\np1 =  k1*(p1+1) + (1-k1)*p1;\np2 = dec_med * p2+ (1-dec_med)*p1;\nrott = p2 * 3.1416/8;\n\nq1 = cos(rott);\nq2 = sin(rott);\nq3 = -q2;\nq4 = q1;\n\n//ds = max ((q26-.2),0);\n//step = step + ds/10;\n\nstep = step + q24 ;\n\np3 = p3*dec_slow + (1-dec_slow) * step;\nq30 = step;\n\np4 = dec_slow*p4 + (1-dec_slow)*q27;\nq31 = p4;\n\nq12 = time -t0;\nmonitor = q12;\n\n\n\nzoom = 1.2+q1*.2;\nrot = -0 ;\ndx = .00;","pixel_eqs_eel":"","warp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  ret_1 = (tmpvar_2.xyz + ((tmpvar_2.xyz - \n    ((texture (sampler_blur2, uv).xyz * scale2) + bias2)\n  ) * 0.6));\n  ret_1 = (ret_1 * 0.9);\n  ret_1 = (ret_1 + ((\n    ((texture (sampler_noise_lq, ((\n      (uv_orig * texsize.xy)\n     * \n      (texsize_noise_lq.zw * 0.4)\n    ) + rand_frame.xy)).xyz - 0.5) / 256.0)\n   * 12.0) * clamp (\n    (treb_att - 1.0)\n  , 0.0, 1.0)));\n  vec3 tmpvar_3;\n  tmpvar_3 = mix (ret_1, vec3(dot (ret_1, vec3(0.32, 0.49, 0.29))), vec3(0.08, 0.08, 0.08));\n  ret_1 = tmpvar_3;\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = tmpvar_3;\n  ret = tmpvar_4.xyz;\n }","comp":" shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (texture (sampler_main, uv).xyz * 2.0);\n  ret = tmpvar_1.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_main, uv ).xyz;\n\n    // take the difference between the crisp and blurred images,\n    // then add it back into the image.  Creates spots and stripes over time.\n    ret += (ret - GetBlur2(uv))*0.6;\n    ret *= 0.9;\n\n   // add noise:\n   float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.4 + rand_frame.xy;\n   ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0 * 12 * saturate(treb_att-1);\n\n   // desaturate over time, to keep the globs white\n   ret = lerp(ret, lum(ret), 0.08);\n}","comp_hlsl":"\nshader_body\n{\n    float2 uv_echo = (uv - 0.5)*0.993*float2(-1,1) + 0.5;\n    ret =  tex2D(sampler_main, uv).xyz;\n    ret *= 2.00; //gamma\n    ret =  ret; //brighten\n}"}