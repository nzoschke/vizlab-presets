{"version":2,"baseVals":{"rating":5,"gammaadj":1.98,"wave_mode":2,"additivewave":1,"wave_a":0.42,"wave_scale":0.691,"wave_smoothing":0.4,"zoomexp":0.888,"fshader":1,"zoom":1.045,"warp":0.513,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.rad=0;a.dx_residual=0;a.dy_residual=0;a.bass_thresh=0;","frame_eqs_str":"a.wave_r+=.35*(.6*Math.sin(.742*a.time)+.4*Math.sin(1.021*a.time));a.wave_g+=.35*(.6*Math.sin(.703*a.time)+.4*Math.sin(.969*a.time));a.wave_b+=.35*(.6*Math.sin(1.09*a.time)+.4*Math.sin(.963*a.time));a.zoom+=.033*(.6*Math.sin(.339*a.time)+.4*Math.sin(.276*a.time));a.zoom+=.2*a.rad;a.rot+=.04*(.6*Math.sin(.381*a.time)+.4*Math.sin(.579*a.time));a.cx+=.11*(.6*Math.sin(.374*a.time)+.4*Math.sin(.294*a.time));a.cy+=.11*(.6*Math.sin(.393*a.time)+.4*Math.sin(.223*a.time));a.dx+=a.dx_residual;\na.dy+=a.dy_residual;a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*(.96*(a.bass_thresh-1.3)+1.3);a.dx_residual=.008*equal(a.bass_thresh,2)*Math.sin(7*a.time)+(1-equal(a.bass_thresh,2))*a.dx_residual;a.dy_residual=.006*equal(a.bass_thresh,2)*Math.sin(9*a.time)+(1-equal(a.bass_thresh,2))*a.dy_residual;","pixel_eqs_str":"a.zoom+=.13*a.rad;","init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.350*( 0.60*sin(0.742*time) + 0.40*sin(1.021*time) );\nwave_g = wave_g + 0.350*( 0.60*sin(0.703*time) + 0.40*sin(0.969*time) );\nwave_b = wave_b + 0.350*( 0.60*sin(1.090*time) + 0.40*sin(0.963*time) );\nzoom = zoom + 0.033*( 0.60*sin(0.339*time) + 0.40*sin(0.276*time) );\nzoom = zoom + rad*0.2;\nrot = rot + 0.040*( 0.60*sin(0.381*time) + 0.40*sin(0.579*time) );\ncx = cx + 0.110*( 0.60*sin(0.374*time) + 0.40*sin(0.294*time) );\ncy = cy + 0.110*( 0.60*sin(0.393*time) + 0.40*sin(0.223*time) );\ndx = dx + dx_residual;\ndy = dy + dy_residual;\nbass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.3)*0.96+1.3);\ndx_residual = equal(bass_thresh,2)*0.008*sin(time*7) + (1-equal(bass_thresh,2))*dx_residual;\ndy_residual = equal(bass_thresh,2)*0.006*sin(time*9) + (1-equal(bass_thresh,2))*dy_residual;","pixel_eqs_eel":"zoom=zoom+0.13*rad;","warp":" shader_body { \n  vec3 ret_1;\n  ret_1 = texture (sampler_main, uv).xyz;\n  vec3 tmpvar_2;\n  tmpvar_2 = ((texture (sampler_blur1, uv).xyz * scale1) + bias1);\n  ret_1 = (ret_1 + (mix (\n    (ret_1 - tmpvar_2)\n  , \n    ((((texture (sampler_blur2, uv).xyz * scale2) + bias2) - tmpvar_2) * 2.0)\n  , vec3(rad)) * 0.3));\n  ret_1 = (ret_1 * 0.9);\n  ret_1 = (mix (ret_1, vec3(0.5, 0.5, 0.5), vec3(0.03, 0.03, 0.03)) + (19.52 * (\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)).xyz - 0.5)\n   / 256.0)));\n  ret_1 = mix (ret_1, ret_1.zxy, vec3(0.02, 0.02, 0.02));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }","comp":"","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret.xyz = tex2D( sampler_main, uv ).xyz;\n\n      // take the difference between the crisp and blurred images,\n      // then add it back into the image.  Creates spots and stripes over time.\n      float3 b0 = ret.xyz;\n      float3 b1 = GetBlur1(uv).xyz;\n      float3 b2 = GetBlur2(uv).xyz;\n      //float b3 = GetBlur3(uv).xyz;\n      float3 dc = b0-b1;\n      dc = lerp(dc, (b2-b1)*2, rad);\n      \n      ret.xyz += dc*0.3;\n      ret.xyz *= 0.9;\n      ret = lerp(ret, 0.5, 0.03);\n\n\n      // add noise:\n      float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 1 + rand_frame.xy;\n      ret.xyz += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0 * 122 \n                    //* saturate(treb_att-1);\n                    *0.16;\n\n      // desaturate over time, to keep the globs white\n      //ret.xyz = lerp(ret.xyz, lum(ret.xyz), 0.2);\n      ret.xyz = lerp(ret.xyz, ret.zxy, 0.02);\n}","comp_hlsl":""}