{"version":2,"baseVals":{"rating":5,"gammaadj":1.9,"echo_zoom":1.169,"echo_orient":1,"wave_mode":5,"wave_dots":1,"darken_center":1,"wave_a":5.931,"wave_scale":1.959,"wave_smoothing":0.9,"wave_mystery":0.04,"zoomexp":0.5503,"zoom":0.9999,"warp":0.01,"sx":0.9999,"sy":0.9999,"wave_r":0.45,"wave_g":0.65,"wave_b":0.45,"ob_size":0,"ob_b":0.4,"ib_size":0.005,"ib_r":0,"ib_g":0.3,"ib_b":0,"ib_a":1,"mv_a":0},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.rad=0;a.xpos=0;a.q6=0;a.q1=0;a.q5=0;a.mytime=0;a.x=0;a.bass_thresh=0;a.dy_r=0;a.q4=0;a.dx_r=0;a.ypos=0;a.y=0;a.bass_eff=0;a.vol=0;a.q2=0;a.q3=0;a.q7=0;","frame_eqs_str":"a.wave_r+=.45*(.5*Math.sin(.701*a.time)+.3*Math.cos(.438*a.time));a.wave_b-=.4*(.5*Math.sin(4.782*a.time)+.5*Math.cos(.722*a.time));a.wave_g+=.4*Math.sin(1.931*a.time);a.vol=.15*(a.bass_att+a.bass+a.mid+a.mid_att);a.bass_eff=Math.max(Math.max(a.bass,a.bass_att)-1,0);a.bass_thresh=2*above(a.bass_att,a.bass_thresh)+(1-above(a.bass_att,a.bass_thresh))*(.96*(a.bass_thresh-1.3)+1.3);a.dx=.005+.002*(.6*Math.sin(.234*a.time)+.4*Math.sin(.277*a.time));a.dy=.005+.002*(.6*Math.sin(.234*\na.time)+.4*Math.sin(.277*a.time));a.dx_r=.00001<Math.abs(equal(a.q3,0))?.00001<Math.abs(above(a.x,a.xpos))?a.dx*a.q1-a.xpos:a.dx+a.q2-a.xpos:a.dx;a.dy_r=.00001<Math.abs(equal(a.q3,0))?.00001<Math.abs(above(a.y,a.ypos))?a.dy*a.q1-a.ypos:a.dy+a.q2-a.ypos:a.dy;a.rot+=.15*(.6*Math.sin(.381*a.time)+.4*Math.sin(.479*a.time));a.mytime=.9;a.xpos=div(.5,a.vol);a.ypos=div(.5,a.vol);a.q1=Math.sin(a.time*a.mytime*4);a.q2=Math.cos(a.time*a.mytime*2);a.q3=Math.abs(a.rad+.5)+a.q2*a.q5;a.q4=4.5*a.dx_r*a.dy_r*a.dx*\na.dy;a.q5=Math.cos(.4)*a.dx_r*a.dy_r;a.q6=.1*Math.atan(Math.abs(-a.rad+.5))*a.q1;a.q7=a.q1+a.q2+a.q3+a.q4+a.q5+a.q6;a.wave_x=.5+.1*Math.sin(a.time+div(Math.floor(rand(100)),100));a.wave_y=.5+.1*Math.cos(a.time+div(Math.floor(rand(100)),100));a.ib_r=a.q3+a.q2;a.ib_b=a.q2+a.q1;a.ib_g=a.q1+a.q3;a.monitor=a.q3;","pixel_eqs_str":"a.zoom=(.00001<Math.abs(below(a.q1,a.q6))?.5*a.x:.00001<Math.abs(equal(a.q2,a.q5))?.9*(1-a.x):.00001<Math.abs(above(a.q3,a.q4))?.5*a.y:.9*(1-a.y)+(.00001<Math.abs(below(a.q4,a.q3))?.5*a.xpos:.00001<Math.abs(equal(a.q5,a.q2))?.9*(1-a.xpos):.00001<Math.abs(above(a.q6,a.q1))?.9*a.ypos:.3*(1-a.ypos)))+.8-.03*Math.min(a.q7+a.q1,1);","init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.45*(0.5*sin(time*0.701)+ 0.3*cos(time*0.438));\nwave_b = wave_b - 0.4*(0.5*sin(time*4.782)+0.5*cos(time*0.722));\nwave_g = wave_g + 0.4*sin(time*1.931);\nvol=0.15*(bass_att+bass+mid+mid_att);\nbass_eff = max(max(bass,bass_att)-1,0);\nbass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.3)*0.96+1.3);\ndx = 0.005 + 0.002*( 0.60*sin(0.234*time) + 0.40*sin(0.277*time) );\ndy = 0.005 + 0.002*( 0.60*sin(0.234*time) + 0.40*sin(0.277*time) );\ndx_r=if(equal(q3,0),if(above(x,xpos),dx*q1-xpos,dx+q2-xpos),dx);\ndy_r=if(equal(q3,0),if(above(y,ypos),dy*q1-ypos,dy+q2-ypos),dy);\nrot = rot+0.15*( 0.60*sin(0.381*time) + 0.40*sin(0.479*time) );\nmytime=.9;\nxpos=.5/vol;\nypos=.5/vol;\nq1=sin(time*mytime*4);\nq2=cos(time*mytime*2);\nq3=abs(rad+.5)+(q2*q5);\nq4=abs(.9*5)*(dx_r*dy_r)*(dx*dy);\nq5=cos(.2*2)*(dx_r*dy_r);\nq6=0.1*(atan(abs(-rad+.5)))*q1;\nq7=q1+q2+q3+q4+q5+q6;\nwave_x=.5+0.1*sin(time+int(rand(100))/100);\nwave_y=.5+0.1*cos(time+int(rand(100))/100);\nib_r=q3+q2;\nib_b=q2+q1;\nib_g=q1+q3;\nmonitor=q3;","pixel_eqs_eel":"zoom= if(below(q1,q6),0.5*x,if(equal(q2,q5),0.9*(1-x),if(above(q3,q4),0.5*y,0.9*(1-y)+if(below(q4,q3),0.5* xpos, if(equal(q5,q2),0.9*(1-xpos),if(above(q6,q1),0.9*ypos,0.3*(1-ypos))))))) + .8 - 0.03*(min(q7+q1,1));","warp":" shader_body { \n  vec3 ret_1;\n  ret_1 = texture (sampler_main, uv).xyz;\n  ret_1 = (ret_1 + ((ret_1 - \n    ((texture (sampler_blur3, uv).xyz * scale3) + bias3)\n  ) * 0.35));\n  ret_1 = (ret_1 - 0.004);\n  ret_1 = (ret_1 + ((texture (sampler_noise_lq, \n    (((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 0.4)) + rand_frame.xy)\n  ).xyz - 0.5) * 0.18));\n  ret_1 = mix (ret_1, vec3(dot (ret_1, vec3(0.32, 0.49, 0.29))), vec3(0.2, 0.2, 0.2));\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ret_1;\n  ret = tmpvar_2.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  vec2 tmpvar_2;\n  float tmpvar_3;\n  tmpvar_3 = -(q8);\n  float tmpvar_4;\n  tmpvar_4 = (uv.x - 0.5);\n  float tmpvar_5;\n  tmpvar_5 = (uv.y - 0.5);\n  tmpvar_2.x = (((\n    (tmpvar_4 * cos((tmpvar_3 * 0.29)))\n   + \n    (tmpvar_5 * sin((tmpvar_3 * 0.29)))\n  ) * 0.8) + 0.5);\n  tmpvar_2.y = (((\n    (-(tmpvar_4) * sin((tmpvar_3 * 0.29)))\n   + \n    (tmpvar_5 * cos((tmpvar_3 * 0.29)))\n  ) * 0.8) + 0.5);\n  ret_1 = (mix (texture (sampler_main, uv).xyz, texture (sampler_main, (\n    (0.5 - uv)\n   + 0.5)).xyz, vec3(0.5, 0.5, 0.5)) * 0.8);\n  ret_1 = (ret_1 + (texture (sampler_main, (tmpvar_2 * q9)).xyz * 0.2));\n  ret_1 = (1.0 - ((ret_1 * \n    (1.0 - ret_1)\n  ) * 4.0));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_1;\n  ret = tmpvar_6.xyz;\n }","warp_hlsl":"shader_body\n{\n\n    // sample previous frame\n    ret.xyz = tex2D( sampler_main, uv ).xyz;\n\n      // take the difference between the crisp and blurred images,\n      // then add it back into the image.  Creates spots and stripes over time.\n      ret.xyz += (ret - GetBlur3(uv))*0.35;\n      ret.xyz -= 0.004;\n\n      // add noise:\n      float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.4 + rand_frame.xy;\n      ret.xyz += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)*0.18;\n\n      // desaturate over time, to keep the globs white\n      ret.xyz = lerp(ret.xyz, lum(ret.xyz), 0.2);\n}","comp_hlsl":"shader_body\n{\n    \n    //rotate texture cords\n    float texRotU2 = (uv[0] - 0.5)*cos(-q8*0.29) + (uv[1] - 0.5)*sin(-q8*0.29);\n    float texRotv2 = -(uv[0] - 0.5)*sin(-q8*0.29) + (uv[1] - 0.5)*cos(-q8*0.29);\n\n\t\n\t    float2 uv2 = float2(texRotU2*0.8 +0.5, texRotv2*0.8 + 0.5);\n\n    float2 uv_echo = (uv - 0.5)*1.000*float2(-1,-1) + 0.5;\n    ret = lerp( tex2D(sampler_main, uv).xyz, \n                tex2D(sampler_main, uv_echo).xyz, \n                0.50 \n              )*0.8;\n    \n    ret += tex2D(sampler_main, uv2*q9).xyz*0.2;\n    ret *= 1.00; //gamma\n    ret = 1 - ret*(1 - ret)*4; //invert\n}"}