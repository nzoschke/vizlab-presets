{"version":2,"baseVals":{"rating":5,"gammaadj":1,"decay":1,"wave_mode":4,"wave_dots":1,"wave_a":0.9,"wave_scale":2.905,"wave_smoothing":0.6,"wave_mystery":-0.3,"warpscale":2.853,"zoomexp":0.99983,"zoom":0.99752,"warp":0.01565,"wave_r":0.6,"wave_g":0.6,"wave_b":0.6,"ob_size":0,"mv_x":64,"mv_y":48,"mv_l":0,"mv_r":0.35,"mv_g":0.35,"mv_b":0.35},"shapes":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":""}],"waves":[{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""},{"baseVals":{"enabled":0},"init_eqs_str":"","frame_eqs_str":"","point_eqs_str":"","init_eqs_eel":"","frame_eqs_eel":"","point_eqs_eel":""}],"init_eqs_str":"a.q1=0;a.q2=0;a.oldq2=0;","frame_eqs_str":"a.wave_r+=.4*(.6*Math.sin(.933*a.time)+.4*Math.sin(1.045*a.time));a.wave_g+=.1*(.6*Math.sin(.9*a.time)+.4*Math.sin(.956*a.time));a.wave_b+=.1*(.6*Math.sin(.91*a.time)+.4*Math.sin(.92*a.time));a.mv_r=a.wave_r;a.mv_b=a.wave_b;a.mv_g=a.wave_g;a.q1=.05*div(pow(1+1.2*a.bass+.4*a.bass_att+.1*a.treb+.1*a.treb_att+.1*a.mid+.1*a.mid_att,6),a.fps);a.mv_a=.00001<Math.abs(above(a.bass-1.2,1))?1:a.bass-1.2;a.q2=a.oldq2+.05*div(pow(1+1.2*a.treb+.4*a.treb_att+.1*a.treb+.1*a.treb_att+.1*a.mid+\n.1*a.mid_att,6),a.fps);a.oldq2=a.q2;a.monitor=a.q2;","pixel_eqs_str":"a.zoom+=.1*a.rad*a.q1;","init_eqs_eel":"","frame_eqs_eel":"wave_r = wave_r + 0.400*( 0.60*sin(0.933*time) + 0.40*sin(1.045*time) );\nwave_g = wave_g + 0.100*( 0.60*sin(0.900*time) + 0.40*sin(0.956*time) );\nwave_b = wave_b + 0.100*( 0.60*sin(0.910*time) + 0.40*sin(0.920*time) );\nmv_r = wave_r;\nmv_b = wave_b;\nmv_g = wave_g;\nq1 = 0.05*(pow(1+1.2*bass+0.4*bass_att+0.1*treb+0.1*treb_att+0.1*mid+0.1*mid_att,6)/fps);\n//q1 = 0.6*(bass+bass_att);\nmv_a = if(above(bass-1.2,1),1,bass-1.2);\nq2 = oldq2 + 0.05*(pow(1+1.2*treb+0.4*treb_att+0.1*treb+0.1*treb_att+0.1*mid+0.1*mid_att,6)/fps);\n\n//q2 = oldq2 +q1;\noldq2 = q2 ;\nmonitor = q2;","pixel_eqs_eel":"zoom = zoom + rad*0.1*q1;","warp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  ret_1 = (tmpvar_2.xyz + ((tmpvar_2.xyz - \n    ((texture (sampler_blur2, uv).xyz * scale2) + bias2)\n  ) * 0.3));\n  ret_1 = (ret_1 * 0.9);\n  ret_1 = (ret_1 + ((\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 0.4)) + rand_frame.xy)).xyz - 0.5)\n   / 256.0) * 112.0));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }","comp":" shader_body { \n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  ret_1 = (vec3((tmpvar_2.x * (1.0 - \n    ((texture (sampler_blur2, uv).xyz * scale2) + bias2)\n  .x))) - (roam_sin.wzy * roam_cos.zxy));\n  ret_1 = (ret_1 + ((\n    (1.0 - tmpvar_2.x)\n   * \n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  .x) * vec3(2.0, 1.2, 0.0)));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n }","warp_hlsl":"shader_body\n{\n    // sample previous frame\n    ret = tex2D( sampler_main, uv ).xyz;\n\n      // take the difference between the crisp and blurred images,\n      // then add it back into the image.  Creates spots and stripes over time.\n      ret += (ret - GetBlur2(uv))*0.3;\n      ret *= 0.9;\n\n      // add noise:\n      float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.4 + rand_frame.xy;\n      ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0 * 112;\n\n      // desaturate over time, to keep the globs white\n      //ret = lerp(ret, lum(ret), 0.2);\n}","comp_hlsl":"shader_body\n{\nret = GetPixel(uv).x*(1-GetBlur2(uv).x);\nret-=roam_sin.wzy*roam_cos.zxy;\nret += (1-GetPixel(uv).x)*GetBlur1(uv).x*float3(2,1.2,0);\n}"}